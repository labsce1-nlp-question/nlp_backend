Student can,Description/Rationale,Instructor Notes,Introduction,Tutorial,Challenge,YouTube Video ID,Video URL,Embed URL,Video URL (DEPRECATED),Preclass Links,Extension Links,Review Questions,Modules,Status,Sprint,Curriculum Set,Attachments,Level 2 Check,Level 3 Check,Level 4 Check,Projected Level
"describe and use variables, values, types, operators, control flow and the console","JavaScript is the foundational language for front-end web development, and many of the concepts covered in the curriculum. Students must understand the basics in order to begin building intermediate and advanced skills.","When teaching this objective, you'll guide the students through building a person object, including name, age, hometown, etc. In the Teacher Demo section, you'll start with a very basic implementation. In the Group Demo, you'll add additional properties to the object. In the Challenge, you'll tell students to add even more properties of different types to the person object.","Demonstrate and explain capturing values into variables (`const`, `let`, `var`). After declaring a collection of variables to hold different types of values, begin to encapsulate the values into a person object.

Review each of the basic data types (`string`,`function`, `number`, `boolean`, `object`, `undefined`, `null` and `arrays`) by building a person object with different properties (name, age, hometown, favorite food, etc). Show students how to type check using the `typeof` operator. 

Explain that `typeof` is an operator, which performs an operation, or action, on the instance of the object it was called from. There are many types of operators that perform actions. 
**For example**, mathematical operators include `+`, `-`, `*`, `/`, `%`, `=`, `<`, `>`, and more.

Demonstrate that you can combine operators to perform multiple operations on an individual instance. 
**For example**, `++` will increment a value by 1, and `--` will decrement a value by 1. You can use a compound assignment operator to perform an action and reassign the value. 
**For example**, `age+=5` would reassign age to five higher than the original value.

In the pre-course work students should have been familiarized with the logical operators `! || &&`. Briefly go back over their uses and how we can combine them for use in multi-conditional statements. 

```
let name = 'Caleb';
let age = 52;
if (name === 'Caleb' && age > 65) {
  console.log(`Caleb should receive a Sr. Citizen's discount at Denny's`);
} else { 
  console.log('Caleb gets no discount');
}
```

Expound upon operators and demonstrate logical operators, which allow you to evaluate a condition to a `boolean` such as `true` or `false` value. 
**For example**, if the value of `age` is 18, then `age > 21` would evaluate to `false`. If `age` is `35` then it would evaluate to `true`.

```javascript
let age = 17

if (age > 16) {
    console.log(""You can drive!"")
}
```

The last thing to demonstrate to the students would be to use an Object to store properties/keys that are specifically tied to different concerning you as an instructor. This will be the assignment to close up the `You Do` portion of this topic.

```
const personObject = {}; 
personObject.name = 'Ryan';
personObject.age = 31;
personObject['Hometown'] = Salt Lake City;
```
Point out the differences between `dot notation` and `bracket notation` and what they can be used for. Why one would suite over the other etc. Show them multiple examples of each so that they know exactly what they are and how to use them.

Once you have shown them how to store values to properties on an object, demonstrate to the students how to use that object to retrieve those values. 

Be sure to throw in some examples of how to properly use functions. We don't need to go into Arrow functions here, but ensure that the understanding of how to write a proper function should be done using the `return` keyword. 

```
function printMyObj(object) { 
  return object;
}
console.log(printMyObj(myObject));
```

The last thing to learn from this module is about Callback functions. In JavaScript functions are extremely dynamic. One of the most powerful parts of functions is that you can pass them around as arguments to other functions. 

A function that receives a function as a parameter is called a Higher Order Function. These functions can take other functions as a parameter and then call that given function within another context.

So going off of the example from above you could do something like this.

```
function printMyObj(obj, callBack) { 
   callBack(obj);
}

console.log(printMyObj(myObject, function (object) {
  return object;
});
```
Be sure to explain that this callback (anonymous function supplied as an argument) is getting called at the time you're calling `printMyObject` in the console.log function. Also explain that the 'object` coming back is the object that is getting supplied to `printMyObject`.

This is a contrived example but it will expose them to a typical use case, and then you can move into how this will come in handy with the homework. Also give them practice with this in the ""We Do""/""You Do"" phases.","Create an example of each of the different `Types` in JavaScript, in turn assigning each a variable.

```
  
const speak = function (name) {
  return `Hello, my name is ${name}`;
};
const isAwesome = true;
```
As we create each type, and save it to a variable, let us all use the `typeof` keyword to check the type of each of our variables. We can use the `console.log` function that is built into JavaScript to be able

What we'll do is create a few `conditional if statements` to check the types of our variables we've declared above. If the condition reaches true, then our `console.log` functions will execute and print something to the console.

```
if (typeof number === 'number') {
  console.log('number is a number');
}
if (typeof string === 'string') {
  console.log('string is a string)';
}
if (typeof myObject === 'object') {
  console.log('myObject is an object)';
}
if (typeof isAwesome === 'boolean') {
  console.log('isAwesome is a boolean)';
}
if (typeof speak === 'function') {
  console.log('speak is a function)';
}
if (Array.isArray(myArray)) {
  console.log('myArray is an array)';
}
```
** Notice ** that when we're testing arrays, we have to use this special _Array Prototype Method_ called *isArray()*. This is because Arrays are simply Objects under the hood. They are not their own ""Type"" but a special type of object. But, they are treated differently so in our example above, if you did something like:

```
if (Array.isArray(myObject)) {
  console.log('myObject is an array)';
}
```
Then our conditional wouldn't evaluate to true and give us the console.log statement. This is a 'gotcha' in JavaScript. And it's a worthy thing to remember.

Now save lets all those values we created to your `myObject` object using `dot` and `bracket` notation. Once we're done saving those values, print out that object using `console.log(myObject);` to peek at your beautiful object.

Next: Lets create a function called `revealObject` takes in an object and a `callBack` function. You should then console.log `revealObject` and pass it your `personObject` object and pass it an anonymous function. Use that anonymous function to log out all the properties inside of the `personObject`. Your code could look something like this.

Your function should reveal all of the properties of your object.","Your task for this portion is to now use the great knowledge that you've gained to write a program that tells us all about you. 

Create an object and save it to a constant variable called 'personObject'. Once you've done that go ahead and use `dot notation` to assign that object a `name` and `age` property. Set those properties to your name and age. Next use `bracket notation` to create a `hometown` property on your person object and set it to your hometown. 

After you've done this, you're going to write a function `checkDrinkingAge` that takes in your object and uses a conditional to check to see if you are over the legal drinking age of 21 years.

Your function should work if you call it like this using a `console.log()` statement:

```
console.log(checkDrinkingAge(personObject));
// if your age is greater than or equal to 21, you should see -> true;
// otherwise you'll see -> false;
```

Finally, lets make a function called `revealObject` that takes in an object and a callback as it's parameters.  You'll need to pass the object coming into your function back over to the callback function. 

Your function should work if you call it like this using a `console.log()` statement.
```
console.log(
  revealObject(personObject, function(object) {
    console.log(object.name, object.age, object.hometown);
  })
);
```",,,,,,,,,Deprecated,,,,1,1,,2
demonstrate ability to use `.map` `.reduce` `.filter` and describe their use cases ,"Earlier on we covered what callbacks are and gave you ample practice to get familiar with their use. Today we're going to dive deeper and cover some more crucial examples of callback functions as well as get you the reps you need. 

The callback is such a fundamental piece of the JavaScript language that you need to have a good grasp of if you want to be able to push your skills further.",In this section we're going to get a TON of 'aha' moments from the students. It really is amazing to see the dots get connected as they work through common examples and use cases of Functional Programming.,"We've been working in our `src/arrays.js` file and sort of getting the idea of how these methods work for us under the hood. Remember our friend `.forEach` or in your case the `each` function? Simply put `.forEach` is one of the most powerful functions we have. It does one thing really really well, iterate over a list of data and in turn pass back an item and index to us for use. We technically could do whatever we want with that data, but remember that `.forEach` doesn't return us anything like `.map` does. So if anyone ever asks you: ""What is the difference between `.forEach` and `.map`?"", Now you know!

Today we're going to get a lot of practice playing around with the some data and seeing what we can do to transform what we're looking at. This after all is one of the main goals of our jobs as Web engineers (take data and make it look different or display it in some way that makes sense to the end user).

Functional programming is a very fun programming paradigm because it lends itself to this idea of `immutability`. When we get to Redux you'll learn all about immutability and you'll have a better grasp of what that concept means by going through some of these exercises today.

First lets talk about what functions we have at our disposal to achieve this. `.map` `.filter` and `.reduce` are commonly used to achieve immutability and take a set of data and transform it in some way.

Lets consider the following data set:

```javascript
const data = [
  {""city"":""seattle"", ""state"":""WA"", ""population"":652405, ""land_area"":83.9},
  {""city"":""new york"", ""state"":""NY"", ""population"":8405837, ""land_area"":302.6},
  {""city"":""boston"", ""state"":""MA"", ""population"":645966, ""land_area"":48.3},
  {""city"":""kansas city"", ""state"":""MO"", ""population"":467007, ""land_area"":315}
];
```

There isn't a ton going on here but lets say we want represent this data in some way that is useful to our users.

Task 1: Map the data to a new array, with objects of just city and state names.
We could achieve this (and any of our tasks the traditional way)

```javascript
const cityStates = [];
for(let i = 0; i < data.length; i++) {
  let mappedObj = {};
  mappedObj.city = data[i].city;
  mappedObj.state = data[i].state;
  cityStates.push(mappedObj);
  mappedObj = {};
}
```

This of course works! And it's a naive solution and it really exposes some of the great features of the JavaScript languages. If We ever got a solution like this from you on anything I'd be elated! Even though the solution is great, it's a bit hard to read and as such can be represented another way.

```javascript
const mappedCityStates = data.map((state) => {
  return {'city': state.city, 'state': state.state};
});
```

Pretty simple and straight forward yeah? Remember that our map function takes in a callback that passes back a couple of things to us. The three things you'd get back from a callback passed to Map would be:

* The current item of the array `state`
* The current index of the current item `index`
* The entire array `data`

```javascript
const mappedCityStates = data.map((state, index, data) => {
  return {'city': state.city, 'state': state.state};
});
```

Ok now lets see what we can do to represent this data in another way. What if we want to only see states who's `population is greater than` 650000? Well we have our dear friend `.filter` for that.

Remember that filter returns an item that passes what is called a `truth test`. Its really straight forward, but requires a bit of formal logic. Lets take the naive solution first:

```javascript
const largeStates = [];
for(let i = 0; i < data.length; i++) {
  if(data[i].population >= 650000) {
    largeStates.push(data[i]);
  }
}
```

Once again, this would be a fantastic solution. But lets see how we can make it a bit easier to read.

```javascript
const filterLargeStates = data.filter((state) => {
  return state.population >= 650000;
});
```

Same results and cleaner code. The idea is to remember what's going on here. On this line `return state.population >= 650000;` we are `explicitly returning` an object who's population is greater than 650000, and in turn passing that object to a new array. So the other objects will simply be ignored if they don't pass this logic test. Think of that line reading like this: `IF state.population is greater than or equal to 650000 then push it into a new array else do nothing`.

The three things you'd get back from a callback passed to Filter would be are the same as `.map` but `.filter` rarely requires index based logic, nor will we commonly use the given array in any way. So don't worry too much.

Now lets look at `.reduce`. Reduce has quickly become one of my favorite Array methods because it has so many great use cases. One of the simpler use cases for our intents and purposes would be to use it to give us access to a 'reduced' set of information about our data. In a nutshell, if we want our data reduced to a single value, we can aggregate that data and use `.reduce` to do so for us. Lets figure this out the naive way first.

We want single number of all of the state's populations added together.

```javascript
let statePopulations = 0;
for(let i = 0; i < data.length; i++) {
  statePopulations += data[i].population;
}
```

This is actually such a simple algorithm, But lets look at it in terms of the reduce function now.

```javascript
const reduceStatePopulations = data.reduce((total, state) => {
  return total += state.population;
}, 0);
```

This is pretty succinct but there is a lot going on here. First of all, we're passing `0` as a second argument to our reduce function. This argument will become the starting value of our `total` and if not provided would default to the first item in the array. In this case that would be disastrous because the first item of our array is an object, and we're trying ot reduce our total to a single numerical value. Thus, providing a starting value for `total` sets what our data type will reduce into. Remember that total also gets `memoized` or remembered by our function each pass.

The four items that get passed back from our callback function when using `.reduce` are:

* The current value of the total aggregated value.
  * We set the initial value at the end of the function. In this case we set it to 0.
  * This could be any value though.
* The current item in the array.
* The index again.
* The full array.

To sum up. These functions are amazing and allow us to write clean, reusable code, in a functional programming style. They give us the power to represent our data a very fun way. As you get more and more used to using these functions, you'll get the ability to use them in very complex situations that will eventually save your bacon. For now, lets go practice. Check out the challenge on JSBin. Go play around and see if you can create some new data sets out of the provided data.","Lets take our same Data Set from earlier and play around with it some more. 

```javascript
const data = [
  {""city"":""seattle"", ""state"":""WA"", ""population"":652405, ""land_area"":83.9},
  {""city"":""new york"", ""state"":""NY"", ""population"":8405837, ""land_area"":302.6},
  {""city"":""boston"", ""state"":""MA"", ""population"":645966, ""land_area"":48.3},
  {""city"":""kansas city"", ""state"":""MO"", ""population"":467007, ""land_area"":315}
];
```

Use `.map` to create an array of integers that represent all the states populations. 

Use `.filter` to create an array of states who's land_area is larger than 50 units.

Use `.reduce` to create an array of the states land_area reduced to the `mean average` of all the state's combined.","Complete the following exercises using `.map`, `.filter`, `.reduce`
[Code found here](http://jsbin.com/wolayeb/edit?js,console)",YNubYbAhtys,http://youtube.com/watch?v=YNubYbAhtys,https://www.youtube.com/embed/YNubYbAhtys,,,.map() .reduce() .filter(),"* What are some differences between `.forEach` and `.map`?
* What are the three things passed back from `.map`?
* What is Immutability? What are some functions we can use to achieve this programming paradigm?
",JavaScript II  ,,JavaScript Fundamentals,Full Stack Web Development Core,,1,1,1,3
"describe recursion, and use it to represent a loop function","What it is
* Recursion is another way to represent a looping program.
* Similar to a for loop or a while loop a recursive function will loop until you tell it to stop.
* When solving complex algorithms recursion comes in handy. It is not that great for smaller, less complex algorithms.
* For every recursive function, you'll need to establish what is called a base case. A base case is a condition that when triggered, will discontinue the call to your function.
","This concept needs to be taught thoroughly, which is why we're providing a full day for them. We'll need to come up with many examples on how to use these things properly. 

To teach about Recursion I love starting with the silly phrase ""To understand recursion, one must simply understand recursion"". It sort of takes the edge off when speaking to the students about a really deep topic. ","Recursion is a programming paradigm that allows us to write a loop as a function. Recursion is simply a function that calls itself until it doesn't. There is a lot more to it than that but the high level definition of recursion can be represented as such.

Lets start off with a simple `for loop` that counts to 10. This is not something new to you, in fact, this is one of the most basic examples of a JavaScript Program we have. 

```
for (let i = 1; i <= 10; i++) {
   console.log(i);
}
//should print 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
```
Remember that our for loop is a set of instructions, we give our program a starting point `i = 1;`, and tell it to iterate until our starting point achieves a base case `i <= 10;`, then we tell our for loop _how_ to iterate `i++`. 

Now, let us look at at that very same loop represented in a different way.
```
let n = 1;
while (n <= 10) {
  console.log(n);
  n++;
}
//should print 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
```
Another way to say in plain English the above example is that, `while 'n' is less than or equal to ten, print 'n' and then increment n by 1`. This while loop should continuously loop as long as the expression in the parenthesis evaluates to true.

There are some minor differences between `while` and `for` loops. This statement really helped me understand a lot more about how they worked and so I'm hoping it helps you too.

```
For Loops allow you to run through the loop when you know how many times you'd like it to run through the problem such as for (var i; i < 10; i++); this will continually increase `i` until that condition returns false, any number can replace the 10, even a variable but it will quit once the condition is no longer being met. This is best used for `for loops` when you want to program a loop to start and stop at a specific time or condition.

While Loops allow you a little more flexability in what you put in it, and when it will stop such as while ( i < 10) you can also substitue in a boolean(true/false) for 10 as well as many other types of varibles.

The key difference between the two is organization between them, if you were going to increase to 10 it'd be a lot cleaner and more readable to use a for statement. On the other hand if you were to use an existing variable in your program in your loop parameters it would be cleaner to just wright a while loop. In the For loop you MUST create a new variable, thats not true for the While loop.

I hope this helps
Your friendly neighborhood coder,
~LoLMaN
```

Loops are everywhere in JavaScript. A lot of the time we see them represented in the functional programming style with a `.forEach` or another iterator `Array method` so there is no way to escape them. What's cool however, is that we can also write a function that performs a similar type of functionality. This same loop can be achieved using `recursion`. Remember that _Recursion is a function that calls itself, until it doesn't_.

Lets declare a function called `loop`. This function will take in an integer. There are a few parts to a recursive function: 

* A base-case or condition that will return out of our recursive function
* A call to the function with new arguments to MOVE towards the base case. 

While providing a base case as a condition in a `for loop` sort of becomes habit due to the syntax of the loop itself, this is not always intuitive when writing a recursive function. You need to explicitly return out of your function, when a condition is met, otherwise, use that function to call itself with a new set of arguments.

```
const loop = num => {
    if (num > 10) return;
    console.log(num);
    loop(++num);
};
```

The function above, `loop` takes in a number. That number is what we are working with, it is our data. You can see we have a base case that when that number reaches 10, the function returns. IF then number is less than 10, we `console.log` log it to the console, and then call our function again with the number increased. We're looping!
 
Lets actually see this work under the hood with Python Tutor. THIS will blow your mind. Every single time there is a function call, our program will actually use what is called the `call stack` to order up these processes. ","Lets work through a function from your JavaScript I assignment that you've seen. We're going to build out our Flatten function from the ground up. This is a follow along exercise. So make sure you have your text editor up and running and you're ready to run tests on your code. 

Whatever implementation/attempt you previously had lets go ahead and remove it and start from scratch here. ",Work through the challenges in the 'recursion' file inside of the [JavaScript-II-Mini](https://github.com/LambdaSchool/JavaScript-II-Mini) repository.,,,,,,"Understanding Recursion,Recursion by MPJ",,,,,,,1,1,,2
" describe, and use prototypes, constructor functions the new keyword, and pseudo-classical inheritance to build a small object based video game","The object Prototype system in JavaScript is one of the most commonly used (under the hood) features of the language. If it is used properly it can be very powerful.  Understanding the prototype and how we can use constructor functions to create objects are foundational to OOP in JavaScript. Understanding these deeply, will help one understand the class keyword, which is seen throughout the majority of our React curriculum.

OOP is not a paradigm unique to JavaScript, in fact, the name JavaScript comes from the Java language where `classes` and `objects` are used all of the time. OOP is common in many languages and is still very popular and has its uses in JavaScript. ","We are going to be teaching the students about Object Oriented Programming through the Pseudo-classical inheritance pattern that is built into JavaScript. This will be able to lead into a discussion about the Class keyword and how it is to be used/how it works under the hood.


**NOTE** It is imperative that as you walk through this objective, to stop, ask questions, console.log stuff out and chat about differences between an object's properties and an object's prototype.","All objects in JavaScript have a `prototype` property by default. This property is used as an object to attach methods and other properties that can be delegated down to other `child` functions/objects.

The constructor function is a way we can actually build objects.

```js
function Animal(object) {
  this.name = object.name;
}
```
Take the code above into consideration. Notice that `Animal` is capitalized. This is by convention only. It has nothing to do with syntax, but this is how I tell another JS developer that ""I'm writing a constructor here"".

 ""A constructor function, 'Constructs' objects"". It can be thought of as a template. The function itself needs to take in an object literal of some sort so that it can map that object literal's properties to a new object that will be returned once instantiated.

Lots of big words there, but here is what that all means:

```js
function Person(attributes) {
  this.age = attributes.age;
  this.name = attributes.name;
  this.homeTown = attributes.homeTown;
  this.speak = function () {
    return `Hello, my name is ${this.name}`;
  };
}
```

Now that we have created our constructor function as a template for object creation, we get the chance to use this function to create objects.

We call `Person` with the `new` keyword, and we feed it an object literal that will map to those attributes specified in the `Person` block. A note on the new keyword:

* When `new` is called, the `constructor function` can essentially create a context for a `this` object. Then what gets returned from that `constructor function` is that particular `this` object with the new properties added to it.

```js
const fred = new Person({
  age: 35,
  name: 'Fred',
  homeTown: 'Bedrock'
});
```

`console.log(fred);`
`console.log(fred.speak());`

Copy and paste the Person constructor as well as the newly created fred object into google chrome's console and you will see the following:

![Fred](https://ibin.co/3o4Qgv7pVoeR.png)

Look at the image above and you will see that `speak` was inherited from the Person object!  This showcases that we are using inheritance and introduces how we use prototypes in JavaScript.

### Prototype

The Prototype is the mechanism by which all JavaScript objects inherit from one another. You can think of the prototype as an object that objects use to hold onto values that can be passed down to other objects. We use it all the time in inheritance. 

The given example above is great, however all we're doing is creating a single object with the specified attributes in the constructor. We could use this object to create multiple objects over and over which is helpful. Where this really comes in handy, is when we have special instances of a parent object or child objects that need to know about certain methods, attributes or properties.

Lets re-factor the constructor function `Person` and remove the `speak` function from the object.  After `speak` has been removed, we will introduce a new `speak` property on `Person` using `Person.prototype`.

```js
function Person(attributes) {
  this.age = attributes.age;
  this.name = attributes.name;
  this.homeTown = attributes.homeTown;
}
```
```
Person.prototype.speak = function () {
  return `Hello, my name is ${this.name}`;
};
```
Now that we have added the `speak` function to the prototype of `Person`, it will no longer be on the object `fred`. The `Person` prototype completely owns `speak`. `Person` is now able to pass down `speak` to each instance of `Person` without creating a new property on any new objects.

![fred__proto__](https://ibin.co/w800/3o4SA5WLlTVV.png)

You will notice when we log the `fred` object out in the console, we see this `__proto__` thing.  `__proto__` is helpful for us to see inheritance in the browser's specific JavaScript engine. 

Let's look at how inheritance works with prototypes.  Here we create a `Child` constructor.  Notice we are using the call() method to bind `this` to `Person`.

```js
function Child(childAttributes) {
  Person.call(this, childAttributes); // binding this to Person
  this.isChild = childAttributes.isChild; // this will be a special attribute to Child
}
```

The problem with `Child` is that it doesn't necessarily know about the Person prototype yet. We have to manually tell `Child` about `Person` using `Object.create()`.

```js
Child.prototype = Object.create(Person.prototype);
```

We now have linked up the Person prototype with the Child prototype. Eventually we'll get this linking for free with the `class` keyword, but seeing `Object.create()` is really good because it demonstrates how the `class` keyword works under the hood.

Now that we have created a `Child` constructor, lets introduce Pebbles to the family:

```js
const pebbles = new Child({
  age: 3,
  name: 'Pebbles',
  homeTown: 'Bedrock',
});
```
It's important to note that we aren't really inheriting `pebbles` from `fred`. We are using the prototype's inheritance from the `Child` constructor to access our `Person' properties.  

Now we can call `pebbles.speak()` and see what happens.

```Hello, my name is Pebbles```

We just used inheritance from the `Person` prototype to use `pebbles.speak`.  Take a moment to think about that!

To further illustrate how detached `pebbles` is from `fred` lets add a special method to the `Child` prototype, that `fred` won't have access to.  Make sure this method is under the `Object.create()` or it won't work correctly.

```js
Child.prototype.checkIfChild = function() {
  if(this.isChild) {
    console.log(`My name is ${this.name} and I am a child object`);
  }
};
```
","Now! Let us dive deep into some object creation together. We're going to be creating a `Fruit` constructor function that all instances of fruit can be built from. Our constructor should have four properties for our objects to be created with.

* type
* name
* isRipe
* calories

And then our object should have two prototype methods added to it.

* calculateCalories - which logs the amount of calories in a specified fruit \* 100
* shipped - which takes in a `destination` and logs out `the fruit's name was shipped to destination`

Our code should look something like this:

```js
function Fruit(attrs) {
  this.type = attrs.type;
  this.name = attrs.name;
  this.isRipe = attrs.isRipe;
  this.calories = attrs.calories;
}

Fruit.prototype.shipped = function(destination) {
  console.log(`Shipping ${this.name} to ${destination}`);
};

Fruit.prototype.calculateCals = function() {
  console.log(`Calories in ${this.name} are ${this.calories * 200}`);
};
```

Now we're going to create a child constructor called `Banana`. Banana should have a special attribute on it called `doMonkeysLikeIt` this will be a boolean. We won't necessarily care if monkeys like any other fruits, so this will be just `Banana` specific.

Banana's prototype needs to be set to Fruit's prototype. Our code should look something like this:

```js
function Banana(bananaAttrs) {
  Fruit.call(this, bananaAttrs);
  this.doMonkeysLikeIt = bananaAttrs.doMonkeysLikeIt;
}
```

Now in order to 'inherit' the prototype methods from the `Fruit's` prototype we need to use this clunky line of code.

```js
Banana.prototype = Object.create(Fruit.prototype);```
```

Now we're going to want to add a method to our `Banana's` prototype called, `checkIfMonkeysLikeIt` that will log out if the monkeys like bananas.

```js
Banana.prototype.checkIfMonkeysLikeIt = function() {
  if(this.doMonkeysLikeIt) {
    return true;
  } else {
    return false;
  }
};
```

**NOTE** This function will only belong to instances of `Banana`.. and NOT instances of `Fruit`;

Ok, now that we have our `Banana` constructor and it is leveraging the power of the `Fruit` parent. Lets create a Kiwi constructor and add a special attribute to it called `isFuzzy`.

```js
function Kiwi(kiwiAttrs) {
  Fruit.call(this, kiwiAttrs);
  this.isFuzzy = kiwiwAttrs.isFuzzy;
}
```

And then add a prototype method to kiwi called `checkIfFuzzy`;

```js
Kiwi.prototype.checkIfFuzzy = function() {
  if(this.isFuzzy) {
    return true;
  } else {
    return false;
  }
};
```

Finally lets create some objects from our constructor functions:

```js
const newBanana = new Banana({
  doMonkeysLikeIt: true,
  type: 'Tree',
  name: 'Banana',
  isRipe: false,
  calories: 0.1
});

const newKiwi = new Kiwi({
  isFuzzy: true,
  type: 'Tree',
  name: 'Kiwi',
  isRipe: false,
  calories: 0.7
});
```

And check if things are all linked up properly.

```js
newKiwi.shipped('Alaska');
newBanana.shipped('Colorado');
newBanana.checkIfMonkeysLikeIt(); // returns true
newKiwi.checkIfMonkeysLikeIt(); // won't work
newKiwi.checkIfFuzzy(); // returns true
newBanana.checkIfFuzzy(); // won't work
newBanana.calculateCals();
newKiwi.calculateCals();
```
[Link to Codepen From Video](https://codepen.io/lambdaschool/pen/vQOLGO)",Work through this prototypes challenge by studying two constructors and filling in the missing pieces:  [Prototypes Challenge](https://codepen.io/lambdaschool/pen/GXdXYX),5jjDXm-f0SI,http://youtube.com/watch?v=5jjDXm-f0SI,https://www.youtube.com/embed/5jjDXm-f0SI,,,,"* How does one distinguish a function as a constructor function?
* What keyword is required when making an object from a constructor?
* How do we delegate properties to other objects in JavaScript?",JavaScript III,,JavaScript Fundamentals,Full Stack Web Development Core,,1,1,1,3
enumerate how linked lists work as well as what some of their pros and cons are.,"The linked list data structure (both singly- and doubly-linked variants), while not used nearly as much as arrays, nonetheless is an important one for students to learn because it provides an alternative way to implement a data structure that students should be intimately familiar with at this point in the curriculum.","Talk about the linked list data structure at a high level. Talk about what applications a linked list is optimized for, as well as the pros and cons of the linked list data structure compared to some of the other data structures in this sprint. Talk about the methods that the students will be implementing for the linked list data structure.","Linked lists are a data structure that are commonly used for holding lists of data. What's another data structure we know of that is really good at doing this? If your mind went off to arrays, you're exactly right! Why, then, are linked lists not a redundant data structure? As we'll see when we actually implement a linked list, there are certain cases when a linked list is better compared to an array. 

Whereas arrays store and index elements contiguously, each element of a linked list is stored in a node. Each node then has a reference (or a 'pointer') to the next node in the linked list. In this way, linked lists describe lists of things in a _recursive_ fashion, while arrays describe lists of things in an _iterative_ fashion. ",Walk through and diagram an example of inserting a new element into a linked list that contains other elements. ,"1. Draw/model out inserting a new element into a linked list with only one element. 

2. Draw/model out how to traverse through a linked list in order to find a target value.

3. Draw/model out how to traverse through a linked list in order to find the maximum value in the linked list.
",7sk4jG83q80,http://youtube.com/watch?v=7sk4jG83q80,https://www.youtube.com/embed/7sk4jG83q80,,,,"1. How would you insert an element into an empty linked list?

2. How would you insert an element into a linked list that contained only one element?

3. How would you iterate along a linked list to reach an element that isn't the head or tail of the linked list?

4. How would you delete an element from a linked list?","Data Structures,Data Structures",Active,"Data Structures, Data Structures","Computer Science, DS - Computer Science",,1,1,1,3
enumerate how queues work as well as what some of their pros and cons are.,"Queues showcase a subset of the JavaScript built-in Array class's functionality. Students gain a greater understanding of that functionality through implementing queues, most notably the FIFO ordering and how that is achieved via a queue. ","Talk about the queue data structure at a high level. Talk about what applications a queue is optimized for, as well as the pros and cons of the queue data structure compared to some of the other data structures in this sprint. Talk about the methods that the students will be implementing for the queue data structure.

Additionally, students will implement the queue data structure using their Linked List implementation.","Since you guys have seen Stacks before, Queues should be a piece of cake. Whereas a Stack added and removed elements in Last In First Out ordering, a Queue adds and removes elements in First In First Out ordering (just like a queue in real life). The last time you guys implemented a Stack, you undoubtedly utilized the Array built-in methods `push` and `pop`. You _could_ use Array built-ins here in order to implement a Queue data structure, but for this go-around let's leverage the linked list data structure in order to implement the Queue data structure. ",Talk about associated queue methods and what queues are useful for.,"1. Draw/model out enqueuing into a queue that uses a linked list as its underlying storage structure. 

2. Draw/model out dequeuing from a queue that uses a linked list as its underlying storage structure. ",j-fBJpSQ19g,http://youtube.com/watch?v=j-fBJpSQ19g,https://www.youtube.com/embed/j-fBJpSQ19g,https://www.youtube.com/watch?v=hCOJeCA8-MI#t=11m15s,,,"1. What's the opposite of FIFO ordering? What data structures(s) exhibit this ordering?

2. What data structure(s) would you use to implement a queue?

3. When is FIFO ordering useful? When is it not?","Data Structures,Data Structures",Active,"Data Structures, Data Structures","Computer Science, DS - Computer Science",,1,1,1,3
implement Linked Lists,"Linked Lists are another fundamental data structure that, while not too often used in the wild in comparison to the Array class, it is nonetheless an important data structure that is useful for students to understand due to the fact that Linked Lists form the backbone of many other more complex data structures.",,"Demonstrate to students the push and pop methods that are associated with arrays in JavaScript. Discuss how a student can think about arrays in terms of a data structure, and how they use them for storage for their Stacks, Queues, Linked Lists and Hash Tables.",,Students implement a Linked List class. ,,,,https://www.youtube.com/watch?v=hCOJeCA8-MI#t=8m25s,,,,Data Structures,,Data Structures,,,1,1,,2
implement Hash Tables,"Hash Tables are widely used in computer science and programming. This is probably the most important data structure students will encounter in Data Structures I, and it is also the most complex. That being said, students will come out of the challenge of implementing a hash table with a greater understanding of how they work under the hood.",,Demonstrate the Hash Table class's `insert` method so that students can see how to go about starting the implementation of the other Hash Table methods.,,The students implement a Hash Table class using a provided `hash-table-helpers` file that includes such helper methods as the LimitedArray class as well as the hash function that their hash table utilizes.,,,,https://www.youtube.com/watch?v=hCOJeCA8-MI#t=13m36s,Hash Table Collisions and Resizing,,,,,,,,1,1,,2
"implement the Tree, Binary Search Tree, Graph and Heap Data Structures, including their corresponding algorithms for accessing/storing/deleting data. For BST students are to learn about and know how to use Breadth First Search and Depth First Search algorthms","In Computer Science courses, students learn the fundamentals of these concepts over the course of a year. We teach them in a week here, and they're difficult. But they expose the students to a deeper understanding of the fundamentals of the JavaScript programming language. ",,,,,,,,,Data Structures II,Lesson Plan (Previous) notes,,,,,,,0,,,0
"understand, describe and demonstrate Big-O notation, time complexity and space complexity of the different data structures and algorithms implemented with DS1 and DS2","In order to make our students stand out from other boot camp grads and developers, it is essential that they understand and know the basics of Big O notation and time complexity. Although this will be something we discuss throughout the length of the course, we'll want to dedicate a portion of Week 2 teaching these concepts.","As we implement a data structure with the students, ensure that the students are aware of concepts of searching, insertions, deleting and updating data in the data structures. Describe and talk about the different searching algorithms ",,,,,,,,,,,,,,,,0,,,0
use the command line to navigate folder hierarchy and clone a forked git repository from GitHub,"Many lessons in the course rely on git and GitHub, so students should be familiar with both. In this objective they'll learn the basics of navigating using the terminal, and how to clone remote repositories.",Make sure you have a repo link for students to fork and clone.,"Open terminal and show students how to navigate using `cd`, `ls`, and `mkdir`. 

Open GitHub and navigate to the linked repo, show them how to fork, then go back to terminal and show them how to clone.

```
git clone repourl.git
```

Navigate into the cloned repo.",Have the students follow along as you repeat the above.,Have students fork another GitHub repository and clone it to their development folder on their local machine.,,,,,"Github official tutorial,Command Line tutorial,GitHub,Learn Git",,,,,,,,1,1,,2
"use the command line to stage, commit, and push to a remote repository","In order to effectively use Git, students should understand the basic commands. ",,"Explain the different basic git commands (status, add, commit, push) and demonstrate how to use these commands in the terminal.

* Add a new file to the project.
* Use the 'add' command to add it to git. 
* Use the commit command to commit it to the git history. Explain how to create a commit message. 
* Push the commit to the remote repo.",Follow along as the instructor uses each of the git commands.,"Follow the same steps as the instructor, adding a file, adding the file to the git history, commiting the history, and pushing to the remote repo.",,,,,,,,,,,,,1,1,,2
"describe pull requests, and submit a pull request using GitHub",Creating Pull Requests is an essential skill in working with git. Student will need to know how to create PR's in order to interact with repos throughout the course.,,"After committing and pushing a repo to their own branch, the teacher should then navigate to the branch in which the repo was forked and create a Pull Request. 
Each step of the pull request process should be explained:
How to create a pull request: 
* Navigate to the master branch, select ""create pull request"". 
* Enter the branch you would like to pull into and the branch you are pulling. 
* Enter a title and commit message.
* Select create pull request.",Follow along as the instructor completes the above steps.,Repeat the above steps with their own branches. ,,,,,,,,,,,,,1,1,,2
describe the difference between a functional component and a class component in React,,,,,,,,,,,,,,,,,,0,,,0
explain what middleware is and the different types.,"We can use Express Middleware to add features to Express. It is the biggest part of Express, **most of the code we write, including route handlers, is middleware under the hood**.

We can think of middleware as array of functions that get executed in the order they are introduced into the server code.

Express middleware is compatible with _connect middleware_. Connect is a web application framework for Node.js that only provides the middleware layer.

Since `Connect` has been around for longer, it has a rich ecosystem of modules and we can take advantage of that. If you can't find an Express Middleware package with the functionality you want, try searching for a Connect Middleware module instead.","Provide a high level introduction to middleware and the different types, stress that route handlers are middleware.","There are different types of middleware, for our purposes we'll group them into:

- built-in middleware.
- third party middleware.
- custom middleware.

**Built-in middleware** is included with Express, but not added to the application automatically. Like the other types we need to opt-in to using it in our application.

We saw an example of built-in middleware when we added support for parsing JSON content out of the request body.

This is the line of code that does that:

```js
server.use(express.json());
```

All types of middleware are used in the same way. We tell express about the middleware we want to _turn on_ for our application by making a call to `.use()` on our server and passing it the piece of middleware we want to use. This line must come after the server has been created by calling `express()`.

**Third party middleware** are npm modules that we can install and then import into our applications using `require()`. There are thousands of middleware modules we can use, no need to write our own in most cases.

Some popular middleware modules are:

  - [morgan](https://www.npmjs.com/package/morgan).
  - [cors](https://www.npmjs.com/package/cors).
  - [helmet](https://www.npmjs.com/package/helmet).

- add morgan to solution, _require_ it `const logger = require('morgan');`
- add a new `server.use(logger('short))` before our other use. Show console.


**Custom middleware** are functions we write to perform certain tasks. We'll learn more about how to write and use them in the next section.","One thing that is not immediately obvious is that **route handlers are middleware**. Let's see this in action.

In our current implementation, if a client visits a non-existing endpoint, they will get a default message provided by their client when a resource is not found on a server, in the case of a browser it's _Cannot Get /urlWeTriedToAccess_. This is not a good user experience, **please code along** as we write a request handler that responds with a custom message for invalid URLs.

```js
function(req, res) {
  res.status(404).send(""Ain't nobody got time for that!"");
};
```

This code is not complete yet, but you can see that it is in fact a request handler function, we know because _the homies_ are there.

Now let's just _use_ it as if it was middleware:

```js
server.use(function(req, res) {
  res.status(404).send(""Ain't nobody got time for that!"");
});
```

Almost there, the last step is adding that **after all the route handlers**, so that if the preceding middleware or route handlers (which happen to also be middleware) does not respond to the request, then this will become our _catch-all_ and respond with the correct HTTP Status Code and a helpful message.

Making a request to a non-existent endpoint will result in a better experience for our clients.","Write a paragraph (or two) explaining what Express middleware is and what you'd use it for when writing Web APIs.

When done send your explanation to your PM on Slack.",EE8CId1FK_Q,http://youtube.com/watch?v=EE8CId1FK_Q,https://www.youtube.com/embed/EE8CId1FK_Q,,,"morgan middleware,helmet middleware,cors middleware","- what can we do with middleware?
- how many parameters does a middleware function need.
- how can we signal that the following middleware can be executed.",Express Middleware,Active,Building RESTful Web APIs with Express and Node.js,Full Stack Web Development Core,,1,1,1,3
explain the traveling salesman problem and what a real world application is,,,,,,,,,,Wikipedia page on TSP,,,,,,,,0,,,0
describe the functional components of a CPU,"Part of demystifying the black box that is the computer involves learning what the individual components are within it, the composition of those components, and the communication links between them.

We'll investigate the basics of computers from the ground up. We'll learn about common boolean operations in hardware, and how components work together to make computation possible.",The goal here is to get an overview on what the parts of the CPU are and how it communicates with RAM.,"We'll walk through through a number of definitions and diagrams of how computers are constructed, including:

* what a CPU word is
* how RAM works
* how different parts of the CPU communicate
* what a CPU instruction is
* what a CPU register is
* what the CPU clock represents
* what the system bus is and what size it is
* how the CPU provides concurrency
","* **CPU word**: the natural size of a piece of data with which the CPU can interact. Usually written down in the bit ""size"" of the CPU, i.e. ""This is a 64-bit CPU.""

  The CPU can quickly perform math and other operations on data of its word size.

  It can also work with other size data, as well, though it might not be as speedy about it.

* **Random Access Memory (RAM)**: Think of this as a big array of bytes that can be retrieved by index, just like a regular array.

  In memory parlance, the index into memory is referred to as an _address_ or a _pointer_.

  When you have an index into a regular array, you can retrieve the value stored there. Similarly, when you have the address of a value (AKA a pointer to that value), you can retrieve that value stored at that address.  

* **CPU instruction**: A byte or sequence of bytes in RAM that the computer knows how to interpret and perform actions based on.

  There are instructions to do math, like `ADD` and `SUB`, instructions for comparing values like `CMP`, instructions for jumping to other parts of memory like `JMP`, and many more.

  The exact instruction names and values vary depending on architecture.

* **CPU register**: The CPU has a fixed, small number of special storage locations built-in. Usually there are 16 or 32 of these, and they have fixed names, such as `R0`, `R1`, `R2`, and so on. (Details vary by architecture.)

  Think of them like variables you have at your disposal to use with the various instructions.

* **CPU clock**: When they say your CPU is 3.2 GHz, this is what they are referring to. It's the number of times per second the CPU does some processing.

  Each time the clock cycles, the CPU does a bit more work.

  Some instructions take one clock cycle to complete, but others might take several.

* **System bus**: A collection of wires on the motherboard between the CPU, memory, and peripherals.

  * The memory bus connects the CPU to RAM.
  * The I/O bus connects the CPU to peripherals.
  * The control bus allows the CPU to say exactly what it wants to do on the bus, e.g. read or write a word or byte.

* **Concurrency** and **Parallelism**:  The CPU can do multiple things at once through a variety of mechanisms, including having multiple cores, or other features such as _pipelining_ or _hyperthreading_ (both out of scope for us.)

  Additionally, by using interrupts, a single CPU can execute one program for a while (like 50 ms), and then switch to running another program for a while. While not true parallelism, this is how modern operating systems appear to do so much at once.","* How long does it take the number of transistors on a CPU to double? What is the common name for this rule of thumb?
* Why are registers necessary? Why not just use RAM?
* Why is cache useful?
* What is a CPU word?
* What is the system bus and how wide is it?
* Describe the pins that are on a CPU chip
* What is a CPU instruction?",Ae6zRhgMatc,http://youtube.com/watch?v=Ae6zRhgMatc,https://www.youtube.com/embed/Ae6zRhgMatc,,,,,Computer Architecture I,,Computer Architecture,Computer Science,,1,1,1,3
"convert between and understand decimal, binary, and hexadecimal","All major programming languages allow the user a method for converting between different number bases. Some number bases are more convenient to use and easier to understand than others in specific circumstances.

Being able to use binary, decimal, and hex effectively in an important skill that can speed development, and help programmers understand existing code and systems that use those number bases.","Run through a number of conversions for practice.

Ask the students to come up with the programmatic way of converting numbers in their program's language.","We'll see how number bases work, how to count in them, and how to convert between bases.","#### On Numbers

It's important to understand that when you have 12 apples on the table, it's
still the same number of apples regardless of whether or not you say there are
""12 apples"" (decimal), or ""C apples"" (hexadecimal), or ""1100 apples"" (binary).

The _count_ of the number of items doesn't change just because we refer to it in
a numbering system of a different _base_.

In fact, the only place the numbering system matters is when we write down the
number someplace (e.g. print it on the screen or write it in source code, etc.).
And remember that when you do write it down, the _count_ of what the number
refers to remains the same regardless of the base you choose to write it down
in.

Re-read the last paragraph for good measure and keep it in mind in the following
review.


#### On Bases

The _base_ of a numbering system refers to how many digits the numbering system
has. _Decimal_ numbers like we're used to have 10 digits: 0 through 9. Decimal
numbers are _base-10_.

Similarly, _binary_ numbers have two digits: 0 and 1. Binary is _base-2_.

And _hexadecimal_ had 16 digits: 0-9 then A-F. It's _base-16_.

Rarely you might come across _octal_; it's _base-8_. (In Unix when you issue a
command like `chmod 755` or `chmod 644`, those numbers are octal.)

These different bases have different ways of being represented in JavaScript:

```javascript
// All of these represent the number of apples on the table:

let numA = 12;     // decimal
let numB = 0xC;    // hexadecimal, leading 0x
let numC = 0b1100; // binary, leading 0b

numA === numB === numC; // TRUE!
```

#### On Binary

In decimal, we have 10 digits, 0-9. Multi-digit numbers have the 1's place, the
10's place, and the 100's place, etc.

E.g. 123 has `1` in the 100's place, `2` in the 10's place, and `3` in the 1's place.

In binary, we only have two digits, 0-1. Multi-digit numbers have the 1's place,
the 2's place, the 4's place, the 8's place, the 16's place, etc.

It's convenient, as a developer, to have this sequence of powers of two
memorized at least up to 1024:

    1 2 4 8 16 32 64 128 256 512 1024
    2048 4096 8192 16384 32768 65536

These are all powers of 2. 2^0 = 1, 2^1 = 2, 2^2 = 4, 2^3 = 8, etc.

Computers find it convenient to represent numbers in base 2 for a variety of
reasons. One is that it's easy to represent as a voltage on a wire: 0 volts is a
`0` and 5 volts (or whatever) is a `1`. Another is that you can do boolean logic
with `0` being `FALSE` and `1` being `TRUE`.

> *There are 10 kinds of people in the world: those who understand binary and
those who don't.*


#### Convert Binary to Decimal

##### In JavaScript:

```javascript
// Binary constants:

let myBinary = 0b101; // 101 binary is 5 decimal

// Converting a binary string to a Number

let myValue1 = Number('0b101');

// or

let myValue2 = parseInt('101', 2); // base 2

// All these print 5:
console.log(myBinary); // 5
console.log(myValue1); // 5
console.log(myValue2); // 5
```

##### By hand:

    +------ 8's place
    |+----- 4's place
    ||+---- 2's place
    |||+--- 1's place
    ||||
    1010

The above example has one 8, zero 4s, one 2, and zero 1s. That is, it has one 8
and one 2. One 8 and one 2 is 10, `8+2=10`, so:

`1010` binary == `10` decimal.

#### Convert Decimal to Binary

##### In Javascript

```javascript
// Decimal constants (just like normal)

const val = 123;

// Converting a decimal to a binary string

const binVal = val.toString(2); // convert to base 2 number string

console.log(`${val} decimal is ${binVal} in binary`);
```

Note that the result is a string. This makes sense because you already
had the number in `val` as a `Number` type; the only other way to
represent it is as a `string`.

##### By Hand

This one's a little trickier, since you have to work the binary-to-decimal
conversion backwards.

Example: convert `123` decimal into binary. You have to come up with sum of the
powers of two that add up to it.

Start with the highest power of two that's lower than the number: 64. We
know we have zero 128s in the number, because it's only 123. But there
must be a 64 in there.

So let's put a 1 in the 64s place:

    1xxxxxx     All the x's are unknown

Now we compute `123-64` because we've taken the 64 out of there.
`123-64=59`. So let's go to the next power of two down: 32.

59 has a 32 in it, so that must be a 1 in the 32's place, as well:

    11xxxxx     All the x's are unknown

Then we compute `59-32=27` and go down to the next power of two: 16. There's one
16 in 27, so that's a 1 in the 16s place:

    111xxxx     All the x's are unknown

Then we compute `27-16=11` and do the next power of two: 8. There's 1 8 in 11,
so that's 1, too:

    1111xxx     All the x's are unknown

Then we compute `11-8=3` and do the next power of two: 4. There are zero 4s in
3. so that's a 0 for a change:

    11110xx     All the x's are unknown

We're still at 3 decimal, but we drop to the next power of two: 2. There is one
2 in 3, so that's a 1:

    111101x     All the x's are unknown

And we compute `3-2=1`, and drop to the last power of two: 1. There is
one 1 in 1, so that's a 1:

    1111011 binary is 123 decimal


#### Hexadecimal

Hex is a base-16 numbering system. It has 6 more digits than decimal
(which is base 10). These 6 digits, which come after 9, are A, B, C, D,
E, and F.

Counting to decimal 16 in hexadecimal goes like this:

```
0 1 2 3 4 5 6 7 8 9 A B C D E F 10
```

You might have already seen hexadecimal numbers in CSS colors, such as
`#ccff00`.

### Converting Binary to Hex

Fortunately, since 16 and 2 are powers of two, there are an even number
of binary bits per hex digit: 4 bits per hex digit.

So if we have a 1-byte number, like `01101100`, we split it in segments
of 4 bits and convert each of those to a hex digit. It might be more
convenient to convert do decimal first for numbers over 9 decimal.

```
00111100
```

split into sequences of 4 bits.

```
0011 1100
```

convert to hex (or decimal then hex, if more convenient):

```
0011 1100
 3    C      (C hex == 12 decimal == 1100 binary)
```

So `0b00111100` is equivalent to `0x3c`. (Hex constants are written with
a leading `0x` in JS, C, and many other languages.)

Converting hex to binary is the same in reverse. 4 bits per hex digit.","* Count to `0x20` in hex

* What is `0x2F` in binary?

* Convert `0b11011` to decimal

* What is `0b11100111` in hex?

* What is `27` in binary?

* Write a program that outputs a value in binary. Hint: `>>` and `&`",umwSs9fNegY,http://youtube.com/watch?v=umwSs9fNegY,https://www.youtube.com/embed/umwSs9fNegY,https://youtu.be/osLzed5ExFs,,,,Computer Architecture I,,Computer Architecture,Computer Science,,1,1,1,3
describe how interrupts work and why they're useful,"Normally the CPU is busy processing instructions, getting some tough, serious work done. But from time to time, a _peripheral_ (a device attached to the motherboard that's not part of the CPU) gets some work done and has to notify the CPU that the work is complete.

It does this through a mechanism called an _interrupt_. When the CPU needs to be notified, the peripheral raises a signal that the CPU detects. The CPU then stops its regular processing, and redirects to another program elsewhere in memory to _handle_ (or _service_) the interrupt.

Interrupts prevent the CPU from needing to continuously _poll_ all the peripherals, freeing it up for computation.","This ties in multiple ways:

* Peripherals use interrupts to communicate with the CPU.
* Some peripherals also use DMA to transfer data to RAM.","When the interrupt comes in, the CPU saves all its work on the stack so that it can continue processing where it left off after the interrupt handler has completed.

We'll examine some common peripherals and show how they work with the CPU.","_Note that this is a simplified view, but a good start on the basics._

When a peripheral needs attention from the CPU because it has completed a task, it gets the CPU's attention through an _interrupt_.

Before executing its regularly-scheduled instruction, the CPU checks to see if any interrupts have occurred.

If any have, the CPU saves all its work (i.e. pushes all the registers and flags and program counter, and anything else it was working on onto the stack) and then begins executing the _interrupt handler_ code which is located somewhere else in memory.

The job of the interrupt handler is to do whatever needs doing with the data that's arrived from the peripheral. Sometimes it's adding a keystroke to a buffer. Sometimes it's telling the operating system that a block of data from the disk is ready to hand over to a program.

Once the interrupt handler is complete, we say the interrupt has been _serviced_. Then all the registers and flags are popped off the stack and the CPU resumes execution where it left off, as if nothing happened.

If a peripheral is low-bandwidth, i.e. it doesn't need to transfer more than a few bytes of data (keyboards, mice, etc.), a common pattern is:

* CPU receives the interrupt
* CPU looks into RAM (in the case of _memory-mapped peripherals_) to get the value from the peripheral.
  * Some CPUs use a concept called _I/O ports_ to gets the bytes from the peripheral instead.

For devices that need to send more than a few bytes of data to the CPU (disks, SSDs, etc.), they use interrupts in conjunction with something called _Direct Memory Access_ (DMA) to communicate with the CPU.","* Describe how a program would get input from a keyboard if interrupts did not exist.

* Same question, except using interrupts.

* How often would an external temperature sensor want to interrupt the CPU with new information? Why not more or less frequently?",w3gDDg_kORk,http://youtube.com/watch?v=w3gDDg_kORk,https://www.youtube.com/embed/w3gDDg_kORk,https://youtu.be/_ivSbOPoJNk,,,,Computer Architecture II,,Computer Architecture,Computer Science,,1,1,1,3
"demonstrate ability to use prior knowledge to learn new programming languages by writing ""Hello world"" in C","The main objective of this lab is, in fact, _not_ to teach you C. The goal here
isn't to get you as comfortable with C as you are with JavaScript and Python. The main
points are the following:

* To get you guys working in a different language, because once you know one
  language very well, you'll reach a point where the language itself starts to
  constrain how you think about problems. Becoming familiar with other languages
  pushes the boundaries of your understanding and skills as developers. 

","TODO: record specific video for this topic

This is the ""why"" section that also has a hello world program to get them started on the next objective.","### Why Learn New Languages?

* Nothing in CS is static. New languages are created all the time.
* Employers often expect employees to learn new languages on-the-fly.
* Learning new languages becomes easier the more languages you learn.
    * You'll start seeing the similarities between them.

Beej has personally hired engineers with zero experience with the language used
in the project. But the person was a good engineer, so they picked up the
language in a couple weeks and got the project done.

### Why choose C over other languages?

* A *HUGE* chunk of the world's software is written in C. Again, while the main
  goal of this lab is not to get good at writing C, it is trying to introduce
  many new concepts to you that higher-lever, dynamically-typed, interpreted
  language like JavaScript completely abstracts away from you under the hood.
  Working with C gets you much closer to the 'bare metal', giving you a much
  clearer glimpse of what computers are doing under the hood. 

With that being said, C is _really hard_. It is extremely unforgiving, and at
the same time, it is a very strict language, in large part due to the fact that
it is statically typed. Coming from JavaScript and Python, the idea of having to specify the
type of _every_ function, variable, return value, etc. is a little foreign. In
essence, shifting to C in the coming weeks is going to be _really difficult_. We
are aware of this, and again, these labs and assignments are designed such that
you'll have learned a lot even if you only get a fraction of it completed. Try
to keep this fact in mind. :)

#### Order of languages

C was once called a ""higher level programming language"", meaning that it has
been abstracted far enough away from hardware to enable rapid development.
Today, C is the ""lowest level programming language"" used in common development,
though there are still a great number of ASM developers who are writing
operating system drivers, graphics card libraries, and custom hardware.
Languages other than C are considered to be higher level, meaning they provide
more abstraction and increased developer productivity as a result of easy to use
libraries, in exchange for pure processing efficiency.

### The C Programming Language

* Invented by Dennis Richie at Bell Labs between 1969 and 1973 in order to write
  a new Unix. 

* C is:
    * Compiled (typically this produces a machine-code executable)
    * F-A-S-T fast: doesn't get better than machine-code for speed
    * Strongly-typed: you need to be explict about what the types of your
      variables are

* C is used for:
    * programming operating systems
    * maximum efficiency programming (with minor exceptions in ASM)
    * general purpose development on systems with limited resources or operating systems
    * extending slower languages (e.g. Python, JavaScript) with high-performance modules

You will still find C used at many shops for which it is not the best tool for
the job, but a large existing codebase predicates continuing development into
it.

C can also be compiled to run in-browser, but this is a rare usage.

### References

* [K&R's The C Programming Language, the canonical book](https://en.wikipedia.org/wiki/The_C_Programming_Language)
* [Beej's Guide to C](http://beej.us/guide/bgc/)
* [Beej's C pointer blog](http://beej.us/blog/data/c-pointers/)","Write and build `hello.c`. Know generally what each line means.

```c
#include <stdio.h>

int main(void)
{
  printf(""Hello, world!\n"");

  return 0;
}
```

Compile with the command:

`gcc -Wall -Wextra -o hello hello.c`

or

`clang -Wall -Wextra -o hello hello.c`

Then run with the command:

`./hello`","Write a program that computes and prints the square root of 128934.

Use Google-fu to figure out how to do it.",,,,https://www.youtube.com/watch?v=RQ0cu_vbCPw&feature=youtu.be,"""Learning New Languages, C""",,,,,,,,1,1,,2
"describe and use header files, basic types, arrays, strings, flow control, and functions in C","While there are many important topics that fall under the umbrella of C programming, there are a few fundamental concepts that you will likely need to use, regardless of the type of application you are developing. Some concepts, like header files, may be new, depending on what languages you have worked with previously. Others, like data types and functions, are very similar to their counterparts in other languages like JavaScript.","The instructor will demonstrate the basics of using basic types, arrays, strings, functions, and flow control in C.","### Header Files

Listed at the top of the program:

```c
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
```

Each included _header file_ gives access to the functionality declared in that header file.

* Only `#include` the files you need
* Consult the `man` page for the function to see what you want to `#include`
    * If the `man` page doesn't look right, like it's for another language, try
      other manual sections, especially 2 and 3:
        * `man 2 fork`
        * `man 3 printf`

### Types

#### Numeric Types

```c
// Sample declarations

int a;      // a is an integer
long a;   // a is a long integer--holds bigger values

float f;    // floating point number, like 3.14159
double f; // double-precision floating point number--holds more precise values

char c;   // 1-byte integer value, or a character
```

Initialization:

```c
int a = 12;
float f = 32.9;
```
Implicit and Explicit Type Casting:

```c
int a = 5.1;
printf(""The value stored in a is %d\n"", a); // Output: The value stored in a is 5
//This is as expected.  Integers cannot store decimals, so the value is implicitly type cast from a float to an integer.  The decimal is discarded.

float b = a;
printf(""The value stored in b is %f\n"", b); // Output: The value stored in b is 5.000000
//This is as expected.  Floats can store the information present in an integer.  The value is implicitly converted to a float, in this case 5.000000

int c = 5/7;
printf(""The value stored in c is %d\n"", c); // Output: The value stored in c is 0
//This is as expected.  Integer math discards decimals, so 5/7 == 0 in integer-speak.

float d = 5/7;  
printf(""The value stored in d is %f\n"", d); // Output: The value stored in d is 0
//What gives?  5/7 is a decimal number, and floats can do that, right?
//The issue arises from the order of operations in the statement.  
//When the compiler sees the '/' operator, it looks at the types of the operands and performs the appropriate operation.  
//Because 5 and 7 are both integers, it uses the integer version of divide.  
//As in example a, (int) 5 divided by (int) 7 results in (int) 0, then, as above in example b, the value 0 is implicitly type cast from an int to a float.
//The above format is actually how we solve this problem

float e = (float) 5 / 7;
printf(""the value stored in e is %f\n"", e); // Output: The value stored in e is 0.714286
//This is what we expected.  The compiler sees that one of the operands is a float, and provides a result accordingly.
//You don't need to typecast both operands to get this result, but be careful with order of operations.
// (float)( 5/7 ) will first handle the division as integer math, then typecast the result into a float, resulting in 0.000000 again.

```

#### Arrays

```c
int a[20];        // array of 20 ints
float f[2][20]; // 2D array, 2 rows of 20 columns of floats
```

Initialization:

```c
int a[5] = {4, 7, 2, 9, 3};
int b[2][3] = { { 1,2,3}, {4,5,6} };

// Autosize the array to 3 elements:
int c[] = {10, 50, 100};
```

#### Strings

Strings are stored as a pointer to the first element. The string terminates with a `NUL` (`\0`) character. That is, a `NUL` is found at the end of the string.

```c
char *s; // s is a pointer to a char, or string
```

Initialization:

```c
char *s = ""Hello, world!"";

// Or into an array:
char t[] = ""This is the secret message"";
char *u = t; // t and u both refer to the same string
```

#### Functions

```c
// Function that accepts an int, a float, and retuns a double

double analyze_data(int d, float f)
{
    double result;

    //... do something very complicated ...

    return result
}

// Function that accepts a string and returns its length:
int string_length(char *s)
{
    // ... compute string length ...
    return len;
}
```

#### Flow Control

Works just like JavaScript for the most part:

```c
    if (a == b) {
        // ...
    }

    for (i = 0; i < 10; i++) {
        // ...
    }

    while (!done) { // booleans are ""int""s, 0 is false
        // ...
    }

    do {
        // ...
    } while (x < 100);
```","Write a function that accepts two arguments and returns the sum.

```c
#include <stdio.h>

int add(int a, int b)
{
    return a + b;
}

int main(void)
{
    int result = add(3, 4);

    printf(""3 + 4 = %d"", result);

    return 0;
}
```

Compiling and running:

```
gcc -Wall -Wextra -o add add.c

./add
```

Note that the `-Wall` flag turns on all warnings. The `-Wextra` flag turns on extra warnings. ","Write a function called `intsqrt` that accepts an `int` as an argument, computes the square root of the argument, and returns the result as a `double`.

Use Google-fu to help find the answer.",-VzxJwHDFsM,http://youtube.com/watch?v=-VzxJwHDFsM,https://www.youtube.com/embed/-VzxJwHDFsM,https://www.youtube.com/watch?v=RQ0cu_vbCPw&feature=youtu.be,,,,Introduction To C,Active,Intro to C,Computer Science,,1,1,1,3
"write programs that perform file I/O programs in C, describe standard file names","While many applications use remote web servers to store persistent data, it is sometimes useful to save configurations or other data in a local file on a user's machine. In C, we can read data from inputs like the keyboard, write to outputs like the screen, or manipulate (read and write) to many different types of files.

","TODO: record specific video for this topic

printf, scanf, and the FILE variants. Also stdin, stdout, stderr.

The instructor will demonstrate how to get input and output from the console, as well as from a file.","### Output with `printf`

```c
    int a = 5;
    int f = 3.14;
    double g = 3.14159265358979;

    printf(""Hello, world!\n"");

    printf(""This is an integer: %d\n"", a);

    printf(""Here's an integer %d and a float %f\n"", a, f);

    printf(""And a double: %lf\n"", g);
```

The first string argument to `printf` is called the _format string_. The
significant letter or letters after the `%` are called the _format specifier_.

`printf` can put leading zeros on, print things in hexadecimal, justify left or
right, set field widths, and all kinds of stuff.

> Fun Fact: The `printf` function actually makes an appearance in Python as the
> `%` string operator.

### Input with `scanf`

```c
    int a;
    char b[100];

    printf(""Enter a value: "");
    scanf(""%d"", &a); // The & is important for non-arrays

    printf(""You entered %d\n"", a);

    printf(""Enter a string: "");
    scanf(""%s"", b); // No & with arrays (& is implied)

    printf(""You entered %s\n"", b);
```

### File I/O

You can open a file for reading or writing with `fopen()`. Then use `fprintf()`
to write to it, or `fscanf()` to read from it (just as if it were the screen or
keyboard).

```c
    FILE *fp;

    fp = fopen(""myfile.txt"", ""w""); // or ""r"" for read

    if (fp == NULL) {
        printf(""An error occurred opening the file!\n"");
        printf(""Probably file not found.\n"");
    } else {
        // Print this to the file
        int data = 12;

        fprintf(fp, ""Hello, world! Data is %d.\n"", data);

        fclose(fp); // All done, close the file
    }
```

### Standard File Names

There are three standard files that are already open for you when you use the `stdio` routines.

* `stdin`: standard input (the keyboard, typically)
* `stdout`: standard output (the screen, typically)
* `stderr`: standard error (also the screen, but used for error messages)

These two lines are equivalent:

```c
printf(""Hi!\n"");           // prints to stdout
fprintf(stdout, ""Hi!\n"");  // prints to stdout, too
```

The most common use case is printing errors:

```c
fprintf(stderr, ""Oh, man... something awful happened.\n"");
```

### References

* [Beej's Guide to C `printf` reference](http://beej.us/guide/bgc/output/html/multipage/printf.html)
* [`printf` `man` page](https://linux.die.net/man/3/printf)","Count down from 10 to 0.

```c
int main(void)
{
    for (int i = 10; i >= 0; i--) {
        printf(""%d\n"", i);
    }

    return 0;
}
```",Read two numbers from the keyboard and print out their sum.,,,,https://www.youtube.com/watch?v=RQ0cu_vbCPw&feature=youtu.be,Input and output in C,,,,,,,,1,1,,2
"implement C code using pointers in function calls, dynamic memory, and describe how arrays and pointers relate","*Pointers are a hard concept. But once they click, they're easy! They are really the only conceptually difficult thing in C.*","TODO: record specific video for this topic

This is the one that gives everyone grief. Patience.","### The Main Problems

#### Multiple return values from functions

Functions have one return value. What if you want to have them change multiple
things?

Spoiler: you can pass pointers to those things to the function, and then the function can manipulate those things via the pointers.

#### Large objects can be inefficient to copy

When you pass an argument to a function, a copy of that argument is made. If the
argument is, say, a large `struct`ure, it might take a relatively long time to
copy on.

Spoiler: a pointer is just a 32-bit or 64-bit number, so it's quick to copy on
as an argument, so pass a pointer to the `struct` instead.

## What's a Pointer?

Remember how memory in a computer is like a big array that hold bytes?

Remember how the indexes into that array are called _addresses_?

A _pointer_ is another name for _address_ in C.

You can have pointers to specific addresses, like so:

```c
char *p = (char *)0x372;
```

but nearly 100% of the time we're more interested in a pointer to a variable
we've declared or we're passing into a function. We want to know what its
address is.

### Getting the Address of a Variable

*AKA getting the pointer to an object from the object.*

Use the _address-of_ operator, and store the result in a variable of
_pointer-type_:

```c
    int a = 12;  // a is a regular variable
    int *p = &a; // int-pointer p points to a
```

For the address of the first element in an array, you can just leave off the
brackets on the array name. This is shorthand for ""pointer to the first element
in the array"":

```c
    int a[3] = {10, 20, 30};
	int *p = a; // p points to first element in a
```

### Dereferencing

*AKA getting the object from a pointer to that object.*

If you have a pointer to an object, you can refer to the original object by
_dereferencing_ the pointer with the `*` operator.

```c
	int a = 12;
	int *p = &a; // Pointer declaration, NOT a dereference!

	*p = 99; // That's a dereference
	printf(""%d\n"", a); // Prints 99! Why?
```

Don't get confused by all the uses of `*` in C. It's all in the context.

```c
	/* This is a comment */

	int a = 12;
	int *p = &a; // Declaring a variable, * means this is a pointer variable

	*p = 99;    // Dereference, manipulating object p points to, a

	a *= 12;    // Multiply, not a dereference
```

### Passing Pointers into Functions

So you have a pointer to another object, who cares? Why not just use the object?

Check this out:

```c
void add(int a, int b, int *result)
{
	// result is the local name for the &sum argument that got passed in.

	// >> result points to sum back out in main()!! <<

	// We use the dereference operator '*' to manipulate the thing
	// result points to:

	*result = a + b;  // <-- MAGIC HERE
}

int main(void)
{
	int sum;

	// Pass a pointer to sum so the function can change it
	add(3, 4, &sum);

	printf(""%d\n"", sum); // Prints 7

	return 0;
}
```

You can pass as many pointers as you want as arguments.

What happened on that dereference line?

```c
	*result = a + b;
```

We're saying, ""Compute the sum `a + b` and then set whatever `results` points at to that sum.""

### Dynamic Memory

When allocating objects or arrays to use at runtime, pointers are used to track
the object or the first element of the allocated array.

> You'd dynamically allocate objects if you didn't know at compile-time how many
> objects you needed.

**Be sure to free memory when you're done with it!** Failure to do so will
result in a _memory leak_.

```c
// Allocate 10 ints
int *a = malloc(sizeof(int) * 10);

// a[0] is the 0th element in the array
// a[1] is the 1st element

// ....

// When done, free it:
free(a);
```

```c
// Allocate a single new animal structure
struct animal *x = malloc(sizeof(struct animal));

// Use the arrow operator to access fields of the struct pointer:
// x->leg_count

// ....

// When done, free it:
free(x);
```

### The Heap and Stack

> Though the concept of stack and heap do not appear in the C language
> specification, and so theoretically do not exist, they are actually
> things that do exist that all C programmer are aware of.

When you allocate memory with `malloc()`, it goes in an area of memory
called _the heap_. It persists on the heap until explicitly freed with
`free()`, or until the program exits.

Because the memory persists, it makes it legal to do something like this:

```c
int *give_me_an_int(void)
{
	int *p = malloc(sizeof(int));

	return p;
}
```

On the other hand, local variables, including local arrays, are
allocated on _the stack_. When a function returns, all its local
variables are popped off the stack and thrown away.

This is why it's bad to do this:

```c
int *give_me_an_int_badly(void)
{
	int x = 12;

	return &x;
}
```

When the function returns, the local variable `x` is automatically
destroyed. The pointer to it is invalid and undefined behavior will
result if it is accessed.

### `NULL` Pointer

`NULL` is a special value a pointer can be given to indicate that the pointer points at nothing.

```c
int *p = NULL;

if (p == NULL) {
	p = malloc(100);
}
```

### References

* [Pointers in Beej's Guide to C](http://beej.us/guide/bgc/html/multi/pointers.html)
* [Beej's Blog entry on pointers in C](http://beej.us/blog/data/c-pointers/)","Pass arguments to functions

```c
void add(int a, int b, int *result)
{
	*result = a + b;
}
```","Write the function `add_subtract` to make this code output ""SUCCESS"" two times:

```c
int main(void)
{
	int a = 30, b = 5;

	add_subtract(&a, &b);

	if (a == 35 && b == 25) {
		printf(""SUCCESS\n"");
	}

	a = 100;
	b = 50;

	add_subtract(&a, &b);


	if (a == 150 && b == 50) {
		printf(""SUCCESS\n"");
	}

	return 0;
}
```",,,,https://www.youtube.com/watch?v=RQ0cu_vbCPw&feature=youtu.be,,,,,,,,,1,1,,2
describe the major operating systems and their relative strengths,"There are three operating systems that are primarily popular on general
purpose computers - Windows, Mac OS X, and Linux. 

There are two operating systems that are essential for popular
handhelds--Android and iOS.

There are dozens of UNIX variants for simpler processors available.
Typically when working with a small dedicated cpu (like an ARM CPU on an
IoT device), the operating system supported for that device has been
defined by the manufacturer of the device and is a subset of Linux.

Each operating system has its own advantages and disadvantages. Let's examine some of their strengths.",TODO: split the video into individual objectives,"### Windows

Original popular OS for consumers, no permissions enabled fast and easy
development, high performance for games and other user applications.
Became a difficult model to maintain with the rise of the internet,
leading to many revisions.

Backwards compatibility is the hallmark of Windows, which causes endless
headaches for modern developers.

### Linux

Started by Linus Torvalds, who was at the time a student of Andrew
Tanenbaum's, the Linux kernel is a copy of the MINIX kernel, which had
been created by his instructor. MINIX is copy of the POSIX, an industry
standardized system interface that was originally released in 1988. At
the time there were many variants of UNIX, all limited to mainframe
computers like VAX and PDP systems. The core of UNIX at this time is
POSIX, which is the basis for essentially every successful operating
system except Windows.

There are dozens of Linux forks at this time, called distros. Ubuntu is
the most famous and successful of these, and unless you want to build up
a career in system administration it is not necessary to learn any
others. The basics of the Linux operating system depend on a few basic
philosophies - processes that accept streams of text as input and
produce streams of text as output (pipes), file descriptors as
references to device drivers and other hardware (including individual
files stored on a permanent storage medium), and security enforced by
basic access controls applied to every component of the system.

Development paradigms:

* C and C++ native development.

* Management of symbolic and dynamic links via /usr/lib and
  /usr/local/lib and /usr/include and many more. Dependencies in linux
  are stored in files with specific paths, and can either be built
  natively using `gcc` or loaded using package management.

Technologies you should familiar with:

* Bash and shell scripting
* SSH
* System calls

Technologies to be secondarily familiar with

* Network programming


### macOS (previously Mac OS X)

macOS is another fork of UNIX, now called Darwin but previously FreeBSD,
which was created in the 90s by Berkely (Berkeley Software
Distribution). OS X features a kernel and basic system libraries that
are nearly identical to Linux, with many small differences. OS X's
graphics layer, Cocoa, differs substantially from Linux graphics layers,
features much greater reliability and consistency, and uniquely supports
development in Objective-C and Swift.

> Infographic: [Unix variant family tree](https://en.wikipedia.org/wiki/History_of_Unix#/media/File:Unix_history-simple.svg)

Technologies you need to be familiar with:

* XCode
* Objective-C
* Interface builder",Instructor will describe the major operating systems and their relative strengths.,"Explain the following to someone in class, in your house, or on the
phone. If no one is available, any house plant will do.

(The answers to the below questions aren't necessarily in the above text.)

* Which of the Big Three is your favorite OS? Why?

* What did the Macintosh computer run as an OS before it ran macOS/OS X?
	* What were some of the drawbacks to this old OS?

* Why is C a popular language for writing operating systems?",,,,https://youtu.be/upqmNSdpHi4,,,,Operating Systems,,,,,1,1,,2
clearly describe the boot process,"""Booting up"" a computer refers to the process of loading a computer's operating system into memory so that other applications can be run. The process is relatively similar for each of the major operating systems. Major steps of the boot process are described below.


",TODO: split video into separate objectives,"### Basic Input/Output System (BIOS)

When your computer first boots, it provides power to various electronics
components according to the design of the hardware. As each component
powers up it executes a Power On Self Test (_POST_). If POST succeeds, a very
small operating system is activated with low level drivers to read and
write memory, hard disks, simple display output, and potentially network
cards.

The BIOS attempts to read the first sector of the boot disc. In the
first sector is the Boot Loader, which shows the BIOS which hard disk
sector to execute first in order to activate the real operating system.

In Windows, the Boot Loader is called the Master Boot Record. In Linux,
it is GRUB or LILO. OS Xs Boot Loader is entirely proprietary.


### Boot-loader

The first-stage boot loader is stored in the BIOS and generally reads
the first sector from the boot disk which contains a small program for
continuing to load. The small program (usually just a few hundred bytes
of machine code) loads and executes the second-state boot loader.

The second-stage, more-complicated boot loader (e.g. GRUB) then does the
heavy lifting of loading the rest of the OS. Once the kernel is loaded,
the boot loader transfer control to it to continue the boot process.

### Kernel Boot Process

Once the kernel has been loaded, it sets up the execution environment
for future processes, initializes hardware drivers, and then switches to
_multiuser_ mode.

At this point, it is free to initialize other services that the owner
has configured, e.g. MongoDB, sshd, etc.

And finally a login prompt is presented.",The instructor will discuss the process by which a computer boots.,"Explain the following to someone in class, or in your house, or on the
phone. If no one is available, any house plant will do.

(The answers to the below questions aren't necessarily in the above text.)

* Why is a first-stage boot loaded necessary? Why not just load the
  entire secondary bootloader from the start?

* Why is a boot loader necessary at all? Why not just load the kernel directly?",,,,https://youtu.be/upqmNSdpHi4,,,,Operating Systems,,,,,1,1,,2
"describe the role and function of the kernel, processes, and threads","Once we have booted up our machine, how does it actually manage all of the different applications we want run? Because computers have finite resources, the kernel helps manage what resources are allocated to different tasks (otherwise known as processes or threads). How it does this is described in more detail below.",TODO: separate video per objective,"### Kernel

The Kernel is a compiled program that runs the CPU and every piece of
fundamental hardware and software in your computer. The Windows and OS X
kernels are completely secret and proprietary, but the Linux kernel is
available on github (btw, Linus Torvalds also built Git)!

[Linux Kernel](https://github.com/torvalds/linux)

This enables curious developers to build and install a new kernel to
their own computer. This is the only opportunity for this outside of
private employment with Microsoft or Apple.

### Processes

Every operating system provides the fundamental concept of a process.
Processes are applications that run in user space.

An application might spawn many processes over the course of its run.

Processes in modern operating systems run in their own _address spaces_.
That is, each process thinks it has its own copy of RAM all to itself.
Variables declared in one process are not visible from other processes
unless both processes explicitly agree to communicate. (Contrast to
threads, below.)

#### Process table

The operating system allocates a list of processes called the process
table. The process table is an array data about each process, such as
where in memory its stack is located, what local data is needed for the
currently executing stack frame, the ID of the process (_pid_), and much
more.

#### Process Lifecycle

In Unix, a process is created with the `fork()` system call made by the
_parent process_.

A process exits when it's `main()` returns, when it calls `exit()`, when
it is killed, or when it crashes.

After the process exits normally, it exists in a _zombie_ state until
the parent calls `wait()` to get exit status information from the child
process.


### Threads

At the OS level, threads are processes that share an address space.

In a typical use case, a single process will spawn a number of threads
to handle various tasks. Each thread has access to all the global data
in the process.

Synchronizing access to shared data across multiple threads (so they
don't step on each others toes) is a tricky problem.


### Scheduling

The kernel is responsible for sharing resources on a system between
multiple processes. In the early days of large mainframes, operating
systems did not support multi-tasking. Booting a computer might load the
basic resources necessary to access registers, memory, and I/O. Once
that boot process was complete, the system would load a single program
which would run until completion.

Modern operating systems support mult-tasking, which means that the
operating system runs multiple applications at the same time. Because a
CPU in general can only perform one activity at a time, the operating
system loads processes, their stack frames, and their stack resources in
a round-robin fashion.

> If your computer has 4 cores, it can only actually run 4 programs at
> once. You might have hundreds of processes that need to run, though.
> The kernel decides which process gets some run time next. In any given
> second, a large number of processes might be switched into and out of
> a core.

Each time a process is paused, its entire execution state is saved into
main memory. The next processes stack frame is loaded from main memory,
and execution is resumed.",Instructor will cover the role of the kernel and how processes and threads work.,"Write a program that spawns a child process with `fork()`. Have the
parent print ""I am the parent!"". Have the child print ""I am the child!"".
Then both processes should exit.

Hint: `man fork` or `man 2 fork`. Pay attention to the return value from
`fork()`. It's a brain-bender.

Warning: don't run `fork()` in a loop unless you're careful. You can
easily spawn so many processes the system is brought to its knees. For
the above assignment, there's no need for a loop.",,,,https://youtu.be/upqmNSdpHi4,,,,Operating Systems,,,,,1,1,,2
"clearly describe the role of memory management, drivers, and filesystems","What actually allocates memory to your program? How does an application you write communicate with the hardware it uses? How does your machine find that Word document you saved 6 months ago? The answer: memory management, drivers, and file systems, oh my!

",TODO: separate video by objective,"### Memory Management

The operating system is responsible for providing user programs access
to memory. The operating system creates a stack frame at the beginning
of a program's execution and allocates a section of available free
memory for it to utilize. The program's memory space begins essentially
at 0, and it has no knowledge of any memory outside of the memory that
has been allocated to it by the operating system.

This is one of the fundamental attack vectors used in attempting to take
malicious control of a computer. The operating system is responsible for
perfectly isolating each process from one another - if a process is able
to gain access to memory other than what has been assigned to it it will
be able to hijack the system.


### Drivers

Drivers combine, assembly language, C code, and interrupt-driven
programming to provide software control of physical devices. The drivers
hide the dirty details of talking to the hardware from software
developers. Then they present a consistent, easy-to-use programming
interface. For example, a driver might know the details about how to
talk specifically to an NVIDIA graphics card. Normal programmers don't
need or want to know those details. They just want to be able to tell
any 3D card from any manufacturer how to draw a scene. For that purpose,
the driver exposes an OpenGL or Direct3D interface that the programmers
can use.

On general purpose computers like Kaby Lake machines, all drivers are
written to control hardware on the other side of the PCIx bus. Hardware
is built with a PCIx bus controlller, and driver commands configure
binary messages to be sent and retrieved from the hardware over that
bus.

In smaller systems like IoT and firmware devices, the bus may be a true
parallel bus that is shared between the CPU and the device. These buses
are synchronized by the system clock. Drivers on these systems have to
know how to take control of the hardware device at the hardware level
and can be written to any degree of specificity.

How to write drivers on the PCIx bus or on a parallel bus is a lesson in
Computer Engineering, not covered here at Lambda School.


### File System

[File systems at The Linux Documentation Project.org](http://www.tldp.org/LDP/sag/html/filesystems.html)

Files are read and written from internal storage using PCIx drivers
dedicated to controlling hard disks. The operating system keeps a record
of all of the files in the system, called the File Table.

You've probably heard of the FAT and vFAT filesystems. Linux users are
more familiar with the _ext4_ filesystem.


#### File table features:

* Contiguity
* Redundancy
* Small overhead

Dozens of specific file systems exist for specialized tasks, as well as dozens of general-purpose filesystems.","Write a C program that mallocs an area of memory and prints the address of that memory.

See if the address stays the same from run to run.

See if the address varies when run on students' computers.","Explain the following to someone in class, or in your house, or on the
phone. If no one is available, any house plant will do.

(The answers to the below questions aren't necessarily in the above text.)

* If a malicious process had access to the data of another process
  without permission, what are some bad things that could happen?

* If we didn't have drivers, what would programmers have to do if they
  wanted to communicate with different brands of USB cards?

* What are some of the book-keeping tasks you can imagine a filesystem
  needs to keep track of when it comes to storing files?",,,,https://youtu.be/upqmNSdpHi4,,,,Operating Systems,,,,,1,1,,2
understand the concepts of HTML and be able to build a small HTML page.,HTML is one of the core building blocks of the Internet. Students should learn what it is and how to use the basic tags to get content to appear on a screen.,"To use images in your lecture, you can use https://picsum.photos/. It allows you to include a src and gives you a random placeholder image.","### Review

* `What is HTML?` 
  * Hypertext markup language. It is the language that web browsers read to build a web page. It acts as a 'blueprint' to display data on a user's screen. This is the basic building block of the web. Every page on the Internet is just HTML at its core.
* `What are HTML elements?`
  * Elements are what we use to tell the browser how we want the data supplied to be displayed.
* `What is a ‘tag’? `
  * An element consists of an opening and closing tag. The data supplied between the tags will be displayed per the instructions of the element.
* `How does the browser use HTML to create what I see?` 
  * The browser reads and interprets the HTML file to understand how the developer intended the data to appear on the screen.
* `What are the basic HTML elements?`
  * The elements we learned about yesterday were 'html', 'head', 'body', 'p', 'span', 'div', and 'h1'- 'h6'

### Expanded 'Basic' elements.

There are dozens of elements available in HTML. However, just a handful are used 90% of the time. We will only cover the most commonly used in this lesson. You can achieve virtually anything you want with the most basic HTML elements and some CSS (which we will talk about later). It is important to note though that there is an idea in web development that your HTML elements should match the exact information you are attempting to display. This is known as being 'semantically correct', and this method uses all of the available HTML elements. This is done for a number of reasons including accessibility and SEO. We will not learn about this method in the course, but you should know that it exists. 

#### Attributes

Before we jump into learning about a couple more HTML elements, let's learn about another way to supply data to an element. We know that we can supply text between two tags, but what if what we are trying to display cannot be textually based? We can include this data with special flags right inside of our tags. This is known as an attribute. We will see attributes in action in the next section. 

#### More Elements

* `<a>`
  * The 'a' (""anchor"") element, allows us to create links to other web pages (or even to other areas within our own web page). You will always see the 'a' element used with the `href` attribute to tell the browser what address you want the link to point to.

```html
  <a href=""http://www.lambdaschool.com"">Here is a link!</a>
```

* `<img>`
  * This element will display an image on the screen. It will always have an 'src' attribute which points to the address of the image to be displayed. NOTE: img tags can be self-closing, as in they do not need two tags. Simply put the `/` before the closing bracket in the first tag:

```html 
  <img src=""https://picsum.photos/500/300"" />
```
* `<ul>` and `<ol>`
  * This element represents an ""unordered list"". This is the parent element and will contain list items. There is also an ordered list `<ol>`, but is rarely used in modern web development, as most developers like to style their lists themselves.
* `<li>`
  * The companion to the `<ul>` and `<ol>`. These elements represent the items to appear in the list. Any other elements can appear in an `li`.

```html
<ul>
    <li>
      <span>List Item One</span>
    </li>
    <li>
      <span>List Item Two</span>
    </li>
    <li>
      <span>List Item Three</span>
    </li>
  </ul>
```

#### Nesting Elements and Indentation

We've seen in previous examples that we can nest elements inside of tags. In fact, this is a major part of writing HTML. Nested elements are referred to as `children` and the top level elements as `parents`. You will see this type of structure throughout your time writing HTML (and all code for that matter). One thing to note is that while indentation is not a requirement of HTML (nor of CSS and JavaScript), it is still often practiced as a readability issue. We not only write code for ourselves, but also for our teammates and those that come after us. Indentation lets your code be much more easily read and understood. ",,,,,,,"Codecademy: Learn HTML,MDN - HTML docs",,,HTML and CSS Fundamentals,,Intro to Web Development,Precourse FSW,,1,,,1
"understand the main concepts of CSS (selectors and style rules), and be able to apply them to an HTML page.","HTML is great, but HTML alone is plain and boring. This was the case during early days of the Internet: web pages were very basic, text-only sites. Then came along CSS (Cascading Style Sheets), which allowed us to put some color and style into our web pages! It's like the difference between black & white and color TV.",,"### Introduction to Cascading Stylesheets.

Before we begin, let's think about the analogy of a web page as a house. In order to build a house, we need a few things. First, we need raw materials. Then, we need a plan. Then, we need paint and decorations. Finally, we need electricity and plumbing to make everything work*. In this analogy, our HTML is our raw materials. It has so much potential, but it's just laying in a pile on the ground. We need a plan and a way to spruce it up and decorate it. That is where CSS comes in.

*the electricity and plumbing represents JavaScript which we will learn about tomorrow.

#### What is CSS?

As already mentioned, CSS stands for Cascading Style Sheets. It is a different language than HTML. It allows us to add color and style to our web pages. Usually, when we think about web pages, we think about nicely put-together, pretty-looking sites, and so far what we have built has been pretty bland, if not ugly. Once the browser reads the HTML, it will then read the CSS and give different styling rules to different elements in our HTML based on how we select them.


#### The `style` and `link` Elements

Before we can add CSS to our web page, we need to inform the browser that what it is reading is in fact CSS. We can tell the browser that through HTML elements known as the `style` and `link` elements. These elements will go in between the `head` tags, as it is not necessarily data we need to appear on the screen.

There are two ways of including CSS in our HTML. 
* We can write our CSS directly between two `style` tags:

```html
<style>
  <!-- CSS goes here --> 
</style>
```
* We can link to an external CSS file using the `link` element. This element will include two attributes: `rel` and `href`. `rel` will refer to the type of file we are linking: in this case, `""stylesheet""`, and the `href` will point to the location of the file. 

```html
<head>
  <link rel=""stylesheet"" href=""./styles.css"" />
</head>
```

#### Introduction to CSS Selectors

In order for us to apply styling rules to HTML elements, we have to know which elements to apply the rules to. This is where selectors come in. You can select all elements of a certain type: `p`, `div`, `body`, and etc. Or you can apply a `class` or `id` to each individual element. We apply these selectors to the HTML tags themselves in the form of an attribute:

```html
  <div id=""divId""></div>
  <div class=""divClass""></div>
```
`Id`s: are titles that can only appear on a single element. Think of it as you would your driver's license number. ONLY you have that one number.

`Class`es: on the other hand can apply to multiple elements. Think of it like a classroom. Usually, you aren't the only person in a class, although you might be. The class is big enough for lots of people.

Individual elements: We do not need to add anything to use every element of a certain type as a selector. CSS does that for us already.

#### Anatomy of Styling Rules (Syntax)

Now that we have our selectors in place we need to tell the browser what to do with those selectors. Inside of our style tags, we will insert the rules. Classes will always begin with `.`, and Ids will always begin with `#`. Elements will begin with neither and just have the element name. After the name of the selector, we will use braces (""{}"") to hold our rules to that one selector.

```html
  <style>
    body {}

    .divClass {}

    #divId {}
  </style>
```

Styling rules will need to adhere to a certain syntax in our CSS so that the browser knows how to read them properly. Within the braces, we will then have the name of the property, a colon("":""), and the value of the rule. This will be followed by a semicolon("";"").

```html
  div {
    styling_property: value of rule;
  }
```

#### Styling Rules

Now that we have some HTML elements selected, we can begin to add styling. There are a LOT of different ways you can style an object. You can control how big or small it is, what color it is, where it is placed on the screen, or even if it is visible or not. We will go over some of the most common styling properties and how to use them.
* `background` or `background-color`
  * Background can be set to a variety of rules. Most common would be setting the background to a color or an image. Both are displayed below. If you want to be more explicit, you can use the property `background-color` to only set the color of the background.

```css
  .divClass {
    background: red;
  }
  #divId {
    background: url('http://imageurl.com/image.jpg');
  }
  body {
    background-color: blue;
  }
```

* `color` 
  * Color is used for text only. It will set the color of your text.

* `font-size`
  * We can't use width or height for text, but we can determine the size of the font used. You can use any size unit here that you would use with a font in a word processor (px, em, in, and etc). Px or pixel is the most popular.

#### Introduction to the Box Model

We can consider all html elements to be boxes. The make-up of each box is the content, padding, border, and margin. This is known as the Box Model.

![Image of the box model](https://i.imgur.com/jZrYyQV.gif)
 
* `height` and `width`
  * We can tell the browser exactly how wide and how tall we want our element (content) to be. This is used in `div`s, `img`s, and other height-based elements (in order to determine the size of text, we will need to use a different styling property). Size values can be in lots of different measures, but the most common is the pixel (""px"").

```css
  div {
    height: 400px;
    width: 400px;
  }
```
* `margin`
  * The margin is an invisible area that surrounds your element. This is the outermost area in what we refer to as the `box model`
* `border`
  * Border will set a border around your element. You can determine the size, color, and style of the border. It will be set up in this order: width, style, color (a list of border styles can be found here: https://developer.mozilla.org/en-US/docs/Web/CSS/border). The border is outside the padding, but inside the margin.

```css
  div {
    border: 1px solid black;
  }
```

* `padding`
  * The padding is the transparent area between the border and the content. It is very similar to the margin.",,,,,,,,"MDN: CSS,Codecademy: Learn CSS",,HTML and CSS Fundamentals,,Intro to Web Development,Precourse FSW,,1,,,1
"understand the use functions as variables, as well as anonymous functions. ",,,,,,,,,,,,,,,,,,0,,,0
understand and implement callbacks.,,,"## Callbacks

A very important concept in Javascript is the ability to pass a function as an arguments to another function. These functions are called `callbacks`. These functions can be called anytime and passed arguments within the function. We will soon discover why callbacks are so important to Javascript. Convention is to use the `callback` or `cb` argument variable as your callback, although as always you are free to name them what you please.

```javascript
    function saysHelloToUser(user) {
        return 'Hello ' + user + '!';
    }

    function saysGoodbyeToUser(user) {
        return 'Goodbye ' + user + '!';
    }

    function createGreeting(user, cb) {
        return cb(user);
    }

    createGreeting('Dan', saysHelloToUser); // 'Hello Dan!'
    createGreeting('Dan', saysGoodbyeToUser); // 'Goodbye Dan!'
```

Within `createGreeting` we have set the parameter `cb` to equal whatever was passed in as the second argument. In the above example we see that in the first `createGreeting` call, the function `saysHelloToUser` was passed as the second argument. This gives us the ability to call `cb` (which is equal to the function `saysHelloToUser`) within the `createGreeting` function. 

* Note: It is important to NOT call your function when you pass it as a callback. For now, you will never want to include parentheses when passing your function as an argument. If you call your function, whatever the function returns will be passed as an argument (usually breaking your code), NOT the function itself. ",,,,,,,,,,JS VI: Callbacks,,Intro to Web Development,Precourse FSW,,0,,,0
describe the difference between a functional component and a class component in React,"Students should be able to know when it is appropriate to use a functional component vs a class component is a React context, as both have their use cases","Notes on basic functional React components: https://github.com/LambdaSchool/React-I-Demo/blob/master/src/ex1/README.md

Notes on basic class components: https://github.com/LambdaSchool/React-I-Demo/blob/master/src/ex2/README.md",,"Walk through the example code of a basic functional component: https://github.com/LambdaSchool/React-I-Demo/blob/master/src/ex1/BasicComponent.js

Walk through the example code of a basic class component: https://github.com/LambdaSchool/React-I-Demo/blob/master/src/ex2/BasicClassComponent.js",React I has students writing both class as well as functional components in implementing their Todo List applications.,,,,https://www.youtube.com/watch?v=rcMbDZ0VeAs#t=3m34s,Stack Overflow response to the question of when to use class vs function component,,,,,,,,0,1,,1
"understand why state is needed on a React component, how to use it, and how to update it ","React components' ability to manage state is one of their most useful features. Students need to be able to recognize when they need state, when they don't, how to read from it, as well as how to update it. ","Notes on React component state:

https://github.com/LambdaSchool/React-I-Demo/blob/master/src/ex3/README.md

https://github.com/LambdaSchool/React-I-Demo/blob/master/src/ex4/README.md

https://github.com/LambdaSchool/React-I-Demo/blob/master/src/ex5/README.md",,"Walk through the example code of a component that has a state object: https://github.com/LambdaSchool/React-I-Demo/blob/master/src/ex3/ClassComponentWithState.js

Walk through the example code of a component that updates its state object: https://github.com/LambdaSchool/React-I-Demo/blob/master/src/ex4/ClassComponentUpdatingState.js

Walk through the example code of a component that iterates through an array in state: https://github.com/LambdaSchool/React-I-Demo/blob/master/src/ex5/ClassComponentIteratingState.js",React I has students making use and updating state on components in order to implement their Todo List application.,,,,https://www.youtube.com/watch?v=rcMbDZ0VeAs#t=25m11s,,,,,,,,,0,1,,1
"understand the notion of parent and child components, as well as how parents can pass data down to child components via props","In order to build a full hierarchy tree of components that will make up a React application, students need to understand how components are nested in a parent-child relationship, as well as how parents pass data to their child components.",Notes on parent and child components in React: https://github.com/LambdaSchool/React-I-Demo/blob/master/src/ex6/README.md,,Walk through the parent and child components linked below and explain how they are related to each other and how data is passed between them.,"React I has students building an app with a simple, shallow component hierarchy tree to demonstrate this concept. ",,,,https://www.youtube.com/watch?v=rcMbDZ0VeAs#t=1h26m35s,,,,,,,,,0,1,,1
describe the three phases of the React Component Lifecycle,"The React component lifecycle is an important concept to leverage when it comes to writing React apps. For example, they are necessary in order for React apps to make API requests and then render based on the data that was received. ",Notes on React component lifecycle: https://github.com/LambdaSchool/React-II-Demo/blob/master/src/ex1/README.md,"When `thinking in react` we think about our application being built as a combination of multiple components. A component can be a small single piece of User Interface that represents a small portion of our application. To conceptualize this concept of a component lifecycle you can look to this diagram from one of the maintainers of React ""Dan Abramov"".

<img src=""https://image.ibb.co/j8CzEd/lifecycle.jpg"" alt=""drawing"" width=""1000px""/>

You can think of the lifecycle in react as a simple set of phases in a component's life: Birth/Mounting, Growth/Updating and Death/Unmounting 

### The Birth/Mounting Phase
- This is the phase when the component is being built out from ground up. 
- Whatever initial data you'll have access to will be defined on the constructor of this phase
- Your render method is invoked.
- `componentDidMount` gets called as well. 

### Growth/Updating Phase
- `setState` can be used to change the component's state data, forcing a call to `render`.
- `shouldComponentUpdate` is a method one could use here to stop a component from calling render if necessary.

### Death/Un-mounting Phase
- Component is removed from the screen.
- `componentWillUnmount` is called and can be used for any clean up you may need to do.","For our follow along exercise we're going to dive into the documentation over at [ReactJS](https://reactjs.org/docs/react-component.html#the-component-lifecycle){:target=""_blank""} and look into some of the key pieces of the LifeCycle API. 

The methods that we're going to look at are:
- constructor
- render
- componentDidMount
- componentDidUpdate
- componentWillUnmount

Lets also compare where each of these methods belong within the react lifecycle by taking a look at [this diagram](http://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/){:target=""_blank""}

We will be discovering these in depth later on, but for now the goal is to get you warmed up to the documentation and this idea that our components have a lifecycle.","Read [this medium article](https://medium.com/@baphemot/understanding-reactjs-component-life-cycle-823a640b3e8d){:target=""_blank""} about the component lifecycle. Take notes and share what you learned in a paragraph to your Project Manager via Slack.",KRZXwWOa18c,http://youtube.com/watch?v=KRZXwWOa18c,https://www.youtube.com/embed/KRZXwWOa18c,,React Lifecycle methods,"CS8 - React II Lifecycle Methods,React Interview Questions,React Lifecycle Methods: How and When to Use Them","* What are two different types of components in React. Hint: has everything to do with what is being shown to the DOM and the use of lifecycle methods
* In which lifecycle method do we actually represent what is going to be mounted to the DOM?",The React Lifecycle,,Intermediate React,Full Stack Web Development Core,,1,1,1,3
understand how to style React components using CSS as well as Reactstrap,"As part of writing React applications, you need to know how to apply styles via CSS to React components, as well using a themed library of components such as React Bootstrap, in order to add style to React applications. Typically when you get to a company they will already have made a decision on what types of libraries they'll be using as a team. Learning how to work with Reactstrap will help you when you get to that point where you'll be using some sort of custom component library or styling library at your day job. ","Notes on using React Bootstrap: https://github.com/LambdaSchool/React-II-Demo/blob/master/src/ex2/README.md

Notes on applying CSS styles to React components: https://github.com/LambdaSchool/React-II-Demo/blob/master/src/ex3/README.md","This lesson is all about getting you up and running with `Reactstrap` the `de-facto` Bootstrap Styling library for React Components. 

What is great about this library is that you have some pre-built components that are already styled out for you using the Bootstrap styling library. So not only do you get a chance to use the Bootstrap styling library for the use of built in styled classes etc. you also get interactive styled components that you can use for interactivity throughout your react application. 

Lets figure out how to get this all installed and start playing around with it. If you head over to the documentation, you'll find that the installation process is pretty darn easy. 

```js
yarn add reactstrap bootstrap
```

Notice that we're installing BOTH `Reactstrap` and `Bootstrap` here. Reactstrap is the component library that uses Bootstrap under the hood. So you'll need both. In order to get the stylesheet included to your React Application you can either use the `script` tag option or _my preferred option_ import the bootsrtap library into your `index.js` file.

```js
import 'bootstrap/dist/css/bootstrap.min.css';
```

Adding that line to your `index.js` file will make the bootstrap style sheet available. Now how do we use the React Strap component library? Well it's as simple as any other node package we're using. Wherever you want to include any of your Reactstrap components you'll simply have to explicitly import them into any component that you'd like to use them in.

```js
import React from 'react';
import { Alert } from 'reactstrap';
```

That `Alert` component is now available for use like any other component that you've worked with/built on your own. And we'll simply just use it as such. 

```js
<Alert color=""primary"">
  This is a primary alert — check it out!
</Alert>
```

This example comes straight from the docs, and of course there is a bit more to it than that. So we'll dive into an example and have you all follow along with me right now.","We're going to now learn how to get this package installed into a react application that will build using `Create React App`.

### Step 1 Build your application
- run `npx create-react-app reactstrap-project`
- or if you have `CRA` installed globally run `create-react-app reactstrap-project`
- cd into your project and run `yarn` to install all of your dependencies
- once you have all of your dependencies run `yarn start` to start your `webpack-dev-server`
- navigate to `localhost:3000` to see your app

### Step 2 installing Reactstrap
- inside the root of your `reactstrap-project` run `yarn add reactstrap bootstrap` to install both `bootstrap` and `reactstrap` installed

### Step 3 configuring your index.js file to use the Global `bootstrap.css stylesheet`
-  inside of the `index.js` file add `import 'bootstrap/dist/css/bootstrap.min.css';`
This will install the bootstrap styling lib globally for your project. 
","Use Create React App to build a project from the ground up. 
- Include the `Reactstrap, and bootstrap libraries` using `yarn`
- Build out a Todo App using the styled components only provided to you by `Reactstrap`
- Feel free to use your previous Todo Project as a reference.",,,,https://www.youtube.com/watch?v=qemYw2aZzf0#t=41m46s,,,,CSS in JS,,Intermediate React,Full Stack Web Development Core,,1,1,,2
put together a well rounded and presentable resume,"We'll cover layout of resume, how to show off your experience/skills in the best way, tips on organizing resume ",Resume layout template in Career Dev training doc. ,"

",Career Dev Presentation #1,"Meet with your designated Career Coach within the timeline given, for a 60 minute 1:1 to cover; background, resume review, Linkedin profile. ",,,,http://bit.ly/2wJDXnC,,,,Resume/Linkedin profile building ,,Career Development I,Career Development,,1,1,,2
understand the importance of Linkedin and how to utilize it to grow connections and get jobs,Learn how to optimize your Linkedin profile and what to add/not add on it ,Linkedin layout template is in Career Dev training doc,,Career Dev Presentation #1,"If you have not created a Linkedin profile, do so. Once you have one, connect with everyone from Lambda School you can find. Start building your connections. ",,,,http://bit.ly/2wJDXnC,,,,Resume/Linkedin profile building ,,Career Development I,Career Development,,0,1,,1
navigate different job boards for different situations ,There are 1000 different job boards out there. We will be showing students which ones are better than others for each individual situation ,,,Career Dev Presentation #2,Start researching the different job boards. Pick a couple that you really like and set up some job alerts. ,57EubseYUy0,http://youtube.com/watch?v=57EubseYUy0,https://www.youtube.com/embed/57EubseYUy0,http://bit.ly/2M1xlqn,,,,Job Search Pro Tips/Networking ,,Career Development II,Career Development,,0,1,1,2
schedule and conduct Informational Interviews,Informational Interviews are probably one of the best ways to get referrals into a company and they will also expand your network ,,,Career Dev Presentation #2,Try to connect with at least one Engineer from a company you're interested in. Request an informational interview. ,,,,http://bit.ly/2M1xlqn,,,,Job Search Pro Tips/Networking ,,Career Development II,Career Development,,0,1,,1
start networking in the tech world for referrals and to gain connections,"Learn the different avenues of networking as a developer, tips on how to network! ",,,Career Dev Presentation #2,Try to find a local meetup/event in your area - preferably a tech related one - and share in your class channel. ,,,,http://bit.ly/2M1xlqn,,,,Job Search Pro Tips/Networking ,,Career Development II,Career Development,,0,1,,1
start using huntr as their application tracker ,Intro to an application tracker so that students have an organized job search.,Share the huntr <> Lambda invite link rather than having students sign up directly on huntr page. Also make sure and share the separate doc listed titles for tech as part of this presentation ,,Career Dev Presentation #2,"Select three ""wish list"" companies for your huntr board. ",,,,http://bit.ly/2M1xlqn,,,,Job Search Pro Tips/Networking ,,Career Development II,Career Development,,0,1,,1
feel comfortable and confident in different types of interviews (behavioral and tech). ,"* General Interview tips (dress attire, etc...) 
* Behavioral interview prep
* Technical interview prep",There is a separate doc attached with this presentation on common behavioral Q&As,,Career Dev Presentation #3,"Go over the behavioral questions given to you. Start thinking of how you would want to answer these questions. Checkout some of the tech interview resources, start practicing now. The more practice you get the better. ",,,,http://bit.ly/2M1l1pS,,,,Nailing the Interview/Offer Negotiations,,Career Development III,Career Development,,0,1,,1
successfully negotiate an offer ,"Know your worth as a developer, research your area - market rate. Be as prepared as possible to negotiate your offer. ",,,Career Dev Presentation #3,"Research the average salary for the position you're interested in, in your location. Know your market rate - start thinking of a walk away rate and a range as well. ",,,,http://bit.ly/2M1l1pS,,,,Nailing the Interview/Offer Negotiations,,Career Development III,Career Development,,0,1,,1
perform market research to help negotiate offers from hiring companies,,,,,,,,,,,,,Negotiating an Offer,,Career Development IV,,,0,,,0
"identify resources for salary and benefits negotiation, and apply those lessons in a non-confrontational manner",,,,,,,,,,,,,Negotiating an Offer,,Career Development IV,,,0,,,0
use the Briefcase Technique to help solidify their position as an ideal candidate for any role,,,,,,,,,,,,,Negotiating an Offer,,Career Development IV,,,0,,,0
understand what Javascript is and explain its use in web development.,"JavaScript is the third of the major building blocks of a web page. Without it, we wouldn't have the dynamic content and usability we expect from modern websites. We will now learn what it is (and isn't) and how it is used, not only on the web but in all of its applications.",,"### What is JavaScript and why do we use it?

JavaScript is a programming language that was first created in 1994 as a way to add functionality and user interaction to a website. If we think back to our analogy of a web page as a house, we will remember that we said that JavaScript is the electricity, plumbing, and gas. It is what makes the web page ""run"". JavaScript was originally designed to be used purely on the front end as a way for web developers to add functionality to their web pages, and in its early days, it did just that. Recently, the introduction of the ""V8 engine"" by Google has improved the speed and functionality of JS. That led to the development and release of exciting new front end JavaScript frameworks and eventually Node.js, a way to run JavaScript on a server (back end). This new development has led to a resurgence of JavaScript. Now, JavaScript is one of the world's most widely-used programming languages. We can find JavaScript used on the front end, back end, mobile, Internet of Things (Iot), game development, and really anywhere a traditional programming language would be used. Recently, the newest version of the JavaScript language was released, ES6*. We will be focusing on and using ES6 in this course, and in the full Lambda School CS course. 

*even newer versions have come out (ES7, ES8, etc) but this release is where a major paradigm shift happened. We will be referring to any concepts released after ES6, to simply ES6.

#### JavaScript vs Java (and other languages)

Keep in mind, JavaScript != Java. Although they share similar names (this was, unfortunately, considered a feature by JavaScript's early pioneers) that is where the similarities end.

The creators of JavaScript wanted to borrow concepts from other programming languages, such as Java and C. Those of you with backgrounds in other languages may see things that look very familiar, mainly the use of classes and Object-Oriented Programming (OOP) architecture. Keep in mind that JavaScript is not a `true` OOP language and many things you may be familiar with from another language won't work with JavaScript. 

JavaScript is considered a 'loosely' typed language, in which types do exist, but they are not enforced. You do not have to declare a type when creating a variable or an array, for instance. 

#### How to 'run' JavaScript

JavaScript, being the de-facto language of the Internet, is usually run from within an Internet browser. In fact, you can write all of the JavaScript you want and watch it run in real-time right in your browser by pressing F12 (for Windows), or Cmd+option+J (for Mac) (for Google Chrome). This will open up your `console` (we will learn more about the console later). 

While this is one way to run your JavaScript, most JavaScript is run from a file with the extension of `.js` (e.g., `fileName.js`) and loaded into your browser via the `script` tag in your HTML. 

We had mentioned Node.js earlier, and while we are not going to go further than this small piece about it, JavaScript can be run on a server (back end) as well. It is loaded into a computer using a special command line, and the Node.js program will run the JavaScript.

For this class, we are going to use a special code sandbox program just like we did with the last lesson (CodePen), called [repl.it](http://www.repl.it). This will allow us to write and edit our code and run it right in our browser window to see a real-time read-out. ",,,,,,,,,,Introduction to JavaScript,,Intro to Web Development,Precourse FSW,,1,,,1
 explain and use JavaScript primitive data types and variables.,"In order to understand the JavaScript language, the first step is to understand and be able to use variables and primitive data types.
",,"### Variables

At the heart of JavaScript are variables. A variable is a way to store the value of something to use later. (A note for those with previous programming knowledge: JavaScript is a loosely-typed language, which means that a variable can be set (and reset) to any type. We do not need to declare its type when initiating the variable.)

The anatomy of a variable is first the keyword, a space, the name we are giving the variable, an equal sign, the value we are assigning the variable, and then a semicolon.

There are three ways to declare a variable.

```javascript
    var firstName = 'John';
    let lastName = 'Smith';
    const favoriteFood = 'Taco';
```
#### var

`var` is the ES5 way of declaring a variable. This is a generic variable keyword.

#### let

`let` is a new ES6 variable keyword. This will assign a variable much like `var`, but with a little bit different behavior. Most notably, it differs by creating ""block level scope"".

#### const

`const` is also new in ES6. A `const` variable is a variable that cannot be changed. It's short for ""constant"".

### Primitive Data Types (String, Number, Boolean)

The term 'primitive data type' refers to the fact that these are the most basic data types in the language. All other data types (which we will learn about in later lessons) use these types. 

#### Strings

Strings are blocks of text. They will always be defined with quotation marks around them, either single or double. Any text with quotes around it is a string.

```javascript
    const dog = 'fido';
```

#### Numbers

Numbers are just that, numbers. Numbers do NOT have quotes around them. They can be negative as well. JavaScript does have a limitation on the size of a number (+/- 9007199254740991), but only very rarely will that limitation come up.

```javascript
    const answer = 42;
    const negative = -13;
```

#### Booleans

Booleans come from low-level computer science. It is a concept that powers binary code and the very core of computers. You may have seen binary code in the past (e.g., 0001 0110...). That is Boolean logic. It essentially means you have two choices, on or off, 0 or 1, true or false. In JavaScript, we use Booleans to mean true or false. This may seem simple at first but can get complicated later on.

```javascript
    const iLoveJavascript = true;
```

### Math Operators

One of the first jobs a computer had was to compute numbers. In JavaScript, we have built-in math operators that work exactly as they do on your calculator.

#### + - * / =

```javascript 
    1 + 1 = 2
    2 * 2 = 4
    2 - 2 = 0
    2 / 2 = 1
```

### %


Something you may not have seen before is the Modulo (%). This math operator will divide the two numbers and return the remainder.

```javascript
    21 % 5 = 1;
    21 % 6 = 3;
    21 % 7 = 0;
```",,,,,,,,,,Introduction to JavaScript,,Intro to Web Development,Precourse FSW,,1,,,1
explain and use JavaScript functions as properties and methods on primitive data types.,"As we progress through our introduction to JavaScript, we will learn the types of things we can do with those primitive data types. In this objective, we will learn about functions.",,"### Properties and Methods

Primitive data types (and other data types) have built-in functionality known as `properties` and `methods`. These extend the functionality of the primitive data types and allow us to gather information about them, or manipulate them in some way. Both properties and methods will be accessed using the `dot notation` where we give the name of the variable, a dot, then the name of the property or method.

```javascript
  variableName.propertyName;
```

#### Properties

Properties allow us to access data from a data type. There are many different properties on every data type that will give you a bit of information about that specific object.

One we will look at here is the `length` property of a `string`. It will give us the length of the string, as in how many characters are in the string (spaces count).

```javascript
  const school = 'Lambda';
  school.length; //6
```
#### Methods

Methods allow us to manipulate a data type. Methods are different from properties in that they need to have parentheses on the end. 

The method we will look at here is the `toString` method. It will convert a Number or Boolean to a string.

```javascript
  const num = 42;
  num.toString(); //""42""
```

### Functions

Functions allow us to perform many computations and return a final product. When we run a computer program, we are running a series of functions, and reading or manipulating what they return. You may not have realized this, but we have already worked with a type of function: a `method`.

### Anatomy of a Function

```javascript
    function myFunc() {}
```

A function will start with the `function` keyword. This tells whatever is running your program that what follows is a function and to treat it as such. After that comes the name of the function. We like to give functions names that describe what they do. Then comes open and close parentheses. And finally, open and close brackets. In between these brackets is where all of our function code will go.

```javascript
    function logsHello() {
        console.log('hello');
    }

    logsHello();
```

In this example, we declare a function `logsHello` and we set it up to `console.log` `'hello'`. We can then see that in order to run this function, we need to write its name followed by parentheses. This is the syntax to run a function. A function always needs parentheses to run.

### Arguments

Now that we can run a basic function, we are going to start passing it arguments. 

```javascript
    function logsHello(name) {
        console.log('Hello, ' + name);
    }

    logsHello('Dan');
```

If we add a variable to the parentheses when we declare the function, we can use this variable within our function. We initiate the value of this variable by passing it into the function when we call it. So in this case, `name = 'Dan'`. We can pass other variables into this as well:

```javascript
    function logsHello(name) {
        console.log( `Hello, ${name}`);
    }

    const myName = 'Dan';
    logsHello(myName);
```

We can add multiple arguments by placing a comma in between them:

```javascript
    function addsTwoNumbers(a, b) {
      const sum = a + b;
      return sum;
    }

    addsTwoNumbers(1, 5); // 6
```
### Return statement and Scope

In the last example, we introduced the `return` statement. We will not `console.log` everything that comes out of a function. Most likely we will want to return something. In this case, it is the sum of the two numbers. Think of the return statement as the only way for data to escape a function. Nothing other than what is returned can be accessed outside of the function. Also note that when a function hits a return statement, the function immediately stops what it is doing and returns.

```javascript
    function dividesTwoNumbers(a, b) {
      const product = a / b;
      return product;
    }

    dividesTwoNumbers(6, 3); // 2
    console.log(product); // undefined
```

If we tried to `console.log` something that we declared inside of the function it would return `undefined` because we do not have access to it outside of the function. This is called scope. The only way to access something inside of the function is to return it. 

We can also set variables to equal what a function returns.

```javascript
    function subtractsTwoNumbers(a, b) {
      const difference = a - b;
      return difference;
    }

    const differenceValue = subtractsTwoNumbers(10, 9); 
    console.log(differenceValue); // 1
    console.log(difference); // undefined
```

We can see that 'difference' is set inside of the function. The variable inside the function only belongs inside the function. ",,,,,,,,,,Introduction to JavaScript,,Intro to Web Development,Precourse FSW,,1,,,1
explain global object in JavaScript and be able to use the Math object.,"Global objects are pre-written code available to us in JavaScript. They extend the functionality of the language. It is important to learn what these objects are, and how to use them.",,"## Global objects and methods

JavaScript has a number of built-in objects for us to use. These `global` objects extend the functionality of the language for us for free. We have already seen, and have been using, the console object and its method `log`. Another one of these objects is `Math`. `Math` has a number of methods on it just like `console` has `log`. To add to this, some of our data types also have built-in methods.

### Math.pow

We can use the `pow` method on `Math` to return a number risen to an exponent. It will take two numbers.

```javascript
    Math.pow(2,2) = 4;
    Math.pow(3,2) = 9;
    Math.pow(3,3) = 27;
```

### Math.round, Math.floor, Math.ceil

`Math` also has methods that will round numbers for us. `.round` will round a number to the nearest whole number. `.floor` will always round a number down to the nearest whole number. `.ceil` will always round up to the nearest whole number. 

```javascript
    Math.round(6.5) = 7;
    Math.round(6.45) = 6;
    Math.floor(6.999) = 6;
    Math.ceil(6.0001) = 7;
```",,,,,,,,,,Introduction to JavaScript,,Intro to Web Development,Precourse FSW,,1,,,1
 explain basic control flow and if/else statements.,Control flow allows us to write code based on conditional statements. Understanding this flow is an important part of learning to program.,,"### Control Flow

Often times, as a computer is reading and executing our code, we want code to run only if something is true or not. This is known as control flow. Not all code on the screen is executed in order, or at all. We will learn to use some basic control flow today, and will dive deeper into it in our next lesson.

In this example we are going to use control flow and comparison operators. Control flow is a way for our function to check to see if something is `true`, and either running the code supplied if it is, or moving on if it is not. For this we will use the `if` keyword:

```javascript
    function canDrive(age) {
        if (age > 15) {
            return true;
        }

        return false;
    }

    canDrive(16); // true
```

Here we are taking a number (`age`) and checking to see if the statement is `true`. The statement `16 > 15` is true, so we will return `true`, and the function will stop. If it is not, it will skip that code and the function will return `false`.

The ""Greater Than"" symbol ( `>` ) that you see in the last example is called a Comparison Operator. Comparison Operators evaluate two items and return either `true` or `false`. These operators are: `<` , `<=`, `>`, `>=`, `===`, `!==` . We will learn more about these operators in the next lesson.",,,,,,,,,,Introduction to JavaScript,,Intro to Web Development,Precourse FSW,,1,,,1
understand and be able to use different operators.,"Operators allow software developers to compare variables and enable programs to make decisions about control flow. In order to understand control flow, we must first understand some basic operators. ",,"### Undefined and Null

There are a couple of JavaScript objects that don't really fit into any type. Those are the values `undefined` and `null`. You will get `undefined` when you are looking for something that does not exist like a variable that does not have a value yet. `undefined` simply means what you are asking for does not exist. 

```javascript
    console.log(unkownVar); // undefined
```

`null` is an object that we, the developers, set when we want to tell other developers that the item they are looking for exists, but there is no value associated with it. While `undefined` is set by the JavaScript language, `null` is set by the developer. If you ever receive `null`, know that another developer has set that value to `null`

```javascript
    let phoneNumber = '123-456-7890';
    phoneNumber = null;

    phoneNumer; // null
```

One last thing to note, neither `undefined` nor `null` are strings. They are written just as they are with no quotes around them, like a Boolean.

### Truthiness

In these lessons, we have talked a lot about the Boolean values, `true` and `false`. When using an `if` statement or other statements that expect a Boolean value (such as the `!`, NOT), and the expression given is not a Boolean value, JavaScript will do something called type coercion and transform whatever it is given into a Boolean value. This is known as truthy and falsey. Every data type has a truthiness to it. Here are some examples:

```javascript
    // items that are coerced to true
    true 
    1
    ' '
    [] // an array, you'll learn more about this later
    {} // an object, you'll learn more about this later
    function() {}

    // items that are coerced to false
    false
    0
    undefined
    null
    ''
```

### Comparison Operators

In the last lesson, we touched on Comparison Operators. We will go a little more in depth as to how they work and then introduce a close relative of Comparison Operators, Logical Operators.

In the last lesson, we introduced our comparison operators, (`>` `>=` `<` `<=` `===` `!==`). These operators work just as they would in a math class: greater than, less than, and etc. We use these operators to evaluate two expressions. As the computer runs the code, the operator will return either a `true` (if the statement is true) or a `false` (if the statement is not true). 

```javascript
    1 > 2;     // false
    2 < 3;     // true
    10 >= 10;  // true
    100 <= 1;  // false
```

The ""triple equals"" sign ( `===` ) must not be confused with a single equal sign (which indicates assigning a value to a variable). The triple equal will compare everything about the two items, including type, and return if they are exactly equal or not:
(Something to note: there is a ""double equals"" ( `==` ) sign which will compare two items, but it will NOT take into account their types (`1 == '1' // true`). Due to this, it is considered bad practice to use the double equal sign. We would like to see you always using the triple equal sign, and you will always see us using it.)

```javascript
    1 === 1;          // true
    1 === '1';        // false
    'cat' === 'cat';  // true
    'cat' === 'Cat';  // false
```

The last comparison operator we would like to introduce you to has two parts to it. 

First is the ""NOT"" (`!`). When you see this it will mean that we are asking the opposite of the expression (we will revisit the NOT operator later in this lesson).

With that in mind, we can introduce the ""not equals"" ( `!==` ) sign. This will return true if the items are NOT equal to each other, in any way. This, like the triple equal sign, takes type into account.

```javascript
    1 !== 1;          // false
    1 !== '1';        // true
    'cat' !== 'cat';  // false
    'cat' !== 'Cat';  // true
```

### Logical Operators

We can also combine two equality expressions and ask if either of them are true, both of them are true, or neither of them is true. To do this we will use Logical Operators.

#### `&&`

The first logical operator we will look at is the ""AND"" operator. It is written with two ampersands (`&&`). This will evaluate both expressions and will return true if BOTH expressions are true. If one (or both) of them is false, then this operator will return false:

```javascript
    if (100 > 10 && 10 === 10) {
        console.log('Both statements are true, so this code will be run');
    }

    if (10 === 9 && 10 > 9) {
        console.log('One of the statements is false, so the && will return false, this code will not be run');
    } 
```

#### `||`

The next is the ""OR"" operator. It is written with two vertical bars (`||`). It will determine if one of the expressions is `true`. It will return `true` if one (or both) of the expressions is `true`. It will return `false` if BOTH expressions are `false`:

```javascript
    if (100 > 10 || 10 === 10) {
        console.log('Both statements are true, so this code will be run');
    }

    if (10 === 9 || 10 > 9) {
        console.log('One of the statements is true so the || will return true, this code will be run');
    } 

    if (10 === 9 || 1 > 9) {
        console.log('Both of the statements are false, so the || will return false. This code will not be run.');
    } 
```

#### `!`

The last logical operator is the ""NOT"" operator. It is written as a single exclamation mark (`!`). We saw this operator earlier when determining equality (`!==`). As before, the NOT operator will return the opposite Boolean value of what is passed to it:

```javascript
    if (!false) {
        console.log('The ! will return true because it is the opposite of false. This code will be run');
    }

    if (!(1 === 1)) {
        console.log('1 does equal 1, so that expression returns true. The ! operator will then return the opposite of that. This code will NOT run.');
    }
```

#### Notes About Logical Operators

A couple things to note about logical operators.

* The expressions are evaluated in order, and the computer will skip any redundant expressions. In an `&&` statement, if the first expression is `false`, the second expression will not be evaluated because BOTH expressions need to be `true`. Same for the `||` statement. If the first expression is `true`, the second will not be evaluated because there only needs to be one `true` statement to fulfill the requirements of the operator.

* Use parentheses. As we saw in the second `!` operator example, we used parentheses to evaluate what was inside of the parentheses FIRST, then applied the `!` operator. We can wrap ANY expression in parentheses and it will be evaluated before evaluating the expression as a whole. 
",,,,,,,,,,JS II: Control Flow,,Intro to Web Development,Precourse FSW,,1,,,1
write control flow using if/else statements.,"We touched on control flow in our last lesson, now we will introduce some more complexity. Things aren't always black or white. Sometimes there is a third (or fourth, or hundredth, etc.) option. ",,"## Control Flow (continued)

In the last lesson, we learned about the `if` operator. We can use `if` to check and see if an expression is `true`. If it is, run some code. If it is not, skip the code and keep running the program. 

```javascript
    if (1 + 1 === 2) {
        console.log('The expression is true!');
    }
```

To add on to `if`, we can also use the `else if` and `else` statements. These statements must be used with `if` and must come after it. These statements will be evaluated if the initial `if` returns `false`. We can think of the `else if` as another `if` statement that has been chained (we can have as many else if statements we want). Only one `if` or `else if` statement code block will be run. If at any time a statement returns `true`, that code will be run and the rest will be skipped:

```javascript
    if (false) {
        console.log('This will be skipped!');
    } else if (true) {
        console.log('This code will be run.');
    } else if (true) {
        console.log('This code will NOT be run.');
    }
```

The `else` statement will always come at the end of an if-else `if` chain, and will act as a default. If none of the expressions returned `true`, the `else` code block will be run no matter what. If any of the previous `if` or `else if` expressions are `true`, the `else` statement code block will not be run.

```javascript
    if (false) {
        console.log('This will be skipped!');
    } else if (false) {
        console.log('This code will NOT be run');
    } else {
        console.log('This code will be run');
    }
```

#### Why use `else if`?

You may be thinking to yourself, ""Why not just use a bunch of different `if` statements? Why use `else if`? That is a valid question, and sometimes that is the right approach to take. It is up to you to decide which is the right approach. Remember, when using an `if/else if` block, only ONE of the statements will be run, even if there are multiple statements that are true. The same can not be said for multiple `if` statements; they will run if true no matter what. Take this example:

```javascript
  const age = 21;
  if(age > 20){
    console.log('older than 20!');
  } else if (age > 15){
    console.log('older than 15!');
  } else {
    console.log('younger than 15!');
  }
```

In the above example only `older than 20!` will be logged even though both the `if` statement and `else if` statement were true.

```javascript
  const age = 21;
  if(age > 20){
    console.log('older than 20!');
  }
  if (age > 15){
    console.log('older than 15!');
  }
  if (age <= 15) {
    console.log('younger than 15!');
  }
```

In the above example the first and second if statements would console log because both of them are true. 

As you can see, it will be up to you to decide if you want to have multiple actions based on your data or just one action.",,,,,,,,,,JS II: Control Flow,,Intro to Web Development,Precourse FSW,,1,,,1
 write a basic for loop.,Loops are how software 'runs'. Understand basic loops and the native `for` loop implementation in JavaScript. ,,"### Loops

Most software runs on loops, evaluating expressions over and over again until it either returns what we are looking for, or stops after a certain time. JavaScript has two looping expressions built into it and today we will look at the first one, the ""for"" loop. 

### `for` Loops
`for` loops have a unique syntax, similar to the `if` statement, but slightly more complex. First, we have the `for` keyword, followed by parentheses, and then open and close braces. Within the parentheses, we will need three things. First, we must declare a variable. This is what the loop will be looping over. Then, we will have a conditional expression. The loop will continue happening until this statement is `false`. Third, we will increment our variable. All three of these statements are separated by a semicolon.

```javascript
    for (let i = 0     ; i < 10                 ; i++          ) {
    // | declare a var | conditional expression | increment var|
        console.log(i);
    }
```

In this example, we see that we initially set our `counter` variable to 0. The loop will run and each time it gets to the end, it will increase the counter by one. The for loop will then evaluate the conditional expression. If it is `true`, it will run again, but if it is `false` it will stop running.

### The ++ operator

We saw in the last two examples the `++` operator. This is JavaScript shorthand for ""Set the value of the variable to its current value plus one"". There are a few more of these variable math/assignment shorthand expressions. We will visit them in upcoming lessons.

### Infinite Loops. 

It is possible to get your loop stuck in what we call an ""Infinite Loop"". You must make sure there is a way for the loop to end. Take for example this loop:

```javascript
    for (let i = 0; i >= 0; i++) {
        console.log(i);
    }
```
Because our conditional expression will ALWAYS be `true` (`i` will never be less than 0) this loop will essentially run forever. This will break your program, and may crash your web browser, or computer.",Follow along as instructor demos for loop.,,,,,,,,,JS II: Control Flow,,Intro to Web Development,Precourse FSW,,1,,,1
properly install MySQL local machine,Prior to class on A Day for RDBMS I it is necessary to ensure that you have MySQL installed properly on your local machine. This will help us hit the ground running on day one.,"### What's in a name? (Relational, Database, Management, System).
- Database.
    - A _Database_ is a collection of data. An example of it is the list of contacts in your mobile phone.
    - A spreadsheet could be used as a simple database.
    - Databases are all around us, in the devices, most websites and applications we use everyday.
- Relational.
    - It means that the tables that form the database may be related to each other through common fields.
    - An employee belonging to a department is an example of a relationship that can be expressed in a relational database.
- Management System.
    - provides methods for easily accessing and manipulating data.
    - takes care of lower level details like file storage and growth.
    - handles concurrency and locking.
    - handles security and automation.
    - think of it as the interface to the data.

- A _Database Engine_ is a tool that helps collect, organize and modify data.
- Database Entines normally live on servers, but there are self contained, easily portable file based database engines as well.

#### Tables
- Tables organize data in rows and columns.
- Each row on a table represents one distinct record.
- Each column represents a field or attribute that is common to al records.
- Fields should have a descriptive name and a data type appropriate for the attribute it represents.
- Tables normally have more rows than columns
- Tables have Primary Keys that uniquely identify each row.
- The relationships with other tables are represented by Foreign Keys.

### SQL - Structured Query Language
- It is a language used to _ask questions_ about or _perform operations_ on the data 
stored in our database.
- we use it to execute commands against the database.
- has a special syntax.
- there is a stantard.
- most RDBMS implement most of the standard and add custom syntax on top.
- SQL skills are easily transferred from one database management system to another.

## Creating Databases and Tables
- Creating and dropping databases.
- Creating tables.
- Understanding data types.
- Understanding primary keys.
- Avoiding duplicates with unique indexes.
- Adding relationships with foreign keys.

### Creating and dropping databases.
- we can use MySQL workbench to create a schema for MySQL.
- we can use DB Browser for SQLite to create SQLite databases.
- databases can also be created using SQL code.
- open a SQL Tab and type:
- `show databases;` to see a list of existing databases.
- `create database one;` followed by `show databases;`.
- use `drop database one;` to delete the database.",,,,,,,,"MySQL Istallation Video - Windows,MySQL Istallation Video - Mac,MySQL Istallation Video - Linux,MySQL Workbench Installation",,,,,,,,0,,,0
understand and explain what a threat model is,"Security is a matter of context, and a threat model is how we systematically think about that context for a given person in a given situation. Without this context, there is no consistent way to define security or set targets for it.","'- Security is a matter of context, and we talk about that context as a “threat model” - what (bad) things are you/your users worried about? What adversaries are you trying to defend from? There’s lots of methodologies and approaches to this, but generally:
    - Adversaries - who might attack you/your users?
    - Attack surface - what is exposed to attack? Live web services versus private Intranet versus offline.
    - Attack vector - how can these things be attacked? Where do you get/input data from?
- There are different sorts of risks facing a software user:
    - Confidentiality - aka “privacy”, making sure your information is only shown to the parties you want it to be Examples - HIPAA laws: who you saw, what your condition is, how much it cost, etc. These can have real liability/damages and image consequences.
    - Integrity - being sure that your information is shown in unaltered form, and that the information you find from others is as well. Examples - Going to your bank/bitcoin website - is this the right site? Getting an email - is it really from your friend, or from a scam artist? This can lead to lots of support headaches, as well as potentially liability/damages.
    - Availability - just having the service be up, not losing your data. Examples - Defacing web sites with political statements: no more service, hacked. This is obviously damaging to image, and can directly affect revenue too (e.g. store website going down during the holidays, or just your service going down and clients asking for money back). For a regular user - ransomware.
- And there are different sorts of attacks:
    - Man-in-the-middle - somebody is able to intercept communications between you and your intended partner, see and possibly change - affects confidentiality and integrity.
    - (Distributed) denial of service - somebody has resources (e.g. botnet) to flood a service with fake requests and bring it down - affects availability.
    - Backdoors/malware - how people end up in botnets in the first place, low-value targets get through spam/junk and high-value targets may be “spear-phished” with targeted attacks (for example the DNC email) - mostly affects confidentiality, can tie in with other risks.",Describe the threat model of a common user/situation - a 16 year old using social media to organize gatherings with their friends.,"Collectively describe the threat model of another user/situation - a 40 year old engineering manager deciding what email sending service (i.e. like SendGrid, SMTP-as-a-service) to build a product on.","Think of another threat model, and write a summary of it as if you were going to send it as a professional email to explain it to a coworker. Suggested ~1-2 paragraphs length, and addressing the core concepts (adversaries, attack surface and vector, and what sort of specific attacks and risks the user faces).",,,,https://www.youtube.com/watch?v=9rH571vvgnE,"Computer Security Glossary,Robots","Heartbleed (XKCD),Security (XKCD),Clinton Email News Story,Security in the Internet of Things (XKCD)",,Security and Cryptography,,,,,1,1,,2
list common security exploits and defenses and understand what situations they are relevant in,"Security is often thought of in terms of attacks and corresponding defenses, and computer security is no different. Knowing the common exploits and defenses/mitigations well enough to recognize situations where they are relevant is critical for a modern software engineer.","'- Exploits
    - Buffer overflows - classic C exploit, still common today for “rooting” of electronic devices (e.g. the Zelda horse name to install custom software on Nintendo Wii U).
    - Code injection - SQL, JavaScript/XSS.
    - Rootkits - Ken Thompson lecture, Sony CD, malware, botnets.
- Defenses/mitigations
    - Good passphrases: “correct horse battery staple” - or better
    - Firewalls - not as cool as on TV, but still important
    - Sanitizing input - if it’s from a user, don’t trust it. Only run defined/prepared statements/code (including database queries and JavaScript).
    - Isolation/permissions - containers, Content Security Policy
    - Encryption - both at rest and in transit, best practices to follow
    - Defense in depth - do all of the above!","Demonstrate a JavaScript injection - show a prebuilt HTML page that lets the user submit things via a form and naively takes that content and renders it, then use it to embed JavaScript to `alert(""Hello World!"")` as a proof-of-concept.",Take the same page and embed more sophisticated JavaScript to change the styling of the page - e.g. make the background a different color.,Download the HTML file and change the form to sanitize the input and prevent the above attacks.,,,,https://youtu.be/9rH571vvgnE?t=7m22s,,"SQL Injection (XKCD),Trusting Trust",,Security and Cryptography,,,,,1,1,,2
describe how computers execute programs using the process abstraction,Processes are a fundamental abstraction when it comes to how computers function. Learning about this abstraction and how each program is an instance of an isolated process with its own memory address is important when building up a mental model of how a computer works under the hood. ,"In live lecture, build on the material that was covered in the objective videos by talking about the process API system calls. Use this link as a guideline: https://github.com/LambdaSchool/Processes/blob/master/README.md

Talk about inter-process communication using pipes, along with process lifecycle (make sure to cover zombie and orphan process states). ","Let's think about what is needed from the machine's perspective in order for a program to be executed. The first thing that is needed is a CPU, or a processor. A processor is the actual piece of hardware that physically executes the instructions of a program that are laid out in code. The second thing the machine needs is some memory in order to persist the state of the program as it is running, as well as keeping track of things like variables, data structures, etc. 

To that end, before a processor can begin executing a program, the operating system allocates some memory in the machine's RAM in order to keep track of that program's state. This chunk of memory is referred to as an _address space_. All these different pieces that go into executing a program make up the abstraction that we refer to as a _process_. Put another way, a process represents a program that is currently running on your machine, like a browser, Slack, your terminal, etc.

You can actually get a list of all the processes currently running on your machine. If you're on OSX or Linux, try executing the `top` command to get a glimpse of all the running processes on your machine. If you're on Windows (though you really shouldn't be), try executing the `tasklist` command. 

The operating system keeps track of all the running processes on a machine in a list, along with crucial pieces of metadata that the operating system needs to know about regarding each executing process. This metadata is stored in a data structure called a _Process Control Block_ (often abbreviated as PCB). The actual contents and data that are stored in the process control block aren't too important for our purposes, but if you're curious and would like a rundown, you can check out this link: https://www.geeksforgeeks.org/operating-system-process-table-process-control-block-pcb/

In addition the the memory and CPU components we talked about, there is a bunch of metadata that the OS must keep 
track of with respect to each process, such as a program counter, which represents which instruction of the program the CPU 
is currently executing, and a stack pointer, which points to the memory region of the process's stack. 

So when the OS chooses a process to execute, it must load all the contextual data associated with that process, along with the program's code, so that the CPU can start executing the process. However, once a process is chosen to be run by the CPU, it isn't run all the way through to completion. There are a limited number of CPUs in your computer (however many cores your processor has) 
and a great many processes that require execution time. Each CPU can only execute a single instruction at any given point 
of time. So in order to achieve the illusion that your computer is running all of these processes simultaneously, the OS 
constantly switches processes in and out of being executed by the pool of CPUs, so that the end user sees that every 
process is making progress and/or responding to user input in a timely fashion. 

Thus, an operating system is constantly shuttling through a bunch of processes, picking the one that will next be given 
execution time on the CPU, loading that process's code and execution context, handing it off to the CPU for some amount 
of time, then stopping that process by saving its execution state (a process known as preemption), then picking another 
process to run on the CPU. Not to mention that the operating system is itself simply another process that requires 
execution time on the CPU in order to get anything done! Indeed, scheduling processes such that all processes are efficiently shuttled through is one of the operating system's biggest responsibilities. ",Walk through the memory layout of an executing C program using the diagram located at this link: https://notes.shichao.io/apue/figure_7.6.png,Every process is initialized with three file descriptors by default. Look up what these three file descriptors point to. ,dGFAmv1SXis,http://youtube.com/watch?v=dGFAmv1SXis,https://www.youtube.com/embed/dGFAmv1SXis,,,,,Processes and System Calls,Active,Intro to C,Computer Science,,1,1,1,3
set up huntr application tracker through the link provided ,Huntr.com partners with Lambda to bring you an organized application tracker. Helps you keep to your job search goals. ,"We have a huntr.com code specifically for Lambda School students, make sure students use that code and not sign up directly on the huntr page. 
",,Career Dev Presentation #1,Use the link provided to you to sign up for your huntr board under our Lambda account ,,,,http://bit.ly/2wJDXnC,,,,Resume/Linkedin profile building ,,Career Development I,Career Development,,0,1,,1
clearly describe the problem that an OS scheduler attempts to solve and how the scheduler algorithm solves it,"Talking about processes begs the question of how the operating system handles all the myriad processes vying for executing time on the CPU in an efficient and performant manner. In this lesson, students implement a simulated multi-level feedback queue to better understand and answer these questions.","Link to lecture notes: 
https://github.com/LambdaSchool/Lesson-Plans/blob/master/Scheduling.md",,,Implement a multi-level feedback queue simulation program in JS,,,,,,,,Scheduling,,,,,0,1,,1
"describe Turing Machines, Lambda Calculus, and Boolean Algebra and how they apply to programming","How did the modern computer come to be? We will explore some of the most important developments over the last two millennia to gain a better understanding of what led to the development of computing as we know it today. While we won't delve into the specific details of all of these theorems and discoveries, you should complete this module with a better understanding of the role these developments had in the history of computing.
","TODO: Needs its own video

This is general knowledge material, so it's not as hands-on as some of the programming stuff. Can we improve?","### Abstract computing and the Turing Machine

Computers in 1880 were men and more often women who would work out formulas with
pen and paper for an hourly rate. Calculations were needed for phsyics and
chemistry research, calculus, other mathematics, and finances. This lead to an
academic discipline that involved philosophy about the nature of mathematics and
what kinds of knowledge could be formally proven.

Alonzo Church, Alan Turning, Stephen Kleene, Kurt Godel, David Hilbert, and
others worked to formalize these ideas into mathematical proofs leading,
eventually, to the Turing Machine and the proofs that accompanied it.

> It was stated above that 'a function is effectively calculable if its values
> can be found by some purely mechanical process'. We may take this statement
> literally, understanding by a purely mechanical process one which could be
> carried out by a machine. It is possible to give a mathematical description,
> in a certain normal form, of the structures of these machines. The development
> of these ideas leads to the author's definition of a computable function, and
> to an identification of computability with effective calculability. It is not
> difficult, though somewhat laborious, to prove that these three definitions
> [the 3rd is the λ-calculus] are equivalent.
>
> _Alan Turing (1939) in The Undecidable, p. 160_

Something is numerically computable by a human if-and-only-if it is computable
by a Turing machine, and that all forms of iterative deterministic computation
are equivalent.

### Abstract Computing and the Lambda Calculus

Have you ever wondered where the Lambda in Lambda School came from? Wonder no
more. It's from _Lambda Calculus_, or _λ-calculus_.

λ-calculus is a formal mathematical system for modeling computation. It
provably is able to support all the same computational abilities that a Turing
Machine does.

One of the most common places the λ-calculus makes an appearance is in
[_functional programming
languages_](https://en.wikipedia.org/wiki/Functional_programming) such as
[LISP](https://en.wikipedia.org/wiki/Lisp_(programming_language)).

> Functional Programming is what is called a [_programming
> paradigm_](https://en.wikipedia.org/wiki/Programming_paradigm).
> Object-Oriented Programming is another (e.g. JavaScript, C++). Procedural is
> another (e.g. C). (Although truly most languages are _mixed-paradigm_.) It is
> usually more difficult to learn a new programming paradigm than it is to learn
> another language of the same paradigm.

Alan Turing came up with the Turing Machine model of computation. At the same
time, Alonzo Church came up with the Lambda Calculus model. Church and Turing
proved these two models to be equivalent with the _Church-Turing Thesis_.

### Mathematical and Theoretical background

[Propositional Calculus](https://en.wikipedia.org/wiki/Propositional_calculus)

The pursuit of ancient philosophy from Aristotle and Stoic philosophers near 300 BCE:

    If the first, then the second; the first, therefore the second.
    If the first, then the second; not the second, therefore not the first.
    Not the first and the second both; the first, therefore not the second.
    The first or the second but not both; the first, therefore not the second.
    The first or the second one or the other; not the second, therefore the first.

[Calculus](https://en.wikipedia.org/wiki/Calculus)

Not a direct antecedent of Computer Science, Calculus instead is part of the
train of reasonining that informs all of the modern world: Logic and formal
analysis can describe the behavior of things.

[Boolean algebra](https://en.wikipedia.org/wiki/Boolean_algebra)

George Boole and Augustus DeMorgan in the mid 1800s expanded on ancient
propositional calculus into a formal algebra:

    A ∨ B (A or B)
    A ∧ B (A and B)
    ¬A (not A)
    A ⇒  B (A implies B)
    A ⇔  B (A if and only if B)

[Logic symbols](https://en.wikipedia.org/wiki/List_of_logic_symbols)

[Charles Babbage](https://en.wikipedia.org/wiki/Charles_Babbage) (1791-1871)

Charles Babbage first proposed that these formal rules could be automated. He
built part of the Difference Engine and proposed the design of the Analytical
Engine. His work became the foundation of formal automata theory.

[Ada Lovelace](https://en.wikipedia.org/wiki/Charles_Babbage) (1815-1852)

The first computer programmer, Ada Lovelace studied under Charles Babbage and
created the first languages to automate the unbuilt Analytical Engine. 

[Principia Mathematica](https://en.wikipedia.org/wiki/Principia_Mathematica)

Principia Mathematica (Not the one by Newton!) was written by Alfred North
Whitehead and Bertrand Russell. It was an attempt to describe all of mathematics
from a set of starting axioms. This was the culminative attempt of formal
logicians to capture ""reasoning ability"" into a formal method, and profoundly
influenced the development of computer systems.

#### Turing Machines

[Theory of computation
models](https://en.wikipedia.org/wiki/Theory_of_computation)

[Halting Problem](https://en.wikipedia.org/wiki/Halting_problem) This is of
special importance in Computer Science!

One of the first decision problems and the foundation of Computer Science.
Turing Machine was invented in order to provide a solution for this problem -
that it is undecidable.

The question is: Can a program be written `f` that will for every other program
`g` say whether or not `g` will finish? Turing proves using complicated
mathematics, and by inventing a Turing Machine in order to support his proof,
that this machine `f` cannot be invented.

The takeaway from this proof and observation is that it is not possible to build
a computer program that can solve any problem - some problems are undeciable,
that is, unsolveable.

[Church-Turing thesis](https://en.wikipedia.org/wiki/Church%E2%80%93Turing_thesis)

[computability](https://en.wikipedia.org/wiki/Computability_theory)

[Turing Machines](https://en.wikipedia.org/wiki/Turing_machine) These are of
special importance in Computer Science!

[Visual example of a Turing Machine as formula](https://cs.stackexchange.com/questions/11542/how-to-construct-and-write-down-a-Turing-machine-for-a-given-language)

[Gödel's Incompleteness
Theorem](https://en.wikipedia.org/wiki/G%C3%B6del%27s_incompleteness_theorems)",Instructor will review the material with the students.,"* Where do you see boolean algebra used in JavaScript?

* What are some examples of logical symbols in JavaScript?

* The Analytical Engine was never constructed. Why not?",A1sL9yhgrlg,http://youtube.com/watch?v=A1sL9yhgrlg,https://www.youtube.com/embed/A1sL9yhgrlg,https://youtu.be/qFCLbQhxNTw,,,,Theory of Computation,,Theory of Computation/Hash Tables,Computer Science,,1,1,1,3
"draw state machines and describe their notation, and be able to describe the function of any simple machine with a state machine.","The study of deterministic methods of reasoning, beginning with deterministic
finite automata.

A finite state machine is the most common construct in all of Computer Science.
It is the basis on which the rest of computation is built.

* [Finite-state machine](https://en.wikipedia.org/wiki/Finite-state_machine)
* [Automata Theory](https://en.wikipedia.org/wiki/Automata_theory)

A _state machine_ is a collection of _states_ and _transitions_ between those
states. Each transition is a description of what triggers the transition into
the new state.

Here is an example transition from `Happy` state to `Sad` state and back:

```
+-------+   Dental emergency    +-----+
| Happy |---------------------->| Sad |
+-------+                       +-----+
    ^                              |
    |      Dental work done        |
    +------------------------------+
```

Sometimes it is useful to think of the transitions as events. Other times it is
useful to think of them as ""input consumed"".

All computable problems can eventually be decomposed into state machines, but
programming languages offer features for us to conveniently not need to code
everything up as a state machine.

State machines often have a special _start state_ (denoting where to start) and
one or more _terminal states_ (when to end).

The Greek letter ε (epsilon) is used to denote a state transition for which no
event is required (or no input consumed) for the transition to take place.

### Example Usage

State machines are frequently used explicitly in a number of programming situations.

* Network protocols
* Terminal emulators
* Web login systems
* Compilers
* Game AI

Anyplace _state_ needs to be maintained, a state machine is of use.

",,Instructor will go over examples of state machines and how they are useful.,"Draw a state machine diagram for an old-fashioned soda machine

The soda machine takes any combination of nickels, dimes, or quarters to reach
$0.25, then dispenses a soda.

![Soda Machine state machine](https://raw.githubusercontent.com/LambdaSchool/Theory-Of-Computation/master/objectives/state-machines/img/soda-states.png)

(Error states omitted for brevity, e.g. what happens if the user puts in a dime
and then three nickels?)

Notice how the addition of each coin moves us to the next state (which is the
total value deposited so far). Or put another way, how the consumption of the
next input moves us to the next state.

Follow the state machine as the user deposits a dime, a nickel, and then another
dime.
","Draw a state machine diagram for a video game AI

Video game AIs can exist in a lot of states, e.g. idling, bored, running, shooting.

1. Come up with a list of 4 states an AI can be in.
2. Figure out the transitions between those states.
3. Draw a state machine diagram of your AI.",dggzh1nrGcs,http://youtube.com/watch?v=dggzh1nrGcs,https://www.youtube.com/embed/dggzh1nrGcs,https://youtu.be/qFCLbQhxNTw,State Machines,,,,,,,,1,1,1,3
"describe the uses of a regular expression is, construct them, and describe the difference between ""greedy"" and ""non-greedy""/""lazy""","A _regular expression_ is a sequence of characters that define a search pattern.

In common daily usage, regular expressions (often called _regexes_) are used to
match patterns in strings of characters.

* [Regular Expression](https://en.wikipedia.org/wiki/Regular_expression)
* [Regexr regular expression tester](https://regexr.com/)

### Example Regular Expressions

```
[aex]  Match any letter a, e, or x.
[0-9]  Match any digit 0-9
a?     Match 0 or 1 occurrences of the letter a
b*     Match 0 or more occurrences of the letter b
c+     Match 1 or more occurrences of the letter c
.      Match any character
.*     Match 0 or more of any character
\.     Match a period (\ not necessary when using [])
\*     Match an asterisk (\ not necessary when using [])
[^ef]  Match any character that's not e or f
^      Match beginning of line
$      Match end of line
```

### Matching patterns in Strings

When trying to come up with a regex that matches a number of strings, look for
runs of common types of characters in the string. These can often be replaced
with the `?`, `+`, or `*` symbols.

Look for mandatory elements and make sure they're present, as well.

#### Matching an email address

There is no sensible regular expression that will determine if an email address
is valid. (They're more complicated than you think.)

With that in mind, if you ever have to find a regex for an email, just have it
check for the mandatory elements.

An email address of the form `name@example.com` has a lot of options. Maybe the
name has underscores, numbers, or other characters. Maybe the domain has
multiple parts.

For the name, let's match any sequence of 1-or-more characters:

```
[a-z]+
```

Then an `@`:

```
[a-z]+@
```

Then for the domain, we want at least two stretches of letters with a period in
between.

Let's look for letters, followed by a period, followed by letters or periods:

```
[a-z]+@[a-z]+\.[a-z.]+
```

Does that match `name@example.com`? Let's look.

The first part of the regex `[a-z]+` consumes any sequence of 1 or more
characters from `a` to `z`. That consumes the `name` off the front of the
address, leaving us with `@example.com` still to be matched.

Next, the `@` in the regex matches the `@`, so it's consumed and we're left with
`example.com`.

Then, again, we consume 1-or-more letters with `[a-z]+`, eating up the `example`
and leaving us with `.com`.

After that, ` \.` will consume the period.

Finally, we look for any sequence of letters or `.` with `[a-z.]+`, and that
consumes the `com`. We've made a match!

Let's try a failure case. Is `name` a valid email address?

First we consume `[a-z]+`, which eats the `name`, leaving us with an empty string.

Next we try to consume `@` from the regex, but there's nothing left in the
string. We stop searching at this point. It is not a match.

Where does the regex fail us?

All of the following are valid email addresses. How does our regex fail to detect them?

* Name@example.com
* name22@example.com
* name+2_3@example.com
* name(goats)@example.com
* (goats)name@example.com

All of the following are invalid email addresses. Why does our regex say they're OK?

* name@example.com.
* name@example..com
* name@example..

How could it be improved to handle these cases? Writing an email regex is hard.


#### Greedy versus Non-Greedy

Regexes can be termed _greedy_ or _non-greedy_.

Greedy regexes consume as much as they can before stopping. Let's take a regex
that looks for HTML tags of the form:

```HTML
<any>content</any>
```

A regex that does this might look like this:

```
<.+>.+</.+>
```

A greedy regex will consume as much as possible right away, notable the first
`<.+>` will consume everything. First, it consumes the `<`. Then it consumes one
or more of any character, `any>content</any`. Finally it consumes the last `>`.
then it tries to consume another `.+` where `content` should be, but there's
nothing left in the input so it fails to match.

To make the regex _lazy_, just put a `?` after the `+` or `*` that's being too
greedy. This will cause it to stop consuming at the _earliest_ opportunity as
opposed to the _latest_.

```
<.+?>.+?<.+?>
```

### Regular Expression/State Machine Equivalence

Regular expressions can be directly converted into state machines and often vice-versa.

When converting to a state machine, it might be useful to think of the states as ""consuming a certain type of character"".

```
foo+d    matches food foood foooood etc.
```

```
+---+ f  +---+ o  +---+ o  +---+ d  +===+
| S |--->| 1 |--->| 2 |--->| 2 |--->| 3 |
+---+    +---+    +---+    +---+    +===+
                           /o ^
                           \__/
```

Notice how the `+` in the regex forms a loop in the state machine diagram


",,"Instructor will demo the construction of several regular expressions, and show how to use them in JavaScript.","# Write a Regular Expression

Write a regex that matches a `1`, followed by 0 or more `2`s, followed by 0-1 `3`s.

```
12*3?
```","Write a regex that matches any one or two digit number, followed by a space,
followed by the word `monkey`, followed by 0 or 1 `s`s.

also 

Draw a state machine diagram for the following regex that matches a clock time.

    [0-9]?[0-9]:[0-9][0-9] [AP]M

For this, it's OK to have a single transition for all the digits, e.g. ""Go from
start state to state 1 if the input is `[0-9]` or ε"":

```
+---+  [0-9]   +---+
| S |--------->| 1 |
+---+    ε     +---+
```",3dGhglBJgPA,http://youtube.com/watch?v=3dGhglBJgPA,https://www.youtube.com/embed/3dGhglBJgPA,https://youtu.be/qFCLbQhxNTw,,,,,,,,,1,1,1,3
"describe what languages and grammars are, what Backus-Naur form is, and can determine if code complies with a given BNF","[Formal Languages](https://en.wikipedia.org/wiki/Formal_language)

Let's consider a formal language that consists of binary strings of length 3:

Examples:

    000 001 010 011 100 101 110 111

Grammar:

    S -> 0A
    S -> 1A
    A -> 0B
    A -> 1B
    B -> 0C
    B -> 1C
    C -> null

> Notice how similar this grammar is to a state machine. Fun fact: grammars like
> this can be converted to state machines and vice versa!

Regular grammars typically do not have fixed lengths:

    S -> A1
    A -> A0
    A -> A1
    A -> B1
    B -> null 

A set of rules like this is expressed typically in a shorter form:

    S = 1[0|1]+1

or

    S = 1[0|1]*1

by adding the rule 

    A -> B

[Context-free grammars](https://en.wikipedia.org/wiki/Context-free_grammar)

Chomsky invented CFGs in the context of natural language. They haven't proven to
be extremely useful in that context, but have become the standard for all
programming languages.

A context free grammar is one that provides much greater expression.

## Backus-Naur Form

[Backus-Naur Form](https://en.wikipedia.org/wiki/Backus%E2%80%93Naur_form)
(_BNF_) is used to describe grammars. It is a concise and compact way of
describing the exact syntax of a language.

Example BNF for a made up language:

```
<expressions> := <expression+\>
<expression> := <type> <name> = <value>
                <while-loop>
                <print> <name>
                <print> <value>
<conditional> := <name> <lt> <value>
                 <name> <gt> <value>
                 <name> <eq> <value>
<while-loop> := <while> <conditional> | <expressions> \
<type> := d_int | d_string | banana
<name> := string
<value> := integer or a string
<print> := 'console.log(<name>)' | 'console.log(<value>)'
<lt> := '<'
<gt> := '>'
<eq> := '='
<while> := 'while (<conditional>)'
```

BNF for [PL/0](https://en.wikipedia.org/wiki/PL/0), a simple programming
language:

```
program = block ""."" .

block = [ ""const"" ident ""="" number {"","" ident ""="" number} "";""]
        [ ""var"" ident {"","" ident} "";""]
        { ""procedure"" ident "";"" block "";"" } statement .

statement = [ ident "":="" expression | ""call"" ident 
              | ""?"" ident | ""!"" expression 
              | ""begin"" statement {"";"" statement } ""end"" 
              | ""if"" condition ""then"" statement 
              | ""while"" condition ""do"" statement ].

condition = ""odd"" expression |
            expression (""=""|""#""|""<""|""<=""|"">""|"">="") expression .

expression = [ ""+""|""-""] term { (""+""|""-"") term}.

term = factor {(""*""|""/"") factor}.

factor = ident | number | ""("" expression "")"".
```

[Programming Languages](https://en.wikipedia.org/wiki/Programming_language)
These are _obviously_ of special importance. :)

[Algebraic
Expressions](https://en.wikipedia.org/w/index.php?title=Context-free_grammar&action=edit&section=14)

",TODO: Needs its own video,,Instructor will go over language generation from a grammar and explore BNF.,"Look for Compile Errors

The following PL/0 code has a syntax error in it. What needs to be fixed?

Use the BNF of the language, above.

```pl/0
VAR x;

BEGIN
   x := 1;
   WHILE x <= 10
   BEGIN
      ! x;
      x := x + 1
   END
END.
```",,,,https://youtu.be/qFCLbQhxNTw,,,,,,,,,0,1,,1
list and describe basic crypto operations,"Modern computer ecosystems depend on basic crypto operations - encryption, decryption, signing, and verifying - as well as the difference between symmetric and asymmetric cryptography. As a developer, you should generally *not* implement these, but you should understand them well enough to use them properly.","'- Overview - xor and one-time pads (see ""I do"")
- General motivation - crypto would be perfect if we could all securely exchange arbitrarily long pads with each other. But that’s hard, so instead we exchange shorter things (keys) that are used as seeds for RNG, and it’s that larger pseudo-randomness that actually protects all the data. The trustworthiness of the randomness is key, which is why lately there’s been lots of hypothesizing and concern about backdoors in RNG algos.
- Basic crypto operations - hashing, sign, encrypt, verify, decrypt, demonstrate via https://tweetnacl.js.org/
- Symmetric - “shared secret”
    - Many schemes, but overall the shared secret/key is used as a seed for RNG which then protects the actual data
    - Efficient (built into Intel w/AES NI)
- Asymmetric - public/private keys
    - Enable “handshake” protocols where neither side has a pre-existing shared secret https://www.youtube.com/watch?v=YEBfamv-_do&feature=youtu.be&t=2m25s
    - Not efficient, so typically used just for this handshake to then generate a new shared key (and then both sides use the same symmetric crypto), or for relatively short messages (e.g. emails).
- Answer for group demo (toy RSA implementation): https://gist.github.com/soycode/361331cf8ff6eb7928c58432242999b9","xor and one-time pads - basically, security comes down to good randomness.
```python
message = 'foo'
pad = 'bar'
cipher = [ord(a) ^ ord(b) for a, b in zip(message, pad)]
ciphertext = ''.join([chr(c) for c in cipher])
ciphertext
decrypted = [ord(a) ^ ord(b) for a, b, in zip(ciphertext, pad)]
plaintext = ''.join([chr(c) for c in decrypted])
plaintext
```","Toy RSA implementation - https://gist.github.com/soycode/a134cb10e79a9c4c26dd724229d1c496

Introduce, spend some time showing resources and beginning implementation, then move to next topic to better motivate asymmetric crypto.","Work on Toy RSA implementation (mixed with we do, to ensure adequate time, as this implementation will be used in later exercises).",,,,https://youtu.be/9rH571vvgnE?t=23m57s,,"Cryptopals Crypto Challenges,Stick Figure Guide to AES,A Short Explanation of RSA by Art of the Problem",,Security and Cryptography,,,,,1,1,,2
understand what data persistence means and how we use MongDB to achieve persistence.,"We build full stack applications, and thus far we've only chatted about storing data on the server (inside a NodeJS/express application). The inherent problem there, is that the _data is only persistent as long as the server is alive_. In the land of software development we need to be able to **persist** this information even if our server restarts/goes down. Thus, there is a need for a consistent and persistent data store like `MySQL` and of course,` MongoDB`.","Students need to understand the different levels of `state`. We can talk about this in the context of a react application. Your components have state, then there is Redux which is state that persists across the whole application. Then move forward and discuss the differences between having the application state and one step further.. local storage. After they understand that state can exist across a client side only application. Move on and tell the students about potentially keeping data persisted on only a server. Demonstrate to them the idea that once the server restarts, the data is gone. 

This will demonstrate the need for a persisted data layer like MongoDB. ",,,,,,,,,,,Mongo I,,,,,0,,,0
"describe the difference between a MongoDB instance, a collection and a document.","Just because mongodb is considered a `NoSQL`/`non-relational database` this doesn't mean you cannot achieve relationships across your data sets. Truthfully a `non-relational` data base is simply one that is `TABLE-less`. By design, non-relational databases like `mongoDB` provide a LARGE level of flexibility. And simply put they're really easy to work with. 
","It is imperative that at this point Students all have their Mongo DB instances installed on their local machines. The material handed out as preclass should be found resourced below in the `preclass links`. 

Be sure to remind the students about these installations many times over the weekend! You don't want to be waiting on them to install these items during class.

Demonstrate how to get a `mongod` instance up and running. Show them the different commands like `sudo mongod` `mongod` etc. and how this starts a mongo daemon server that is awaiting for connections.

Show them the mongo shell. Students should be able to open up a shell and connect to a mongo instance, start creating Db's, collections and using pure vanilla mongo commands to insert, remove, update and read data from a persistent mongodb instance.",,,,,,,,,,,Mongo I,,,,,0,,,0
explain asymmetric crypto trust - PKI versus web of trust,"Asymmetric cryptography is integral to privacy and security, and thus commerce and other important things. As a developer, it is critical to understand the basics of why and how these systems work, and to be able to distinguish between the two main ways trust is propagated - Public Key Infrastructure and the Web of Trust.","'- If we’re going to use asymmetric crypto, we need a trustworthy way to know what public key belongs to what entity
- Public Key Infrastructure
    - Used in practice - this is how your browser shows that nice green lock when you’re logging into your online accounts
    - Details are complex and bureaucratic (and at times controversial), but the overall:
        - Certificate Authorities (CAs) are entities, usually security and/or telecomm/hosting companies, that will issue keys to a website that wants to use them, and sign the key with their own key to attest to it being legitimate.
        - Browser/OS vendors decide whether or not to include a given CA in their list of trusted authorities - if it is, then the browser/OS will automatically recognize and approve certificates (or possibly other software) they sign.
    - Advantage is usability - no end-user set up, and assuming you trust your vendor (again threat model comes up) you can have fairly decent security. Disadvantage is centralization - the hierarchical nature of CAs means one rogue CA can do a lot of damage, and while vendors can mitigate with fast patches and certificate pinning, this doesn’t help the many legacy devices out there that can be more easily compromised (remember botnets, IoT is feeding that).
- Web of trust
    - Idealized usage model for tools like GPG - requires users savvy enough to generate and manage their own keypairs, and then go to “key signing parties” to verify the identity of their friends
    - With proper setup, gives fairly good guarantees - you trust the keys of your friends, and so if they sign other people’s keys you can trust those too, etc. (think “Six degrees of Kevin Bacon”)
    - Without proper setup, can be arbitrarily disastrous - forgotten passphrases, lost data, outdated/insecure keys, untrustworthy signatures, etc. More simply, most users won’t even try to adopt a tool this complicated, and so the “web of trust” consists mostly of enthusiasts and academics - can still have utility in those circles, but not much beyond.
    - Can this usability/security divide be crossed? Maybe - https://keybase.io","Revisit/continue toy RSA (motivate operations, explain answer more) - https://gist.github.com/soycode/a134cb10e79a9c4c26dd724229d1c496","Use the toy RSA implementation to exchange secret messages with another student (generate a keypair, trade the public modulus, then swap messages).","Continue on the ""we do"".",,,,https://youtu.be/9rH571vvgnE?t=44m58s,History of Certificate Authorities,,,Security and Cryptography,,,,,1,1,,2
"use crypto/security tools as a developer, know a bit about future direction","Where the rubber meets the road - what does a developer need to get right, or at least not-wrong, about security? And if you want to compete in this rapidly changing field, it's also important to know a bit about the future direction of things, and how to separate hype from innovation.","'- What you need to know about crypto as a developer
    - Pick the right protocols/parameters (dated but a good start: http://www.daemonology.net/blog/2009-06-11-cryptographic-right-answers.html and for asymmetric https://www.keylength.com/en/4/)
    - *Don’t roll your own crypto* - it can be fun/educational to implement your own crypto as we have with basic RSA, but just like implementing your own hash table or sorting algorithm you can learn from it but should actually use the one built into your language/framework/system (unless you go on to really specialize in the area) as it is “battle-tested”/reviewed by lots of people
    - Use OAuth2 integrated with logins from the Big-5 (Apple, Google, Amazon, Twitter, Facebook) for your own site authentication. This gives you “free” on-call security engineers, protecting you from the details, and the blame if anything goes wrong.
    - Keep your secrets safe - offline encrypted backup of your really important keys, good passphrases for important systems, etc.
    - Use SSL for _all_ production systems (this includes “internal” systems that are accessible outside the local/corporate network). It’s easy and free to do it properly these days: https://letsencrypt.org
    - Use public/private keypairs for all logins that support it - SSH.
    - Use MFA (multi-factor authentication) - the gold standard is “thing you know” (password/passphrase), “thing you have” (phone/fob), “thing you are” (biometrics) - but at least two out of three is a good idea. https://twofactorauth.org/
    - Check signatures when installing software - if you use a reputable package manager (e.g. apt-get, brew, etc.) you will generally get this “for free”, but it’s still something to be aware of.
- The Future
    - Blockchains and Cryptocurrency - built off the same cryptographic primitives, but with the goal of creating a (usually) public global transaction ledger that everyone can agree on but nobody owns (i.e. decentralized).
    - Why? Money itself is basically just a list of transactions, as well as many other things (tickets to go to an event, news stories, communication, etc.). Also, newer cryptocurrencies (e.g. Ethereum) offer more complicated scripting, which means that you can actually create contracts with conditional logic and have them enforced in a decentralized fashion (leading to supposed “Decentralized autonomous organizations” - but the first one collapsed to a hack).
    - Also, quantum cryptography - basically, if quantum computing gets powerful enough, certain one-way functions that asymmetric cryptography depends on will no longer be hard to reverse. There is such a thing as “post-quantum cryptography”, so it won’t be the death of crypto, but it will require a significant change.
- Instructor notes for the ""we do"" - let’s illustrate the strength/weakness of passwords together http://oldhome.schmorp.de/marc/fcrackzip.html
    - Windows: Binary from that site (hopefully works, if not screenshare with somebody who gets it working)
    - MacOS: brew install fcrackzip
    - Linux: varies, but probably “fcrackzip” in the regular package repo
    - An onion puzzle (encrypted zip files inside each other), starting with exercise1.zip
    - Run “fcrackzip -h” to see options
    - The zip is encrypted, once you crack the password (very easy brute) you get a text file and another encrypted zip (and from the first layer, a basic dictionary file as well named common_passwords.txt)
    - The zip is encrypted, once you crack the password (very easy brute) you get a text file and another encrypted zip (and from the first layer, a basic dictionary file as well named common_passwords.txt)
    - The plan is to demonstrate the tool, crack the outer layer in front of them with brute lowercase alphabet (“fcrackzip -b -c a -l 1-5 -u exercise1.zip”), show that brute lowercase alphabet doesn’t work on the second layer. Mention what other options exist (different character sets, dictionary attack), then set them loose on layers 2 on. They’ll have to read the documentation to figure things out, but basically: “fcrackzip -D -p common_passwords.txt -u file.zip” for dictionary attacks, “fcrackzip -b -c 1 -l 1-9 -u file.zip” to brute-force with numbers, “-c a1” for lowercase and numbers, and those three commands should be adequate for all exercises.
    - Answers to each layer
        - Exercise 1: abc
        - Exercise 2: 123
        - Exercise 3: abc123
        - Exercise 4: swordfish
        - Exercise 5: fnord
        - Exercise 6: a5n2c
        - Exercise 7: YouProbablyWontGetThisOne
    - The first 6 should all be solvable - 1-3 with brute or dictionary, 4 probably only with the dictionary (maybe a patient lowercase bruteforce), 5 and 6 with brute (and including numbers for 6). The 7th really shouldn’t be solvable (with fcrackzip - there may be tools better at targeting the specifics of zip encryption), and you should unzip it at the end to demonstrate that long passphrases are helpful.
    - If they get through things fast, spend extra time going over the source code: https://github.com/hyc/fcrackzip
    - At the end, you should also note that this was a toy teaching example - real secure passwords should be even better than that, and real encryption should be better than .zip files (many .zip encryption implementations have fairly serious flaws that can be cracked somewhat regardless of password strength).",Explain a basic Blockchain (i.e. talk through the code https://github.com/julienr/ipynb_playground/blob/master/bitcoin/dumbcoin/dumbcoin.ipynb). Another similar option: http://lhartikk.github.io/,"To demonstrate why secure passwords matter, we'll play with a basic password cracking tool: http://oldhome.schmorp.de/marc/fcrackzip.html

Install fcrackzip and then download exercise1.zip - https://drive.google.com/file/d/1zUcGg4i70NCcprzZi6eRfTRdwCSy2FDX/view?usp=sharing

exercise1.zip is encrypted, but with a weak (easily cracked) password. Open it, and you get a text file congratulating you - and another, slightly more difficult, encrypted zip, as well as a small dictionary file to help in further cracking. This continues for a total of 7 layers (though you only get the first dictionary file), and all but the last one should be possible to break efficiently with the above tool.","Do something to improve your personal security setup - if you're not using a password manager, set one up. If you're doing that, then set up two factor for some of your accounts. If you're doing that, then set up proper SSH keypairs for services that support it (GitHub, etc.). If you're doing all of those things, then write a blog post about your security setup summarizing what you've learned and tips you have for others.
",,,,https://youtu.be/9rH571vvgnE?t=53m,,"Bruce Schneier's Blog,Security StackExchange,John the Ripper,JavaScript Cryptography Considered Harmful",,Security and Cryptography,,,,,1,1,,2
"explain and be able to use npm, npm init, npm install, npm save, npm save dev","NPM is the package manager we use to interface with Node applications. When building a nodeJS project, it is very uncommon to see it built completely from scratch. We as developers tend to lean on one another (and one another's code) when developing applications today.

Node Package Manager (NPM) is how a developer can get that type of work done. Lets say you had a problem with your current development system and were able to fix that problem with a package (group of files you created using Node) that you created. You could then take that package and publish it to NPM so that anyone else who encounters your same problem would be able to pull it down and use it in their applications as well. This allows us to build off the work that other's have done before us so that we don't have re-create it every time. 

NPM hosts these packages in a way that is very use full, and they've given us a Command Line Interface (CLI) to use (That you've already been using) in order to do this.",Explain to students and reiterate to them that the process of building web applications today is all about building off of one another's work as developers. ,"Demonstrate to the students that they have already been using NPM by installing and running the tests.

Walk the students through a typical `package.json` file. Show them the `dependancies` and `devDependancies` fields and what they do and how they relate to `npm.org`.

Show them how to create and initialize a `package.json` file in a project using the command line, and walk them through the individual pieces of that set up.

```
npm init
```

Demonstrate to the students how to get packages using the `install` and `--save` and `--save --dev` commands commands. And how, once the packages are installed, their fields are updated accordingly in their `package.json` file and how they now have a `node_modules` directory installed with the dependencies needed.",,,,,,,,,,,,,,,1,,,1
explain what Node.js is and its core features.,"`Node.js` is a _runtime environment_ (a program that runs other programs), a platform used to execute JavaScript applications outside the browser. 

This opens up a new world of possibilities for JavaScript developers. We can now use JavaScript to write command line utilities, native programs that run on different operating systems, networking software, web services, web applications and more.",,"Traditionally, the JavaScript language was confined to web browsers, but in 2009, `Node.js` was unveiled and, with it, developers were given a choice. They could now use JavaScript to write software that, up to that point, could only be written using C, C++, Java, Python, Ruby, C# and other programming languages.

We will be using node in the context of writing server code, specifically `web services` that can communicate with clients using the `JSON` (**J**ava**S**cript **O**bject **N**otation) format for data interchange.

Some of the advantages of using `Node.js` for writing server side code are:

- JavaScript on the server: use the same programming language and paradigm for both client and server. This minimizes context switching and makes it easy to share code between the client and the server.
- single threaded: removes the complexity involved in handling multiple threads.
- asynchronous: can take full advantage of the processor it's running on. This matters because the node process will be running on a single CPU.
- npm repository: access the the largest ecosystem of useful libraries (most of them free to use) in the form of `npm modules`.

Some of the disadvantages of using `Node.js` for writing server side code are:

- JavaScript on the server: we lose the ability to use the right tool (language) for the job.
- single threaded: can't take advantage of servers with multiple cores/processors.
- asynchronous: it is harder to learn for developers that have only worked with languages that default to synchronous operations that block the execution thread.
- npm repository: too many packages that do the same thing makes it harder to choose one and, in some cases, may introduce vulnerabilities into our code.

To Write a simple web server with `Node.js`:

- use Node's `http` module to abstract away complex network related operations.
- write the single **_request handler_** function that will handle all requests to the server.
  - the request handler is a function that takes the `request` coming from the client and produces the `response`.
  - it takes two arguments an object representing the `request` and one representing the `response`.

This can be done, but the resulting code is verbose even for the simplest of servers. Also note that when using only Node.js to build a server we use a single request handler function for all requests.","Let's write a simple web server that returns a message using only `Node.js`. Create a folder for and add an `index.js` file inside.

Add the following code to `index.js`:

```js
const http = require('http'); // built in node.js module to handle http traffic

const hostname = '127.0.0.1'; // the local computer where the server is running
const port = 3000; // a port we'll use to watch for traffic

const server = http.createServer((req, res) => {
  // creates our server
  res.statusCode = 200; // http status code returned to the client
  res.setHeader('Content-Type', 'text/plain'); // inform the client that we'll be returning text
  res.end('Hello World from Node\n'); // end the request and send a response with the specified message
});

server.listen(port, hostname, () => {
  // start watching for connections on the port specified
  console.log(`Server running at http://${hostname}:${port}/`);
});
```

Now navigate to the folder in a terminal/console window and type: `node index.js` to execute your file. A message that reads ""_Server running at http://127.0.0.1:3000_"" should be displayed and the server is now waiting for connections.

Open a browser and visit: `http://localhost:3000`; `localhost` and the ip address `127.0.0.1` point to the same thing: your local computer. The browser should show the message: ""_Hello World from Node_"". There you have it, your first web server, built from scratch using nothing but `Node.js`.","Write a paragraph about what `Node.js` is and explain at least 3 of it's core features.

Submit the paragraph to your Project Manager.",Ez75BevKbi4,http://youtube.com/watch?v=Ez75BevKbi4,https://www.youtube.com/embed/Ez75BevKbi4,,Node.js Website,NodeJS Runtime environment for JS,"- What is node.js.
- What do we mean when we say that `node.js` is _single threaded_.
- Mention two advantages of using `node.js` to build Web APIs.",Introduction to Node.js and Express,Active,Building RESTful Web APIs with Express and Node.js,Full Stack Web Development Core,,1,1,1,3
use postman to manually test Web APIs.,[Postman](https://www.getpostman.com/) is a very popular tool used to manually test APIs. It comes loaded with a lot of useful features that make testing APIs very easy and painless.,Students should have Postman installed before class.,"Testing APIs is different from testing websites or web applications. as in the latter a web browser is sufficient, but for APIs we often need to be able to make POST/PUT/PATCH/DELETE requests and even modify the request headers.

That's where tools like `Postman` come into the picture. They allow full control when making requests. We can easily change the HTTP Method used, add JSON data to the body, add form data, add headers, examine the response, and more.

In the case of `Postman` you can do a lot more, but we'll limit our discussion the basics needed to test APIs by passing test data and examining we're getting the expected response.

We recommend installing the native application for your Operating System.",Please follow along as the instructor uses Postman to test an API.,Use Postman to test the endpoints you have built so far.,kk1PcjtEPZE,http://youtube.com/watch?v=kk1PcjtEPZE,https://www.youtube.com/embed/kk1PcjtEPZE,,Postman Download,Postman Documentation,"* why can't we use a browser to test APIs that perform CRUD operations?
* what can you do with Postman that is not possible to do with a web browser?",Introduction to Node.js and Express,Active,Building RESTful Web APIs with Express and Node.js,Full Stack Web Development Core,,1,1,1,3
explain and describe what a protocol is and what HTTP is and how we use it to communicate between URLs,,,,,,,,,,,,,,,,,,0,,,0
"understand/interpret BigO, and relate it to why we care about algorithmic efficiency in general","Everyone knows computers keep getting faster, so why do we care about algorithms and their efficiency? Can't we just buy a faster computer whenever we need to? Turns out - no, not even close. And not just knowing this fact, but understanding why, is core to being not just a software developer but a computer scientist.

","'- Asymptotics - they matter (motivate with plot, illustrations)
- Algorithms and data structures determine where you fall in this:
    - O(1) - free
    - O(logn) - basically free (~30 for most problems)
    - O(n) - “sustainable” scaling, you get what you give, the minimum for any problem where you have to at least look at everything once
    - O(nlogn) - not much worse than O(n), lots of important things here (most notably comparison-based sorting)
    - O(n^2) - getting more expensive but still tractable for real world problems (especially if you can somehow distribute it), nested loops
    - Beyond - basically a bad idea. If the “obvious” solution to a problem is this inefficient, then hopefully there’s either a better solution you can figure out, or a heuristic that efficiently approximates it.
    - Shape of algorithms: https://www.lucidchart.com/invitations/accept/47a27116-ecf8-4b68-a8b2-df05410e3d87
- Constants - they don’t matter, except when they do. It’s a matter of context - if you’re throwing arbitrary quantities of data and can afford buying more compute (the typical “cloud” scenario), constants don’t matter much (at least in initial development). If you’re running smaller amounts of data or on a small/embedded/battery-constrained platform, they may matter.
- Bottom line - the right algorithm is the difference between running in a second (and making $) and taking longer than the lifespan of the universe.","Demonstrate runtimes of different complexity - just simple loops/recursion, with a counter to show how fast it grows. Live code with e.g. node shell, and do constant, linear, loglinear, and quadratic.","Continue live-coding complexity, moving on to worse-than-quadratic. Add benchmarking (timing of some sort), and show that for n > 50 or so exponential and beyond just blows up. Incidentally, this is a good opportunity to teach students how to suspend/kill a process that isn't terminating.","Think about an interesting real world application for computers, e.g. social networking, shipping logistics, airplane scheduling, etc. Research the scale of data typical to these problems, then write a paragraph summarizing your findings and relating them to how they shape what class of algorithms to use for solving them.",,,,,,"Wikipedia article on Data Structures,Plot of complexity growth",,,,,,,1,1,,2
list and describe major algorithmic approaches.,"Algorithms are tools, and understanding the different forms they tend to come in gives you a better understanding of your toolkit, enabling you to more flexibly solve novel problems.","'- Greedy - when the obvious thing works
    - Each step of the algorithm does one simple thing, in a way that satisfies a “greedy heuristic” (some decision rule that can be fully defined in one “step” of the algorithm, e.g. for one piece of data).
    - If the heuristic is *correct* then you eventually get to the right solution.
    - If you’re really lucky, it’s even an efficient/optimal approach in terms of BigO.
    - Related to concepts like bruteforce and “naive” approaches - it’s often good to first try the obvious thing, and if it works, great! Can then try to refine/improve from there (more on this later).
    - Example: Prim’s
        - Objective: find a Minimum Spanning Tree (MST) for a weighted undirected graph
        - Start by choosing a vertex arbitrarily
        - Look at all connected vertices, pick cheapest that you haven’t already chosen in the past
        - Iterate until fully connected
        - Efficiency bonus - use a priority queue (data structure that makes it cheap to find minimum)
- Divide and Conquer - modular problems
    - Each step of the algorithm either solves a small piece (“base case”), or puts together two smaller solutions into one larger solution.
    - Often logarithmic in runtime, due to this recursive division
    - Need to have a base case - some minimum size of the problem that is trivially solved (example - list of a single item is always sorted).
    - Needs to be efficient to combine solved pieces into larger still-solved piece (linear example of combining two sorted lists by iterating).
    - Examples: mergesort (above two examples build it), quicksort (fancier logic about how it splits groups and able to sort in-place but not a stable sort, not sure if it’s worth going into depth but definitely should be mentioned and ties into randomized).
- Randomization - sometimes it helps to shake things up
    - Not really a class of algorithms, but rather a “trick” that can be applied to a variety of situations
    - Somewhat counterintuitive - basically, there are situations where just being random (usually in initialization) can help make an algorithm more robust (not perform badly against some input)
    - Canonical example (and evolution from divide and conquer): randomized quicksort (non-randomized has O(n^2) worst case)
- Dynamic programming - solve things by remembering bits cleverly
    - Optimization technique, developed in 1949 by Bellman at RAND
    - Fun fact - the name is basically meaningless! Well, it’s marketing. ""I spent the Fall quarter (of 1950) at RAND. My first task was to find a name for multistage decision processes. An interesting question is, Where did the name, dynamic programming, come from? The 1950s were not good years for mathematical research. We had a very interesting gentleman in Washington named Wilson. He was Secretary of Defense, and he actually had a pathological fear and hatred of the word research. I’m not using the term lightly; I’m using it precisely. His face would suffuse, he would turn red, and he would get violent if people used the term research in his presence. You can imagine how he felt, then, about the term mathematical. The RAND Corporation was employed by the Air Force, and the Air Force had Wilson as its boss, essentially. Hence, I felt I had to do something to shield Wilson and the Air Force from the fact that I was really doing mathematics inside the RAND Corporation. What title, what name, could I choose? In the first place I was interested in planning, in decision making, in thinking. But planning, is not a good word for various reasons. I decided therefore to use the word “programming”. I wanted to get across the idea that this was dynamic, this was multistage, this was time-varying. I thought, let's kill two birds with one stone. Let's take a word that has an absolutely precise meaning, namely dynamic, in the classical physical sense. It also has a very interesting property as an adjective, and that it's impossible to use the word dynamic in a pejorative sense. Try thinking of some combination that will possibly give it a pejorative meaning. It's impossible. Thus, I thought dynamic programming was a good name. It was something not even a Congressman could object to. So I used it as an umbrella for my activities."" - Bellman
    - The secret - memoization
        - Break the problem into dependent subproblems (much like divide and conquer, but not independent/recursive)
        - Find an approach where calculating e.g. the answer to the next larger subproblem is easy as long as you have the answer to the prior subproblem(s) (the dependence, called a recurrence relation)
        - Tackle the problems in order, storing and using the subproblem solutions as you go
        - Overall goal - save computation time at the expense of storage.
    - Example - Fibonacci - start with naive recursive approach, show that it explodes, memoize, convert to bottom up. Fancier example (Bellman-Ford? String edit distance?) during the “We-do” section.",Demonstrate Fibonacci implemented with naive recursion.,"Change Fibonnaci to use iteration and memoization, so it can run for much larger input.",Pair with a classmate and discuss/explain to each other - why did Fibonnaci not run efficiently when it was recursive? Why did it run efficiently when it was iterative? What other sorts of problems can you think of applying this insight to?,,,,,,Fibonnaci Recursive Visualization,,,,,,,1,1,,2
approach a novel problem and come up with a workable first-pass solution.,"Oftentimes the first step to tackling an algorithmic problem we haven't encountered before is to get something working, regardless of whether or not it's working _badly_, and then improve and iterate upon our initial working solution. This is a skill that must be practiced and honed, but as students get more practice doing this, then, when they encounter a problem they've seen before, they're often able to skip directly to implementing the improved solution right off the bat. ","Walk the students through a few instances of coming up with a first-pass solution for a number of problems. Suggested problems would be the Nth Fibonacci problem and the Making Change problem. 

For Nth Fibonacci, the easiest first-pass solution (and the line of thinking that leads to the naive recursive solution), is to just transpose the Fibonacci equation into code. 

For the Making Change problem, one way we could approach this problem is to ask ourselves what we'll do in a few situations. What should we do when we're asked to compute the amount of change for a negative amount? What about when the amount is 0? Asking these initial questions up-front allows us to define a few base cases, and from there we can construct an initial working solution. 

","Algorithms aren't just ready-made solutions - they're a way of thinking. Learning to approach a problem with both a rigorous and efficient mindset, and when to use what common ""tricks"", is a core skill for software development. Typically, when it comes to tackling a novel problem, the first thing to do is to come with _any_ solution that works.","We're going to come up with initial first-pass solution to the Nth Fibonacci problem, which is to write a function that receives an integer n and outputs the nth Fibonacci number from the sequence of Fibonacci numbers. 

The Fibonacci sequence, like the factorial function, lends itself well to being solved recursively because each Fibonacci number is defined as the sum of the the two prior Fibonacci numbers in the sequence. Ok, so then where does the sequence start from? Well, the 0th Fib number is 0, and the first Fib number is 1. From there, we can build up the rest of the Fibonacci sequence. The second Fib number is the 0th plus the first, i.e., 0 + 1 = 1. The third Fib number is the first plus the second, i.e., 1 + 1 = 2. 

 So how do we encapsulate this logic in a recursive function? Our base case can be the cases when n == 0 or n == 1. Then the nth Fib number can be recursively defined as n = fib(n - 1) + fib(n - 2). So our function would look like this:
```python
def fib(n):
    if n < 2:
        return n
    return fib(n - 1) + fib(n - 2)
```

And we have a first pass implementation! This solution works all right, it certainly gives us the correct output. What happens though when we try calculating the 35th Fib number?
","Given an image represented by an NxN matrix, where each pixel in the image is an integer from 0 to 9, write a function `rotate_image` that receives a matrix as input and rotates the image by 90 degrees in the counter-clockwise direction.

A few questions you might want to ask yourself are:
 - How do I move values around in a matrix?
 - How do I rotate values in _any_ direction?",vtoYShxbPQw,http://youtube.com/watch?v=vtoYShxbPQw,https://www.youtube.com/embed/vtoYShxbPQw,,,Visualgo,,How to Write and Analyze,Active,Algorithms,"Computer Science, DS - Computer Science",,1,1,1,3
relate algorithms to the data structures that underlie/enable them.,"Many algorithms are really only as efficient as the data structures that they use - the two go hand in hand, and both must be understood and utilized correctly if either are to be taken full advantage of.","'- This is where interview dragons lie - worth some studying time depending where you apply.
- The two are intimately related - innovation (and efficiency, and implementation) in one tends to be tied with innovation in the other.
- A tour of data structures (at least to be aware of their existence and what problems they solve)
    - Array - elements in order, addressed by offset. May be fixed or variable length depending on language. Usually all the same type. O(1) random access, O(n) search, potentially O(n) editing (insert/delete) due to need to shift other entries.
    - (Linked) List - linear collection of items of any type, connected via references/pointers. O(1) insert/delete, but O(n) for all access.
    - Set - unordered collection of unique elements. O(1) to check for existence - can be thought of as “just the keys” of a hashtable.
    - Hashtable - elements (values) addressed by (hash of) keys. O(1) for reads and writes, but underlying data is not sorted/ordered so lousy for e.g. ranges/intervals.
    - … (trees/graphs as generalization of lists, binary search trees/red-black trees, heaps, maybe allude to how dbs can build indices over trees, etc.)
- Practical take-away - be aware of the options, and spend time to familiarize yourself with the provided structures in whatever language/ecosystem you use, so you use them well. E.g. JavaScript objects, Python dicts, etc. In general, high level languages will not be great at really mathy array things (they provide more “programmer-friendly” structures at a performance cost), related to the earlier point on iteration and math libraries in C.",Demonstrate the built-in data structures in a higher level language (e.g. Python) and relate them to the theoretical constructs.,"Again relate the data structures of a language to theory, but as a group. Specifically JavaScript should be discussed, and the oddities of JavaScript arrays (which are really just objects with int keys) as well as the newer developments of typed arrays and various ES6 niceties.","Think about what data structures must be used to make a search engine work (including crawling, storing, and returning results), as well as how and why the structures should be used. Then, discuss with another member of the class, comparing your answers.",,,,,,,,,,,,,1,1,,2
"make practical ""real-world"" development decisions, appropriately informed by algorithms.","This is where it comes together - algorithms are a deep topic, but they really matter every day as well.","'- Programmer time (usually) matters more than computer time - or in other words, premature optimization is the root of all evil. For small n, O(n^2) can be better than O(nlogn) (e.g. if it has better constants).
    - Asymptotics still matter, make something exponential and it just won’t run. That’s why we’re studying this in the first place.
    - But don’t worry too much about really shaving performance time down, at least until you (a) have something that works, and (b) have discovered that it actually does need to run faster for your usage.
    - Matter of balance/nuance/tradeoff - if your code is going to run *a lot* and *at scale*, then every byte can still matter. But nobody starts at that place, so it’s okay to “launch and iterate”, as long as you think about your design enough to make it sustainable/extensible. (Special case that affects tradeoff: constrained platform, e.g. IoT/Arduino. Phone used to be but these days they’re basically tiny locked-down desktop computers.)
- Differences between sorts - they’re all loglinear, but there are memory tradeoffs like in-place versus not, also stable versus not, etc. (and special cases, i.e. not comparison-based, like bucket/bin sort are linear)
- Distributed programming - huge hard crazy topic, related to functional programming, map/reduce. Basically what lets us compute on Big Data.
- More on asymptotics (may not actually get to in lecture, but should provide as supplementary material)
    - Log(almost anything you care about) <= ~30
    - Exponential(almost anything >= ~30) -> intractable (about 4*10^80 atoms in the universe)
    - Yes, log and exponential are related - functional inverses. Link Wikipedia, maybe?
    - Quadratic is tractable, but not (cheaply) scalable - with “big data” quadratic versus linear or loglinear is the difference between something that needs to be run “offline” (expensively preprocessed by a ton of computers over a long period) versus “online” (cheaply processed by fewer computers faster, possibly realtime responsive to the user, etc.).
    - Moore’s Law - it’s not about “faster” exactly, but rather “smaller.”
        - For decades it’s been possible to fit exponentially more transistors on a chip over time.
        - But counter to intuition, this doesn’t make BigO matter less - it matters more, because now we can (and want to, for science/$$$/etc.) tackle even larger problems where the gap between e.g. loglinear and quadratic is enormous.
        - Also Moore’s law is hitting limits - most recent processor performance innovation (~10 years) has been in multiple cores, which is a harder model to program for (some tools try to do it for you, maybe link?). And sooner or later we may hit fundamental physical limitations (the size of atoms and such), at least with silicon. Maybe mention Intel Tick/Tock, Germanium transistors, optical computing, etc.
    - Quantum computing - huge topic, may just link this (15 minute TEDx talk by Scott Aaronson on “What Quantum Computing Isn’t”): https://www.youtube.com/watch?v=JvIbrDR1G_c moral of the story - if quantum computing works it makes a very particular subset of problems more tractable, but it's not a magic ""solve all hard problems"" tool","Solicit questions and either review any past algorithm material or provide more details/resources for future directions (e.g. quantum computing, distributed programming, etc.).","Continue the ""I do"" as a discussion.","Read the Knapsack problem: https://github.com/LambdaSchool/knapsack

Don't write code yet! Think about, and sketch with pseudocode or diagrams, how you would go about solving this problem algorithmically.",,,,,,,,,,,,,1,1,,2
"understand JavaScript functions, why we use them, and be able to write correct function syntax.",,,"### Introduction to Functions

Now that we have the basics of JavaScript down, data types, conditional statements, and variables, we need functions to compute them, change them, and do something with them. We can think of functions as small computer programs. Functions are required to get our code to ‘run’ in JavaScript. Although you may not realize it, you have been using functions this entire time. Functions allow us to write code that will be used over and over again, keeping our code `DRY`. As such, functions will often times take input and give output, although that is not always required. Functions also have their own ‘scope’, in which we can assign a variable within a function that is not available anywhere else. 

#### How to Write a Function

There are three ways we can build a function. For this course, we will be focusing on just the first one. For our purposes right now, all three ways will act the same.


```javascript
    function myFunc() {}
    const anotherFunc = function () {};
    const yetAnother = () => {};
```

We will be using the first way in this lesson, and talk about the other ways in future lessons. 

### Anatomy of a Function

```javascript
    function myFunc() {}
```

A function will start with the `function` keyword. This tells whatever is running your program that what follows is a function and to treat it as such. After that comes the name of the function. We like to give functions names that describe what they do. Then comes an open and a close parenthesis. And finally, open and close brackets. In between these brackets is where all of our function code will go.

```javascript
    function logsHello() {
        console.log('hello');
    }

    logsHello();
```

In this example, we declare a function `logsHello` and set it up to `console.log` `'hello'`. We can then see that in order to run this function, we need to write or invoke its name with the parentheses after it. This is the syntax to run a function. A function always needs parentheses to run.",,,,,,,,,,JS III: Functions,,Intro to Web Development,Precourse FSW,,0,,,0
write and call functions using arguments and parameters.,"Parameters and arguments allow us to pass data into functions and use this data within the function. In this objective, we will learn the difference between the two and how to use them. ",,"### Passing Data into Functions

As mentioned before, a big reason we use functions is code re-use. We are always looking for ways to keep our code `DRY` (Don't Repeat Yourself). Because of this, functions allow us to pass data into them for use inside the function. We can declare little function variables called `parameters` and pass that data in when we call the function (the data are then called `arguments`).

#### Parameters

A function parameter will represent the data we pass into a function, for use in the function. Essentially when we write a function we assign the data variable names, even without knowing what the data will be. We set these `variables` inside of the parentheses when we write the function. There is no limit to the amount of parameters we can include in a function, but each variable name must be separated by a comma. We can then use these `variables` within our function just as we would any other variable. 

```javascript
  function myFunc( parameter1, parameter2 ){
    // We can use parameter1 and parameter2 in this function just like a variable.
  }
```

#### Arguments

Once we have our parameters set up in our function, we can now pass data into the function. In order to do this, we will use the parentheses we write when we call the function. We call these pieces of data `arguments`. `arguments` can be ANY data type (string, number, Boolean, object, array, even other functions!). Unlike other languages, JavaScript does not require us to set the data type when we write the function, although you should make an effort to understand what type of data will be coming into the function (and if you are using pre-built functions, you should know what data type that function expects). 

To use an argument, just put the data in the function call parentheses like so:

```javascript
  function logsName(name){
    console.log(name);
  }

  logsName('Dan') // console.logs: Dan
  logsName('Diandra') // console.logs: Diandra
```

If you have more than one parameter, you will use more than one argument:

```javascript
  function logsSchool( School, descriptor ){
    console.log(`${School} ${descriptor}`);
  }

  logsSchool('Lambda', 'is Awesome!') // console.logs: Lambda is Awesome!
```

Arguments will always line up with parameters in order, so the first argument will be the first parameter, and etc.

If an argument is not given for a parameter, the parameter will be equal to `undefined`.",,,,,,,,,,JS III: Functions,,Intro to Web Development,Precourse FSW,,1,,,1
explain function scope and the return statement.,"In order to effectively use functions, we must be able to return some data from them. In order to return data from functions, we must understand function scope. ",,"### Scope 

Scope is defined as what variables we currently have access to and where. So far in this course, we have been working in `Global` scope, in that we can access any variable we have created, anywhere in our code. There are a couple different levels of scope: you may have heard of `block` level scope (used in `if` statements and `for` loops) in which a variable using either `let` or `const` is only available within the statement or loop. 

#### Function Level Scope

Functions have something similar, known as function scope. Function scope allows us to create variables inside of functions, that are essentially private to that function. We can not reach into a function from the outside and get access to these variables. But we are free to use these variables anywhere within our function. Conversely, we DO have access to variables outside of the function. It is a one-way street. Functions can reach out and grab variables outside of their scope, but we can not reach into a function to get a variable. 

```javascript
  const var1 = 'Lambda'

  function myFunc(){
    const var2 = 'School'
    console.log(var1) // Lambda
    console.log(var2) // School
  }

  console.log(var1) // Lambda
  console.log(var2) // undefined
```

#### The `return` Statement

We will not console.log everything that comes out of a function. Most likely we will want to return something. There is one way we can access data from within a function. In fact, it is the only way for us to get ANY data from a function, and that is to use the keyword `return`. Think of the return statement as the only way for data to escape a function. Nothing other than what is returned can be accessed outside of the function. Also note that when a function hits a return statement, the function immediately stops what it is doing and returns.

We can also assign the value of a return statement to another variable, and we will now have access to the data returned from the function. 

```function
  function addTwoNumbers( a, b ) {
    const sum = a + b;
    return sum;
    console.log('This will never be reached');
  }

  const newSum = addTwoNumbers( 1, 2 );
  console.log(sum) // undefined
  console.log(newSum) // 3;
```
* Note: We will never be able to have access to the actual variable created in the function. We will only have access to the data that variable was assigned to.
",,,,,,,,,,JS III: Functions,,Intro to Web Development,Precourse FSW,,1,,,1
explain the four principles of the 'this' keyword and demonstrate each explanation with an example of their uses,"Because JavaScript is both an Object Oriented and Functional Programming language, it has some very interesting concepts built into it.

The this keyword is a very important part of the JavaScript language. Understanding its use cases and having the ability to use it properly will shape your understanding of the language and one of the commonly misused features.

To understand `this` you can consider the following bullet points.
* You can think of this, as a Pointer to an object. 
*For example*: you can use the this keyword to reference an object without having to refer to that object's name.",,"Think about the 'this' keyword as it pertains to it's uses in the english language. Let's imagine for a second that your friend has invited you over to his/her house for dinner, and abruptly mentions: ""I don't like this"". What are you going to do as a host? Well you might look at your friend to discover that he/she is pointing at something, you might look around the room and find that you cat is scratching at your friend's leg. The idea here is that is impossible to know what your friend doesn't like with out some context.

Thus, it is the same with the 'this' keyword. When discovering what 'this' points to, it is impossible to know without some kind of execution context, or, where a function is being called.

The first place to start with the this keyword is to understand not how a function is being called, but 'where'. If you can discover the context in which the function being called is executed, you'll have a clue as to what the 'this' keyword is pointing to.

There are four rules to this discovery. And they all have to do with where an object is bound. Remember, JavaScript has a global object (or execution context) that exists wherever JavaScript lives. In the browser this is called `window` and in node it's called `global/console`. Either way, JavaScript lives inside of a context. Go ahead and try this out in your Chrome web browser.

Open up your console, and type in `window` and see what you get. That GIANT object that was just printed out, is JavaScript. And Chrome has an engine built in that can run that object and execute features of the JavaScript language from within it.

### Principle 1: **Window/Global Object Binding**
* When in the global scope, the value of ""this"" will be the window/console Object;

```javascript
function sayName(name) {
  console.log(this);
  return name;
}
sayName(""D'Artagnan"");
```

### Principle 2: **Implicit Binding** 
* Whenever a function is called by a preceding dot, the object before that dot is this.

```javascript
const myObj = {
  greeting: 'Hello',
  sayHello: function(name) {
    console.log(`${this.greeting} my name is ${name}`);
    console.log(this);
  }
};
myObj.sayHello('Ryan');
```
This principle is one of the most commonly used applications of the `this` keyword. Here is another example for use to play with. 

```javascript
const sayNameFunc = obj => {
  obj.sayName = function() {
    console.log(`Hello my name is ${this.name}`);
    console.log(this);
  };
};
const me = { name: 'Ryan' };
const you = { name: 'Freddy' };
sayNameFunc(me);
sayNameFunc(you);

// Invoke Methods on our objects
me.sayName();
you.sayName();
```

In this previous example, You see that we have a function that receives an object as an argument. Depending on the object being passed in, we get a different context for `this` so when we log out the `this keyword` we get a different object each time it's run.

### Principle 3: **New binding**

* Whenever a constructor function is used, this refers to the specific instance of the object that is created and returned by the constructor function.

This Principle is a doozy. Because we have to learn about `constructor functions` here. Don't worry if a lot of this stuff goes over your head, be a sponge right now. Absorb as much of this as you can and we cover `constructors` in depth tomorrow. SO be at ease :)

Simply put: A constructor function is a function that returns an object. It's an object creator. We use them a lot in JavaScript and they lend themselves to a paradigm called: 'Object Oriented Programming'. CordialPerson will be a function that creates an object for us. When we call it we have to use the `new` keyword.

```javascript
function CordialPerson(greeter) {
  this.greeting = 'Hello ';
  this.greeter = greeter;
  this.speak = function() {
    console.log(this.greeting + this.greeter);
    console.log(this);
  };
}

const jerry = new CordialPerson('Newman');
const newman = new CordialPerson('Jerry');

jerry.speak();
newman.speak();
```

### Principle 4: **Explicit binding**

* Whenever JavaScript’s call or apply method is used, `this` is explicitly defined.

Taking the above object oriented approach we can discover that we can override what the `CordialPerson` constructor objects get set to. By calling them `explicitly` with a new context using `.call` and `.apply`

jerry.speak.call(newman);
newman.speak.apply(jerry);",Lets build out a couple of `constructor` `classes` to show you how `this` can be applied in the `classical` sense. ,"Complete this simple repl.it assignment:
https://repl.it/@dfrehner1/Practice-Explicit-binding",RivFFKFbpXo,http://youtube.com/watch?v=RivFFKFbpXo,https://www.youtube.com/embed/RivFFKFbpXo,,WTF is `this`,When not to use arrow functions,,JavaScript III,,JavaScript Fundamentals,Full Stack Web Development Core,,1,1,1,3
describe the different data types and how they are used. ,,,,,,,,,,,,,,,,,,0,,,0
use arrays to store and access data.,"Arrays allow us to group and store data together. Usually this data is related, but that is not a requirement. Arrays give us the ability to pass collections of data around as a single variable. ",,"### Introduction to Arrays

In the first JavaScript lesson, we discussed the 3 basic data types (strings, numbers, and Booleans), and how to assign those data types to variables. We discussed how a variable can only point to a single string, number, or Boolean. In many cases, though, we want to be able to point to a collection of data types. For example, what if we wanted to keep track of every student's name in this class using a single variable, `studentsNames`. We can do that using Arrays. We can think of arrays as storage containers for collections of data. Building an array is simple: declare a variable and set it to []. We can then add however many strings, numbers, or Booleans we want to the container (comma separated), and access those items whenever we want.

```javascript
    const studentsNames = ['Dan', 'Maria', 'Sara', 'Raj'];
```

#### .length

Just like the String data type which has a built-in `.length` method, the array also has a built-in `.length` method. In fact, the array has a lot of useful built-in methods (we will be discussing those in later lessons). Just as string `.length` counts the characters, array `.length` will return the number of items in an array:

```javascript
    const studentsNames = ['Dan', 'Maria', 'Sara', 'Raj'];

    console.log(studentNames.length);  // 4
```

### Accessing Items in an Array

We can access an item at any time in an array, we just need to call the item by its position in the array. Items are given a numerical position (index) according to where it is in the array, in order. An array's numerical order ALWAYS starts at 0, so the first item is in the 0 index, the second in the 1 index, the third in the 2, and so on (this can be tricky at first, but just remember arrays always start at 0). 

```javascript
    const studentsNames = ['Dan', 'Maria', 'Sara', 'Raj'];
                           0       1        2      3
```

In order to access the item, we will type the name or the array variable, followed by brackets containing the numerical assignment.

```javascript
    const studentsNames = ['Dan', 'Maria', 'Sara', 'Raj'];

    console.log(studentNames[1]);  // 'Maria'
```

To dynamically access the last item in the array, we will use the `.length` method. In our `studentsNames` array, the length is 4. We know the first item is always going to be 0, and every item after is shifted over one number. So in our example, the last item has an index of 3. Using our length property we will show how it is done when we don't know the number of items in an array:

```javascript
    const studentsNames = ['Dan', 'Maria', 'Sara', ... ,'Raj'];

    console.log(studentNames[studentNames.length - 1]);  // 'Raj'
```

### Assignment

We can assign and reassign any index in the array using the bracket/index and an =. 

```javascript
    const studentsNames = ['Dan', 'Maria', 'Sara', 'Raj'];

    studentNames[0] = 'Ryan';

    console.log(studentNames);  // ['Ryan', 'Maria', 'Sara', 'Raj']
```
### .push & .pop

Two more very useful built-in array methods are `.push` and `.pop`. These methods refer to the adding and removing of items from the array after its initial declaration.

`.push` adds an item to the end of the array, incrementing its length by 1. (`.push` returns the new length)

```javascript
    const studentsNames = ['Dan', 'Maria', 'Sara', 'Raj'];

    studentNames.push('Ryan');

    console.log(studentNames);  // ['Dan', 'Maria', 'Sara', 'Raj', 'Ryan']
```

`.pop` removes the last item in the array, decrementing the length by 1. (`.pop` returns the ""popped"" item)

```javascript
    const studentsNames = ['Dan', 'Maria', 'Sara', 'Raj'];

    studentNames.pop();

    console.log(studentNames);  // ['Dan', 'Maria', 'Sara']
```

### .unshift & .shift

`.unshift` and `.shift` are exactly like `.push` and `.pop`, except they operate on the first item in the array. `.unshift(item)` will put a new item in the first position of the array, and `.shift()` will remove the first item in the array.

```javascript
    const studentsNames = ['Dan', 'Maria', 'Sara', 'Raj'];

    studentNames.unshift('Ryan');

    console.log(studentNames);  // ['Ryan', 'Dan', 'Maria', 'Sara', 'Raj']

    studentNames.shift();

    console.log(studentNames);  // ['Dan', 'Maria', 'Sara', 'Raj']
```

### Notes on Arrays

Because JavaScript is not a strongly typed language, arrays do not need to be typed either. Arrays in JavaScript can contain multiple different data types in the same array. ",,,,,,,,,,JS IV: Data Structures,,Intro to Web Development,Precourse FSW,,1,,,1
use objects to store and access data,Objects are the heart of the JavaScript language. Objects allow us to store lots of different data about a single thing. Understanding Objects will lead you to a greater understanding of the JavaScript language as a whole. ,,"### Introduction to Objects

In the last lesson, we introduced Arrays. Arrays are containers that hold collections of data. In this lesson, we will introduce another data container, the Object. Objects and arrays are similar in some ways and very different in others. Where arrays hold multiple items related to each other, Objects will hold a lot of information about one thing. Objects are instantiated by using braces (`{}`). 

```javascript
    const newObj = {};
```

### Key:Value pairs

Unlike arrays that have index valued items, objects use a concept called key:value pairs. The key is the identifier and the value is the value we want to save to that key. The syntax is ""key: value"". Objects can hold many key:value pairs. They must be separated by a comma (no semi-colons inside of an object!). Keys are unique in an object. There can be only one key of that name. Although, multiple keys can have the same value. Values can be any JavaScript type, string, number, Boolean, array, function or even another object. In this demo, we will create a user object.

```javascript
    const user = {
        username: 'dan.frehner',
        password: 'abc123',
        lovesJavascript: true,
        favoriteNumber: 42,
    };
```

### Accessing Values

Once we have key:value pairs, we can access those values by calling the object name and the key. There are two different ways to do this, dot notation and bracket notation. 

With dot notation, we can just call the object name, a dot, and the key name, just as we call the `.length` property on an array (hint: the length property is a key:value pair):

```javascript
    user.lovesJavascript; // true
    user.username;        // dan.frehner
```

Bracket notation is just like calling an item on an array, although with brackets we MUST use a string or number, or variable pointing to a string or number. Each key can be called by wrapping it with quotes:

```javascript
    const passString = 'password';
    user['lovesJavascript']; // true
    user['username'];        // dan.frehner
    user[passString];        // abc123
```

In the wild, you will see brackets almost always being used with variables. 

### Assigning Values

Assigning values works just like accessing them. We can assign them when we create the object, with dot notation, or with bracket notation:

```javascript
    const newUser = {
        isNew: true,
    }

    const loveJSString = 'lovesJavascript';

    newUser.username = 'new.username';
    newUser['password'] = '12345';
    newUser[loveJSString] = true;
```

## Removing Properties

If we want to remove a property, we can do it using the `delete` keyword:

```javascript
    const newObject = {
        removeThisProperty: true,
    };

    delete newObject.removeThisProperty;
```

It is rare we will see the use of the `delete` keyword. Many consider it as best practice to set the value of a keyword to `undefined`. It will be up to you when the time comes.

## Methods

In objects, values can be set to functions. Functions saved on an object are called methods. We have used plenty of methods so far throughout this course. `.length`, `.push`, `.pop`, etc., are all methods. We can set a key to a name, and the value to a function. Just like other times we call methods, we will call this method using dot notation and trailing parentheses (note: we can call a method with arguments just as we would a normal function):

```javascript
    const newObject = {
        sayHiMethod: function() {
            console.log('Hi Everyone!');
        },
    }

    newObject.sayHiMethod(); // Hi Everyone!
```

## for...in Loops

Sometimes we want to iterate over each key:value pair in our object. With arrays, we used a standard for loop and an index number variable. Objects do not contain numerical indexes so the standard loop will not work for objects. JavaScript has a second type of for loop built in called the ""for...in"" loop. Its syntax is slightly different.. It starts the same but in the parentheses, we will declare a variable, the keyword `in`, and the name of the object. This will loop over each key in the object and finish when all of the keys have been iterated over. We can use this key, and bracket notation, in our for loop to access the value associated with that key.

```javascript
    const user = {
        username: 'dan.frehner',
        password: 'abc123',
        lovesJavascript: true,
        favoriteNumber: 42,
    };

    for (let key in user){
        console.log(key);
        console.log(user[key]);
    }

    // username
    // 'dan.frehner'
    // password
    // 'abc123'
    // lovesJavascript
    // true
    // favoriteNumber
    // 42
```

## The 'this' Keyword

Objects have a self-referential keyword that may be applied in each object called `this`. When called inside of an object it is referring to that very object. `this` can be used to access other keys in the same object, and is especially useful in methods:

```javascript
    const user = {
        username: 'dan.frehner',
        password: 'abc123',
        lovesJavascript: true,
        favoriteNumber: 42,
        userSaysHi: function(){
            console.log( this.username + ' says hi!');
        },
    };

    user.usersaysHi(); // 'dan.frehner says hi!'
```

Note: the `this` keyword can sometimes be one of the more difficult topics in JavaScript. We are using it very basically here, but the topic gets much more complex very soon. 

## Objects in JavaScript

In this lesson, we learned what Objects are and the many ways to access values, call methods, and assign values. Many of these techniques looked very familiar, as if we had used them in virtually every aspect of our learnings so far. There is a pattern here, that is because EVERYTHING in JavaScript is an Object. Arrays are just objects with numerical keys, Strings are objects under the hood with built in methods, functions are actually objects with their own special properties, the entire JavaScript runtime is an object (`window` in a browser, or `global` in Node.js). The more you work with JavaScript, the more this will start to make sense to you. Just remember, everything is an object. ",,,,,,,,,,JS IV: Data Structures,,Intro to Web Development,Precourse FSW,,1,,,1
"understand the array methods: `forEach`, `map`, and `reduce`.","Arrays have dozens of powerful methods associated with them. Not only do these methods prove beneficial to students javascript knowledge, but they are also a great way for students to implement and use callback functions on real world code. ",,"Explain and implement each of the methods: `forEach`, `map`, and `reduce`.",Follow along as instructor demonstrates these concepts. ,Continue assignment JS-IV,,,,,,,,,,,,,1,1,,2
understand classes and the prototype object.,"Classes are the core concept behind OOP. Using classes helps keep our code DRY, and opens up many features of objects previously unknown to the students.

The `prototype` object offers javascript developers a way to keep memory management under control and allows for the reuse of methods across multiple object of the same class.",,"Using the pseudo-classical inheritance technique, explain and demonstrate what a class is in javascript, and how to implement them using the `new` keyword.

Explain and demonstrate what the prototype object is on each class and how to use it to store and reuse common methods. ",Follow along as instructor demonstrates these concepts. ,Complete assignment JS-IV,,,,,,,,,,,,,1,1,,2
"understand when to use classes, as well as write and use ES5 class syntax.","Like functions are to blocks of code, Classes allow us to keep our code DRY by reusing certain object creation code. Classes are the core concept in learning advanced Javascript (frameworks, etc.), and learning about them early will help you in understand more advanced concepts as well as the Javascript language as a whole. ",,"## Classes

Often times when we create an object, we are creating a template. Rather than copy that template over and over again, Javascript gives us access to what we call a constructor or `class`. Classes share much of the same functionality as regular objects, but also expands on that functionality greatly. Classes are useful for creating many objects that share some of the same properties and methods (such as users on a website).

### Class and Pseudo Classical Instantiation

If you have experience in an Object Oriented language (such as Java or C#) you are probably familiar with the concept of classes. While Javascript does not provide a 'true' class system, there is something very familiar. For the sake of argument we will call our class objects 'classes'. It is instantiated in a Pseudo Classical way, using the `new` keyword, and can take arguments. 

In this example we will be creating a `Cat` class. Convention for classes is to give the name of anything that can be instantiated with the `new` keyword an uppercase name. When we use the `new` keyword, Javascript does some great behind the scenes work for us and creates and returns an object automatically.

```javascript
    function Cat(name) {
        // the new operator creates an object, 'this'
        this.name = name;
        this.meows = function() {
            return 'My name is ' + this.name + ' ...Meow!';
        }
        // return the object 'this'
    }

    const sam = new Cat('Sam');
    const kitty = new Cat('Kitty');
    console.log(sam.meows()); // 'My name is Sam ...Meow!'
    console.log(kitty.meows()); // 'My name is Kitty ...Meow!'

``` 

### `this` in Classes

The `this` keyword can start to become very confusing when we start using it in classes. In the last example we use it in the meows method. A good rule of thumb if you are not certain what `this` is referring to, is to look at where the method is called, and the object to the left of the 'dot'. That is the object `this` refers to. ",,,,,,,,,,JS V: Classes,,Intro to Web Development,Precourse FSW,,1,,,1
understand when to use Javascript classes,,,,,,,,,,,,,,,,,,0,,,0
write methods on a class.,,,,,,,,,,,,,,,,,,0,,,0
"explain the prototype, how and why we use it. ","Prototype is an advanced concept in Javascript, but it is important to start to learn what it is early on. ",,"## Prototype

Creating functions are expensive (in a computer memory way) and each time we create a new class object with methods we are recreating those methods in memory. You can imagine if you are creating thousands of class objects from a class with dozens of methods on it, the memory will add up quickly (20,000-40,000 methods). Classes have a unique way of setting a method once and giving every object of that class access to those methods. This is called the `prototype`. Each class has a prototype property, which we can then set methods on:

```javascript
    function User(name, github) {
        this.name = name;
        this.github = github;
    }

    User.prototype.introduction = function(){
        return 'My name is ' + this.name + ', my github handle is ' + this.github + '.';
    }

    let dan = new User('Dan', 'tetondan');
    let riley = new User('Riley', 'rileyriley');

    console.log(dan.introduction()); // My name is Dan, my github handle is tetondan.
    console.log(riley.introduction()); // My name is Riley, my github handle is rileyriley.

``` 
Protoype methods DO have access to the `this` keyword, and just as before, it will always point to the object (left of the dot) that is calling it. ",,,,,,,,,,JS V: Classes,,Intro to Web Development,Precourse FSW,,1,,,1
"describe what graphs are, describe their components, what they're useful for, and can draw graphs of different types","Our world is comprised of countless networks. When trying to represent networks or sets of connected objects, computer scientists will often use graphs.  A graph is simply a set of linked data, represented by vertices and edges. There are very loose requirements regarding how vertices can be linked together, which allows us to use graphs to represent and study many different types of scenarios.",,"### What Are Graphs?

Graphs are collections of related data. They're like trees, except
connections can be made from any node to any other node, even forming loops. Using this definition, all trees are graphs, but not all graphs are trees.

### Components of Graphs

The nodes in a graph are called _vertexes_ (or _vertices_ or _verts_),
and the connections between the verts are called _edges_.

And edge denotes a relationship or linkage between the two verts.

### What can they represent?

Graphs can represent any kind of multiway relational data.

This could be a collection of cities and linking roads.

It could be a collection of computers on a network.

It could be a population of people know know each other and [Kevin
Bacon](https://en.wikipedia.org/wiki/Six_Degrees_of_Kevin_Bacon).

It could represent trade relationships between nations.

And so on.


### Types of Graphs

#### Directed/Undirected Graphs

If the edges are ""one way"" (have an arrow), the graph is said to be a
_directed graph_. If there are no arrows, the edges are bidirectional
and the graph is an _undirected_ graph.

#### Cyclic/Acyclic Graphs

If a cycle can be formed (e.g. you can follow the edges and arrive again
at an already-visited vert), the graph is _cyclic_. Otherwise it is
_acyclic_

#### Weighted Graphs

Graphs with values (_weights_) associated with the edges are called
_weighted graphs_.

The meaning of the weight is dependent on the type of graph. A graph of
road network segments might have weight represent the length of the
road. The higher the total weight of a route on the graph, the longer
the trip is. The weights can be used to help decide if a particular
route should be chosen over another.

Weights can be further modified. For example, if one were building a
bicycle map, roads with bad car traffic or very steep uphills could be
given unnaturally large weights so a routing algorithm would be unlikely
to take them. (This is how Google Maps avoids freeways when you ask it
for walking directions.)

#### Directed Acyclic Graphs (DAGs)

A _directed acyclic graph_ (_DAG_) has a number of applications. From
[Wikipedia](https://en.wikipedia.org/wiki/Directed_acyclic_graph):

> DAGs can model many different kinds of information. A spreadsheet can
> be modeled as a DAG, with a vertex for each cell and an edge whenever
> the formula in one cell uses the value from another; a topological
> ordering of this DAG can be used to update all cell values when the
> spreadsheet is changed. Similarly, topological orderings of DAGs can
> be used to order the compilation operations in a makefile. The program
> evaluation and review technique uses DAGs to model the milestones and
> activities of large human projects, and schedule these projects to use
> as little total time as possible. Combinational logic blocks in
> electronic circuit design, and the operations in dataflow programming
> languages, involve acyclic networks of processing elements. DAGs can
> also represent collections of events and their influence on each
> other, either in a probabilistic structure such as a Bayesian network
> or as a record of historical data such as family trees or the version
> histories of distributed revision control systems. DAGs can also be
> used as a compact representation of sequence data, such as the
> directed acyclic word graph representation of a collection of strings,
> or the binary decision diagram representation of sequences of binary
> choices.

It's notable that git uses a DAG to represent commits. A commit can have a child
commit, or more than one child commit (in the case of a branch). A child could
come from one parent commit, or from two (in the case of a merge). But there's
no way to go back and form a repeating loop in the git commit hierarchy.",Instructor will demonstrate examples of different types of graphs and terminology.,"Draw examples of the following:

* Undirected graph of 4 verts.
* Directed graph of 5 verts.
* Cyclic directed graph of 6 verts.
* DAG of 7 verts.",Etva3hOjGMU,http://youtube.com/watch?v=Etva3hOjGMU,https://www.youtube.com/embed/Etva3hOjGMU,https://youtu.be/l2ei-74jviQ,"Article: A Gentle Introduction To Graph Theory,Graphs Intro precourse video",,,Graphs I,,Graphs,"Computer Science, DS - Computer Science",,1,1,1,3
"describe what breadth-first search (BFS) is and its uses, and can manually run a sample BFS","Breadth-first search is one of the more famous graph algorithms. You will learn about the uses of this algorithm and how it is implemented.

",,"### Overview

When searching a graph, one of the approaches is called _breadth first
search_. This explores the graph outward in rings of ever increasing
distance from the starting vertex. 

The algorithm never attempts to explore a vert that it either has
explored or is exploring.

For example, when starting from the upper left, the numbers on this
graph show a vertex visitation order in a BFS:

![BFS visit order](https://github.com/LambdaSchool/Graphs/raw/master/objectives/breadth-first-search/img/bfs-visit-order.png)

The bold lines show with edges were followed. (The thin edges were not
followed since their destination nodes had already been visited.)

(Of course, the exact order will vary depending on which branches get
taken first and which vertex is the starting vertex.)

### Uses of BFS

* Pathfinding, Routing 
* Find neighbor nodes in a P2P network like Bittorrent 
* Web crawlers 
* Finding people n connections away on a social site 
* Find neighboring locations on graph 
* Broadcasting in a network 
* Cycle detection in a graph 
* Finding [Connected Components](https://en.wikipedia.org/wiki/Connected_component_(graph_theory))
* Solving a number of theoretical graph problems 

### Coloring Vertexes

As the graph is explored, it's useful to color verts as you arrive at
them and as you leave them behind as ""already searched"".

Commonly, unvisited verts are white, verts whose neighbors are being
explored are gray, and verts with no unexplored neighbors are black.


### Keeping Track of What We Need to Explore

In BFS, it's useful to track which nodes we need to follow up on. For
example, in the diagram above, when we get to node 2, we need to explore
node 3 and 4 in the future, in order.

We can track that by adding neighbors to a _queue_, and then exploring
the verts in the queue.


### Pseudocode for BFS

```pseudocode
BFS(graph, startVert):
  for v of graph.vertexes:
    v.color = white

  startVert.color = gray
  queue.enqueue(startVert)

  while !queue.isEmpty():
    u = queue[0]  // Peek at head of queue, but do not dequeue!

    for v of u.neighbors:
      if v.color == white:
        v.color = gray
        queue.enqueue(v)

    queue.dequeue()
    u.color = black
```",Instructor will walk through how the algorithm works and a number of examples.,"* Draw a random graph and show a vertex visitation order for BFS.

* One more for good measure.",BK_8-XVp5XA,http://youtube.com/watch?v=BK_8-XVp5XA,https://www.youtube.com/embed/BK_8-XVp5XA,https://youtu.be/eZc86jiEkuw,Graphs BFS precourse video,,,Graphs I,,Graphs,"Computer Science, DS - Computer Science",,1,1,1,3
"describe a depth-first search and its uses, and can manually run a DFS on a graph","While BFS can be a good strategy for searching a graph, there are some scenarios where BFS is inefficient (for example, if the target node is near the bottom of a tree). To optimize the performance of your applications, it is important to understand when using depth-first search (DFS) will produce better results.

",,"When searching a graph, one of the approaches is called _depth first
search_. This ""dives"" ""down"" the graph as far as it can before needing
to backtrack and explore another branch.

The algorithm never attempts to explore a vert that it either has
explored or is exploring.

For example, when starting from the upper left, the numbers on this
graph show a vertex visitation order in a DFS:

![DFS visit order](https://github.com/LambdaSchool/Graphs/raw/master/objectives/depth-first-search/img/dfs-visit-order.png)

The bold lines show with edges were followed. (The thin edges were not
followed since their destination nodes had already been visited.)

(Of course, the exact order will vary depending on which branches get
taken first and which vertex is the starting vertex.)

### Applications of DFS

* Finding [Minimum Spanning Trees](https://en.wikipedia.org/wiki/Minimum_spanning_tree) of weighted graphs
* Path finding
* Detecting cycles in graphs
* [Topological sorting](https://en.wikipedia.org/wiki/Topological_sorting), useful for scheduling sequences of dependent jobs
* Solving and generating mazes


### Coloring Vertexes

As the graph is explored, it's useful to color verts as you arrive at
them and as you leave them behind as ""already searched"".

Commonly, unvisited verts are white, verts whose neighbors are being
explored are gray, and verts with no unexplored neighbors are black.


### Recursion

Since we want to pursue leads in the graph as far as we can, and then
""back up"" to an earlier branch point to explore that way, recursion is a
good approach to help ""remember"" where we left off.

Looking at it with pseudocode to make the recursion more apparent:

```pseudocode
explore(graph) {
    visit(this_vert);
    explore(remaining_graph);
}
```

### Pseudocode for DFS

```pseudocode
DFS(graph):
    for v of graph.verts:
        v.color = white
        v.parent = null

    for v of graph.verts:
        if v.color == white:
            DFS_visit(v)

DFS_visit(v):
    v.color = gray

    for neighbor of v.adjacent_nodes:
        if neighbor.color == white:
            neighbor.parent = v
            DFS_visit(neighbor)

    v.color = black

```",Instructor will walk through how the algorithm works and a number of examples.,"* Build a random graph and show a vertex visitation order for DFS.

* One more for good measure.",VTLI7l-Ah-8,http://youtube.com/watch?v=VTLI7l-Ah-8,https://www.youtube.com/embed/VTLI7l-Ah-8,https://youtu.be/-PcKFyVxR4Y,Graphs DFS precourse video,,,Graphs I,,Graphs,"Computer Science, DS - Computer Science",,1,1,1,3
"describe what connected components are on a graph and their uses, and can implement an algorithm for finding connected components","When studying the relationships of objects in our graphs, it is often useful to examine which specific pieces are connected to each other. In very large graphs, there will often be subgraphs of nodes that are connected to each other via one or more edges, but not necessarily the rest of the graph. These are referred to as _connected components_ of the graph.

Here's an example of a graph with 3 connected components:

![Connected Components](https://upload.wikimedia.org/wikipedia/commons/thumb/8/85/Pseudoforest.svg/540px-Pseudoforest.svg.png)

",zGW6XTkeEFU,"### Usefulness of Connected Components

There are a lot of theoretical uses of connected components that are beyond the scope of the course. But on the more practical front, here are some potential uses:

* Look for people you might know in a social network.
* Predict the spread of zombie apocalypse or other disease within social groups.
* Determining which parts of a computer network are reachable from another.
* Finding clusters of related information.

### Finding Connected Components

If you have a BFS or DFS, finding connected components is pretty
straightforward if you modify your search to return a list of verts
visited. (Also modify the search to not always color the verts white at
the start.)

```pseudocode
connected_components = [];

for v in graph.vertexes:
  v.color = white

for v in graph.vertexes:
  if v.color == white:
    component = bfs(v)
	connected_components.push(component);
```",Instructor will discuss what connected componets are and their uses.,Draw a graph of 8 vertexes with 3 connected components.,zGW6XTkeEFU,http://youtube.com/watch?v=zGW6XTkeEFU,https://www.youtube.com/embed/zGW6XTkeEFU,https://youtu.be/EsyLzGWlsA8,Graphs Connected Components precourse video,,,Graphs I,,Graphs,"Computer Science, DS - Computer Science",,1,1,1,3
describe how HTML canvas and screen buffers work,"### Objectives

* Learn how screen buffers encode RGB information
* Learn How HTML `canvas` works
* Implement a routine to get an RGB pixel from the canvas
* Implement a routine to put an RGB pixel on the canvas

### The Screen Buffer

The *Screen Buffer* is a fancy way of saying ""big array that holds pixel
information"". Screen buffers hold their data in a variety of different
formats, but JavaScript's `<canvas>` element exposes them in a single,
one-dimensional array, where each set of 4 sequential elements
represents a Red, Green, Blue, and Alpha quad.

Each of the Red, Green, Blue, and Alpha values are one byte, with 0 (or
0x00 hex) representing ""no intensity"", and 255 (0xff) representing ""full
intensity"".

* *Alpha* is the transparency of a pixel. `0` is completely transparent. `255`
  is completely opaque. Images are usually completely `255` for every pixel's
  alpha channel.


### Getting the Pixel Data From A Canvas

If you have a reference to the canvas in JS, you can get the context and then
some image data that is the screen buffer:

```html
<canvas id=""my-canvas""></canvas>
```

```javascript
let canvas = document.getElementById('my-canvas');
let ctx = canvas.getContext('2d');

let imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);

// Here is the screen buffer array we can manipulate:

let screenBuffer = imageData.data;
```

> The _context_ is the current drawing state of the canvas. It includes all the
> state variables (width of current drawing line, fill color, etc.) as well as
> the functions necessary to manipulate the canvas.

Once you have the screen buffer, you can examine or set values within it
as you see fit. Once that's done, you can display the changed screen
buffer in the canvas:

```javascript
ctx.putImageData(imageData, 0, 0);
```


### Manipulating Pixel Values In the Screen Buffer

It's a little weird because the screen buffer in this case is a 1D array, but
clearly the screen is a 2D thing. So how do we get the information to and from
the buffer?

In this buffer, the data is stored a rows at a time. The first row is first in
the array, and then the second row is right after that, and so on. That means
the start of the 3rd row is in position `3 × width` where `width` is the width
of the buffer in pixels.

Furthermore, since the rows are simply stored in their regular order, the `x`
coordinate can just be added on to that result. As such, to get the index in the
screen buffer array for coordinates `x`, `y`, you just need:

```javascript
// Generic non-canvas way of going to a 1D array index from 2D coordinates:

index = y * width + x;
```

With `canvas`, there's one small catch: we mentioned earlier that each
pixel is actually 4 array elements, not one, so we have to actually
multiply our result by 4:

```javascript
// HTML/JS <canvas> way of getting RGB values from screen buffer

let index = (y * width + x) * 4; // 4 elements per pixel

let red   = buffer[index + 0];
let green = buffer[index + 1];
let blue  = buffer[index + 2];
let alpha = buffer[index + 3];
```

You can also set them in the same way, and the call `putImageData()` to display the result:

```javascript
// Set the pixel at 10,20 to pure red and display on the canvas:

let buffer = imageData.data; // Obtained from getImageData()

let x = 10, y = 20;
let index = (y * width + x) * 4;

buffer[index + 0] = 0xff; // Red: 0xff == 255, full intensity
buffer[index + 1] = 0x00; // Green: zero intensity
buffer[index + 2] = 0x00; // Blue: zero intensity
buffer[index + 3] = 0xff; // Alpha: 0xff == 255, fully opaque

ctx.putImageData(imageData, 0, 0);
```

### References

* [Canvas API](https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API)
* [Canvas tutorial](https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial)
",TODO: video,"Instructor will go over HTML canvas, pixel manipulation, and using canvas with React.","Implement Function to Get Pixel Value

```javascript
/**
 * Get a pixel value from imageData
 *
 * @param imageData HTML canvas imagedata from getImageData()
 * @param x X coordinate to get pixels from
 * @param y Y coordinate to get pixels from
 * @return Array [R,G,B,A] for the pixel in question, or null if out of bounds
 */
function getPixel(imageData, x, y) {
    const w = imageData.width; // Conveniently the width is here
    const h = imageData.height;

    if (x < 0 || x >= w || y < 0 || y >= h) {
        // Out of bounds
        return null;
    }

    // Compute index within the array
    const index = (w * y + x) * 4;

    // Return a copy of the R, G, B, and A elements
    return imageData.data.slice(index, index + 4);
}

// Example Usage

const canvas = document.querySelector('#my-canvas');
const ctx = canvas.getContext('2d');
const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);

const pixelRGBA = getPixel(imageData, 10, 10);

console.log(pixelRGBA);
```","Implement Function to Put (Set) Pixel Value

Implement the same as above, allowing the setting of an RGBA pixel.",,,,https://youtu.be/YMxLxWhiTpM,Precourse: HTML canvas pixel manipulation,,,Cellular Automata,,,,,1,1,,2
animate a canvas in React with requestAnimationFrame(),"### Objectives

* Implement a React canvas app with animated canvas
* Animate a pixel across the screen

### React and Animated Canvases

How do you animate a React component?

We know the component has a lifecycle and a `render()` method and it gets
created when it is rendered or the state changes.

But what if we want to update the component several times per second?

#### `requestAnimationFrame()`

There's a way in Javascript to get ""frame-by-frame"" callbacks. That is, once per
""frame"", however long that is, you'll get a callback. It'll probably be ~30
times per second. This makes it very suitable for doing animations, as the name
suggests.

For every one time you call `requestAnimationFrame()`, your given callback will
be called. It's really common for the callback to call `requestAnimationFrame()`
to get another frame as soon as possible.

```javascript
let prevTimestamp = null;

function onAnimFrame(timestamp) {

    // Request another animation frame for the future
    requestAnimationFrame(onAnimFrame);

    // If we haven't yet stored the previous time, fake it
    if (prevTimestamp === null) {
        prevTimestamp = timestamp - 30; // milliseconds
    }

    // Compute how long it took between frames
    const elapsed = timestamp - prevTimestamp

    // Remember this for next frame
    prevTimestamp = timestamp;

    console.log(`Current time: ${timestamp} ms, frame time: ${elapsed} ms`);

    // TODO: Do animation stuff to the canvas
}

// Request the first animation frame to kick things off
requestAnimationFrame(onAnimFrame);
```

We'll be using this to change the contents in the canvas within the React
component.


#### Canvas in the React Component

Having a canvas in a react component is pretty easy:

```javascript
class MyComponent extends Component {

    // ...

    /**
     * Render the canvas
     */
    render() {
        return <canvas ref=""canvas"" width={this.props.width} height={this.props.height} />
    }

    // ...
}
```

What's that weird `ref=""canvas""` bit?

Turns out we can use that later in JS code to get a reference to the canvas that
was rendered. This will be very useful when we actually want to draw on it.

Inside the `requestAnimationFrame()` handler, you can refer to the canvas with:

```javascript
const canvas = this.refs.canvas; // refers to the ref attribute in render()

const context = canvas.getContext('2d'); // etc.
```


#### Canvas in React with `requestAnimationFrame()`

How do we merge these two things together to get animation?

We need to call `requestAnimationFrame()` one time to kick off the process, and
then we need to call it from our callback if we're still showing the component.

Fortunately, in the [React component
lifecycle](https://reactjs.org/docs/react-component.html), there are a couple
handlers we can make use of to control the process.

We'll request an initial animation frame in the `componentDidMount()` handler,
and we'll stop animating in the `componentWillUnmount()` handler.

All `componentDidMount()` needs to do is call `requestAnimationFrame()`. But
since the decision to keep animating or not is made in the callback,
`componentWillUnmount()` just needs to set a flag to stop animating.",TODO: video,,"Implement a React App with Animated Canvas

```javascript
class MyComponent extends Component {

    /**
     * Constructor
     */
    constructor(props) {
        super(props);

        this.continueAnimation = true;
    }

    /**
     * After the component has mounted
     */
    componentDidMount() {
        // Request initial animation frame
        requestAnimationFrame((timestamp) => { this.onAnimFrame(timestamp); });
    }

    /**
     * When the component is about to unmount
     */
    componentWillUnmount() {
        // Stop animating
        this.continueAnimation = false;
    }

    /**
     * Called every frame of animation
     */
    onAnimFrame(timestamp) {
        // If desired, request another anim frame for later
        if (this.continueAnimation) {
            requestAnimationFrame((timestamp) => { this.onAnimFrame(timestamp); });
        }

        // TODO animate stuff
    }

    /**
     * Render the canvas
     */
    render() {
        return <canvas ref=""canvas"" width={this.props.width} height={this.props.height} />
    }
}
```","Animate a Pixel Across the Screen

Using the above code, move a pixel repeatedly across the canvas.

Using math, make it take exactly 1 second for the pixel to move across the canvas.",,,,https://youtu.be/h2nZkipkegA,Animate a canvas with React and requestAnimationFrame(),,,Cellular Automata,,,,,0,1,,1
"describe what a cellular automaton is and how they are useful, describe the rules to Conway's Game of Life and how the Game is Turing-complete","### Objectives

* Learn what cellular automata are and how they are useful in real life
* Learn what the rules of the Game of Life are
* Learn about double buffering and why it is useful
* Learn how Conway's life is Turing Complete
* Explore Life Examples website

### Cellular Automata

A _cellular automaton_ (plural: cellular automata, abbreviated _CA_) is a
program that operates on data typically stored in a 2D grid. (1D, 3D and _n_-D
cellular automata run on lines, cubes, etc.)

A simple set of rules describes how the value in a cell on the grid changes over
time, often as the result of the states of that cell's neighbors.

> Sometimes neighbors includes the 4 orthogonally adjacent cells; sometimes it
> includes all 8 surrounding cells including diagonals.

Each round of the simulation examines the current state of the grid, and then
produces an entirely new grid consisting of the old state. (Remember the
discussion about double buffers earlier--we don't want to modify the same grid
we're examining, lest we munge future results.)

This new grid becomes the ""current"" state of the simulation, and the process
repeats. Each new grid is referred to as a _generation_.

The beautiful thing about cellular automata is that sometimes very complex
behavior can emerge from very simple rules.

Practically speaking, CAs have been used in biological and chemical simulation
and other areas of research, such as CA-based computer processors, and other
numeric techniques.

### The Game of Life

A very famous cellular automaton is John Conway's [Game of
Life](https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life).
app. This game is a class of discrete model known as a *[Cellular
Automaton](https://en.wikipedia.org/wiki/Cellular_automaton)*, abbreviated *CA*.

It's made up of a grid of cells (usually 2D, but can be any dimension)
that follow a simple set of rules from which complex behaviors can
emerge.

In the grid, below, white pixels are alive, and black pixels are dead.

![Conway's Life, many generations in](https://raw.githubusercontent.com/LambdaSchool/Conways-Life/master/objectives/ca-life/img/life.png)

In the Game of Life, these rules examine each cell of the grid. For each
cell, it counts that cell's eight neighbors (up, down, left, right, and
diagonals), and then act on that result.

* If the cell is alive **and** has 2 or 3 neighbors, then it remains
  alive. Else it dies.
* If the cell is dead **and** has exactly 3 neighbors, then it comes to
  life. Else if remains dead.

From those two rules, many types of ""creatures"" can be created that
[move around the
""landscape""](https://www.youtube.com/watch?v=28vxPvTDh4E).

Note: cells that are off the edge of the grid are typically assumed to
be dead. (In other cases, people sometimes code it up to wrap around to
the far side.)

### Double Buffering

There's a technique that's commonly used in graphics programming called
*double buffering*. This is when we display one buffer to the user, but
do work on one that's hidden from sight. In this way, the user doesn't
see the buffer being generated, they only see the one that was
previously completed.

When we're done doing work on the hidden buffer, we *page flip* and show
the hidden buffer to the user. Then the previously-displayed buffer
becomes the new hidden buffer, and work begins again.

There are multiple benefits to this approach.

One is that the user doesn't see the work being progressively completed. From
their perspective, the work is suddenly done as soon as the page flips.

Another is that the program can use the previous buffer (i.e. the one that is
currently being displayed) as a source for material to perform calculations to
produce the next buffer. This is particularly beneficial where you need to
produce a completely new output based on the complete previous output. If you
were to only use a single buffer, you'd have to overwrite the pixels as you
went, and this might affect the outcome of the subsequent pixels in an
undesirable way.

And this is very useful when implementing a cellular automaton.

There will be two arrays of data for the automaton. One of them holds the data
that the user currently sees on the canvas. The other one is where the _next_
frame to be shown is being actively constructed.

After the new frame is constructed, the next from becomes the current frame, and
the current frame becomes the next frame. And the process repeats.

Also note that this approach is vaguely reminiscent of the Model and View in the
MVC pattern where the Model is manipulated then displayed by the View.

### Turing Completeness

We say a computing system is [_Turing
Complete_](https://en.wikipedia.org/wiki/Turing_completeness) if it is capable
of performing arbitrary, general purpose computation.

Using a construct in The Game of Life called a [glider
gun](https://en.wikipedia.org/wiki/Gun_(cellular_automaton)), it's possible to
build a rudimentary [NAND gate](https://en.wikipedia.org/wiki/NAND_gate) in the
Game of Life. While a NAND gate by itself isn't enough to be Turing Complete,
the ""infinite"" grid of The Game of Life allows you to use them (or any other
[functionally complete](https://en.wikipedia.org/wiki/Functional_completeness)
operator) to build any other type of logical ""circuitry"" and
[memory](https://en.wikipedia.org/wiki/Flip-flop_(electronics)), as well.

Anything computable can be computed in The Game of Life given a large enough
grid and enough time. Most people, however, find JavaScript to be a far easier
development medium.


### References

* [John Conway's Game of
Life](https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life)
* [`requestAnimationFrame()`](https://developer.mozilla.org/en-US/docs/Web/API/window/requestAnimationFrame)",,,Instructor will demonstrate Conway's Game of Life,"Explore The Game of Life

* [Edwin Martin's Implementation](https://bitstorm.org/gameoflife/): run the
  simulation to see what the Game looks like.

* [Explore patterns on LifeWiki](http://www.conwaylife.com/wiki/Category:Patterns)",,,,https://youtu.be/IHAJ94rrsug,Precourse: Conway's Game of Life,,,Cellular Automata,,,,,0,1,,1
"describe what closure is, how closure is created in a program and why it is important to understand closures in JavaScript","Closure is a big part of the JavaScript language and needs to be discussed through the lens of this statement ""What data do I currently have access to in my program"". JS Developers need to know how to access data from within a narrower scope. `Scope` is something that we will touch on later. But for now what you need to know is that `functions create their own scope`
","Closure is one of those concepts that is almost always ""over taught"". For this particular objective, I start very basic and build concepts on top of one another. 

","Let's look at the Window/Console in a browser/node environment. Type in `window` to your chrome console. This object is the `global scope` or context where JavaScript can live and be executed.

There are two types of scope in javascript, `Global Vs. Local` and that this is important to understand in terms of a computer program written in JavaScript.

When a function is declared and created, a new `scope` is created. Any variables declared within that function's scope will be `enclosed` in a lexical/private scope that belongs to that function. Also, it is important to remember, that functions look `outward` for context. If some variable isn't defined in a function's scope, the function will look outside the scope chain and search for a variable being referenced in the outer scope. This is what closure is all about.

In it's most simplest of forms this is a closure:

```javascript
const foo = 'bar';
function returnFoo () {
  return foo;
}
returnFoo();
// -> reaches outside its scope to find foo because it doesn't exist inside of return Foo's scope when foo is referenced. 
```

The function body (code inside returnFoo) has access to the outside scope (code outside of returnFoo) and can access that 'foo' variable.

Lets look at another example:

```javascript
const lastName = 'Bob';
function greet() { 
  const firstName = 'Jim';
  alert(`The name's ${lastName}, ${firstName} ${lastName}`);
}
console.log(lastName);
```

Not much different than the idea presented above, but the thought remains the same. When 'greet' is called, it has no context in its local scope of finding `lastName` so it looks outside its scope to find it and use `lastName` that is found there.

Let's take this a step further. We've seen with the given examples that we have created two environments for our code to live in. The first would be the global environment where `lastName` and `greet` exist. The second would be the environment where the alert function is being called.  Let's represent those two environments like this:

```javascript
{ // Global
  lastName String: 'Bob',
  greet Function: { // Local to greet
    firstName String: 'Jim'
  },
  // alert Function: Lives on the global scope, but gets called from with inside greet.
}
```","Let's work through one of your problems from your Homework together. 
```
const counter = () => {
  // Return a function that when invoked increments and returns a counter variable.
  // Example: const newCounter = counter();
  // newCounter(); // 1
  // newCounter(); // 2
};
```","For this challenge you will create your own closure:
- Create a function that houses 2 nested functions inside of it
- Create a unique variable for each function you created
- Test out where you can log the unique variables for each function.

Why can you access variable values in nested functions?",AgBoMqDO-08,http://youtube.com/watch?v=AgBoMqDO-08,https://www.youtube.com/embed/AgBoMqDO-08,,MPJ - Closures,"Closures,Simple Closures,Coding Train Closures walkthrough,Deep Dive on Closures",,JavaScript II  ,,JavaScript Fundamentals,Full Stack Web Development Core,,1,1,1,3
hash passwords before saving them to the database.,"When storing a user's password into a database we must ensure that they are not saved as plain text. The reasons are obvious and yet, we have heard of big companies like t-mobile not doing this.

In this section we'll learn how to save passwords in a secure manner.",Students should be shown the bcrypt-js documentation. This will help them see that there are only a couple of methods used with the bcrypt api.,"Instead of writing our own _Key Derivation Function_ (fancy name for hashing function), we'll use a well known and popular module called [bcryptjs](https://www.npmjs.com/package/bcryptjs). This module is well supported and stable, but there are other options you can explore.

Features:

- password hashing function.
- implements salting both manual and automatically.
- accumulative hashing rounds.

Having an algorithm that hashes the information multiple times (rounds) means an attacker needs to have the hash, know the algorithm used, and how many rounds were used to generate the hash in the first place.","Follow these steps to use bcrypt in your project.

Install `bcryptjs` using yarn or npm.

Import it into your server.

```js
const bcrypt = require('bcryptjs');
```

To hash a password:

```js
const credentials = req.body;

const hash = bcrypt.hashSync(credentials.password, 14);

credentials.password = hash;

// move on to save the user.
```

To verify a password:

```js
const credentials = req.body;

// find the user in the database by it's username then
if (!user || !bcrypt.compareSync(credentials.password, user.password)) {
  return res.status(401).json({ error: 'Incorrect credentials' });
}

// the user is valid, continue on
```",Use bcrypt to add password hashing functionality to your user registration.,XFsLtRqKpXQ,http://youtube.com/watch?v=XFsLtRqKpXQ,https://www.youtube.com/embed/XFsLtRqKpXQ,,bcrypt defined,Rainbow Table Attacks,"* What are the two methods used to encrypt/validate hashed passwords in `bcrypt`?

* What does `bcrypt` do for us in order to secure our hashed passwords?",Introduction to Authentication,,Authentication,Full Stack Web Development Core,,1,1,1,3
start and stop a local instance of MongoDB,Before we can use our local instance of MongoDB we need to learn how to start and stop the server.,"Quickly show how to start and stop the server from the terminal/command prompt.

Explain that this is intended for local development servers and that Database Administrators will take care of this for them.

Remind them that they should **stop the server when not in use** to save computer resources.","1. Open a terminal and type `mongod`. This will start the server. Note the port (27017 by default) where the server is running.
1. On a separate terminal type `mongo` to enter the _mongo shell_. You should get the `>` prompt. 
1. You can ignore the warnings. The reason for the warnings is that, due to security reasons, the server is not accessible from other computers.
1. Type `show dbs`. A list of the server's databases should appear. This demonstrates the connection was successful.
1. To exit the _mongo shell_ type `exit`. Note how polite the MongoDB folks are, they actually say _bye_!
1. Switch to the terminal tab where the server is running. Explain that exiting the _mongo shell_ will not stop the server.
1. Press `ctrl + c` to stop the server. Note the shutdown messages on the terminal.
1. Explain that in some instances it is necessary to stop a server that is not visible in a terminal, such as servers running as services. In MacOS use the command `killall mongod` for this purpose. In windows use the _Task Manager_ or the _Service Manager_.",Follow the same steps listed above in the _Teacher Demo_ section.,"1. Start the local MongoDB development server and verify that it is running by connecting to it using the _mongo shell_.
2. Stop the MongoDB server and check that you can no longer connect to it using the _mongo shell_.",,,,,,The mongo shell,,Mongo I,,,,,1,1,,2
write Custom Validators for mongoose schemas,"When we need to validate a schema using special rules not provided by the built-in validators, we can write our own validation logic and apply it to our schema.",A good example of this is validating password strength using custom logic.,"Start this demo with a `UserSchema` that defines `username` and `password` keys.

Let's create a validation rule that will fail when trying to save a user with a password that is less than 10 characters long an returns a helpful message explaining why the validation failed. 

Step to accomplish this task:
1. write a function that returns `true` if the password passes the defined criteria and `false` if not.
1. add a `validate` key to the configuration for the `password` property on the schema passing the validation function as the value.
1. add a `msg` property to the configuration for the `password` property on the schema passing a string that contains the message to display when validation fails.

```js
const UserSchema = new Schema({
  username: {
    type: String,
    required: true
    unique: true
  },
  password: {
    type: String,
    required: true,
    validate: paswordLengthValidator, // step 2
    msg: 'Password must be at least 10 characters long' // step 3
  }
});

function passwordLengthValidator(password) { // step 1
  return password.length >= 10;
}
```

Sometimes validation rules are complex enough to require the use of **Regular Expressions** , luckily this is easily accomplished by passing an object with a `validator` key to our `validate` property with the `regex` as the value, like so: 

```js
const TimeSheetSchema = new Schema({
  day: { type: String, validate: { validator: /^(mon|tues|wednes|thurs|fri)day$/i, msg: 'No work on weekends!' }
});
```

To make _custom validators_ reausable, define an array that contains the _validator function_ and the message and use it as the value for the `validate` key.

```js
const validateLength = [passwordLengthValidator, 'Password Too short' ]; 

// now we can use it here
const ProfileSchema = new Schema({
  name: {type: String, required: true, validate: validateLength }
});

// and here
const UserSchema = new Schema({
  userName: { type: String, validate: validateLength }
});
```

This means we can build a library of reusable _validators_ to use across all our models for the application and even company wide.",Have students follow along with the steps on the teacher demo.,Under development,,,,,,,,Mongo II,,,,,1,1,,2
add Virtual Properties to mongoose schemas,"**_Virtuals_** are a way to create calculated properties that do not get persisted to the database. An example would be deriving a `fullName` property by joining together `firstName` and `lastName`.

They can also be used to break up a single value to be stored into multiple document properties. An example is taking a `phoneNumber` and breaking it up to be stored as the separate properties `areaCode` and `number`.","Virtuals are document properties that can contain _getter_ and _setter_ functions. The _getters_ are used for deriving calculated fields like a `fullName` out of `first` and `last`. The _setters_ are used to take one value and splitting it into different document properties for persistence.

It is possible to have only a _getter_, only a _setter_ or _both_.

The `this` keyword is bound correctly to the model instance.","Say we want to get the user's full name, but our database stores the first and last names separate. We can use a _Virtual Property_ (just a fancy name for a calculated or derived field) for this. When we want to calculate a value based on existing properties we add a _getter function_, let's look at an example:

```js
// after defining the UserSchema

UserSchema.virtual('fullName').get(function() {
  return `${this.firstName} ${this.lastName}`;
});
```

But, sometimes we want to do the opposite. We have data that have a single value that we'd like to store as multiple properties in our database. For this we write a _setter function_.

```js
// after defining the UserSchema

UserSchema.virtual('fullName').set(function(fullName) {
  const [first, last] = fullName.split(' ');
  this.firstName = first;
  this.lastName = last;
});
```

This are chainable methods. When implementing both setters and getters we can do this instead:

```js
// after defining the UserSchema

UserSchema.virtual('fullName')
  .get(function() {
    return `${this.firstName} ${this.lastName}`;
  })
  .set(function(fullName) {
    const [first, last] = fullName.split(' ');
    this.firstName = first;
    this.lastName = last;
  });
```

Note that the _setter_ algorithm is very naive, not meant to be used in production, just for demo purposes.","Imagine we are defining a schema for an _OrderLineItem_ and we don't want to save the line total to the database, but instead, we'd like to calculate it by multiplying the `quantity` by the `price`, how would we go about this?

This is a good place to angage a _""volunteer""_ from the student list on zoom to drive the implementation as we type.

",,,,,,,,,Mongo II,,,,,1,,,1
describe and demonstrate how class syntax works.,"Because the original prototype system in JavaScript is rather clunky, and because there are multiple ways to skin a cat (achieve inheritance), we now have the `class` keyword to simplify our lives significantly. With the introduction of the `class` keyword however, we gain a lot of abstraction, which is why it is extremely important for you have seen how to achieve inheritance with what is known as the `psuedo-classical` inheritance pattern.

Once you are familiar with how the prototype works, how inheritance is achieved through the `psuedo-classical` pattern and how to implement constructor functions, you're going to LOVE how easy it is to do this with the class keyword.","This will be a big aha moment for a lot of students. If done right, you'll take what you just did with the `prototypes` objective and refactor your Fruit classes.","## Classes

With ES6 we gained the ability to use what is known as the `class` keyword. The `class` keyword is what we call `syntactic sugar` on top of the Object built into JavaScript and the Object's `prototype` system. The `class` keyword is **not** a new way of achieving object oriented inheritance in JavaScript. 

Essentially you already know how to work with classes because you know all about `constructor functions` and the `Object prototype`. Working with constructor functions to achieve Object Creation in JavaScript is fundamental to understanding how classes actually work. Remember that **classes in JavaScript are just special functions**. 

There are two types of ways we can work with and define classes, (much like functions how there are multiple ways of declaring/defining functions) `class expressions` & `class declarations`. The pattern we learn today will be called `class declarations`. 

Let us begin by observing some syntax:

```js
class Rectangle {
  constructor(height, width) {
    this.height = height;
    this.width = width;
  }
} *
```

Here we have declared a Rectangle class. It looks pretty similar to a constructor function that we're used to, however this time, we're actually being deliberate about using the `constructor()` function inside of the class. You can think of the constructor function as the foundation of every class. When present, you'll be building your Object's properties (that get returned when `new` is called) inside the constructor's body on the `this` keyword. 

Any attributes you'd like bound to your created object as properties can be passed in through the constructor method. In this case we have `height` & `width` as attributes that we'd like to store on our created object. Remember: **classes will return us objects**. 

Now if I wanted to use this class to create me an object, it would look very much the same as we already know how with constructor functions. All I have to do is declare some variable and assign it the class by using the new keyword. 

Let us declare a `new` Rectangle and log the result.

```js
const newRect = new Rectangle(400, 800);
console.log(newRect);

Logs out: 
​​​​​Rectangle { height: 400, width: 800 }​​​​​
```

## Inheritance w/ Classes

Inheritance is where classes really shine. The `extends` keyword, and `super();` function make it so trivial to bind our classes together to achieve some simple object inheritance. The `extends` keyword will abstract away any of the `Class.call` syntax that we're used to. `super()` is used to tell a parent's constructor to be concerned with the child's attributes vis versa and abstracts away the `Object.create(this, Class)` syntax that is really tricky to sink one's teeth into. 

Here's how Object inheritance works with classes:

```js
class Animal { 
  constructor(name) {
    this.name = name;
  }

  speak() {
    console.log(this.name + ' makes a noise.');
  }
}
```

Notice that `speak()` is a method with some special sytnax on this class. This method will actually not be a method on the object, but it will live on the object's prototype instead. Which is nifty when you're worried about memory etc. 

If I wanted to create a sub-class from this Animal class it's really simple.

```js
class Dog extends Animal {
  constructor(name) {
    super(name);
  }

  speak() {
    console.log(this.name + ' barks.');
  }
}
```

Isn't that so much nicer? No more `.bind(), .call(), .apply()` and `Object.create()` etc. We simply just understand the little nuances and it works. 

And using this child class:
```js
const doggy = new Dog('Grizzly');

doggy.speak();

---> 'Grizzly barks.'
```
* This is an example derived directly from the MDN documentation. So once you're done learning from here, you can head over there and check this out.","Now follow along with me as we build out some quick classes. 

```js
class Animal {
  constructor(name) {
    this.name = name;
  }
  speak() {
    console.log(`${this.name} says, Hello!`);
  }
}
```

Animal is going to be our `base` class. All other classes will inherit from Animal. So lets define a couple of different animals:

```js
class Dog extends Animal {
  constructor(name) {
    super(name);
  }

  speak() {
    console.log(`${this.name} barks!`);
  }
}

class Cat extends Animal {
  constructor(name) {
    super(name);
  }

  speak() {
    console.log(`${this.name} Meows!`);
  }
}
```

And if we want to use them:

```js
const bowWow = new Dog('Grizzly');
const kitty = new Cat('Fluffertons');

console.log(bowWow);
console.log(kitty);
bowWow.speak();
kitty.speak();
```

Check it out! If you didn't find this amazing? You will once we convert our `constructor functions` we've built over to use the class keyword! ","For this challenge we want you to build out a few classes based on your ancestral tree. (If you're not sure about any of your families information go ahead and make up names like Grandpa and Grandma etc.). 

Go back a few generations and create a `Grandpa or Grandma` class. Name either one for your parent's parents. 

Create a `Parent` class named for one of your parents. `Parent inherits from Grandpa/Grandma`.

Create a `Child` class (You) who inherits from `Parent`. 

Be sure to log out any methods that you use for this project. Any features (i.e. eye color, hair color) that you'd inherit from your ancestors, be sure to include as attributes and pass them down the class chain. Every class should at least be instanciated with the following attributes. `name, birthPlace, eyeColor, hairColor`.",D3Yx_ohAet4,http://youtube.com/watch?v=D3Yx_ohAet4,https://www.youtube.com/embed/D3Yx_ohAet4,,,,,JavaScript IV,,JavaScript Fundamentals,Full Stack Web Development Core,,1,1,1,3
"explain to another the concepts of actions, reducers, component state, and application state.","The basics of Redux are actually very simple. The problems come from trying to integrate Redux into another system. If we're doing this with react, we have fully buy into the Redux pattern to achieve this idea of a ""Single Source of Truth"".",,I like to start off by simply demonstrating the patterns of Redux without even integrating them within the React Eco System.,,"We're going to create a simple React component that renders out some state to the DOM. As soon as we have our project working, we're going to take that Component's state and re-wire it to use Redux state.",,,,,,,,,,,,,1,1,,2
effectively use `redux-thunk` and asynchronous action creators to consume data from external API's,"In Redux the _Reducers_ are **synchronous** by default. If we need to perform asynchronous operations, they need to happen before the actions flow through the reducers stack.

We can use middleware to handle asynchronous requests.

Redux Thunk is a middleware created by Dan Abramov, that provides the ability to handle asynchronous operations inside our Action Creators.",,"Redux Thunk is a separate node package called `redux-thunk`. Since the Redux action -> reducer flow is synchronous, we will use Redux Thunk to make the flow asynchronous so we can make API calls from our action creators.

Yep. You read that correctly. We are changing up the action creators to perform async API calls. We can do this because we know that Redux middleware can intercept the normal Redux flow, and do something before actions make it to the reducer. To make this work, we need to understand `Thunks`. 

A thunk is another word for a function. But it’s not just any old function. It’s a special (and uncommon) name for a function that’s returned by another. Like this:

```js
function not_a_thunk() {
  // this one is a ""thunk"" because it defers work for later:
  return function() {
    console.log('do stuff now');
  };
}
```

So how does this apply to Redux? Well, when we start using the `redux-thunk` middleware, it does an interesting thing with our redux flow. When an action creator is called, `redux-thunk` will intercept and look at what is returned. If the thing returned is an action, it will forward the action through to the reducer. But, if the thing returned is a function, aka a thunk (a function returned from a function), then it will invoke that function and pass in the `dispatch` function as an argument to it. 

This is where `redux-thunk` becomes very powerful. That thunk that is returned by an action creator has access to the dispatch function. So we can run an async function, like an API call, and inside the `.then()` we can dispatch an action!

Let's look at a simple example of an action creator that does this when a user logs in:

```js
function logInUser(creds) {
  // this returned function is the thunk, and gets dispatch passed in
  return function(dispatch) {
    return axios.post('/login', creds).then(res => {
      const loggedInAction = { type: USER_LOGGED_IN, payload: res.data.user }
      dispatch(loggedInAction);
    });
  };
}
``` 
Really cool, right! The thunk has access to dispatch, and can dispatch a new action based on the result of the API call! Let's clean this up a little with arrow function syntax. The following code snippet is essentially the exact same as the above snippet:

```js
const logInUser = creds => dispatch => {
  return axios.post('/login').then(res => {
    const loggedInAction = { type: USER_LOGGED_IN, payload: res.data.user }
    dispatch(loggedInAction);
  });
}
```

Much better! Let's go try it out!","We have an app [here](https://codesandbox.io/s/xo8mkrk49w) that is ready to make an API call to the Pokemon API. The first step to accomplishing this is to add `redux-thunk` as a dependency, then go to the main `index.js` page and import it like this:

```js
import thunk from 'redux-thunk';
```

Next we need to tell the `applyMiddleware` function about this piece of middleware.

```js
const store = createStore(
  rootReducer,
  applyMiddleware(thunk)
);
```

Now we're ready to make our action creators asynchronous!

Go into the `action/index.js` file. You will see that there is an action creator that is returning an action. That action adds an error to state. Go ahead an push the ""Fetch Pokémon"" button to see the error that gets added to the state, then rendered on the screen.

Now, go ahead an remove the entire return statement out of the action creator. Then let's build the thunk function.

```js
export const getPokemon = () => dispatch => {

};
```
Now, inside the action creator, we have access to dispatch. So, what is this action creator going to do? It is going to fetch pokemon data from the API. So before we actually fetch data, let's remember the finite state machine and dispatch an action that will tell the reducer that we are starting the fetch. (And let's change the action type to 'FETCH_POKEMON_START').

```js
export const FETCH_POKEMON_START = 'FETCH_POKEMON_START';

export const getPokemon = () => dispatch => {
  disptach({ type: FETCH_POKEMON_START });
};
```

Now we'll go to the reducer and build a case for that action. Import the correct action type, and add an `isFetching` property to the `initialState` object. In the case, we will set `isFetching` to true, and reset the `error` back to an empty string, just in case it has an error in it.

```js
import { FETCH_POKEMON_START } from '../actions';

const initialState = {
  pokemon: [],
  error: '',
  isFetching: false
};

function reducer(state = initialState, action) {
  console.log('reducer', action);
  switch (action.type) {
    case FETCH_POKEMON_START:
      return {
        ...state,
        isFetching: true,
        error: ''
      };

    default:
      return state;
  }
}

export default reducer;
```

Now, back to the action creator to make our API call. Add `axios` as a dependency, and import it into the action creator file. Then, make a `GET` request to 'https://pokeapi.co/api/v2/pokemon/'. In the `.then()` and `.catch()`, we will need to dispatch more actions. Inside the `.then()`, we will dispatch the `FETCH_POKEMON_SUCCESS` action, and pass with it the data we get back from the API. If there is an error, we need to dispatch the `FETCH_POKEMON_FAIL` action, and pass with it the error. Make two new action types for both cases, then build out the `.then()` and `.catch()`.

```js
import axios from 'axios';

export const FETCH_POKEMON_START = 'FETCH_POKEMON_START';
export const FETCH_POKEMON_SUCCESS = 'FETCH_POKEMON_SUCCESS';
export const FETCH_POKEMON_FAIL = 'FETCH_POKEMON_FAIL';

export const getPokemon = () => dispatch => {
  dispatch({ type: FETCH_POKEMON_START });
  axios
    .get('https://pokeapi.co/api/v2/pokemon/')
    .then(res =>
      dispatch({ type: FETCH_POKEMON_SUCCESS, payload: res.data.results })
    )
    .catch(err => dispatch({ type: FETCH_POKEMON_FAIL, payload: err }));
};
```

Finally, we will build the cases for our two new actions. In the reducer file, import our new action types. Then build a case for each inside the reducer function. Before looking at the code below, try to think through what change each action represents on the state tree. Think about finite state machines. Now go ahead and try to build both cases, then compare how you did with the code below.

```js
import {
  FETCH_POKEMON_START,
  FETCH_POKEMON_SUCCESS,
  FETCH_POKEMON_FAIL
} from '../actions';

const initialState = {
  pokemon: [],
  error: '',
  isFetching: false
};

function reducer(state = initialState, action) {
  console.log('reducer', action);
  switch (action.type) {
    case FETCH_POKEMON_START:
      return {
        ...state,
        isFetching: true,
        error: ''
      };
    case FETCH_POKEMON_SUCCESS:
      return {
        ...state,
        pokemon: action.payload,
        isFetching: false,
        error: ''
      };
    case FETCH_POKEMON_FAIL:
      return {
        ...state,
        error: action.payload
      };
    default:
      return state;
  }
}

export default reducer;
```

Now push the button again, and there are your pokémon! Here is the final [codesandbox](https://codesandbox.io/s/vy6148rx97) for reference.",Build out a simple React/Redux app that displays dog images from the dogs API.,hb_ghK58_A8,http://youtube.com/watch?v=hb_ghK58_A8,https://www.youtube.com/embed/hb_ghK58_A8,,,Async Redux Dogs,,Async Redux - Redux Thunk,,Redux,Full Stack Web Development Core,,1,1,1,3
DOM placeholder,,,,,,,,,,,,,,,,,,0,,,0
DOM placeholder,,,,,,,,,,,,,DOM & Manipulation with Vanilla JS,,,,,0,,,0
demonstrate CSS specificity and inheritance to create and update styles,The most basic building blocks of any app or website on the internet today rely heavily on HTML and CSS.  The first steps into building bigger and more complex projects start with a solid understanding of CSS specificity and inheritance.  ,"CSS Inheritance:

https://codepen.io/bigknell/pen/eVJjze?editors=1100

The cascade is a huge concept to tackle but step in slowly by introducing elements first and styling some simple things like color or background. 

**Spend as much time as needed for the students to really grasp specificity.**

Discuss specificity weight and how it impacts decision making when building interfaces.","## CSS Inheritance  

To understand CSS we need to look at the C in cascading style sheets. This cascade suggests a pattern of inheritance that we can use in our code. Inheritance is similar to human characteristics that are passed down from generation to generation. Children will inherit characteristics and personality traits from their parents.  

CSS Inheritance is similar to human inheritance in that you can pass traits down to ancestor elements. In CSS every ancestor of the original parent will gain access to all the CSS properties through inheritance. You may be thinking, ""How does inheritance occur in CSS?"" The answer is the HTML structure. In HTML when an element is placed inside another element it is said to be nested within its parent element. This HTML nesting creates a bond between elements that we call inheritance.  

Lets look at an example to demonstrate inheritance:  

HTML Structure:  
```html  
<div class=""parent"">  
  <p>Parent</p>  
  <div class=""child"">  
    <p>Child</p>  
    <div class=""grandchild"">  
      <p>Grandchild</p>  
    </div>  
  </div>  
</div>  
```  
CSS:  
```css  
.parent {  
  color: red;  
}  
```  

Notice that by styling the ```.parent``` class, all our p tags will now turn red. Using inheritance this way is extremely powerful and allows for easier development when building user interfaces. However, we don't always want to change everything at once. What if we only wanted two elements to turn red and not all 3? This problem is solved with specificity and understanding selectors.  

## CSS Specificity  

Specificity is the concept we use to describe the ability to style many elements or just one element using CSS selectors. Selectors allow us to access HTML tags and update their styles. Before we learn more about selector syntax and usage, we need to study specificity weight.  

#### Specificity Weight  

Think of specificity weight like the waterfall example used earlier. The water at the top of the waterfall is less specific and therefore can be overwritten further This diagram below helps visualize specificity weight. Note the ```<``` symbol is used to represent ""less specific."" The more you read to the right, the more specific a selector or style will be.  

```  
* < elements < classes, pseudo-classes, attributes < IDs < inline styles < !important
```  
The selectors above are very common in styling practices but they do not represent every possible selector. It is recommended that you get a solid knowledge of these selectors first before moving on to more advanced selectors.  ","## Specificity Tutorial

For this tutorial, you will be building CSS selector chains to demonstrate specificity and inheritance.

CSS specificity begins with HTML structure.  Before we write any CSS, study the HTML nesting below:

```html
<div class=""container""> 
  <header>
    <h1 class=""main-header"">Lambda School</h1>
    <nav>
      <a href=""#"">Tracks</a>
      <a href=""#"">About</a>
      <a href=""#"">Blog</a>
      <a href=""#"">Apply Now</a>
    </nav>
  </header>
</div>
```

We can see that there is a class of `.container` wrapping all of the other elements.  

### CSS Specificity: Many Elements

With this knowledge in hand, we now have a starting point for our specificity chain to begin.  Let's start by styling the `.container` itself:

```css
.container {
  width: 600px;
  margin: 0 auto;
}
```

Notice that all of the content within `.container` is now centered in the page.  We are using the cascade to impact all of the elements inside of `container` with just a few simple lines of CSS!

Let's increase our specificity chain by styling everything in the header to have a `font-family` of `Helvetica`:

```css
.container header {
  font-family: 'Helvetica', Arial, sans-serif;
}
```

Because of the cascade, all of the elements in the header will now have a `font-family` of `Helvetica`.

### CSS Specificity: One Element

Styling many elements is pretty easy because of the cascade, what about styling one specific element?

Let's select the `.main-header` class and style it's `color` to `crimson`:

```css
.container header .main-header {
  color: crimson;
}
```

Note that we could have written the selector chain above with just the `h1` and achieved the same result:

```css
.container header h1 {
  color: crimson;
}
```

This is because both the class `.main-header` and the `h1` element is on the same specificity level in our chain.

If we wanted to be extremely specific, we could use both the element AND the class together like this:

```css
.container header h1.main-header {
  color: crimson;
}
```

We just did the same thing 3 different ways with the same result!

Some developers see this as a powerful aspect of CSS, others point this out as a reason CSS is so confusing.  

Our opinion is that you should know several ways to do the same thing in case you run into a unique situation where you need the specificity weight to be heavier.

At this point, you should attempt to style the anchor tags inside the navigation, explore the several different ways you could write your specificity chains.

[Check your code against a final solution for this tutorial:](https://codepen.io/lambdaschool/pen/rqOOmX?editors=1100)",Follow the instructions [here](https://codepen.io/lambdaschool/pen/rddroJ) to challenge yourself using CSS specificity and inheritance.,uN-yD5usiR0,http://youtube.com/watch?v=uN-yD5usiR0,https://www.youtube.com/embed/uN-yD5usiR0,,Specificity Weight ,"Check your code: HTML Validator,Check your code: CSS,Centering things in CSS",,"User Interface I,CSS",,"Introduction to User Interface and Git, Web for UX: Intro to HTML and CSS, Intro to HTML & CSS","Full Stack Web Development Core, UX Web and Labs Prep Unit, UX Design Core",,1,1,1,3
identify and use all properties in the box model,The box model is a way we can position and layout HTML elements on a page using CSS.   Being able to style elements using the box model is one of the most valuable skills you can learn when building user interfaces.,This is by far the best resource to prepare yourself and your students:  https://internetingishard.com/html-and-css/css-box-model/,"# The Box Model

Every element you see on a web page is really just an interpretation of a pixel on a screen.  Those small pixels start to get bigger as we add content and style to them.  The box model is our first look into the layout out those pixels using CSS.  As the name suggests, we are working with boxes.  Lets define a box for our purposes as a HTML element with four sides.  To visualize what this looks like, [check out this link from W3Schools](https://www.w3schools.com/css/css_boxmodel.asp).

You will notice there are some interesting words like `margin`, `border`, `padding`, and `content`.  These words make up the CSS properties that we use to layout HTML elements on a page.

The box model allows us to layout the spacing and size of an individual HTML element.  

## Content

This is where text and images are rendered

## Padding

The space between the content and the border

## Border

A border that we can style around the padding and content of a box

## Margin

The space between the border and everything else on a web page","# Box Model Tutorial

Let's dive into a single HTML element and explore how the box model works.

Review this HTML:

```html
<div class=""box-example"">
  I am a box!
</div>
```

We will use the `.box-example` class to test out the box model properties. Before we get started with the box mdoel, lets give our soon-to-be box a background of gray:

```css
.box-example {
  background: gray;
}
```

## Box Model: Content Area

The first part of the box model we need to understand is the `content area`.  In our HTML example, we currently have some text: `""I am a box!""`.  This text is taking up space and adding to the `content area` of our HTML element.  

This is great but we can actual control the size of our content area by using `width` and `height`.  Let's add a `width` of `100px` and a `height` of `100px` to see what happens:

```css
.box-example {
  background: gray;

  /* Box Model: Content Area */
  width: 100px;
  height: 100px;
}
```

We can see our gray box now matches our 100x100 dimensions.  Let's see how `padding` works with our `content area`.

## Box Model: Padding

Padding is the area between our content area and the border bounds of our box.

Let's add `20px` of padding to each side of our `.box-example` to see how this works:

```css
.box-example {
  background: gray;

  /* Box Model: Content Area */
  width: 100px;
  height: 100px;

  /* Box Model: Padding */
  padding: 20px;
}
```

Notice that padding **added** `20px` to each side of our box!  This can be an annoying side effect of using `padding` and we need to make sure we pay attention to how big our box is in case it doesn't match up with our design.  

There are ways to avoid this resizing behavior by using `box-sizing: border-box` to constrain the `padding` inside the border's boundaries set by our `width` and `height`.

Go ahead and add `box-sizing: border-box` to our example and see how it impacts our box.

```css
.box-example {
  background: gray;

  /* Box Model: Content Area */
  width: 100px;
  height: 100px;

  /* Box Model: Padding */
  padding: 20px;
  box-sizing: border-box;
}
```

Notice how our example now adds `padding` from the border's edge **in** to the box.  This allows you to have way more control across your web site.

## Box Model: Border

The border sits between our padding and margin.

Border is straight forward in its visualization but can be a little confusing with its syntax:

```css
.box-example {
  background: gray;

  /* Box Model: Content Area */
  width: 100px;
  height: 100px;

  /* Box Model: Padding */
  padding: 20px;
  box-sizing: border-box;

  /* Box Model: Border */  
  border: 1px solid black;
}
```

You can see that border has 3 values in it!  These are shorthand so we don't have to write 3 properties every time.

- The first value is the `border-width`  
- The second value is the `border-style`
- The third value is the `border-color`

Imagine writing that out every time!

## Box Model: Margin

`Margin` is the white space surrounding our border.  `Margin` allows us to create distance between our element and the rest of the page.

Lets see how it works:

```css
.box-example {
  background: gray;

  /* Box Model: Content Area */
  width: 100px;
  height: 100px;

  /* Box Model: Padding */
  padding: 20px;
  box-sizing: border-box;

  /* Box Model: Border */  
  border: 1px solid black;

  /* Box Model: Margin */  
  margin: 20px;
}
```

We just added `20px` of `margin` to each side of our box. You have now explored each part of the box model!

[Click here to see the final tutorial code!](https://codepen.io/lambdaschool/pen/qJbZaM?editors=1100)",[Take the code from the tutorial](https://codepen.io/lambdaschool/pen/qJbZaM?editors=1100) and add 4 new boxes.  Update each box with unique box model values and see how they interact with each other.,0tUUFdkTybs,http://youtube.com/watch?v=0tUUFdkTybs,https://www.youtube.com/embed/0tUUFdkTybs,,CSS Box Model - MDN,Box Sizing - Best practice and history,,"User Interface II,CSS",,"Introduction to User Interface and Git, Web for UX: Intro to HTML and CSS, Intro to HTML & CSS","Full Stack Web Development Core, UX Web and Labs Prep Unit, UX Design Core",,1,1,1,3
describe and use responsive units to create a fully responsive website,Responsive units allow us the flexibility we need to code for thousands of devices in one code base.,"* Responsive units (White House VS ESPN VS Fixed example). Showcase how changing your browser font settings impacts each site.  ESPN has fixed units for fonts while the Whitehouse has responsive units.  But also talk about how browser zoom levels the playing field.
    * https://www.whitehouse.gov/
    * http://www.espn.com/


Address VH and VW units and explain how they can be extremely useful in the right cases.","### px
The `px` unit is referred to as an `absolute length unit`.  This means that `px` does not adjust for its surroundings.  That being understood, `px` units are still viable in some scenarios where layout control is needed.  Modern browsers now allow `px` units to scale with the zoomed in viewport.  
#### Syntax Example
```html
<h1>Example</h1>
```
```css
h1 {
  font-size: 18px;
}
```

#### Pros
- Easiest unit for developers to read from design files
- Modern browsers now allow `px` units to grow with built in zoom features
- No reliance on cascade for sizing

#### Cons
- Rigid unit that is not responsive in layouts
- Hard coded font size values are not accessible for users that change their default settings

### em
The `em` unit is referred to as a `relative length unit`.  This means that `em`  will adjust to its surroundings.  In the syntax example below you can see that the `h1` is nested within the `.main-content` section.  

Notice that the `.main-content` has a `font-size: 10px`.  The `em` inside of our `h1` will now adjust its value to match the `10px`!  This can be really useful when building responsive layouts or adjusting fonts on different devices.  

One of the issues with `em` is its responsive nature.  Sometimes changing just one value can lead to a cascade of issues if you're not careful.  The cascade of font sizes could compound creating issues you didn't expect. 

#### Syntax Example
```html
<section class=""main-content"">
  <h1>Example</h1>
</section>
```
```css
.main-content {
  font-size: 10px;
}

.main-content h1 {
  /* 2em === 20px */
  font-size: 2em;
}
```

#### Pros
- Responsive to its surroundings

#### Cons
- Can be too flexible at times and create cascading font sizes that weren't expected
- Converting `px` to `em` when creating code from a design file usually requires a calculator or memorization that can feel cumbersome

### rem
The `rem` or `root em` unit is also referred to as a `relative length unit`.  The `root` part means that this unit looks to the `root` element in a page.  Usually the `root` element is going to be the `html` tag in a web page or application.

Look at the syntax example below and you will see we have the same exact set up from our `em` example.  This time we have added a reference to the `html` element and assigned a `font-size:16px`.  

Notice that the `rem` in our `h1` is not impacted by our `main-content` class anymore!  The `h1` is instead going off of `16px` as it's base multiplier.  

This is a great thing because now we can adjust our relative font-size off of one place instead of many like the `em` does.

**Pro Tip:**  Using a hard coded pixel on the `html` tag is bad practice as it overwrites the user's default settings on their browser.  

Instead, use a % based unit to be more accessible.  A great trick is to use `62.5%` as the base value because then you can convert `rem` units by the power of `10` instead of `16`.  `62.5 * .16 = 10`.  That means `1rem` would equate to `10px` throughout the document!  

This makes using `rem` so much easier to calculate compared to `em`.  

Take a look at these examples:  
`18px === 1.8rem
 13px === 1.3rem 
 27px === 2.7rem` 

#### Syntax Example
```html
<section class=""main-content"">
  <h1>Example</h1>
</section>
```
```css
html {
  /* This technically works but is too rigid and not accessible */
  font-size: 16px;
  /* Best Practice */
  font-size: 62.5%;
}

.main-content {
  font-size: 10px;
}

.main-content h1 {
  /* 2rem === 20px */
  font-size: 2rem;
}
```

#### Pros
- Responsive to `root` element only
- If you use a % based unit, you can achieve accessibility gains and eliminate the awkward conversion system of 16px (the browser's default font-size)

#### Cons
- If you don't make the root element flexible, you will hurt accessibility by overwriting default user settings in the browser
- Converting `px` to `rem` when creating code from a design file usually requires a calculator or memorization that can feel cumbersome

### %
The `%` unit is also referred to as a `relative length unit`.  The `%` unit is usually used for building responsive layouts more than for font sizing.  `%` based layouts start at the viewport width and then cascade down through nested units.  

Look at the example below to see how the cascade of nested `%` based units work.  You can see the `.main-content` section is `100%` of it's viewport as it's the top level element in our example. 

Note the `h1` width is 50% of the `.main-content` width and not the viewport.  That means if we adjusted `.main-content` width to a different value like 60%, the `h1` width would then become 50% of the new value 60%.   

You can see how this would compound very quickly!  You need to make sure that you avoid going over 100% in a responsive layout or you will get strange and frustrating behavior as you're building.

#### Syntax Example
```html
<section class=""main-content"">
  <h1>Example</h1>
</section>
```
```css

.main-content {
/* this will be half of the viewport */
  width: 100%;
}

.main-content h1 {
/* this will be half of .main-content */
  width: 50%;
}
```

#### Pros
- Responsiveness starts at the viewport level and cascades down to nested elements helping you build layouts to adjust to any size

#### Cons
- You have to be careful with `%` based layout as widths can get too small very fast
- If you don't add everything up to 100% when building layout, `%` can cause a lot of frustration searching the box model to see where the math went wrong

### vw / vw
These units completely rely on the viewport of the browser window to render.  While these units have value, we caution against using them for layout at this point in your learning.   `vw` and `vh` are mostly seen in handling needs for full screen layout uses or font sizing.  


### Other Units
There are many other absolute and responsive units.  You can take a look at them here:  [https://www.w3schools.com/css/css_units.asp](https://www.w3schools.com/css/css_units.asp)

Currently the most popular units of length in CSS are `rem, em, px, %` with some newer units making waves like `vw and vh`.  You are encouraged to try out other units and see how they behave compared the units we have discussed here.",,,H376eVtXfYg,http://youtube.com/watch?v=H376eVtXfYg,https://www.youtube.com/embed/H376eVtXfYg,,"""A guide to em, rem, and px units"",Rem font-size study",,,"Responsive Design II,Responsive Web II",,"Advanced CSS, Responsive & Interactive Web Dev","Full Stack Web Development Core, UX Design Core",,1,,1,2
"describe the differences in fixed, fluid, adaptive, and responsive layouts.",Responsive web design is focused on providing the best user experience possible for the growing number of devices across the world today.  Knowing how to build responsive layouts is a must have skill for any developer looking to get into a front end or user interface role.,,"# Responsive Web Design Layouts

Knowing the subtle nuances between responsive web design layouts will allow you to make better technical decisions for your apps and websites. Let's take a look at some design terms and how they translate into code.

## Fixed Layout

Fixed layouts are what the early web looked like. Designs usually looked good on desktop screens but would slowly get worse as the browser's viewport got smaller. Horizontal scroll bars were a normal feature and you would find yourself pinching and zooming all over mobile devices to read a website.

The user experience on multiple devices is usually poor, so why are fixed designs still around today? Because fixed layouts are much cheaper to build and maintain.  

### Features of Fixed Layout

* Design is usually desktop only
* CSS widths are usually hard coded pixels
* Horizontal scroll bars appear as the viewport shrinks smaller than the website's design
* No media queries are used
* Quicker deployment

## Fluid Layout

The opposite of a fixed layout is one that could expand and contract in proportion to most devices. This sounds great at first, but without constraints, you soon have to think about how your site will look on several devices with one set of styles.  

Some of the problems of a fluid layout include: images getting too small, buttons growing too large, and layouts that can grow to be way too spacious on large desktops. It's a constant game of white space and content.  Fluid layouts still have a place in modern web design but are seen less frequently compared to adaptive and responsive.

### Features of Fluid Layout

* Design is often divided among desktop, tablet, or phone
* Percent based units instead of hard coded pixels
* Everything is designed to proportionally shrink
* No media queries are used

## Adaptive Layout

Adaptive layouts borrow from the speed of a fixed layout but accommodate different devices at specific breakpoints in design.  For example, an adaptive website may have hard coded pixels used for layout using media queries for different devices.  

Adaptive layout is another cheap and easy way to get more content out quickly for a business to more devices. Adaptive layout still lacks in accommodating for thousands of devices because care was only given to specific designs at certain break points.  It's a lot better than fixed, but we can do more with responsive layout.

### Features of Adaptive Layout

* Design is often divided among desktop, tablet, or phone
* Media queries are used
* Layout widths are still hard coded at each media query
* Quick deployment for specific devices

## Responsive Layout

Responsive layouts combine features of fixed, adaptive, and fluid websites together into one seamless experience.  Media queries are used to constrain responsive units so that as the viewport expands or shrinks, you get an experience that looks and functions beautifully across thousands of devices and screen sizes.

Responsive sites take more time and effort to create and are the standard long term projects should aim for.

### Features of Responsive Layout

* Design is often divided among desktop, tablet, or phone
* Responsive units are used throughout the site
* Media queries are used
* Site accommodates thousands of devices and takes longer to build","## Responsive Web Design Layout Tutorial

Let's use the same HTML structure to showcase the differences between fixed, fluid, adaptive, and responsive layouts.  You can use your own editor to follow along or just [click this link](https://codepen.io/lambdaschool/pen/gZwPVg?editors=1100) to see the codepen version

We will use this HTML:

```html
<div class=""container"">
  <header>
    <nav>
      <a href=""#"">Home</a>
      <a href=""#"">About</a>
      <a href=""#"">Blog</a>
      <a href=""#"">Contact</a>
    </nav>
  </header>
  <section class=""main-content"">
    <h1>Layouts</h1>
    <p>Testing out different layouts!</p>
  </section>
</div>
```

### Fixed CSS

Given the HTML above, lets use the following CSS to provide some constraints and a border so we can see our `.container`.

```css
/* Fixed Layout */
.container {
  width: 800px;
  padding: 20px;
  border: 1px solid red;
  margin: 0 auto;
}
```

Notice the `width` and `padding` values are hard coded pixels.  Try resizing your browser and see where the horizontal scroll bars show up.

This layout makes for a really poor user experience if you're on a small screen or any kind of device that doesn't match the 800px width.

### Fluid CSS

Fluid is utilizing the `%` responsive unit to control layout.  Notice that we have to be careful about the total width of the container adding up to 100%.  We have to be careful to update both the width and padding to equal 100% or we will see horizontal scroll bars again as the viewport shrinks.

Comment out the fixed CSS code from above and use our new fluid code.

```css
/* Fluid Layout */
.container {
  width: 98%;
  margin: 0 auto;
  border: 1px solid red;
  padding: 20px 1%;
}
```

Notice how small and how large you can resize the window without hurting the integrity of the web page. This simple example showcases the major visual difference between fixed and fluid.  Let's take a look at how adaptive can use media queries to control layout on a specific device.

### Adaptive CSS

With adaptive layout we are going to take the fixed layout code and apply media queries to it.

Comment out the fluid CSS code from above and use our new adaptive code.

```css
/* Adaptive Layout */
.container {
  width: 800px;
  margin: 0 auto;
  border: 1px solid red;
  padding: 20px;
}

@media(max-width: 500px) {
  .container {
    width: 500px;
    background: gray;
  }

  .container header nav {
    display: flex;
    flex-direction: column;
  }

  .container header nav a {
    margin-bottom: 20px;
  }
}
```

Notice how we added some more styles specifically for our mobile view?  This process is part of how adaptive ""adapts"" to the viewport.  The problem with this solution is it's still too rigid.

### Responsive CSS

Responsive uses constraints with `%` based layouts for that seamless feeling between devices.  For example, we can use a css property of `max-width` to control the maximum width of a container while also providing `%` flexibility below it.  Notice how we changed `.container` to now stop growing past `800px`.  Also note that any horizontal margin or padding was converted into a responsive unit.  

These subtle changes will continue to be discussed later in this unit but for now study the code and notice it's not that big of a difference when we compare our adaptive layout.

```css
/* Responsive */
.container {
  max-width: 800px;
  margin: 0 auto;
  border: 1px solid red;
  padding: 20px 1.25%;
}

@media(max-width: 500px) {
  .container {
    background: gray;
  }

  .container header nav {
    display: flex;
    flex-direction: column;
  }

  .container header nav a {
    margin-bottom: 20px;
  }
}
```","## Responsive Web Design Layout Challenge

Go to some of your favorite websites and use your browser's developer tools to inspect their layouts.  

Study the HTML and CSS and see how they made their site responsive.  You may find responsive units you have never seen before!

Take note of things you found that were interesting or confusing. Bring those questions or observations to your group and discuss them in standup.",qfEicK3gJ9E,http://youtube.com/watch?v=qfEicK3gJ9E,https://www.youtube.com/embed/qfEicK3gJ9E,,"Fixed vs Fluid vs Adaptive vs Responsive,Fixed vs. Fluid vs. Elastic Layout: What’s The Right One For You?",Deep Dive on Responsive Web Design with Google,,"Responsive Design I,Responsive Web I",,"Advanced CSS, Responsive & Interactive Web Dev","Full Stack Web Development Core, UX Design Core",,1,1,1,3
demonstrate knowledge of media queries by correctly implementing them in a project.,Media queries are an amazing tool for developers to build many types of responsive websites.  Having a grasp of how they work and what you can do with them increases your ability to code for thousands of devices.,"Media queries alone are not a challenge, understanding max and min width and what mobile first development looks like can be.  ","Max-width and min-width are the keys to the car when it comes to media queries.  Understanding that ""mobile first design"" directly translates into min-width is a concept that many new developers struggle with.

This simple example demonstrates the differences in max and min width:

https://codepen.io/bigknell/pen/ddYKVq

Media queries use max and min width to determine where breakpoints are introduced so it's a big deal to make sure we understand how each works in relation to the viewport.","Lets put media queries to work by working on a desktop-down approach. <br><br>

Go to this codepen:
https://codepen.io/bigknell/pen/GQjGgr?editors=1100
<br><br>
Base colors:<br>
box1: aqua<br>
box2: azure<br>
box3: cadetblue<br>
<br>
At 1000px and below:<br>
* Change the width to 80% for ALL boxes<br>
* box1: blue<br>
* box2: green<br>
* box3: red<br>
<br>
At 768px and below:<br>
* Change the width to 60% for ALL boxes<br>
* box1: teal<br>
* box2: gold<br>
* box3: pink<br>
<br>
At 400px and below:<br>
* Change the width to 60% for ALL boxes<br>
* box1: purple<br>
* box2: black<br>
* box3: gray<br>
","Keep the color and width requirements we just did as a group, but now lets take a mobile first approach by using min-width.

That means the base colors of: 
box1: aqua
box2: azure
box3: cadetblue

Need to show up AFTER 1000px and up.  This also means the boxes should go back to 100px at 1000px and up as well.

This is a solo challenge, please don't share code until the solution is presented!

https://codepen.io/bigknell/pen/GQjGgr?editors=1100",q3TcW9mTklU,http://youtube.com/watch?v=q3TcW9mTklU,https://www.youtube.com/embed/q3TcW9mTklU,,,"Media Query Deep Dive: 100% Correct Way to do CSS Breakpoints,Learn about your device's screen width in CSS,Screen Resolution to Viewport Dimensions ",,"Responsive Design I,Responsive Web I",,"Advanced CSS, Responsive & Interactive Web Dev","Full Stack Web Development Core, UX Design Core",,1,1,1,3
explain the difference between client-side routing and sever-side routing,"Archaically and often today, we see websites built out using templates that a server will render and send back to the client or the browser. Before the advent of powerful web browsers, these types of websites were a necessity and simply put ""the way things are done"". But as browsers have gotten more powerful, so too has the technology we use to build applications that our browsers serve up to our end users. One of the main differences in how things are built today, is the difference in how we rely on our Client Side applications to route between different URLs. This was always handled by the server and now we have the opportunity to deliver up content and components based on what URL path we're browsing to relying on the Client to do a lot of the heavy lifting.",,"Imagine if every time you clicked on something on a website, you had to request a resource from a server, and then the server had to go and retrieve that resource, and then that server had to send back some HTML/CSS and eventually some JavaScript in order to display the data on the screen. What you've done in effect is asked for something you didn't have from a server where that thing could get it, by way of the route or URL. The idea that any of this has gone away is something that I want to ensure you don't misunderstand. Websites and Web-applications all rely heavily on information that is controlled by the server. We can't get away from them, even when we hear buzz-words like `serverless` servers (not really server-less) we still rely on machines that communicate across channels to deliver content to us as end users.

This image does a really good job at showing some of the key differences between Client and Server-side routing. 

![Client vs server](https://imagebin.ca/40yMWdOcgBfd/IC690875.png)

#### What is Routing?

Being able to access information from a website based on the `url` provided is not only a powerful tool at our disposal as end users/developers it is also a standard. `Routing` is essential for handling a communication piece between computers. It is the way we navigate through websites and web applications today. It's the link between requests of resources and our code. When we click on a link on any web app or website we are routing to a URL and requesting some information that lives somewhere else. Do this with Google now. Just type into `Chrome`, `www.google.com` and you've achieved this goal. 

#### Server-Side Routing

When we request information from a server, (i.e. a user clicks on a link) and that server then sends back that document that was requested. For example, we click on a link and our URL changes to match the request, then the server goes and finds a `template` or some `html` file and sends it back across the world wide web to deliver that content to the user.

 All of this is handled and achieved on the server, and there are a few things that happen here. The first thing to mention is that the server will then refresh the web page that we're looking at, because a new request was made for information and the information given was a bunch of DOM elements, we have to re-paint the web page. There isn't much we can to do get around that here. On the other hand, it's really nice because the information requested will be the only information given, no more and no less. Because of this we get the opportunity to load smaller portions of the webpage as opposed to requesting/loading the entire thing the whole time the way that we do in Client Side Routing. 

Another bummer to this, is when we have a lot of information being requested. Because the process has to run through a lot of protocols, this can be really slow especially when bandwidth is an issue etc. 

#### Client-Side Routing

Now that we know about how things used to be done in the standard way we can talk about how we handle routing _modernly_. JavaScript and the tools that we have to work with within JavaScript have gotten super sophisticated. Because of the advent of tools like [Google Chrome's V8 Engine](https://en.wikipedia.org/wiki/Chrome_V8) we have the capability to do a lot of things that weren't possible previously. One of those new patterns is using JavaScript to maintain _State_ or memory within our applications and use that memory to tell the Browser what to display when a resource is requested. 

When Routing is handled internally by the JavaScript that is already on the page we achieve what is known as `Client-side routing`. And this tool is how we get things done today, especially in React! And the best part about this is that the page won't refresh! The data is just there, displayed when we ask for it. How this works is that when a user clicks on a requested resource, instead of the client asking for that resource from the server via a URL, JavaScript will prevent this. We then get the resource (state) that is already available to us rendered out and when using react, this happens beautifully through Component-Based Architecture. ",Read through this medium article [here](https://medium.com/@wilbo/server-side-vs-client-side-routing-71d710e9227f). Look at the image above as you read for a visual representation of how both server-side routing and client-side routing work.,"On your own, write down some of the pros and cons for both server-side routing and client-side routing, and then write a paragraph of what you like about both, and which you would prefer to use and why. Submit this to your PM via slack.",4sWAaMcOwFA,http://youtube.com/watch?v=4sWAaMcOwFA,https://www.youtube.com/embed/4sWAaMcOwFA,,Client vs Server side Routing,,,React Router I,,Single Page Applications,Full Stack Web Development Core,,1,1,1,3
explain what HTTP is and the methods used to perform CRUD operations,HTTP is the network protocol (set of rules) used by web applications. Understanding the basics of HTTP will help you write better applications and troubleshoot errors.,"Provide a high level overview of HTTP aimed at helping students understand the relationship between CRUD operations and HTTP Methods when working with RESTful APIs.

Explain what the CRUD acronym stands for.

Mention Status Codes but those will be covered in more detail in the Node sprint as they start building their own APIs.","HTTP is a _network protocol_, a set of rules that govern the way web clients, like a browser, communicate with web servers over the internet.

We, as developers, need to know what HTTP Methods are and how they are used to perform CRUD (Create, Read, Update, Delete) operations on server resources and what HTTP status codes are and what they are used for.

`HTTP Methods` provide a common _language_ or nomenclature that the client can use to let the server know what operation it wants to perform.

When a client needs to ask a server for information it should do a GET request specifying a URL that points to the desired resource.

A POST request is used to ask the server to add or _create_ new resources.

The method used by the client to ask the server to make changes to specific resources is PUT.

To remove or delete data from the server the client needs to send a DELETE request.

We will see examples of how to use those methods from our React Applications.

`HTTP Status Codes` are used to indicate if a _request_ has been successful or not and **why**. The server will set the status code for all responses sent to the client.","We haven't learned how to make any requests other than Get requests. We'll learn others tomorrow. For now, just read about the different HTTP method [here](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods). Then scan over this MDN page about status codes [here](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status). Now, look through this fun status codes documentation to see how someone has illustrated HTTP status codes using cat memes - https://http.cat/. Enjoy!",Send you favorite cat status code to your mentor via slack.,oWyuYnoF5nw,http://youtube.com/watch?v=oWyuYnoF5nw,https://www.youtube.com/embed/oWyuYnoF5nw,,,"HTTP Status Codes,HTTP Methods,HTTP on MDN",,HTTP / AJAX I ,,Single Page Applications,Full Stack Web Development Core,,1,1,1,3
make POST requests to an external API using axios,"We need to not only be able to read information, but send data from our apps across the web to as server to be handled there. With POST we allow ourselves the ability to create data, or send data to our server to be created. ",,"`POST` is the ""C"" in CRUD which stands for Create. We use this `HTTP resource` method to send data across (as a body) the web to be handled by the server for use in CREATING information or storing information somewhere.

#### How to use axios for a POST method


```
  axios     
    .post(`http://somecoolurl.com`, {someData: this is typically form data})
       .then(response => {
         response is the response we get back from the server
         usually on a positive response, we either re-set the state in React OR we navigate to the next page etc.
       })
       .catch(err => {
         if something goes wrong, we handle any errors here
       });
```","For today, we are going to build in the requests for a small app that we have set up for you. We will be making actual AJAX requests, but the server isn't going to do anything with our data. It will verify that we did things correctly, then send back a success message, or an error message. Let's get started! Open up [this codesandbox](https://codesandbox.io/s/v0nl89lmk3) and follow along with the video as we write out the requests.

First we need to write the AJAX request. If you open the `index.js` file, you notice that we have imported `axios` to make our requests. Find the `postMessage` function. This is where we'll write the request. Call the `post` method on the `axios` object and pass in the url. The url is a combination of the base url and the endpoint for the specific request we are making. The base url is `https://lambda-school-test-apis.herokuapp.com` and the endpoint is `/quotes`. So the url we are going to pass is will be `https://lambda-school-test-apis.herokuapp.com/quotes`:

```js
axios.post(`https://lambda-school-test-apis.herokuapp.com/quotes`);
```

Now we need to get the quote from the `PostMovieQuoteForm` component. If we pass down the `postMessage` function on props, we can invoke it from that component, and pass in the movie quote! Since that is our plan, let's go ahead and write in `quote` as a parameter, and then pass that into the axios request as the second argument. Your `postMessage` function should look like this now:

```js
postMessage = () => {
  axios.post(`https://lambda-school-test-apis.herokuapp.com/quotes`, quote);
};
```

Awesome! Now let's handle the response for both a successful call and an error. Add a `.then()` to your axios call. For now, just console log the response. Add a `.catch()` and console log the err.

```js
postMessage = () => {
  axios
    .post(`https://lambda-school-test-apis.herokuapp.com/quotes`, quote)
    .then(response => console.log(response))
    .catch(err => console.log(err));
};
```

Now we can pass this function down to `PostMovieQuoteForm` and invoke it there when the form is submitted.

```js
<PostMovieQuoteForm postMessage={this.postMessage} />
```

Go to `PostMovieQuoteForm.js`. You will noticed that the `onSubmit` handler on the form is invoking a function called `postMessage`. That function call `e.preventDefault()`, then it needs to invoke `this.props.postMessage()` and pass in the movie quote that is on state. It will look like this:

```js
postMessage = e => {
  e.preventDefault();
  this.props.postMessage(this.state.movieQuote);
};
```

Now we are all wired up to make the request. Fill out the form and make the request, and check out your console logs. Make a request with one or more of the fields missing and see what the server is sending back. Then we'll handle the responses in our `.then()` and `.catch()`.

If the call is successful, we get an object back that axios has created. In the `data` property we have the actual response from the server. There is a `successMessage` property with a string, and a `requestBody` property with an object of the quote you sent to the server. So this server is sending us a success message, and the quote object back to us. Let's do something with this.

In `index.js`, on state, there is a property called `postSuccessMessage`. In the `.then()` of the AJAX call, set the success message to that state property. Then pass `postSuccessMessage` as a prop to `PostMovieQuoteForm` and watch the magic happen. Those two pieces should look like this:

```js
axios
  .post('https://lambda-school-test-apis.herokuapp.com/quotes', quote)
  .then(response => {
    console.log(response);
    this.setState({
      postSuccessMessage: response.data.successMessage,
    });
  })
  .catch(err => console.log(err));

...

<PostMovieQuoteForm
  postMessage={this.postMessage}
  postSuccessMessage={this.state.postSuccessMessage}
/>
```

Finally, the last thing we need to do is handle errors. If you open the project up in your browser and send a request with one of the fields missing, you should see this in your console:

<img src=""https://tk-assets.lambdaschool.com/60d29d50-ae5a-40fe-b576-81474800bad9_ScreenShot2018-11-01at10.25.33AM.png"" alt=""error message"" width=""400"" />

The server is actually sending an object, but axios is throwing this error. In order to access the object, we need to console log `err.response`. Now, run that bad request again. Now we have a `data` object with an `Error` object with our error message. Set the state for the `postError` state property with `err.response.data.Error`, pass that down to the component, and watch the magic happen again! Your code should look like this:

```js
axios
  .post('https://lambda-school-test-apis.herokuapp.com/quotes', quote)
  .then(response => {
    console.log(response);
    this.setState({
      postSuccessMessage: response.data.successMessage,
    });
  })
  .catch(err => {
    console.log(err);
    this.setState({
      postSuccessMessage: '',
      postError: err.response.data.Error
    });
  });

...

<PostMovieQuoteForm
  postMessage={this.postMessage}
  postSuccessMessage={this.state.postSuccessMessage}
  postError={this.state.postError}
/>
```

The last thing we want to do is clear our success message if the call fails, or clear the error message if the call is successful:

```js
axios
  .post(""https://lambda-school-test-apis.herokuapp.com/quotes"", quote)
  .then(response => {
    console.log(response);
    this.setState({
      postSuccessMessage: response.data.successMessage,
      postError: """"
    });
  })
  .catch(err => {
    console.log(err);
    this.setState({
      postSuccessMessage: """",
      postError: err.response.data.Error
    });
  });
```","Open the app we just worked on in the browser. Open the dev tool and click on the `network` tab. Clear the requests that are in there right now. Make a successful request and a bad request. Click on each request in the list and explore the 4 tabs that open up to the right of the request. Find all of these things inside those for tabs:

#### Header tab

- Request url
- Request method
- Status code
- Request Payload

#### Preview tab

- Server response

#### Reponse tab

- Raw server response

#### Timing

- Total request time in ms",zPE6ySO5QUY,http://youtube.com/watch?v=zPE6ySO5QUY,https://www.youtube.com/embed/zPE6ySO5QUY,,Axios Post,,,HTTP / AJAX II,,Single Page Applications,Full Stack Web Development Core,,1,1,1,3
demonstrate the ability to use Object literals and Arrays along with the common Array methods,"Objects and Arrays are used all over in JavaScript. In fact, without the object, we don't have the JavaScript language. Understanding how everything we do in JavaScript is built on objects (including) arrays, is not only crucial to your understanding of the language, you won't be able to go very far without knowing about them.","This lesson is designed to help students learn all about objects and how we use them, arrays and how great they make our lives, functions and how to write an effective program and how to pass functions around as (arguments) callbacks to be returned/executed within other functions.","### Objects
Lets learn how to create an `object literal` and assign it properties/values by use of `dot notation` and `bracket` notation. Objects can give a program access to their properties.

Objects are super powerful (In fact, you may hear this a lot `Almost Everything is an Object` in JS) and are used throughout almost every single part of the JavaScript Programming language. You cannot get away from Objects when working with JavaScript. 

Objects in JavaScript are used as a way to store data, and then, give the programmer access to that data when needed. The power behind objects is that they use what we call a `key` (`property`) : `value` pair matching for storing the data.

Lets look at the following example:

```js
const myPersonalObject = {
  firstName: 'Fred', 
  lastName: 'Flintstone',
};
```

In the object above, we can demonstrate a person in data format, and `USE` this object later on in our program. The `keys` of `myPersonObject` are `firstName` and `lastName`. The values of those keys are `Fred` and `Flintstone` Respectively.

That being said if we want to use this object later on, all we have to do is reference it with either `bracket` or `dot` notation. 

#### **Dot Notation** for referencing the `firstName` property is:
```js
myPersonalObject.firstName // -> gives us 'Fred' 
```

#### **Bracket Notation** for referencing the `firstName` property is:
```js
myPersonalObject[""firstName""] // -> gives us 'Fred' 
```

**notice** the quotes around the 'firstName' prop. This is because we're using `brackets` around the firstName value. _More to come on this later_

If we want to change ""Fred's"" first name, all we'd have to do (just like a variable) is reference what we want changed and set it `=` to something. 

For example, if Fred's name were to be changed to reflect `Wilma` all we'd have to do is select the property with either `bracket or dot notation`, and then set it `=` to 'Wilma'

```js
myPersonalObject.firstName = 'Wilma';
```

**NOTICE** it's really important to remember that an `Object` or `Array` 's values are mutable by default. Meaning, even though `myPersonalObject` is set to a `const`, it's values can be changes. This is because, `myPersonalObject` is never going to point to another object, but we can change the props on an Object or an Array all we want. 
 
There are a few really neat methods for handing Objects that have recently been added to more recent versions of the JavaScript language. 

```js
Object.keys() -> Gives us an array back of the Object's properties/keys

const keys = Object.keys(myPersonalObject);
returns ['firstName', 'lastName'];
```

```js
Object.values() -> Gives us an array back of all the Object's values

const values = Object.values(myPersonalObject);
returns ['Wilma', 'Flintstone'];
```

```js
Object.entries() -> Gives us back an array of the Object's key/value pairs as a `tuple`

const entries = Object.entries(myPersonalObject);
returns [ [ 'firstName', 'Wilma' ], [ 'lastName', 'Flintstone' ] ]​​​​​
```

When dealing with Objects it is common practice to see them handled in this way. 

### Arrays
Lets Learn about the fundamental usage of the array in JavaScript how to define an array and assign it to a value.

Arrays have a special `0 based` indexing (organizational) ability. They allow us to store data in them sequential based on 0. An array under the hood might look something like this:

```js
array: {
  '0': 'firstValue',
  '1': 'secondValue,
}
```

Even though Arrays in JavaScript are just specially treated Objects under the hood (run `console.log(typeof [])` in the chrome console to see what I mean) they actually behave quite a bit differently.  For one they are index based, and ordered, where as Objects are not ordered or sorted in any fashion.

Arrays in JavaScript are `0` index based. Which means the first item found in an array will be found at index 0. So item 1 will be index 0, item 2 will be index 1 etc. This can be confusing but once you get used to it, Arrays become quite nice to work with.

You can actually access any item in an array by selecting the array, and using 'brackets' to select which index you want to reference. 

```js
const hogwarts = ['Harry', 'Hermione', 'Ron'];
```
hogwarts[0] === 'Harry';
hogwarts[1] === 'Hermionie';
hogwarts[3] === 'Hermionie';

If you wanted to add a character to our hogwarts array, you could do so by using `.push()`

```js
hogwarts.push('Dumbledore');
gives us -> ['Harry', 'Hermione', 'Ron', 'Dumbledore]';
```

If we wanted to add something to the front of the array, we can use` `.unshift()`

```js
hogwarts.unshift('Snape');
gives us -> ['Snape', 'Harry', 'Hermione', 'Ron', 'Dumbledore]';
```

If we wanted to remove the last item in the array. Use `.pop()`

```js
hogwarts.pop(); -> this will give you the item poped off the array.
gives us -> ['Snape', 'Harry', 'Hermione', 'Ron']';
```
","Create an object that tells us all about you. This object should include your firstName, lastName, age, homeTown and favoriteColor

Once you're done creating your object. Return a list of the values of these properties as an array. Return a of the properties of your object as well. Lastly, return a list of the entries as 'tuples' of your object. 

Create an array of your favorite things. Use methods like `.push()` `.unshift()` `.splice()` to play around with your list.","Objects: Work through all of these exercises on JS Bin: [Objects](http://jsbin.com/qovekek/edit?js,console)

[A POSSIBLE solution to Objects](https://jsbin.com/toficevozo/edit?js,console)

Arrays: Work through all of these exercises on JS Bin [Arrays](http://jsbin.com/cevabit/edit?js,output)

[A POSSIBLE solution to Arrays]()",,,,,,"Arrayzing,Array Explorer,Object Explorer",,,,,,,1,1,,2
describe the difference between local and global middleware and demonstrate proper understanding of each by implementing a piece of local and a piece of global middlewares,When using node and express it is important to understand that you NEED to use middleware almost everywhere. You can think of your route handlers that you've been implementing thus far as their own individual pieces of middleware. ,"There may be many terms out there that achieve the same description as 'local vs global' middlwares. When talking about this subject it's important to understand that there are times when we want all of our routes to be concerned with a specific piece of Middleware - this Global middleware. There are also specific times in our applications when we want routes to be concerned with only a select piece of middleware. Or maybe just a few of our routes need to know about a specific piece of logic, this can be achieved using `local middleware`.","Middleware is everywhere in NodeJS, especially when using a framework like express to design, build and implement our server side applications. Middleware can be represented in terms of a specific route handler (you have already seen this) like so:

```
server.get('/api/users', (req, res, next) => {
   res.send(req.body);
});
```

There are some things to note here as we look at this very basic route handler:
* Whatever happens in this body is the middleware for this route. 
* This is also known as a route handler. 
* notice 'req' and 'res' are available for our use here, that is because express is handing them into this callback. 
* Last thing to note is that we could potentially define a `next` parameter that will be supplied to this handler's callback for use by express.

In the above snippet of code, we can see a very straight forward `server.get()` route with a processable path `'/api/users'` to a resource, and a callback function that accepts `req, res and next`. Nothing fancy here other than the third new argument that we're potentially seeing for the first time. 

The `next` function is a parameter that is used to tell Express where to go and when. The best way to describe the `next` function can be found [here](https://stackoverflow.com/questions/13133071/express-next-function-what-is-it-really-for). After we have a resource requested, and we have some middleware applied to it (more on this in a min) we can essentially tell Express ""hey we don't actually want to handle this resource request quite yet, just move onto the next piece of middleware"". In a minute you'll see why `next` is so handy. For now it is sufficient for you to know that `next` is a third argument that can be supplied to your ""node-style callbacks"" in your route handlers. 

Because it is just a callback that we supply to our route handlers is pretty much always the same everywhere we go in express, this work can actually be defined in a function that is declared else where in your application. Consider this code block for a second:

```
const handler = (req, res, next) => {

    res.send(req.body);
};

server.get('/api/users', handler);
```
We've taken the work of the callback and simply offloaded it to a function called handler. This is a pretty common practice to separate the concerns of your route and any business logic can be done in a separate function. This is also how middle ware works. 

Lets now consider this, what if I have some work that is shared amongst requests? Well as a developer we'd instantly think about the `Do not repeat yourself or DRY` principle. By using middleware that we write on our own, we can offload this work to a single place, and simply pass that work around between resources and route handlers. 

Lets see how this works if we have a route that should be p",,"For your challenge today you'll be working through the `Auth-Mini` project found in [this repository](https://github.com/LambdaSchool/Auth-Mini)

Please follow directions in the `Readme.md`.",,,,,Middleware explained,,"* What does it mean to protect content?
* What is one way that the server can take care of state to know who is interacting with it?
* What does the next function do?",,,,,,1,1,,2
"demonstrate the proper use of `Object.assign()`, `Array.concat()`, `Array.map()` & `Array.filter()`",Redux is based on the immutability principle. Learning and familiarizing yourself with this principle will help you in many aspects of your development career.,"Immutability is a conversation that ought to be had much sooner in the curriculum, however, Redux week is the BEST week for demonstrating it's real-world use cases. Redux came from the idea that all objects should be immutable, and functions pure. When we dispatch out Actions in Redux, we're simply calling a `pure` function, who's purpose is to give us clues as to when, where and how our State (Store) changed. This provides for much more thorough reporting and of course, time-travel debugging.","It is imperative for one to understand the idea of ""immutability"" when discussing Redux. This idea of an immutable state object isn't new to programming. It is just a bit clunky in the JavaScript language. This Objective is aimed at getting us prepared to deal with the Redux `Store` object that we will be working with in our React/Redux applications.

As we learned previously, JavaScript types can be separated into two categories: Primitive Types and Reference Types. We looked at the inherent problems we can face when dealing with reference types. Now let's look at some immutably functions that will help us use reference types while staying immutable.

### Array methods - `.map` `.filter` and `.concat`
Map, filter, reduce, concat, and some other array functions are functions that do not mutate the array you are working with - meaning they can be used to keep our code immutable. When used properly these methods produce no side effects. Rather, they return a new array based on the logical callbacks passed to the few that accept them. 

We can perform some serious operations based off of the original array. It's really easy to see why it'd be important for one to think about immutability based off of the given example. 

```js
const myArray = [1, 2, 3, 4, 5, 6, 7];
const evens = myArray.filter(num => num % 2 === 0);
const odds = myArray.filter(num => num % 2 !== 0);
const evensThenOdds = evens.concat(odds);
console.log(myArray); // logs the original array with no changes
console.log(evens, odds, evensThenOdds; // logs the new arrays
```

`.filter()` is taking a callback function as an argument, and returning a brand new array. The original array is logged, and we can see that it hasn't been mutated, therefore we have avoided introducing any side effects into our code.

`.concat()` is ""concating"" the two arrays into a single, new array. This could also be donw with the `spread operator`. We can create a new array, and ""spread"" in all of the values from the other two arrays - `const evensThenOdds = [...evens, ...odds];`

### Object method - `Object.assign`
Objects also have methods that we can use to keep our code immutable. The one we will focus on is `Object.assign()`. This is a method that creates a brand new object (do you see a pattern here?), copies another object's properties and values into it, and updates whichever values we want to update in our *new* object, or adds new key/value pairs. Again, it leaves the original object alone, not mutating it at all.

```js
const myObject = {name: 'Ryan', scores: [33, 31, 29, 37, 34, 34, 43], age: 31};
const newObject = Object.assign({}, myObject, {age: myObject.age + 1});
console.log(myObject, newObject);
```
Both objects are logged, `myObject` has not been mutated, and `newObject` has the updated `age` property. 

With newer versions of JavaScript now out, we can also accomplish this same thing with the `spread operator`.

```js
const myObject = {name: 'Ryan', scores: [33, 31, 29, 37, 34, 34, 43], age: 31};
const newObject = {
  ...myObject,
  age: myObject.age + 1
};
console.log(myObject, newObject);
```
The result is the same. The spread operator ""spreads"" in all the properties from `myObject`, and their values, into the new object that is being created by the `{}` braces. Then we update the age property. You will probably see the spread operator used more in the industry now that it is available to us.

Let's take a look at object and array methods working together.
```js
const myObject = {name: 'Ryan', scores: [33, 31, 29, 37, 34, 34, 43], age: 31};

const newObject = {
  ...myObject,
  age: myObject.age + 1
};

newObject.scores = myObject.scores.reduce((a, b) => {
  return a + b;
});
newObject.scores = newObject.scores / myObject.scores.length;
console.log(newObject);

const scoresLessThan34 = {
  ...myObject
};
scoresLessThan34.scores = myObject.scores.filter((item) => item >= 34);
```","Demonstrate the use of Immutability when looping over data and returning a new output of that data.

`map` out a new array of people's ages aging them all one year. Don't manipulate the given array, but return a new array with the values added up.

`reduce` a set of given ages into an average of ages. Once again do not mutate the original array.

`filter` out any of the ages that are not yet considered adults. Return a new array of those that are older than 18.

`concat` our array adding a new character to it. Remember again to create a new array from your given array and not to manipulate the original. _(`.push` `.unshift` shouldn't be used here. )_

Once we achieve this with the `.concat` method, lets refactor it to use the `spread operator`. `[...myArrayOfAges, {name: 'Mr. Slate', age: 41}]`

```js
const myArrayOfAges = [
  {name: 'Fred', age: 43},
  {name: 'Barney', age: 39},
  {name: 'Wilma', age: 38},
  {name: 'Betty', age: 38},
  {name: 'Bam-Bam', age: 3},
  {name: 'Pebbles', age: 4},
  {name: 'Dino', age: 2},
];
```","Go to www.repl.it and build some data in a new replit. You can have an array with some objects, or an object with some arrays, or have an array and a separate object, but you will need some data with both types.

Run some immutable functions on your data to update or add to the data. Use the ""Follow Along"" section you just finished as inspiration for how to do this. You will want to console.log your results, as well as your original data to make sure that you are getting the results you want without mutating the original data.

_If you need help thinking about data to build, try building a TODO list like we've used before. Then write functions to add a todo task, toggle a task, and clear out toggled tasks. Again, make sure your original data is not being mutated_",QSWPtXgdqvA,http://youtube.com/watch?v=QSWPtXgdqvA,https://www.youtube.com/embed/QSWPtXgdqvA,https://www.youtube.com/watch?v=7ZZ_xVKVcrE&feature=youtu.be,,A case for immutability ,,Redux Fundamentals II,,Redux,Full Stack Web Development Core,,1,1,1,3
explain the three different parts of a JSON web token.,"We can use JSON web tokens (JWTs) to add authentication to a Web API. A JSON web tokens is an industry standard for transferring data between two parties.

JWTs are cryptographically signed, typically using a secret with the HMACSHA-256 algorithm.

In this section we'll look at the anatomy of a JWT.",,"A JWT is a string that has three parts separated by a period (`.`). Those are:

- The header.
- The payload.
- The signature.

#### Header

The header will contain the algorithm with the token type. Typically the header for a JWT will look like this.

```json
{
  ""alg"": ""HS256"",
  ""typ"": ""JWT""
}
```

the `alg` key specifies which algorithm was used to create the token, in this case the HMACSHA-256 algorithm was used, and the `typ` property classifies this token as being of the type JWT.

##### Payload

The payload includes _claims_ (fancy name for things like permissions for the user) information or any other data we'd like to store in the token, which is most likely a user id. There are specific claims defined in the JWT standard, and you can also add your own properties to this object.

An example:

```json
{
  ""sub"": ""1234567890"", // standard - subject, normally the user id
  ""name"": ""John Doe"", // custom property
  ""iat"": 1516239022 // standard - The Date the token was issued, expressed in seconds since epoch.
}
```

##### Signature

To create a signature, we must create a string by base64 encoding the header and payload together, and then signing it with a secret.

Combining all three parts, you will get a JWT that looks like this:

```
eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
```","Visit [this site](https://jwt.io/) and click on the `Debugger` navigation link at the top to see a nice representation of a JWT.

On the left-hand side, there is a sample JWT, and on the right we can see the different parts highlited in a differnt color to match the parts of the JWT string that represent those.",Write a paragraph  describing the parts of a JWT and send it to your PM on slack.,,,,,"Anatomy of a JSON Web Token,JSON Web Tokens vs Sessions/Cookies",,,Using JSON Web Tokens (JWT),Active,Authentication,Full Stack Web Development Core,,1,1,,2
handle a JSON web token produced by a web server within a client side application ,,,,,,,,,,,,,Client Side Authentication,,Authentication,Full Stack Web Development Core,,0,,,0
install LESS globally on a computer,Preprocessing extends the ability of CSS by adding abstractions and making CSS easier to use. There are many flavors of preprocessors but the one we will focus on will be LESS (Leaner Style Sheets).  LESS is a language extension for CSS.  It fits nicely into almost every type of development stack and has been ported to JavaScript among many other programming languages. http://lesscss.org/,Students are required to watch a video detailing how to install LESS but it would be worth the time to go over it again in the guided demo and take time to make sure everyone has it installed correctly.,"Review what a LESS project looks like and how it's different from a normal CSS project. 

A good practice is to have a dedicated LESS folder to showcase that the compiled CSS does not reside in that folder.
","**If you're on a Windows machine, install git bash before you start this process.**
<br>
<br>
To install LESS on your machine:
<br>
<br>
Step 1: Install node.js  ***NOTE: node package manager (NPM) comes bundled with a node.js install***
<br>
<br>
Step 2:  Open your terminal or git bash and make sure you have installed node and npm by running: ```node -v``` for node and ```npm -v``` for npm.
<br>
<br>
***If you experience errors at this stage, please reach out to a TA for assistance.***
<br>
<br>
Step 3: Update npm by running:<br>
 ```npm install npm@latest -g``` or ```sudo npm install npm@latest -g``` if you have permissions errors
<br>
<br>
***NOTE: For mac users in terminal, you will need to run the super user do ```sudo``` command for any npm installs.  This is because of the default location where node.js installed their files. If you want to learn more about this behavior and want to attempt to change this.  There is a link in this module. ***
<br>
<br>
Step 4:  Now, with your terminal or git bash still open, lets install LESS globally on your machine by running: ```npm install -g less``` or ```sudo npm install -g less``` if you have permissions errors
<br>
<br>
Congratulations, you have now installed Node, npm, and LESS globally on your machine!",Go to the github resource folder and fork the example there.  Get the LESS to compile into CSS.,,,,,"Git bash for Windows,Node.js,Install Node Package Manager (NPM),Install LESS with npm",,,,,,,,1,1,,2
"implement variables, mixins, nesting, nested at-rules in LESS.",Preprocessing extends the ability of CSS by adding abstractions and making CSS easier to use. There are many flavors of preprocessors but the one we will focus on will be LESS (Leaner Style Sheets).  LESS is a language extension for CSS.  It fits nicely into almost every type of development stack and has been ported to JavaScript among many other programming languages. http://lesscss.org/,,"**Variables**

Variables in LESS are identified with the `@` symbol.  Variables allow developers to hold onto important values like font stacks, colors, and width sizes to name a few.

*Variable Syntax:*
```css
@variable-name:  #FF0000;
```
*Variable Usage:*
```css
@variable-example:  #FF0000;

.some-class {
  font-size: 14px;
  color: @variable-example; // #FF0000
}

.another-class {
  width: 60%;
  height: 150px;
  font-size: 10px;
  color: @variable-example; // #FF0000
}
```
**Mixins**

Mixins derive their name from the ability to mix different classes together.  Being able to create one class and use it's properites within another class opens new possibilities in CSS.

*Mixin Syntax:*
```css
.some-class {
    color: red;
    font-size: 14px;
}

.example-mixin {
    text-align: center;
    .some-class();
}
```
*Mixin Usage:*
```css
.font-class {
  color: black;
  font-size: 18px;
  text-align: center;
}

.box-class {
  width: 100px;
  height: 100px;
  background: gray;
}

.example-mixin {
  .font-class();
  .box-class();
}
```
*Compiles to:*
```css
.example-mixin {
  color: black;
  font-size: 18px;
  text-align: center;
  width: 100px;
  height: 100px;
  background: gray;
}
```
**Nesting**

Nesting is extremely useful for organizing our code and keeping our specificity scoped properly. However, we don't want to be so specific that we become completely rigid in our code. A good rule to follow with nesting is to avoid going more than 4 levels deep if possible.

*Nesting Syntax:*
```css
.parent {
  color: black;
  font-size: 12px;

  .child {
    color: red;
    font-size: 16px;
  }  
} // parent
```
*Compiles to:*
```css
.parent {
  color: black;
  font-size: 12px;
}
.parent .child {
  color: red;
  font-size: 16px;
}
```
*Nesting Usage:*
```css
.parent {
  color: black;
  font-size: 12px;
  border: 1px solid black;
  padding: 20px;

  .child {
    color: red;
    font-size: 16px;
    margin: 20px;

    .grandchild {
      width: 400px;
      height: 100px;
      background: gray;
    }
  }  
} // parent
```
**Nested At-Rules and Bubbling**

Being able to nest `@media` directly into a selector increases code readability for you and the next developer working on your code.  You no longer need to memorize if a selector had mobile styling on it or not.  You can simply see the nested media queries and know what is going to happen to that selector for all sizes.  The ""bubbling"" occurs because although we are nesting the `@media` it actually bubbles up to wrap the selector that it's nested in.  Study the syntax to see how the bubbling occurs.

*Nested At-Rule Syntax:*
```css
.some-class {
  width: 800px;
  background: gray;

  @media (max-width: 800px) {
    width: 100%;
    background: black;
  }
}
```
*Compiles to:*
```css
// The compiled version showcases how the media query that was once nested inside .some-class in LESS has now bubbled to enclose the selector in CSS

@media (max-width: 800px) {
  .some-class {
    width: 100%;
    background: black;
  }
}
```
*Nested At-Rule Usage:*

```css
.some-class {
  // Large screen styling
  width: 800px;
  height: 100%;
  background: gray;

  // Medium screen styling
  @media (max-width: 800px) {
    width: 100%;
    background: black;
  }

  // Small screen styling
  @media (max-width: 500px) {
    width: 80%;
    background: green;
  }
}
```

**Operations**

Occasionally you will have a need for simple math operators in your CSS. You can use `+`,`-`,`*`, and `/` on any number, color, or variable. Be careful, operators take units into account and will convert numbers before adding. To find out what unit to expect, you need to look at the leftmost stated unit type.

*Operations Syntax:*

```css
.some-class {
  width: 100px + 10; // 110px
}
```

*Operations Usage:*

```css
.some-class {
  width: 100px + 10;  // 110px
}
.some-class {
  width: 100px - 10;  // 90px
}
.some-class {
  width: 100px * 10;  // 1000px
}
.some-class {
  width: 100px / 10;  // 10px
}
```

",,"Variables and Nesting Single Challenge:

***Rules of the challenge***
1. You cannot change the values of the variables
2. You cannot change class names on the HTML
3. No adding additional color properties
4. Match the colors with the titles in the boxes

Study the code and re arrange the selectors and variables correctly.

[Click here to see the challenge code](https://codepen.io/lambdaschool/pen/YdNPOg?editors=1100)",,,,,"Introduction to Preprocessors,Official LESS Documentation",Codepen,,Preprocessing I,Active,Advanced CSS,Full Stack Web Development Core,,1,1,,2
"create parametric mixins, use functions, and incorporate escaping","Parametric mixins, functions, and escaping round out the advanced features of LESS and give developers even more tools to accomplish their goals in UI. ",,"## Parametric Mixins
Parametric mixins are a great precursor to JavaScript because they use arguments and parameters in their syntax.  Let's review what a normal mixin looks like first:

```css
.center(){
	display: flex;
	justify-content: center;
	align-items: center;
}
// usage
.center();
```
Notice how the `.center()` mixin does not allow for any flexibility.  This mixin is so rigit that we can only use it for one purpose, to center something both horizontally and vertically.  What if there was a way to be more dynamic?  Enter parametric mixins.  We can use parameters to pass in interpolated values from arguments.  Review this example:
```less
.custom-layout(@justify, @align){
	display: flex;
	justify-content: @justify;
	align-items: @align;
}
// usage
.custom-layout(flex-end, center);
```
We can now use our `.custom-layout` mixin for any valid combination of `justify-content` and `align-items`.  This could come in handy for a lot of situations, not just centering.  

Parametric mixins are useful in a lot of situations but don't assume you need them for everything.  New developers to preprocessors can get overly excited about using parametric mixins when a simple class would get the job done.  Be mindful by thinking ""Will this mixin help me many times in the future?""  If the answer is no, avoid unnecessary complexity.

## Functions
Functions are pre-built pieces of code from the LESS library itself.  We can [view all available functions available found in their documentation](http://lesscss.org/functions/).

Looking over that list of functions can be intimidating.  Trying to use them can be even worse.  The documentation on how to use functions isn't super clear.  Most functions are returning a value which can be a strange concept in CSS when you're not used to that behavior.  Let's take a look at some functions that have some nice value: lighten and darken.

You will run into situations in your career where one of your team members will say ""Can you make that hover just a little darker?""  This can be achieved nicely with the function darken.   Let's take a look below.
```html
<button class=""btn-class"">Sign Up</button>
```
```less
.btn-class {
  padding: 10px 40px;
  border-radius: 10px;
  background-color: teal;
  color: white;
  cursor: pointer;

  &:hover {
	// The compiled color returned is #006667 
    background-color: darken(teal, 5%)
  }
}
```
Using `darken()` made it really easy to control our styles without having to get out any tools to find a ""darker"" color.  You can also use `lighten()` to get the opposite effect.  Give it a try on your own to see how it works.

Functions are powerful and similar to parametric mixins, use them as you need them instead of looking for ways to make your codebase complex.  Start by getting used to `darken()` or `lighten()` and start branching out into more.

## Escaping
Escaping is a niche tool that has a lot of use with media queries.  The concept of escaping is that you can use string values stored in variables to help make your code DRY.

Let's take a look at an `<h1>` element with some nested media queries that aren't using escaping
```less
h1 {
  font-size: 2rem;
  padding: 10px;

  @media( min-width: 500px ) {
    padding: 20px;
  }

  @media( min-width: 800px ) {
    font-size: 1.8rem;
    padding: 0 10px;
  }
}
```
Now imagine that you have several of those media queries throughout your site and the marketing team comes with a request to lower the desktop breakpoint to 750px.  You would need to do a find and replace in your whole code base and hope you didn't overwrite something important.

With escaping, you can use variables to hold a string value.  The syntax looks like this `~""some string value""`.  Let's see it in action using our previous example with escaped values for the media queries.
```less
// Escaped values
@tablet: ~""(min-width: 500px)"";
@desktop: ~""(min-width: 800px)"";

h1 {
  font-size: 2rem;
  padding: 10px;

  @media @tablet {
    padding: 20px;
  }

  @media @desktop {
    font-size: 1.8rem;
    padding: 0 10px;
  }
}
```
You are probably thinking ""I wish I could put that `@media` tag in there too!  The problem is, the `@media` tag wouldn't get interpolated if it was a string value.  That's another way of saying we can't use `@media` because the compiler wouldn't understand it as a string.

Lets go back to our previous issue where the marketing team wanted to update the whole site's desktop media queries to `750px`.  With a single change to our `@desktop` variable, we can instantly upgrade our whole site in seconds without accidentally deleting anything or mutating unexpected values!  

Escaping is really only used for this exact scenario in the LESS ecosystem, but it's so powerful it's worth learning and using.  Play around with the code above and see how it all works together.",,,,,,,,,,Preprocessing II,,Advanced CSS,Full Stack Web Development Core,,1,,,1
create a master LESS file and use importing to create a project. ,"Using imports to craft a more abstracted LESS experience is an amazing option for working on teams.  Before imports, developers would need to constantly communicate on what part of the CSS file they were working on to avoid merge conflicts in git and overwriting files.  ",Focus on the fact that many partial files come into one file through imports and are exported by the compiler into one CSS file.,"## Imports
It is not uncommon to see a CSS file with thousands of lines of code.  Being able to edit a file like that can breed unexpected results and accidental side effects.   We can use imports to control the chaos by building smaller files that flow into one file that is then compiled into CSS.

The syntax in LESS looks like this:

```css
	@import 'filename';
```
If you had any previous experience in CSS, you may have just thought ""Wait, is that @import I see?  I thought we were supposed to avoid importing multiple files into a web page?""  You are correct about being careful with the native CSS `@import`.  However, this is LESS, our compiler uses the `@import` to combine files together instead of creating new requests!

Most developers will have their imports in a central location like `index.less`.  This allows you to have a single source of truth for all of your imported files.  Let's see what an `index.less` could look like in a project:

```css
// The cascade matters!

// Vars and Mixins
@import ""variables"";
@import ""mixins"";

// General Styles Here
@import ""reset"";
@import ""general-styles"";

// Components Here
@import ""header"";
@import ""cta"";
@import ""main-content"";
@import ""contact"";
@import ""footer"";
```
You can see how organized our code is now!  Instead of scrolling through thousands of lines of code, you could focus in on one file instead.  This structure also makes it easier to work on teams of developers and avoiding merge conflicts when working on CSS.
",,The best way to understand how imports work is to try it out yourself.  Go to a project you have worked on in the past weeks and refactor it using LESS and imports.,,,,,,,,Preprocessing II,,Advanced CSS,Full Stack Web Development Core,,1,1,,2
use Jest to test the expected behavior of a variety of JavaScript functions.,"Unit testing the behavior of your code is a very common practice in today's programming world. We see many large scale teams, -- companies with incredibly complex code-bases with many moving parts -- writing unit tests when developing software.","First day of teaching about testing I really like to install a Jest/mocha testing environment in front the students. You can walk through the docs [here](https://facebook.github.io/jest/docs/en/getting-started.html) and start doing some really simple tests. 

This shows the students that there really isn't much to be afraid of when setting up a testing suite inside of their projects. The more important stuff comes later when we have them use libs like `enzyme` to get started with testing their react code. 

Notes on Sean's previous Lecture: 
* Building a House is tangible. Writing software isn't. There is no physical medium when writing code. 
* You write your code, and one thing you could do is trace through the code in your mind. But that is another added step.
* There is a layer of abstraction.
* The goal of testing is to make that extra layer of abstraction as tangible as possible. 
* TDD - Write tests first you gain a specification for your tests.
* Conversation on Test Runner's vs. Test Assertion libs. 
","Lets set up a Jest testing environment and start playing around with testing syntax.

**Step 1. ** Create a directory called `test-playground` and cd into it.

**Step 2. ** run `yarn init` to create a `package.json` file inside of your project. Then run `yarn add jest` to install the Jest module.

**Step 3. ** tweak your `'test script'` in your `package.json` file to look like this:
```
scripts: {
  ""test"": ""jest --watch""
}
```
With this in place, type `yarn test` at the terminal to run your all tests.  Tests will re-run automatically when the test files or tested code files change.",,,,,,,"An Overview of JavaScript Testing in 2018,Unit testing TDD and BDD,More TDD and BDD",,,,,,,,1,,,1
test a simple Web API.,"When building a Web API using _Express_, we use _unit testing_ to test the application logic and _integration testing_ to test the _route handlers_ and _middleware_.

We write tests to verify that the API endpoints return the expected values and HTTP status codes. We also write tests to make sure that we're returning the data using the right format (HTML, XML, JSON) and several other things.","The first thing to explain about testing an API is a walk through about how to create good documentation. For this I pull up examples of docs that I really like. Something like [GitHub Docs](https://developer.github.com/v3/). A good discussion about documentation writing should revolve around using tools like Markdown and the ""Markdown Preview"" tool in VSCode. 

I like to show them the [following](https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet) and walk through some of the more basic parts of the markdown language. ","The tests we write for endpoints are called _integration tests_ because they test how different parts of the system work as a whole. This is different from the _unit tests_ we use to verify correctness of one unit of work in isolation.

We'll use an npm module called [supertest](https://github.com/visionmedia/supertest) that makes it easier to write tests for Node.js HTTP servers. We can use `supertest` to load an instance of our server, send requests to the different endpoints and make assertions about the responses.

We can use _supertest_ to verify that making a `POST` request to a particular endpoint returns a `201` HTTP status code after successfully creating a _resource_, or that it returns a `500` code if the server ran into an error while processing the request. Writing such a test may look like this:

1. save a reference to the server.
2. use supertest to make a post request passing correct data inside the body.
3. check that the server responds with status code 201.

We can use the same technique to test _middleware_ and endpoints.","Please follow along as we configure our testing environment, write a simple endpoint and the corresponding tests for it.

Create folder and configure our testing environment.

- create a folder and `cd` inside it.
- type `git init` to initialize a git repository to help _jest_ detect changes.
- let's initialize it with a `package.json` by running `npm init -y` in our terminal.
- use `yarn` or `npm` to add `express` as a regular dependency and `jest` and `supertest` as **development dependencies**.
- add a _test_ script inside `package.json` that runs our tests: `""test"": ""jest --watch --verbose""`.
- since we'll be running in _Node.js_ instead of the browser we need to configure _jest_ to run in _node mode_.

  - inside `package.json` add a property called `jest` and configure it like this:

  ```json
  ""jest"": {
    ""testEnvirnoment"": ""node""
  }
  ```

We have all we need to start working on our API. Begin by adding a file that to hold tests for our server, call it `server.spec.js` and add the following code.

```js
/*
- when making a GET to the `/` endpoint 
  the API should respond with status code 200 
  and the following JSON object: `{ api: 'running' }`.
*/
const request = require('supertest'); // calling it ""request"" is a common practice

const server = require('./server.js'); // this is our first red, file doesn't exist yet

describe('server.js', () => {
  // http calls made with supertest return promises, we can use async/await if desired
  describe('index route', () => {
    it('should return an OK status code from the index route', async () => {
      const expectedStatusCode = 200;

      // do a get request to our api (server.js) and inspect the response
      const response = await request(server).get('/');

      expect(response.status).toEqual(expectedStatusCode);

      // same test using promise .then() instead of async/await
      // let response;
      // return request(server).get('/').then(res => {
      //   response = res;

      //   expect(response.status).toEqual(expectedStatusCode);
      // })
    });

    it('should return a JSON object fron the index route', async () => {
      const expectedBody = { api: 'running' };

      const response = await request(server).get('/');

      expect(response.body).toEqual(expectedBody);
    });

    it('should return a JSON object fron the index route', async () => {
      const response = await request(server).get('/');

      expect(response.type).toEqual('application/json');
    });
  });
});
```

In this code we see three things we commonly test for our endpoints:

- does it return the correct status code for the input provided?
- does it return the data in the expected format?
- does the data returned, if any, has the right content?

We are listing them all at once, but you will write one _test case_ at a time, then move on to making that test pass and do any required _refactoring_ before writing the next test.

When testing your endpoints, start with those three tests and then move on to write tests that will be unique for the system you're building. The _payroll_ endpoints for an accounting system will required unique tests that will be different from the ones required by the _accounts payable_ module. **There is no one size fit's all when it come to testing**, each system will have it's own set of requirements that will need verification.

Create the `server.js` file and add the following code to make the tests pass:

```js
const express = require('express');

const server = express();

server.get('/', (req, res) => {
  res.status(200).json({ api: 'running' });
});

module.exports = server;
```

Notice we are not starting the server with `server.listen(port)`, this is a common pattern, we separate the server implementation from the code that _runs_ the server. If we start listening for requests in this file, then every time a test runs, it will attempt to start a new instance of the API using the specified port and run into an _""address (meaning the port number) in use""_ error. Using this technique we avoid those types of error and decouple two different concerns: 1) building a server and 2) using a server to listen for requests.","Use TDD to implement a `/sing` endpoint that returns the string ""I believe I can fly, I believe I can test an A-P-I!"".",pgAXFyFDa4M,http://youtube.com/watch?v=pgAXFyFDa4M,https://www.youtube.com/embed/pgAXFyFDa4M,,,Server Testing,,Testing the Back End,Active,Testing,Full Stack Web Development Core,,1,1,1,3
describe and understand that flexbox is a module,Flex box confuses new developers because previous uses of `display` only had one effect.  Using `display: flex;` invokes a whole module of options.  This is key to mastering flex box layout.,Be sure to stress that a flex box module is many properties and rules and not just one simple change.  ,"# Flex Box Module

Most properties in CSS perform one action based on their value.  For example, if you used the `color` property in CSS, you would provide a value and expect to see the result.  See below:

```css
.example {
  color: red;
}
```

You would be right to expect one result here, the class named `.example` would have it's font color changed to red.


## Display flex

When we introduce `display: flex` into our CSS, we are actually getting many new properties and rules. See below:

```css
.example {
  display: flex;
}
```

This simple line of code comes loaded with additional properties we can now use.  For example, we can now use a property called `flex-direction` that wouldn't have worked before we enabled our flex box module with `display: flex`.  

We also gain some new rules when using a flex box module.  For example, the element which we displayed flex on is now considered a `flex container`.  Any elements nested inside of our `flex container` are now considered to be `flex items` and they gain another set of properties.

It is important to note that the relationship between a `flex container` and a `flex item` does not nest any deeper.  The flex box module was designed to only nest one level deep.  See the code example below:

```css
nav {
  display: flex;
}
```

```html
<!-- flex container -->
<nav>
  <!-- flex items -->
  <a href=""#"">
    <!-- flex box module does NOT reach this far! -->
    Home
  </a>
  <a href=""#"">About</a>
  <a href=""#"">Blog</a>
  <a href=""#"">Contact</a>
</nav>
```

Note that the content within the `<a>` tag is not impacted by the flex box module.  If we wanted to use `flex` properties on the content, we would need to `display: flex` on the `<a>` tag as well.  

Declaring multiple flex modules within nested elements is perfectly fine!

## Flex Box Module Terminology

When we enable a flex box module, we gain several 

## Flex Box Module Review

Let's recap the most important items when using flex box modules in our code:

- A flex box module introduces many new properties and rules which you can fully study by [heading over to CSS Tricks and studying the Basics and Terminology](https://css-tricks.com/snippets/css/a-guide-to-flexbox/).
- Whenever you `display: flex` on an element, that element becomes a `flex container`
- Any element nested one level deep within the `flex container` automatically becomes a `flex item`
- Any element nested inside of a `flex item` does **NOT** become part of the flex box module","# Flex Box Module Tutorial

_Use your own code editor or codepen to follow along with this tutorial._

## Step 1: HTML

To see how we gain a CSS module when using flex box lets first build some simple HTML:

```html
<div class=""container"">
  <div class=""item"">Item 1</div>
  <div class=""item"">Item 2</div>
  <div class=""item"">Item 3</div>
  <div class=""item"">Item 4</div>
</div>
```

Notice the `.item` classes are nested inside of the `.container` class.  

## Step 2: CSS

To help us see our HTML items better, lets style the items into small gray boxes using some CSS:

```css
.container .item {
  width: 50px;
  height: 50px;
  background: lightgray;
  border: 1px solid black;
  margin: 20px;
}
```

With our HTML in place and items showing properly, let's add `display: flex` on our `.container` class:

```css
.container {
  display: flex;
}
```

Notice that as soon as you added `display: flex`, the boxes all lined up next to each other horizontally!  **The flex box module has been enabled**.  

Comment the `display: flex` off and on to see the different results. 

Note that the content inside of the gray squares had no changes!  This is because we did not display: flex on the `.item` itself.

[Click here to see the final example in a code pen](https://codepen.io/lambdaschool/pen/XxdKjx?editors=1100).","[Go to CSS Tricks and read the sections ""Background"" and ""Basics and Terminology.""](https://css-tricks.com/snippets/css/a-guide-to-flexbox/).  Study the diagram and get familiar with the terminology used to describe the flex container and flex items.",mUZTNxqZnB8,http://youtube.com/watch?v=mUZTNxqZnB8,https://www.youtube.com/embed/mUZTNxqZnB8,,"Flexbox Froggy,CSS Tricks - Flexbox Guide,GIF visualization of flexbox","Flexbox With Wes Bos,A Visual Tutorial With Flexbox,Flexbox Cheatsheet,CSS Grid With Wes Bos",,"User Interface III,CSS",,"Introduction to User Interface and Git, Web for UX: Intro to HTML and CSS, Intro to HTML & CSS","Full Stack Web Development Core, UX Web and Labs Prep Unit, UX Design Core",,1,1,1,3
build responsive layouts using an effective approach.,It's one skill to create your own designs from scratch.  It's a totally different and required skill to be able to craft someone else's designs.  Learning the techniques and patterns on how to approach a design and create a responsive layout will set you apart from other developers.,,"## Mobile First

Mobile first implies you will design and code for a mobile device first and expand layout or features as you gain more screen space toward desktop.

For CSS implementations mobile first usually means your general styles are pointed at the phone and you utilize min-width media queries to layer on more complexity as you grow toward desktop views.


![Mobile first design flow](https://tk-assets.lambdaschool.com/5ef14542-c632-4e7c-8d8f-1918d1d64e9e_mobile-first-example.png)",,,KgCa18XA0GU,http://youtube.com/watch?v=KgCa18XA0GU,https://www.youtube.com/embed/KgCa18XA0GU,,"Chrome Extension: Window Resizer,Chrome Extension: Perfect Pixel",,,"Responsive Design I,Responsive Web I",,"Advanced CSS, Responsive & Interactive Web Dev","Full Stack Web Development Core, UX Design Core",,1,,1,2
define the key terms used in object-oriented programming,"OOP is largely about structuring and communicating your program for others - understanding the common language about related concepts is a critical piece of that. To practice, we will build and discuss an example - using OOP to model characters in a role-playing game.

Specific words you should be comfortable using by the end of this objective:
- Class
- Object
- Instance
- Constructor
- Type
- Inheritance
- Superclass
- Subclass
- Field
- Composition
- Method (and Class versus Instance method)
- Variable (and Class versus Instance variable)
- Private versus Public (Methods and Variables)
- Abstract (referring to Class or Method)
- Interface
- Encapsulation
- Getters and Setters
- Polymorphism
- Dynamic dispatch
- Overriding
- Overloading
- Message passing

Other concepts less specific to OOP but still relevant:
- Namespace
- Scope
- Global
- Closure
- Mutable versus Immutable
- Separation of Concerns

Important note - this lesson, and all Python/Django material, will be focused on class-based inheritance as a basis of OOP. There is another form of inheritance - prototype-based - and you've actually already been using it with JavaScript. This will be revisted more explicitly when we get back to front-end material (with Django you can still use React for your front-end).

Another Python caveat - in dynamic languages like Python, it is typical that many of these concepts are ""standards"" but the language does not actually enforce them as in Java. With Python, you can dig deep into the inners of the language and ""monkey-patch"" (change code while it is running) to your hearts content - with this power comes great foot-shooting ability, so don't do it unless you understand the situation and know that you need to do something drastic to achieve your goal.","The pre-course video will define all of these terms, but reinforcing/testing is important. Consider using the Zoom breakout feature, and also possibly enlisting TAs to really verify that every student gets these fundamentals. Note that the exercises are not Django specific at this point - Django setup is a different beast, and will be treated with other pre-course material.

Also note - Python is not *opinionatedly* object oriented in the same way as Java or Ruby. That is, you don't *have* to use OOP at all - it's multiparadigm, and you can just do straight imperative, or even functional programming if you prefer. But Python does have excellent OOP support, and Django tends to use it (especially mixins for views).

Particularly powerful (but beyond the scope of introductory material) is Python's support for metaclasses. Classes are themselves objects, and can be programmatically generated/extended/monkey-patched in a way that is similar to factories, but even more powerful (and thus more self-foot-shooting capable).

Brief definitions of the terms (talking more fully, and in the context of actual code, is the real goal here):
- Class: a ""blueprint"" for making an object.
- Object: a ""container"" of various fields.
- Instance: an object is an instance of a class.
- Constructor: a special method in a class that specifies how to build a new instance of an object (`def __init__(self, ...)` in Python).
- Type: the type of an object depends on the class(es) that it is instantiated from.
- Inheritance: classes can be based on other classes, and so ""inherit"" (at least some of) their code (to avoid repetition).
- Superclass: ""parent"" class, the one that code is inherited from.
- Subclass: ""child"" class, the one that is inheriting code.
- Field: a reference specified in a class, to whatever values the instantiated object contains.
- Composition: a class that, within its fields, contains a reference to another class (e.g. a Character class can have a reference to an Inventory object defined by its own class, but Character is not a subclass of/directly inheriting from it).
- Method (and Class versus Instance method) - a function that is a field within a class - Class methods are general (often stateless) and do not require instantiation, whereas Instance methods need to have an instantiated object to be executed.
- Variable (and Class versus Instance variable) - a literal (e.g. int, string, etc.) value saved as a field associated with a class. As with methods, class -> you can access it without instantiation (and so it is usually immutable), while instance -> you need an instantiated object.
- Private versus Public (Methods and Variables) - private methods/variables are those intended for use internally by code within the class, while public are meant to be exposed and used by code that instantiates the class as an object. Note - Python does *not* enforce this as Java and other languages, but instead uses the standard of prefixing a field name with an underscore to indicate that it should be treated privately.
- Abstract (referring to Class or Method): something that is not fully implemented, and must be ""finished"" by a subclass. Abstract classes and/or classes with abstract methods generally cannot be instantiated on their own, and just serve as superclasses in an OOP hierarchy.
- Interface: the fields (methods/variables) meant to be exposed to achieve a certain behavior/design. Can be specified/standardized as a sort of ""contract"" between different components of a system, e.g. front-end and back-end. Also - what the ""I"" is in API.
- Encapsulation: an object can contain (or encapsulate) a more complicated inner state/logic, and then purposely expose a simplified interface to facilitate development.
- Getters and Setters: methods that encapsulate the retrieval and editing of variables in an object. In addition to enforcing privacy, can perform application-specific logic checks on variables (e.g. never set a bank account balance to be negative).
- Polymorphism: treating the type of an object flexibly based on its inheritance hierarchy/interface. In the simplest case, an object based on a subclass can be treated as the same type as its superclass, as it satisfies all the same interface.
- Dynamic dispatch: the logic (based on the involved objects) by which a method is selected to be executed. A complicated topic, so not one to fully illustrate, but be aware of the term.
- Overriding: a subclass replacing a field it could inherit from its superclass by defining it differently itself.
- Overloading: multiple implementations of a same-named method that are distinguished by the types of arguments passed in. Explicit and idiomatic in Java (even Java constructors can be overloaded) - in Python, it's more typical to have a single method with optional/default parameters and logic to handle various cases.
- Message passing: the original design abstraction used to describe OOP when it was first introduced in Smalltalk (1970s, Xerox). Objects ""communicate"" to each other via message passing (e.g. invoking a method on an object is sending it the message ""do this""), and are limited to the set interface they provide.

Other concepts less specific to OOP but still relevant:
- Namespace: a mapping from names to objects/values in memory.
- Scope: the range of a program where a certain namespace is visible or takes precedence.
- Global: a special namespace visible in all scopes.
- Closure: the namespace created internally by a function when it is invoked (this is how prototypical inheritance works, and what a lot of JavaScript is built on).
- Mutable versus Immutable: a value in memory that can/cannot be changed (in place). Mutable is ""intuitive"", but immutable is in many cases safer (and can enhance static checks of code).
- Separation of Concerns: the principle that a problem is best addressed by decomposing it into modules that can be solved independently, and then re-assembled (e.g. by a well-defined OOP hierarchy and set of interfaces) into a working system.","Live-code a basic Python class that represents a `Character` in an RPG. Describe using the terms above, and make sure at least some of the fields are private, some fields have getters/setters (which enforce some sort of logic/check), and some methods are abstract (to be implemented by subclasses).","Write four subclasses of `Character` - `Warrior`, `Mage`, `Cleric`, and `Rogue`.","Come up with and implement your own ""specialist"" class that is a subclass of one of the four classes we implemented together. Present your class to a teammate, using appropriate OOP terminology (and have them present theirs to you).",,,,https://youtu.be/hHAdkq5O2hw,,,,Object-Oriented Programming,,Python/Django I,Computer Science Annex,,1,1,,2
deploy a web-api to Heroku,"I want to start off by saying that the subject of dev ops and deployment is by no means in the same realm as software development or computer science. You can think of it more as a necessary byproduct of building on software. Just like when creating any sort of product, you need to figure out how you're going to get that product to the end users or consumers. The be-all-end-all of dev ops is to achieve this exact goal. So how is this process done?

The short answer is: it depends on what you want to deploy. If you want to simply deploy a static HTML site that has no reliance on things like a node server or a database, that can easily be handled by the myriad of hosting services out there. Even if your application does rely on a database and a node server, configuring a virtual machine from Digital Ocean to act as the server that houses your application is also a viable strategy when it comes to deploying and hosting.

If we're writing all of this amazing code, and building these beautiful tools for users to interact with, it does us no good until users have our projects in their hands. The way to do this is to deploy our code to existing sites. ","By end of week 14, the students should have their front and back end projects hosted on the world wide web. * Refer to week 8 material here. During week 8 the students built a front end project using React/Redux. This is where that whole project comes together as they are to implement the back end to it, and then tie it them both together. 

Before beginning a conversation of this topic, it is important for the students to have seen the pre-class link. For your benefit as the TA or instructor here, you're going to have to study up three pieces of tech that are commonly used for hosting applications: `ngrok` , `Heroku` and `netifly`.

The morning demonstration will be used to walk the students through at the minimum netifly and ngrok.

By the end of the week. We'll have shown the students a variety of ways they can get their back end project hosted and set up for use with their api. ",Today we're going to learn how to expose your local machine's `localhost` to the world wide web using an application called `ngrok`. For you to be able to participate in the assignment you'll need to have `ngrok` installed on your machine. ,"## Prerequisites

- Sign up for a [heroku](https://www.heroku.com/) free account.

## Starter Code

This tutorial continues to work with [this repository](https://github.com/LambdaSchool/webapi-iv-guided).

## Setup Continuous Deployment from GitHub

- login to `heroku` and create an app.
- in the `Deploy` tab, select _GitHub_ in the `Deployment Method` section.
- GitHub will be ask to authorize access to `heroku`, approve access.
- search for the repository (their fork of the starter code) in the `Connect to GitHub` section and click _Connect_.
- in the `Automatic deploys` section, pick the `master` branch and click `Enable Automatic Deploys`.
- in the `Manual deploy` section, click on `Deploy Branch` to kick-start the first deploy.
- scroll to the top and move to the `Overview` tab to see the deployment in action.
- on the top right, click `Open App`.

The deployment succeeded, but opening the App fails because the fork on GitHub still have the old code without the dynamic port and new `start` script.

Our application displays `Application Error` and information on how to open the logs. We can fix it by pushing our changes to the master branch on GitHub.

- commit and push the changes to the forked repository on GitHub
- check the `Overview` tab on `heroku` and wait for the message that the application was deployed.
- refresh the browser where the application is running, there should be an empty array. Success!

Use Postman to connect to the api and post a few shoutouts to people that deserve it.

An example:

```json
{
  ""message"": ""to all students for successfully deploying an empty array for the world to see and marvel""
}
```

## Add an Environment Variable on Heroku

- change the GET to `/` endpoint to include a message of the day as part of the response.

```js
server.get('/', async (req, res) => {
  try {
    const shoutouts = await db('shoutouts');
    const messageOfTheDay = process.env.MOTD || 'Hello World!'; // add this line
    res.status(200).json({ motd: messageOfTheDay, shoutouts }); // change this line
  } catch (error) {
    console.error('\nERROR', error);
    res.status(500).json({ error: 'Cannot retrieve the shoutouts' });
  }
});
```

- add the MOTD to the `.env` file.

```txt
PORT=4000
MOTD=Hello from my computer
```

- **restart the server** running on localhost.
- make a request to the api running on localhost to verify that the `motd` property is there.
- commit and push to GitHub.
- once the new changes are deployed, refresh the application on `heroku`. Note that we get the default `Hello World!` message because the environment variable does not exist on `heroku`.

Now we are going to add that configuration variable on Heroku.

- on `heroku`, go to the `Settings` tab.
- click on `Reveal Config Vars` in the `Config Vars` section.
- add a `MOTD` config var with the value _""Hello from the World Wide Web""_
- refresh the application.

Note that the environment variable on `heroku` overrides the value in code and the value in our local `.env` file. This could be used to store API keys, database connection information and any other secrets in a more secure manner.","Using information you've obtained from the guided project, create an application on Heroku and set-up continuous deployment from  one of your GitHub repositories.",,,,,Heroku Installation guide,,,"Dev-ops - Deployment I,Deployment and Best Practices",,Building RESTful Web APIs with Express and Node.js,Full Stack Web Development Core,,1,1,,2
compile LESS into CSS and install LESS watch compiler via NPM,,,,,,,,,,"LESS watch compiler,VIDEO WALKTHROUGH: Use LESS to compile your CSS",,,,,,,,0,,,0
setup and use basic Python/Django development environment,"Django/Python will be our basis for teaching OOP, so getting set up and running with it is key. This means both having a development environment, knowing the basics of Python syntax, and getting your feet wet in the overall Python ecosystem (packages, documentation, etc.).

This objective is purely hands-on, so it is important to follow along and make sure you do each step. If you run into issues, ask for help - this environment will be used for the rest of the Django/Python material.","Most students use VS Code for JavaScript, and it has pretty good Python support with the plugin (in the preclass links). Overall any editor will be fine, the key is to use `virtualenv` or similar to properly contain/package dependencies. Docker is also a suitable tool to help this.

This module corresponds up through Start the Server in the Day1 doc: https://github.com/LambdaSchool/Intro-Django/blob/master/guides/day1.md

Sample lecture 1, Python/Django kickoff: https://youtu.be/2hir57EhfT0

0:00 Introduction
0:04 Installation
0:05 Dual installation of python 2 and 3
0:06 Goal for today: create Django boilerplate app, create a PR to the Hello-Django repository
0:09  Django projects, applications
0:14 Getting started demo","We'll go over the basics: what Django is and what it buys us--why use it? We'll also talk about the steps we'll go through to set it up.

As a framework, Django has a large number of boilerplate commands that are needed to get things done. Although they are logically grouped and each performs a non-redundant, important task.

We'll go into further detail in the tasks necessary to set up a project.","Check Python version and install or upgrade if less than 3.5.x.

Check Pip version and install or upgrade if less than 10.x.

* Mac/Linux - Option A: `sudo -H pip3 install --upgrade pip`
* Mac/Linux - Option B: `brew upgrade python`
* PC - `python -m pip install --upgrade pip`


Check Pipenv version and install or upgrade if less than 2018.x 
<br>*(2018.10.13 as of November 6, 2018)*

Normally you'd make a repo with a README and a Python gitignore, but since we're
going to be using pull requests to turn things in, just fork this repo instead.


Clone repo on to local machine.

In the terminal, navigate to root folder of repo.

Create pipenv virtual environment:

```
pipenv --three
```

* The `--three` option tells it to use Python3
* This is similar to using `npm`/`yarn`


Verify that the `Pipfile` was created in the root of the repo.


Activate pipenv with `pipenv shell`

* You should see the command line change to the name of your repo/folder
  followed by a dash and a random string.
* We are using pipenv because it is newer and more robust. Uses a lockfile
  similar to npm/yarn. Easier to get into and out of shell.
* To get back in, use `pipenv shell` from the root directory of the project.

## To Start a Django Project and App

Once you are in the virtual environment, install django:

```
pipenv install django
```

* We are using a virtual environment instead of installing globally because
  installing globally would be like using npm/yarn install globally and
  installing all the packages on everything.

Add `Pipfile` and `Pipfile.lock` to the repo with `git add Pipfile*` and commit
with `git commit -m ""added pipfiles""`.

Start a project with `django-admin startproject [name_of_project] .`

* Replace [nameofproject] with the name of your project
* The . tells it to create the project in the current directory. Otherwise, it
  would create a project in a subdirectory called [name_of_project]. We don’t
  need that because we want the repo folder to be the root

Verify that the [name_of_project] folder was created and has boilerplate files
such as `__init__.py`.

The project is what it was named above. A project is made up of a collection of
apps. It can have one or many.


Create an app with `django-admin startapp [name_of_app]`

* For the first project, we are naming the app notes
* Name it differently as appropriate if you are following this to set up, but
  working on something else.

## Start the Server

Verify that the [name_of_app] subdirectory has been created

Test by navigating to the project folder root/[name_of_project] and running
`./manage.py runserver`

* This should launch the animated rocket default page
* Take note of the warning about unapplied migrations. We will fix that in a moment

Django makes it easier to make changes to databases. This is called migration(s).","* After you've done this once, delete your local clone and do it again from scratch. It will help mentally cement the steps needed.",2TS5303j07M,http://youtube.com/watch?v=2TS5303j07M,https://www.youtube.com/embed/2TS5303j07M,https://youtu.be/5PDrdiw4sV0,"Project Jupyter,PythonAnywhere,DevDocs,Google Python Style Guide,PEP8 Python Style Guide,Python plugin for VS Code,Resources for learning Python,Getting started with Django,Official Python Documentation,Python Download Links,Python Cheat Sheet",,,"Getting started with Python and Django,Django basics and setup",,"Python/Django I, Intro to Django","Computer Science Annex, Computer Science Annex",,1,1,1,3
make GET requests to an external API using axios,Axios is the most popular library for performing promise based HTTP requests from the browser or Node.js. We will use it to make GET requests to an external API.,,"The `HTTP resource` method known as `GET` is the way we ask for information from a server that we can `read`. `GET` is the 'R' in CRUD which stands for read. Anytime you type a URL into a web browser you're using the `GET` method. 

#### How to use axios for a get method
```
  axios     
    .get(`http://somecoolurl.com`)
       .then(response => {
         response is the response we get back from the server
         in react we set the state of our component with the data that we get back from the request. 
       })
       .catch(err => {
         if something goes wrong, we handle any errors here
       });
```","Open the codesandbox you created in the AJAX section. Let's convert our AJAX call to use `axios` instead of `fetch`. First, add the axios package as a dependency and import it into your project.
```js
import axios from 'axios';
```
Then change your `componentDidMount` function to look like this:

```js
componentDidMount() {
  axios
    .get('https://dog.ceo/api/breed/husky/images')
    .then(response => console.log(response))
    .catch(err => console.log(err));
}
```

We have removed the extra console.logs. We changed `fetch` to `axios.get`. and now we are logging the response we are receiving from the axios call. Look at your console, and you'll notice that response is an object, and that axios adds a lot of stuff to the response. The data the was returned by the server is in the `data` property. So let's console.log `response.data` to see what the server actually returned.","Add a constructor and a state object with a `doggos` property. Inside the `.then()` of the axios call, set the dog images to state. FInally, build out a view for the images.",-mImCy0omwg,http://youtube.com/watch?v=-mImCy0omwg,https://www.youtube.com/embed/-mImCy0omwg,,Axios GET,,,HTTP / AJAX I ,,Single Page Applications,Full Stack Web Development Core,,1,1,1,3
"use let, const, var and demonstrate their differences.","ES6 brought with it some mighty fine changes to the JavaScript language. One of the most commonly used, and easiest to start using are the new keywords for declaring variables. Understanding the pitfalls of having only `var` at your disposal, and how to combat those pitfalls with the likes of `let` and `const` will make your life so much better as a JavaScript engineer.","The importance of understanding when/where to use let and const today is very important for a JavaScript engineer. Ensure that you provide ample examples of what these three keywords do, how they behave, and how we use them. The We do portion of this exercise is just as important if not more important than the You do. This exercise shouldn't take more than 10-15 min to complete. ","Lets look at some in depth examples of using `var` `let` and `const`.
```
var name = 'Batman';
```

What we have done here is told the computer to hold a String: 'Batman' in memory. And if we ask the computer to retrieve that information for us, all we have to do is call for the 'name' variable `console.log(name);` and we should get the string 'Batman' printed out in the console.

This is how we capture data into memory in JavaScript. First we declare a variable by calling `var` and decide what that variable should be named, in this case: `name`. Then we tell that to be assigned to a specific piece of data/information, String:'Batman'. And for up to 5 standardized (over a decade of use with JavaScript) this was very sufficient. 1 keyword `var` got the job done always.

But, because JavaScript is a dynamic language. We actually can override what the variable `name` points to in memory. This can cause issues because something like the following example is totally legal.

```
var name = 'Batman';
var name = 'Robin';
console.log(name); --> prints 'Robin';
```

What this means is that you can not only reassign what the variable `name` points to, but override it completely. Where this would be as problem, is in a large application with many 'global' (we'll talk about global and local later) variables, you can easily override information that may be completely important and vital to your application if you're not super careful.

As a result of this ability to override and replace variables almost at will, [ES6's let keyword](http://es6-features.org/#BlockScopedVariables) gives us the ability to not only combat this problem, but solve problems we didn't even know we had.

One of the best abilities we gain from `let` (AND `const`) is that variables cannot just be overridden willynilly. `let` allows us to solve this problem.

Lets reference the example from above:

```
let name = 'Batman';
let name = 'Robin';
console.log(name);
```

I dare you to run that code in your browser's console.

You'll probably find something like this happening:

![Overridden Variable Syntax error](https://ibin.co/3rbugoeB30vy.png)

One thing to note is that,`let` _is mutable_ (Another big word alert!) meaning we can change the value (or _thing_ that a variable points to) that a variable declared with `let` points to. That may be super confusing but is easily demonstrated with this example:

```
let name = 'Batman';
name = 'Robin';
console.log(name) --> 'Robin';
```

As you can see, the name variable has been `re-assigned` but not `overridden` by another `name` variable declared with the `let` keyword. All this means is that name now `points to` the String:'Robin'; so this is one of the major differences (if not the only difference) between `let` and `const`.

[const](http://es6-features.org/#Constants) is the most _strict_ of all keywords used to declare variables in JavaScript. Meaning, it simply has the most rules applied to it. `const` is a keywords that we use to declare a variable, and make it's associated data, constant. Meaning, you can never `re-assign` what a `constant variable` points to like you can with `let` and `var`.

The major difference between `let` and `const` is that `const` is immutable and can never be re-assigned it's value. SO to do something like we did above will give us our friendly little Syntax Error from above.

```
const name = 'Batman';
name = 'Robin';
console.log(name) --> 'Robin';
```
![Const Syntax Error](https://ibin.co/3rcI1dOBdHwj.png)

To recap: 
* `var` can be re-assigned and overridden. 
* `let` can be re-assigned but not overridden.
* `const` cannot be re-assigned nor overridden.

Because these three keywords achieve the same thing (storing data in memory and assigning that data a 'key' that can be used for access) but behave very differently, there are places in this world for all three. And of course, as with everything, there are some other intricacies to learn about the `let` `const` and `var` keywords that we didn't cover here today. 

**Lambda School Rule of Thumb** When defining/declaring variables _use const until you can't, then use let_.

I **Highly** recommend researching the differences between `var`, `let` and `const` in terms of their scoping rules as well. We'll cover more on this later on when talking about function vs. block scoping. But for now, I'll point you towards the `Dig Deeper` section for some the `How let and const are scoped in JavaScript` for some further understanding here.","Let's practice the concepts we just learned together.  Use this link to follow along: [Variables 101](https://codepen.io/lambdaschool/pen/VBEWpP).

",It's time to check your knowledge with a [Variables Challenge](https://codepen.io/lambdaschool/pen/zLydNr).  Notice there is a solution link at the bottom of the codepen to check your work.,EOlgY__Ml0c,http://youtube.com/watch?v=EOlgY__Ml0c,https://www.youtube.com/embed/EOlgY__Ml0c,,"""The differences between var, let, and const""",How let and const are scoped in JavaScript,"* What are some of the differences between `var` `let` and `const`?
* What is block scope vs function scope?",JavaScript I ,,JavaScript Fundamentals,Full Stack Web Development Core,,1,1,1,3
create medi,,,,,,,,,,,,,,,,,,0,,,0
describe and use the Django migration system,"One of the more powerful pieces of Django is how it automatically takes information from your model (defined in Python) and converts it to SQL for persistent storage in the database.

In particular, if you modify the model in the future, Django can handle largely-automatic updates to the SQL data with minimal intervention. Historically these kinds of SQL modifications were a significant pain-point, and is one that Django works hard to reduce.","There's some chicken and egg here, since you will have already done some migrations before you define the model. Recommend that people do the initial migrations on faith, then after the model is defined, this objective makes more sense.

This corresponds to the Migrations section in the Day1 doc: https://github.com/LambdaSchool/Intro-Django/blob/master/guides/day1.md","We'll describe how the migration system works in Django, how it interfaces with the database and how it is used to keep the database schema up-to-date with the data definition in the model.

Together we'll run through an example of seeing what migrations need to be applied, how to apply them, and how to look under the hood at the SQL that is generated to modify the database.","Run `./manage.py showmigrations`. This will show a list of outstanding
changes that need to occur.

To take a closer look at what is being done, you can look at the SQL queries
that Django is building. _This step is entirely optional, and is only for the
curious--which should be you!_

```
./manage.py sqlmigrate [package_name] [migration_id]
```

for example 

```
./manage.py sqlmigrate admin 0001_initial
```

* This will display a large number of sql commands that may not make sense if
  you are not yet familiar with SQL.
* This doesn’t actually do anything. It just displays info.
* These are all the data structures that your python code has created. Django
  turns this into sql tables, etc. for you. (If you’ve ever done this manually,
  you know how awesome that is :) )


To actually run the migrations, use:

```
./manage.py migrate
```

Check them by showing migrations again: `./manage.py showmigrations`

* The list of migrations should show an `x` for each item.

Run the server again and confirm that the migration warning is not present.
There won’t be a change to the actual page that renders.","* Set up a basic Django installation and run the server without first running the migrations.
* Examine the migrations that need to be applied.
* Apply them.
* Run the server again to see that the migration warnings have gone away.",fQJa2onrEI8,http://youtube.com/watch?v=fQJa2onrEI8,https://www.youtube.com/embed/fQJa2onrEI8,https://youtu.be/OVfTgucUXNo,,Django Packages,,"Getting started with Python and Django,Django basics and setup",,"Python/Django I, Intro to Django","Computer Science Annex, Computer Science Annex",,1,1,1,3
understand commonly used design patterns,,,,,,,,,https://youtu.be/MDfJhxSHY0w,,"Anti-patterns,Software Design Patterns",,Software Design Patterns,,Python/Django I,Computer Science Annex,,0,,,0
make PUT requests to an external API using axios,When data needs to be `UPDATED` somewhere we use a PUT `HTTP resource` method to do so. ,,"`PUT` is the ""U"" in CRUD and it stands for `UPDATE` We use the `PUT` method to change a resource's information. PUT takes in a body object like `POST` and we use that object to identify data that needs to be updated somewhere.

```
 axios     
    .put(`http://somecoolurl.com/${couldHaveDynamicId}`)
       .then(response => {
         response is the response we get back from the server
         Whatever resource was changed should be reflected in our client
       })
       .catch(err => {
         if something goes wrong, we handle any errors here
       });
```","We will now build in the AJAX call for the same app. You can start with [this codesandbox](https://codesandbox.io/s/k353v1z79r) and then follow along with the video.

We are going to work on updating a quote. To set this up, we have a form for the PUT request built. Normally, you would be in charge of populating the form fields with whichever item you are updating, but for this example, we just have a quote hard coded into state. Just keep in mind that in apps you build from scratch, that will take a bit of work to do.

Now, in `index.js`, there is a `putMessage` function. Let's call `axios.put` and pass in the url. This time the enpoint will be `/quote/:id`. `:id` here is a lot like dynamic parameters in React Router. It is a dynamic variable that will be the id of whatever item you are updating. Just hardcode any number in there for this example. Also, add your `.then()` and `.catch()` and console log the `resonse` and `err` inside those:

```js
axios
  .put(`https://lambda-school-test-apis.herokuapp.com/quotes/76`)
  .then(response => console.log(response))
  .catch(err => console.log(err));
```

Also, pass in `quote` as a parameter to `putMessage` so we have the data we need to send to the server.

```js
putMessage = quote => {
  axios
    .put(`https://lambda-school-test-apis.herokuapp.com/quotes/76`)
    .then(response => console.log(response))
    .catch(err => console.log(err));
};
```

Pass `putMessage` down to the `PutMovieQuoteForm` component. Then we'll go to `PutMovieQuoteForm.js` and invoke `this.props.putMessage` with the movie quote that is one state.

index.js

```js
<PutMovieQuoteForm putMessage={this.putMessage} />
```

PutMovieQuote.js

```js
putMessage = e => {
  e.preventDefault();
  this.props.putMessage(this.state.movieQuote);
};
```

Now we can make some requests and check out the console logs. They are very similar to the logs we were getting in the POST section above. So we are going to handle this request like we did the POST request. On state we have `putSuccessMessage` and `putError`. Let's set our successMessage to state in our `.then()` and the error message to state in the `.catch()`. And just like before, we'll clear out the opposite state property in each case:

```js
putMessage = quote => {
  axios
    .put(""https://lambda-school-test-apis.herokuapp.com/quotes/76"", quote)
    .then(response => {
      this.setState({
        putSuccessMessage: response.data.successMessage,
        putError: """"
      });
    })
    .catch(err => {
      this.setState({
        putSuccessMessage: """",
        putError: err.response.data.Error
      });
    });
};
```

Then pass down `putSuccessMessage` and `putError` to `PutMovieQuoteForm`, and make some requests!

```js
<PutMovieQuoteForm
  putMessage={this.putMessage}
  putSuccessMessage={this.state.putSuccessMessage}
  putError={this.state.putError}
/>
```","Open the project in the browser, click on the network tab. Make a successful request, and a bad request. Click on the requests and explore the tabs that show up to the right again. Here's the things to note:

#### Header tab

- Request url (notice the id there)
- Request method
- Status code
- Request Payload

#### Preview tab

- Server response

#### Reponse tab

- Raw server response

#### Timing

- Total request time in ms",BSB1qeIaQ5w,http://youtube.com/watch?v=BSB1qeIaQ5w,https://www.youtube.com/embed/BSB1qeIaQ5w,,Axios PUT,,,HTTP / AJAX II,,Single Page Applications,Full Stack Web Development Core,,1,1,1,3
make DELETE requests to an external API using axios,"When we need to tell our server that we want some data that we're working with deleted, we use the `DESTROY` or `DELETE` HTTP Request Method.",,"The `DELETE` `HTTP request` method is also the ""D"" in CRUD. We use this to `Delete or destroy` data that lives elsewhere. When we call .delete, we're instructing the server to remove some information somewhere. Typically we do this by sending some identifying piece of information on the URL parameter along with our requested URL string. This will be a dynamic field that we'll need to ensure matches the resource that we want destroyed.

**REMEMBER** _body objects (or data) objects are to be used with PUT, POST and PATCH (we don't need to go into patch here). Don't expect the `axios.delete()` method to be able to take in a data object_

```
  axios     
    .delete(`http://somecoolurl.com/${someDynamicId}`)
       .then(response => {
         response is the response we get back from the server
         usually on a positive response, we either re-set the state in React OR we navigate to the next page etc.
       })
       .catch(err => {
         if something goes wrong, we handle any errors here
       });
```","The last part of our app will be the delete functionality. Here is the [codesandbox](https://codesandbox.io/s/n4kx9lqx40), please follow along with the video.

We are going to work on deleting a quote. To set this up, we have a quote displayed in the delete tab. In real world apps, you would get to this page by clicking on a quote in some quotes list. On this page, there is a delete button, and in that real world app, there may also be a way to delete a quote straight from the quote list. Also, final thing to note. Deleting is dangerous. A lot of times you will see delete buttons invoke some kind of confirmation message, usually in a modal, that asks if you are sure you want to delete that thing. We won't worry about that here, but just think about that when you are implementing deletes in the future.

Now, in `index.js`, there is a `deleteMessage` function. Let's call `axios.delete` and pass in the url. The enpoint will be `/quote/:id`. Like the put function, `:id` here is a dynamic variable that will be the id of whatever item you are deleting. Just hardcode any number in there for this example. Also, add your `.then()` and `.catch()` and console log the `resonse` and `err` inside those:

```js
deleteMessage = () => {
  axios
    .delete(`https://lambda-school-test-apis.herokuapp.com/quotes/42`)
    .then(response => console.log(response))
    .catch(err => console.log(err));
};
```

Pass `deleteMessage` down to the `DeleteMovieQuoteForm` component. Then we'll go to `DeleteMovieQuoteForm.js` and invoke `this.props.deleteMessage`.

index.js

```js
<DeleteMovieQuoteForm deleteMessage={this.deleteMessage} />
```

DeleteMovieQuote.js

```js
deleteMessage = e => {
  e.preventDefault();
  this.props.deleteMessage(this.state.movieQuote);
};
```

Now we can make some requests and check out the console logs. They are very similar to the logs we were getting in the POST and PUT sections above. So we are going to handle this request like we did those two requests. On state we have `deleteSuccessMessage` and `deleteError`. Let's set our successMessage to state in our `.then()` and the error message to state in the `.catch()`. And just like before, we'll clear out the opposite state property in each case:

```js
deleteMessage = () => {
  axios
    .delete(""https://lambda-school-test-apis.herokuapp.com/quotes/42"")
    .then(response => {
      this.setState({
        deleteSuccessMessage: response.data.successMessage,
        deleteError: """"
      });
    })
    .catch(err => {
      this.setState({
        deleteSuccessMessage: """",
        deleteError: err.response.data.Error
      });
    });
};
```

Then pass down `deleteSuccessMessage` and `deleteError` to `deleteMovieQuoteForm`, and make some requests!

```js
<DeleteMovieQuoteForm
  deleteMessage={this.deleteMessage}
  deleteSuccessMessage={this.state.deleteSuccessMessage}
  deleteError={this.state.deleteError}
/>
```","With the app finished, you can open the dev tools one last time and watch the network requests going out to our server. Here are the things to pay attention to:

#### Header tab

- Request url (notice the id there)
- Request method
- Status code
- Request Payload (or lack thereof...)

#### Preview tab

- Server response

#### Reponse tab

- Raw server response

#### Timing

- Total request time in ms",pK05EUuPipU,http://youtube.com/watch?v=pK05EUuPipU,https://www.youtube.com/embed/pK05EUuPipU,,Axios Delete,,,HTTP / AJAX II,,Single Page Applications,Full Stack Web Development Core,,1,1,1,3
"explain what AJAX stands for, it's benefits and how to make AJAX requests from a React Application","Modern web applications must provide rich and snappy user interfaces. Communicating with servers to retrieve data without reloading the page is essential to achieving that goal, and we can do this with AJAX. AJAX (Asynchronous Javascript and XML) is is mostly a generic term for various JavaScript techniques used to connect to a web server dynamically without necessarily loading multiple pages. We use AJAX in our web apps to get small pieces of data from the server, then update the view based on what is returned from the server.",,"We have actually used AJAX a few times in lessons and in projects over the last couple weeks. When doing this we have used Javascript's new method, `fetch`. It looks something like this: 

```js
fetch('https://dog.ceo/api/breed/husky/images')
      .then(res => res.json())
      .then(dogs => this.setState({ doggos: dogs.message }))
      .catch(err => console.log(er));
```

We've done this inside the lifecycle hook `componentDidMount`. The `fetch` method kicks off an async AJAX request. We can then chain `.then()` and `.catch()` off of it to handle the data that get returned from the server we are sending our request to. 

We're not going to delve too deep into `fetch` at this time, since `it is still not universally supported on browsers. We're actually going to learn about a library called `axios` to do AJAX requests later today.","Start a new React project in codesandbox. Change the `App` component to a class. Add in the lifecycle hook `componentDidMount` (CDM). Inside the CDM function, add a console.log that logs the string `""inside CDM""`. Your component should look like this:

```js
import ReactDOM from 'react-dom';
import React, { Component } from 'react';
import './styles.css';

class App extends Component {
  componentDidMount() {
    console.log(""inside CDM"");
  }

  render() {
    return (
      <div className=""App"">
      <h1>Hello CodeSandbox</h1>
      <h2>Start editing to see some magic happen!</h2>
    </div>
    );
  }
}

const rootElement = document.getElementById('root');
ReactDOM.render(<App />, rootElement);
```

Now add a `fetch` after your console.log in CDM. Then, add another console.log after the fetch that logs `""below fetch""` and one inside the fetch's `.then` that logs ""fetch completed"":

```js
componentDidMount() {
  console.log(""inside CDM"");
  fetch('https://dog.ceo/api/breed/husky/images')
    .then(res => res.json())
    .then(dogs => console.log(""fetch completed"");)
    .catch(err => console.log(err));
  console.log(""below fetch"");
}
```
 Now run your app and pay attention to the console.logs. You should know about what to expect now that you have learned about promises. Here's what my console looks like:

<img src=""https://tk-assets.lambdaschool.com/b7fc3094-c36a-4645-b838-ca532cfd0cdd_ScreenShot2018-10-13at8.40.54AM.png"" width=""800"" />

","Open the project in another browser. Open up the dev tools and look at the network tab. Then refresh the page. You should see an item in the list called `images`. That is the request you just made. Click on it, and to the right you'll see four tabs - ""Headers"", ""Preview"", ""Response"" and ""Timing"". Click through those tabs and look at what is there. We'll learn about this more later, but for now, try and familiarize yourself with the network tab.",Vjxr31UCABM,http://youtube.com/watch?v=Vjxr31UCABM,https://www.youtube.com/embed/Vjxr31UCABM,,What is Ajax?,,,HTTP / AJAX I ,,Single Page Applications,Full Stack Web Development Core,,1,1,1,3
install bootstrap into a project,Understanding that bootstrap’s core files are what make the framework possible is key to building your own websites and apps.  Learning how all the pieces in the framework function together will help us make better decisions when developing projects.,Download and review bootstrap’s folder structure and review it with the students.  Show them it’s just CSS and JS under the hood and there is nothing to be intimidated by.  Explain that bootstrap 4s CSS was built using SASS but that doesn’t impact our development flow since it’s all exported CSS anyway.,"We need to learn how to get bootstrap installed first, no better place than their own getting started guide:
https://getbootstrap.com/docs/4.0/getting-started/introduction/

Scroll down to the heading ""Starter Template""

Regarding the starter template structure: It’s important to understand that the starter template brings a minified version of bootstrap in for production purposes.  Review the code and notice the CSS is in the `<head>` and the scripts tags are right before the closing `</body>` tag. 

You will notice the CDN (content distribution network) links for styles and scripts. We need to consider the values and drawbacks of a CDN   

Pros of CDNs: 
* Easy to access with a simple link
* No need to 

Cons of CDNs
* Owned by a 3rd party that could go down at any time
* You have no control of the framework code and your site could be down or malformed without you knowing it

Now Lets take some time going through the file system:
https://getbootstrap.com/docs/4.0/getting-started/contents/

Notice that it's all just CSS and Javascript under the hood!  Nothing requires a server to run bootstrap.   Super convenient for quickly developing on any project.","Download the source files and lets look around the folder structure:
https://getbootstrap.com/docs/4.0/getting-started/download/

","Since we will be using codepen for demonstration purposes lets have everyone try and get the correct dependencies in place for bootstrap CSS and JavaScript:

https://codepen.io/bigknell/pen/vdJerQ

Tasks:  
* Get bootstrap 4 installed in the CSS section
* Install jquery and bootstrap under the javascript section",,,,,Introduction to Bootstrap 4.0,,,Bootstrap I,,,,,1,1,,2
demonstrate knowledge on how to use the bootstrap grid by creating a responsive layout in a project,The grid is the most important aspect of fully responsive layouts in bootstrap.  If you can master the ideas behind the container > row > column pattern you can quickly master bootstrap and all of it's components.  ,"The grid may be the most important aspect of bootstrap to truly unlock the responsive powers that make everything so easy to use.

Take time getting familiar with the 

container > row > column system before teaching it.

https://getbootstrap.com/docs/4.0/layout/overview/","https://getbootstrap.com/docs/4.0/layout/overview/

The most important aspect of bootstrap's framework revolves around layout and the grid they use. 

The grid is built on flexbox and can be overwritten using flexbox styles.  

The grid consists of 3 main ingredients:

1. Container

2. Rows

3. Columns.

**Container**
Container can either be maxed width or 100% fluid.  If you want a fluid layout you should be using ```.container-fluid``` instead of ```container```.

Usually layouts only need one container to control a layout.

**Row**
Rows are classes that extend across the horizontal axis of the page.  You simply need to add a class of ```.row``` to any div. Try to think of rows as the guides for columns.  ANY new horizontal section in your html should first be used as a row if you want to use the grid to it's fullest.

Using row for every horizontal section will make your layouts super clean and your columns more useful.

**Columns**
Columns represent the horizontal flow for the grid.  Columns are unique in that they follow an internal CSS rule where you can't have more than 12 per row before they will wrap to the next row.  This behavior is made even more complex when you consider all the breakpoints at play within bootstrap:

```Extra small <576px
Small ≥576px
Medium ≥768px
Large ≥992px
Extra large ≥1200px```

Unique names must be used with column like ```col-md-12``` for the grid to function.  Please review the documentation again with this new knowledge.","Lets work through a simple grid layout together:

Try and manipulate the columns and rows to do what you want.

https://codepen.io/lambdaschool/pen/eMXXME","Your challenge is to follow the commented instructions on the HTML rows.  Make the grid perform according to the commented column amount and background color.

https://codepen.io/lambdaschool/pen/qovvyM",,,,,The grid layout system in bootstrap,,,Bootstrap I,,,,,1,1,,2
demonstrate the proper use of content rules by implementing responsive images and tables,"Now that we have layout figured out, we need to be able to add common content pieces like images and tables.  Knowing how to approach responsive images and tables will allow you to tackle almost any interface issue presented to you in bootstrap.","Review both the images and tables rules and explain how tables are vitally important to most interfaces that you will use bootstrap for.  

Often times there is a quick dashboard that needs to be made for a sales team or a reporting view for a back end system.","Responsive images allow our layouts to work seamlessly with content:  

https://getbootstrap.com/docs/4.0/content/images/

You would be surprised how often tables come into a design layout.  Having tools to quickly create a table will make your work look professional every time.

https://getbootstrap.com/docs/4.0/content/tables/","**Responsive Images**

https://codepen.io/lambdaschool/pen/eMXXQe

If we remove the ```class=""img-fluid""``` and then adjust the column to be smaller you will notice that the image starts to break it's bounds and cause layout issues.

By applying the ```class=""img-fluid""``` we are invoking the CSS from bootstrap to control the images in a % based approach.  Super powerful and easy to use!

**Responsive Tables**

https://codepen.io/lambdaschool/pen/wmOORM

Notice that you limited by the amount of rows you can jam into a column.  Be sure that your table can fit nicely on different devices or consider hiding content that isn't relevant on mobile devices.",,,,,,,Dummy HTML for layouts,,Bootstrap I,,,,,1,,,1
build and customize CSS components in a responsive layout project,"Being able to compose a fully responsive website by using the grid, content rules and bootstraps pre-built CSS components allows for extremely fast rapid prototyping and idea sharing when a project might not have a designer in place.  

Knowing how to implement components and where to use them in the grid opens the door to a multipage website built in hours of time.","The focus here is CSS only components to save the JS components for a deeper dive in the next module.

Go review which components you would like to implement.  There are so many, it's smart to stay with buttons, cards, forms, and anything else you want to expound on.  

At this point it's copying and pasting in the right area of the grid.

https://getbootstrap.com/docs/4.0/components/buttons/","Now that we have a grasp on the grid, lets start putting CSS components in there and see what we get:

https://getbootstrap.com/docs/4.0/components/

Buttons are a great first look into components.  At this point it's going to be implementing all types of components and see what you can come up with. ",,,,,,,,,,Bootstrap I,,,,,1,,,1
use the built in `history` object to programmatically navigate to other routes,In some instances we need to load different routes or components in response to events other than a user clicking on a link. An example is navigating to a new page after a promise has resolved and new data is available.,,"We can use the `history` prop that React Router passes to components in order to accomplish this. 

Add a button with an `onClick` event handler. Inside the code for the button click handler add the following line to make the application navigate to the `/greet/Luke` route:

```js
function Home(props) {
  return (
    <div className=""view"">
      <h1>Home Component</h1>
      <p>This is the Home page.</p>
      <button onClick={greet}>Greet Luke</button>
    </div>
  );

  function greet() {
    props.history.push('/greet/Luke')
  }
}
```","In the `AvengerList` component, you have rendered a list of Avengers, and you're using the `Link` component to route to the `AvengerPage` route. Let's change that to use the `history` object instead. Where ever you would like - on the wrapping div, or a button, etc - add an `onClick` event handler that invokes a function called `routeToAvenger`. Then write the function so that it uses the `history` object to route to the avenger page.

```js
function routeToAvenger() {
  props.history.push(`/avengers/${avenger.id}`)
}
```",Aaaannnndddd.... do the same with your friends app 😀,S0O_76usQDs,http://youtube.com/watch?v=S0O_76usQDs,https://www.youtube.com/embed/S0O_76usQDs,,,,,React Router II,,Single Page Applications,Full Stack Web Development Core,,1,1,1,3
navigate to other routes declaratively,,,,,,,,,,,,,,,,,,0,,,0
use the `Link` component to navigate between routes,"It's really impractical to keep navigating between routes by typing the route into the url bar. Besides, that keeps refreshing the page, which we're trying to avoid! So we are going to import the `Link` component, and use that to route to our different routes.",,"The link component can be included just like any other component in your application. This will produce an `anchor tag` that will link to a pre-defined component of your choice. Remember if we set up our Routes properly we'll be able to use this component to navigate our browsers to the path where a component can be mounted. We can think of our `Route` component as the boat on the ocean, and the `Link` as the wind and sails that makes that boat move.

```js
import { Link } from 'react-router-dom'

<Link to=""/about"">About</Link>
```
As is the case with all of the components that we get from React Router, `Link` will take a few Props that we can use to control the component and allow it to work for us. 

The first thing that `Link` takes as a prop (and most important) is the `to` props. Notice in the above code block that `to` is set to a string, that looks like a URL. This is just like the `href=""/about""` attribute on the `anchor` tag. This is how we navigate with React Router. ","Let's add a navigation bar to the Avenger's app. We'll use `Link` to make a way to route to the `Home` component and the `AvengerList` component. We won't make one for the `AvengerPage` component because we won't have a way to tell it which avenger we want to route to.

```js
<ul className=""navbar"">
  <li>
    <Link to=""/"">Home</Link>
  </li>
  <li>
    <Link to=""/avengers"">Avengers</Link>
  </li>
</ul>
```

Try out the links to make sure they work, and then style the nav bar. Once that is done, go to your `AvengerList` component and add a `Link` somewhere in the mapped list of avengers that will route you to the `AvengerPage`. To show an example, I'll do it here on the header element. You'll notice that I am using an interpolated string so that we can build out the url dynamically using the avenger's id.

```js
<Link to={`/avengers/${avenger.id}`}>
  <h3>{avenger.name}</h3>
</Link>
```

Take a minute to inspect your navbar and your wrapped header elements in the dev tools. Look for the anchor tags that get rendered by the `Link` component.","Make a navbar on the friends app. And in the list component, add a `Link` component to the mapped list of friends to give us a way to route to the individual friend page.",W7b8BQN6gf0,http://youtube.com/watch?v=W7b8BQN6gf0,https://www.youtube.com/embed/W7b8BQN6gf0,,,,,React Router I,,Single Page Applications,Full Stack Web Development Core,,1,1,1,3
build 4 different kinds of utilities in a bootstrap 4 project,"Bootstrap 4 comes with robust utility classes that can help your HTML become very expressive and reusable.  In addition to making your life easier, they will help the next developer know what you are doing along the way.","The objective is to have them experience 4 utilities on their own so they could handle all 16.  Go through several utilities and highlight how useful the flex utility is in particular.

https://getbootstrap.com/docs/4.0/utilities/flex/",,,,,,,,Bootstrap 4 Utilities,Bootstrap 4 Cheatsheet,,"Bootstrap II,Bootstrap I",,,,,0,,,0
build 3 different JS components in a project,"CSS components were covered in the last module but the functional power of bootstrap resides in JavaScript based components.  Often times bootstrap is used just for it's JavaScript components because they are so easy to implement.  

","You can find a list of all the JS components here:

https://getbootstrap.com/docs/4.0/getting-started/introduction/#js

Take time to get familiar with carousel, collapse, modals, and scrollspy so that you can demo them during class.

This list is taken from the above link:

Alerts for dismissing
Buttons for toggling states and checkbox/radio functionality
Carousel for all slide behaviors, controls, and indicators
Collapse for toggling visibility of content
Dropdowns for displaying and positioning (also requires Popper.js)
Modals for displaying, positioning, and scroll behavior
Navbar for extending our Collapse plugin to implement responsive behavior
Tooltips and popovers for displaying and positioning (also requires Popper.js)
Scrollspy for scroll behavior and navigation updates","This is the list of JavaScript enabled components in Bootstrap 4:

* Alerts for dismissing
* Buttons for toggling states and checkbox/radio functionality
* Carousel for all slide behaviors, controls, and indicators
* Collapse for toggling visibility of content
* Dropdowns for displaying and positioning (also requires Popper.js)
* Modals for displaying, positioning, and scroll behavior
* Navbar for extending our Collapse plugin to implement responsive behavior
* Tooltips and popovers for displaying and positioning (also requires Popper.js)
* Scrollspy for scroll behavior and navigation updates",,,,,,,"""Carousel, a JavaScript component""",,,"Bootstrap II,Bootstrap I",,,,,1,,,1
build a form and style it's contents in a project,Building forms is part of most development jobs.  Being able to style them has always been a time consuming task.  With bootstrap we can quickly style forms in many ways.,"Review this: https://getbootstrap.com/docs/4.0/components/forms/

Start with a simple form and inputs then move into a robust validation solution.  Explain that validation is a stretch goal for the project but highly encouraged.
",,,,,,,,Bootstrap Forms,,,"Bootstrap II,Bootstrap I",,,,,0,,,0
demonstrate the proper use a of a callback function by passing a function to another function as a parameter,"Callback functions come from a programming paradigm known as functional programming (FP). Is not a new paradigm nor is it unique to JavaScript. In fact, many have wondered (due to its dynamic nature) whether JavaScript is an Object Oriented language or a Functional Programming language. The answer to that is simply, both. We get the ability to choose the patterns to use in order to accomplish tasks.

That really is all we're trying to do here: provide the computer a set of instructions to achieve a task. And the make up of many many tasks simply becomes... software. 

At the end of the day, the language isn't written for the computer, that would be binary. The language we use as developers was written for us, so we as developers get to choose the paradigm we are to use to achieve the task. 

So, callback functions are just functions that are passed into other functions as arguments. And the concept is so commonly used throughout the JavaScript language that one day you'll look back and barely remember a time when you didn't know how to use them.",This objective is best achieved once a student has a good grasp on loops (pre course material) and data structures like Arrays and Objects. We also ought to ensure that functions are covered a bit when tackling this conversation. ,"You'll hear these words everywhere: ""Functions in JavaScript are first class citizens"". And if you're like me, you'll get puzzled trying to dissect their meaning. 

Simply put, this means that functions in JavaScript are a Type like any other Type (Boolean, String, Number) and they can be passed around as arguments to other functions. 

Take the following example into consideration:

```javascript
const functionFeeder = function(callback) {
  callback('Hello from the inside of Function Feeder');
};
```

What we have done here is define a function called `functionFeeder` and passed it a `parameter` called `callback`. So when `functionFeeder` is invoked, we have the ability to feed it a function as an argument. That function in turn, will feed back the string `Hello from the inside of Function Feeder` to the callback function it receives. And thus, when we call `functionFeeder` we can handle that string that comes back to us like so:

```javascript
functionFeeder((string) => { // invoking the function
  alert(string); // alert a function that pops up a box in the browser.
});
```

`functionFeeder` respectively becomes what is known as a `higher order function` or a `callBack function` allowing it to take in a function as a parameter and executes a function when called with a function as it's argument. 

Lets take a look at a few more examples.

```javascript
  function sayHello(name) {
    console.log(`Hello, ${name}`);
  }
```

`sayHello` is a function with one purpose, to say hello to a name that is passed into it. Because we've built a function that is so succinct and has a very simple purpose, we can use that function over and over again. Once we set up a function that will define the name we want passed to `sayHello`, all we'll have to do is pass it to our function and let it perform is routine / action.

```javascript
 function callSayHelloWithLars(callback) {
    const innerName = 'Lars';
    callback(innerName);
  }
```

The `callback` in the above function will become `sayHello` when we invoke it like this:

```javascript
 callSayHelloWithLars(sayHello);
```

And `callSayHelloWithLars` executes `sayHello` as it's callback. 

I could re-use `sayHello` in another context now. Check it out.

```javascript
function callSayHelloWithRyan(callback) {
  const newName = 'Ryan';
  callback(newName);
}
```

Now lets combine a few of the things we've learned today. I mentioned that callbacks are used everywhere. They're even used in our Array methods... ALL OF THE TIME! EVERYWHERE! :) In the case of `.forEach()` an iterator function we use a callback to access the items in array that come back with each pass.

```javascript
const items = ['feather', 'coupon', 'cup', 'drill'];
```

We could use a `native for loop` to loop over this list and log out every item.

```javascript
for(let i = 0; i < items.length; i ++) {
  alert(items[i]);
}
```

This works for sure! But we have `.forEach` built into the language to allow us to not have to write that every time. SO we could do something like this to clean it up a bit.

```javascript
items.forEach(item =>  alert(item) );
```

**NOTICE**
this part is the callback
`item => alert(item)`

This is some fancy syntax that we will continue to go over as the week progresses.","So now lets practice some things together. First lets create a list of elements we want to play around with as our data. Literally, elements.

```javascript
const elements = ['earth', 'wind', 'fire', 'water'];
```

Remember that with functions we can pass as many parameters as we want to them. So lets create a couple of functions that we can use to consume this list of elements.

Create a function called show first that passes back the first item in the given array.

```javascript
function showFirst(array, callback) {
  callback(array[0]);
}
showFirst(elements, (firstItem) => {
  alert(firstItem);
});
```


Create a function like 'shoFirst' but this time, show the length of the array passed in.

```javascript
function showLength(array, callback) {
  callback(array.length);
}
showLength(elements, (length) => {
  alert(length);
});
```

Now lets use `forEach` again to loop over our array and alert each item in the array.

```javascript
elements.forEach(element => alert(element));
```

Remember map? The biggest difference between `.forEach` and `.map` is that `map` returns a new array of elements while in turn passing each element back to the callback. 

```javascript
const newArray = elements.map(item => 'Element: ' + item);
```","Complete the following exercises included here in this JSBin [Callbacks](http://jsbin.com/sadikid/edit?js,console)",zIRN-Gn8phU,http://youtube.com/watch?v=zIRN-Gn8phU,https://www.youtube.com/embed/zIRN-Gn8phU,,,What the heck is a callback?,,JavaScript II  ,,JavaScript Fundamentals,Full Stack Web Development Core,,1,1,1,3
add nested routes to an application and display sub-nav views,"When building a React app, there can be some cases that we need to build a section inside a route where the content can change dynamically based on the url path, but we don't want the parent route to change. For example, imagine that this page has a header section that never changes, and below that there is a section with a tab menu, and the content for that section changes based on which tab is active. When clicking a new tab, the url changes, and the content changes, even though the parent component and parent route have not changed. Enter nested Routes!",,"Remember, `<Route />` is just a component. We can render it anywhere we want. So, if we want to nest one route, or a set of routes, inside another route, then we can render those `<Route />` components inside the parent route component. 

Look at the following `app.js` code, where we will render `ContactPage` if we are at the path `'/contact/:id'`:

```js
class App extends React.Component {
  render() {
    return (
      <div className=""app"">
        <Route exact path=""/"" component={Home} />
        <Route path=""/contact/:id"" component={ContactPage} />
      </div>
    );
  }
}
```

So when we route to ""/contact/:id"" we render a contact profile page. We have a contact header section at the top of this component that will hold general contact information and maybe a profile picture. Under that, we build a section that has tabs for `Activity`, `Appointments`, `Documents`, and maybe others. For these, we want to mount and render nested components under the tabs. But we also want to update the url based on the active tab - ie, ""/contact/:id/appointments"". 

There is a glaring problem with this though. When switching between active tabs, we don't want to be re-rendering `ContactPage`, which normally would happen when we route to the new url. Nesting the routes for the tabs content will solve this problem for us. 

Let's take a look at `ContactPage.js`:

```js
function ContactPage() {
  return (
    <div className=""ContactPage"">
      <ContactProfileHeader />
      <ContactProfileTabs />

      // Nested routes
      <Route exact path=""/contact/:id/activity"" component={ContactProfileActivity} />
      <Route exact path=""/contact/:id/appointments"" component={ContactProfileAppointments} />
      <Route exact path=""/contact/:id/documents"" component={ContactProfileDocuments} />
    </div>
  );
}
```

`ContactPage`, nor the header or tabs components, will have to re-render when we route to any of these paths, but now we can show dynamic content based on the current path.

Of course, this may all seem overly complicated for what we are trying to do. We know easier ways to dynamically render something. Why can't we just keep something like `profileContent: 'activity'` in state, and render the nested components based on what the `profileContent` string is? We absolutely could do that, but we would lose the tie between the url path and the content being rendered. I'll say that again... _we would lose the tie between the url path and the content being rendered_. The whole idea of this is that we are rendered dynamic content _based on the url_. 

Why would we want to keep this connection in place? Here's one possible reason. With nested routes you can type in the path in the url and get the correct content to display. Without them, you would have to go to the contact profile page, then click on the tab to get to that content. There are pros and cons to both situations. Deciding between the two different implementations will really depend on the preference of the developers, team managers, and the stakeholders, and what behavior they are trying to achieve.

A big gotcha... 

There is something that we have to watch out for when setting up nested routes. We need to know when to use the `exact` attribute on the involved routes. If you noticed, in `app.js` from above, we didn't use `exact` in the contact route.

```js
<Route path=""/contact/:id"" component={ContactPage} />
```

That's because if we had, we would not have an exact match to the path when routing to ""/contact/:id/activity"", and `ContactPage` would not be rendered. The `<Route />` component would simply render `null`. Well, if `ContactPage` is not rendered, then we would never even reach our nested routes. We want `ContactPage` to render even if we are at a path like ""/contact/:id/documents"", so we can't use `exact` on that route. This also means we can't ever have another ""parent"" route that starts with ""/contact/:id"", so it's something we need to plan for from the beginning.","We're going to continue building on our Avengers app here! Remember the data that we had for our list of Avengers? There was some normal details for each Avenger, then there was a list of movies that each avenger has been in. Let's look at our `AvengerPage` component and add nested routes that will render either the details of the Avenger, or that Avenger's list of movies, depending on the url that we are at.

First, we need to create some nested routes. Inside the `AvengerPage.js` import `Route` from `react-router-dom`. Next, add two routes at the end of the component:

```js
<Route path=""/avengers/:id/details"" render={() => <AvengerDetails avenger={avenger} />}>
<Route path=""/avengers/:id/movies"" render={() => <AvengerMovies avenger={avenger} />}>
```

Now, create the two components that we've told React that we want rendered at each route - `AvengerDetais` and `AvengerMovies`. In the movies component, render the list of movies. In the details component, decide which details you want to move out of the `AvengerPage` component and into the new details component, then render those details there.

Now, we'll need a way to navigate between each route. In the `AvengerPage` component, just above your nested routes, build out two `Link` components that will let the user navigate between the two subroutes. Don't forget to import `Link` from `react-router-dom`.",Continue your work on your friends app. I'm going to leave this one up to you to flex those creative muscles and think up a way to add nested routes to your app!,_UlZFNr9tBE,http://youtube.com/watch?v=_UlZFNr9tBE,https://www.youtube.com/embed/_UlZFNr9tBE,,Add nested routes,,,React Router II,,Single Page Applications,Full Stack Web Development Core,,1,1,1,3
pass data to components rendered by React Router via the render prop ,"So far with React Router we have used the `Route` component to render components based on the page you have routed to. The only problem is, we are used to passing data to these components via props, but we don't really have a way to do that with `Route` when we are passing the component to the `component` prop. So when we need to get some data to the component that we want to render, we have a way to do that with a `render prop`.",,"`Render prop` is a prop on a component that takes in a function that returns a component - namely, the component we want to render. This pattern is known as ""render props"". According to the React docs, a render prop is a function prop that a component uses to know what to render. React Router uses this pattern to let us pass data to the component we want to render.

```js
<Route render={() => <MyComponent someProp={someData} someOtherProp={moreData} />} />
```

This works to get our data to our component, but now we don't have the props that the `Router` component passed down when we were just using the component prop - `match`, `history`, and `location`. If we still need those in our component (and most the time we will), they are actually passed to the function inside `render` as an argument in an object. We'll call that object `props` like this:

```js
<Route render={props => <MyComponent someProp={someData} someOtherProp={moreData} />} />
```

Now we have access to all three props, and can pass those down to the component.

```js
<Route render={(props) => (
  <MyComponent 
    someProp={someData} 
    someOtherProp={moreData} 
    match={props.match}
    history={props.history}
    location={props.location}
  />
)} />
```

That will now give us access to the same props that we had before when using the `component` prop! And... to make life a little bit easier, let's change that up a tiny bit by using the ES6 feature, the `spread operator`. Since the three props we are trying to pass through have the same property name on the props object as the prop name, we can remove all three of them as pass them along like this `{...props}`. This will ""spread"" in all three props that we passed through manually above:

```js
<Route render={(props) => (
  <MyComponent 
    {...props}
    someProp={someData} 
    someOtherProp={moreData} 
  />
)} />
```","[Link to codesandbox to follow along with the tutorial](https://codesandbox.io/s/zwkl38vkjx)

Now we need to update the Avengers app to use the `render` prop instead of the `component` prop. But first, let's talk about why we want to make this change, in context of this practical example. We have data coming from somewhere for our applications. Usually that ""somewhere"" will be an API getting data from a database. In our case, it's hardcoded into our application. You probably imported the avengers array from your data file directly into the `AvengerList` and `AvengerPage`  components. Hopefully this made you cringe inside just a little bit, because, as a React developer you want to control state (data) in one place. In this case, data should be managed in the `App` component, then passed to whatever components need them via props.

So let's update those routes to use the render prop so we can do that.

```js
<Route 
  path=""/avengers/:id"" 
  render={props => <AvengerPage {...props} avengers={avengerData} /> } />
<Route 
  path=""/avengers"" 
  render={props => <AvengerList {...props} avengers={avengerData} />} 
/>
```",Now do the same with the `Friends` application.,WC6gX8sWkH4,http://youtube.com/watch?v=WC6gX8sWkH4,https://www.youtube.com/embed/WC6gX8sWkH4,,,,,React Router II,,Single Page Applications,Full Stack Web Development Core,,1,1,1,3
create dynamic routes using URL parameters and the `match` object,"The URL's that we type into our web browsers are actually powerful enough to hold onto some dynamic information that we may need at some point in time. The Match object built into React Router allows us to utilize this behavior, and send information by means of the URL's we type into our search bars, down into our components for use later.",,"Lets say we have a list of users. Each user is an object with a few properties that contain specific information about each user. Each user object has a unique `ID` parameter that we can use to index our users, and only display information about 1 user instead of a variety of users. How would we go about selecting which user is to be shown? 

One thing, we could do is to build out a click handler that will store the user's `ID` on `React Component State`, and then, inside of our `render function` we could have a conditional statement that hides the users list and shows the single user's information. This would work splendidly because remember that React doesn't care where your data comes from, it only cares what data you're showing to the user. 

The way to accomplish such a task using React router is to let the library do the `conditional rendering` for you. If we were to set up a route like the one below we're effectively telling React Router to mount a `SingleUser` component anytime we request the url `http://localhost:3000/users/<id-gets-entered-here>`. 

```js
<Route path='/users/:userId' component={SingleUser} />
```

This `ID` will be some long string or even just a number, the component doesn't care. What is important to note is the thing that comes after the `:`. This parameter is just that, a variable that we can use later to pull that information down. This happens through the `match` object that React Router provides for us. 

Any component that is mounted via `React Router's Route` component will receive a `match` object as a prop. Because this of this implementation, we can use component lifecycle methods like `componentDidMount` to receive this information as the page is being mounted. This idea is very powerful because it allows us to implement what we call `dynamic routing`. 

So, if the URL `http://localhost:3000/users/10` is requested, how do I then access that number `10` that is found on the end of the URL? One common way is to simply just consume it from props on the `componentDidMount` method. Because the `match` object is found on any `Route` mounted component, we can consume that match object as we would any other prop.

```js
componentDidMount() {
  const id = this.props.match.params.userId;
  // do something with the id
}
```

Remember that we called the id after `/friends` the `userId` when we set up our route. So that is what will be found as the `key/value` pair on the match object when this route is requested. If we were to look at the console, we could see a better picture of what's going on with this here. 

![match params full](https://image.ibb.co/fPd2X8/Screen_Shot_2018_06_26_at_9_55_17_AM.png)

Now you can do with that ID whatever you'd like. Normally the next step is to send it off to a server to retrieve some new information somewhere. 

This is how one would set up dynamic routing using React Router. Here is a link to a little project that demonstrates it's use case pretty well. 

[![Edit o4nomn5p49](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/o4nomn5p49)","Now we can create an Avenger Page component to view details for individual Avengers. We'll do this by creating a dynamic route using an `id` parameter, and rendering an `AvengerPage` component for the Avenger with that id.

First let's create the `AvengerPage` component. It will be a functional component that renders details of an Avenger. Build out the design however you would like.

Next, add a dynamic route:
```js
<Route path=""/avengers/:id"" component={AvengerPage} />
```

Now when we do this, we'll want to be sure to add the `exact` attribute to the `/avengers` route, or else that component will render at our new path as well. Add that, and your routes should look like this:

```js
<Route exact path=""/"" component={Home}/>
<Route exact path=""/avengers"" component={AvengerList}/> //added the exact attribute
<Route path=""/avengers/:id"" component={AvengerPage} />
```

Finally, we need to use the `match` object that gets passed as a prop to our new component to find the correct avenger to display the correct details in the `AvengerPage` component. To do that, we will use `.find()` on the avengers list and find the avenger that matches the dynamic `/:id` parameter in the url. Then we will set the Avenger we find to an `avenger` variable. This will all happen inside the component before we return our JSX. Then in the JSX, we will reference that `avenger` variable to render out their details.

```js
import React from 'react';

const avengerData = []; // get the data from the same source above

function AvengerPage(props) {
  const avenger = avengerData.find(avenger => props.match.params.id === avenger.id);
  return (
    // ...jsx goes here - something like...
    <h1>{avenger.name}</h1>
    // ...etc
  );
}
```

But wait, there is a problem. If you test out your new route, you'll see that there is an error that says something like ""Cannot read property `name` of undefinded."" That means that `avenger` is undefined, and that the `.find()` function is not finding the avenger, and setting it to the variable. Let's fix this.

If you look at that expression - `props.match.params.id === avenger.id` - and inspect the two different `id`'s, you'll see that we're getting a string for the `id` coming from the `match` object (because it's coming from the url string), whereas we're getting a number from the id from the avengerList data. So we just need to change one of the two so both of them are a string, or so that both of them are numbers. Personally, I like to use an interpolated string here to change the number `id` to a string. Refactor your `.find()` callback function to look like this:

```js
const avenger = avengerData.find(avenger => props.match.params.id === `${avenger.id}`);
```","In the friends app you've been building, create a new, dynamic route for the path `/friends/:id`. Then create a `FriendPage` component that will find your friend from the list of friends based on the `/:id` param in the url, and render that friend's details. Remember to style your app!",hoaxvh0Azic,http://youtube.com/watch?v=hoaxvh0Azic,https://www.youtube.com/embed/hoaxvh0Azic,,The `match` object,,,React Router I,,Single Page Applications,Full Stack Web Development Core,,1,1,1,3
read values from URL or query string parameters,,,,,,,,,,,,,,,,,,0,,,0
describe the `Route` component and set up routes within a React Application,"The way we declaratively set up our routes with in our applications all starts with the `Route` Component. Once you understand how to set up you which components will be mounted when which paths in our URL's are being requested, you'll be off to a good start with React Router.",,"_Routes are a way of getting to a destination_

To next set up step for using React Router, after we've wrapped our `Root` component in the `Router` or `BrowserRouter` component is to then set up our Routes by declaring what components will be mounted when certain URL paths are met. The best part of React Router is that you can do this at pretty much any point during your development process, whereas previously you had to declare your routes early on in the development cycle. What this allows us to do, is figure out a few other more important things without allowing routing to get in the way. This is super useful. 

Once you have React Router installed by using `yarn add react-router-dom` we can now import the `Route` Component and use it within our application.

```js
import { Route } from 'react-router-dom';
```

The `Route` component is the way we declare what `components` will be _mounted_ based on what `URL's` are being requested by the user. And the best about this process is that we get a chance to do this in a very `react` way. Lets picture a component `Users` that will display a list of users in your system when the url `www.coolestapp.com/users` is requested. The `Route` component takes in a few `props`, the first is the `path` where the Route component will trigger when someone types in that `path` in the URL. The next important prop is the `component` prop. This is the component that you want React to _mount_ when the URL matches the requested `path`. So in our case _when `/users` is requested, the `Users` component will be mounted_. 

```js
<Route path=""/users""/ component={Users} />
```

This route will take us to the 'users' component when the `/users` url is requested within our application. You may be thinking to yourself at this point _is that really it?_ and the answer is yes it is! It's really simple to declare you routes and components that will be mounted when the routes are requested. Think of your `Route` components asking you this question every single time you set one up.

```
What component do you want mounted when a users asks for what url path?
```

If you do this, you'll always allow yourself to think about each particular piece of your application and how a user might interact with each component.

Now lets see this all in action in a larger portion of an application. Lets picture an app that has 3 major components that will need to be rendered as part of a `Navigation` system, `Home`, `Contact`, `About`. Each of these three components will need to be rendered when a users requests the `""/""`, `""/contact""` and `""/about""` paths in our app. So, let us refer to our question above, _What component do you want mounted when a users asks for what url path?_. In our case we want the following:

```
A user requests `/` so we will mount the `Home` component
A user requests `/contact` so we shall mount the `Contact` component
A user requests `/about` so let us render the `About` component
```

Now that that is solved, lets put it into practice.

```js
<Route path=""/"" component={Home}/>
<Route path=""/contact"" component={Contact}/>
<Route path=""/about"" component={About}/>
```
#### The `exact` prop

And there we have it, we have successfully declared our Routes within our application. But we have a bit of a problem. A problem that is easily solved. If you're looking at the React Router documentation you may have already come across the `exact` prop, which is provided to us by the React Router Api. This prop is a very important feature of the `Route` Component. It comes to us because of the way that the package was built. Lets consider a bit of _how_ this whole things works. 

When it comes down to it, we are using an API that already exists for us as web developers. And that is the [History](https://developer.mozilla.org/en-US/docs/Web/API/History) api that is built into our web browser. If the URL `/` and `/about` are both requested, and we have an algorithm to match the characters in the sequence `/`, `/about`. Both the `/` and `/12` will match these characters. Because of the way this is set up, if we request the route `/about` then both the `Home` Component and the `About` Component will be rendered. React Router anticipated this and they built in the `exact` prop to the `Route` component to solve this problem.

By placing `exact` on a `<Route />` component you are saying that the _specific_ path requested will be the _only_ if the path matches _exactly_ what was requested. This defaults to false, so by simply including the `exact` prop on your `Route` component it will set it to true and only mount our `Home` component when the specific path `/` is requested and not when `/about` is requested. [Here](https://reacttraining.com/react-router/web/api/Route/exact-bool) is a link to the docs. And here is an example of how this will work.

```js
<Route exact path=""/"" component={Home}/>
<Route path=""/contact"" component={Contact}/>
<Route path=""/about"" component={About}/>
```

This is the same as before only now our `Home` component route has the `exact` prop added to it. We have now solved the problem.","Time to set up routes for our Avenger's app. We want to have a home page, and a list page. Later we'll add an Avenger page. So our app routes are going to be organized something like this:

```
A user requests `/` so we will mount the `Home` component
A user requests `/avengers` so we shall mount the `AvengerList` component
```

Create a `components` directory. Then inside that folder, create a `Home.js` file and an `AvengersList.js` file. For now, just render a header element with ""Home"" and ""Avenger List"" in the respective components.

Import those new components into `App.js`. Let's create the routes for our app. We will need to import the `Route` component.

```js
import { Route } from 'react-router-dom';
```

Now render two route's (and don't forget to add the `exact` prop to the Home route:

```js
<Route exact path=""/"" component={Home}/>
<Route path=""/avengers"" component={AvengerList}/>
```

Go to both url's and make sure the components are rendering correctly.


Build out your `Home` component however you would like.


Add [this data](https://gist.github.com/dustinmyers/b2a904870c84a0339002458f972b3398) to your app and display the list of Avengers in the list component. 

Add [this](https://gist.github.com/dustinmyers/35ad6751b5bd683b441faaf167dfa7d3) to your .css file to use my styles, or style it up how you'd like on your own.","In your friends app, add a new `Home` component and `Friends` component. Then add a route for each component. Test your app in the browser to make sure both apps are rendering at the correct route. Build out your `Home` component and then render out a list of friends data in the `Friends` component.",rJ6AOyFabOw,http://youtube.com/watch?v=rJ6AOyFabOw,https://www.youtube.com/embed/rJ6AOyFabOw,,The Route Component,,,React Router I,,Single Page Applications,Full Stack Web Development Core,,1,1,1,3
explain the difference between `Link` and `NavLink` and when to use which to navigate declaratively between routes,"You'll notice there are two ways include a React Router component that produces an anchor tag into your application, that will produce something like the element found below. 

```
<a href=""www.somecoolurl.com"">Anchor</a>
```

Learning the differences between the `Link` & `NavLink` components will help you gain an understanding of when to use one over the other. This will help you build your navigations and give you the ammo you need to produce a great routing experience for your apps.
",,"#### Link
The `Link` component renders an anchor tag with an href of the path we have specified on it. 

#### NavLink
The `NavLink` component is is exactly like the `Link` component with one noticeable exception. It adds the class `active` to the anchor tag when the url matches the path in the `NavLink` component. This is really awesome because we can now style our navbar based on which route we are at! You may be doing this by hand already, but now we are going to we how we can do this with React Routers built in component.

```js
import { NavLink } from 'react-router-dom'

<NavLink to=""/"">Home</NavLink>
<NavLink to=""/about"">About</NavLink>
```

When we route the the about page, this is what the two above `NavLink`'s would render:

<img src=""https://tk-assets.lambdaschool.com/01e3ba3b-ae4c-4f1b-b675-9e2f755fc6e3_ScreenShot2018-10-08at4.35.40PM.png"" width=""800"" />

See the `class=""active""` added to the `About` anchor tag? Now you can use that class in your css to style the active link different from the other links.

But, sometimes we may not what the class added to the anchor tag to be called `.active`. If that is the case we can use the `activeClassName` prop on the `NavLink` component. It would look like this:

```js
<NavLink to=""/"" activeClassName=""activeNavButton"">Home</NavLink>
<NavLink to=""/about"" activeClassName=""activeNavButton"">About</NavLink>
```

and it would render like this:

<img src=""https://tk-assets.lambdaschool.com/81431edf-2ea9-45bb-95f6-358b325dd0c6_ScreenShot2018-10-08at4.40.22PM.png"" width=""800"" />

Now we have added the custom class `.activeNavButton` instead of the generic `.active` class. ","Take a quick look at the documentation for `NavLink` to see what else you can do with the props you can use. Specifically, look at `isActive` and `activeStyle` [NavLink docs here](https://reacttraining.com/react-router/web/api/NavLink). Just look briefly and take note of these so you know that they exist. 

Then rebuild your navbar in the avengers app to style it based on the active route. It might look something like this:

```js
<ul className=""navbar"">
  <li>
    <NavLink exact to=""/"" activeClassName=""activeNavButton"">
      Home
    </NavLink>
  </li>
  <li>
    <NavLink to=""/avengers"" activeClassName=""activeNavButton"">
      Avengers
    </NavLink>
  </li>
</ul>
```

with your css that styles the active link a differently than the other links:

```css
.navbar {
  margin: 0;
  padding: 0;
  height: 64px;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.12), 0 1px 2px rgba(0, 0, 0, 0.24);
  list-style: none;
  display: flex;
  justify-content: flex-start;
  align-items: center;
}

.navbar > li > a {
  color: #4285f4;
  text-decoration: none;
  padding: 24px;
  height: 16px;
}

.navbar > li > a.activeNavButton {
  background-color: #4285f4;
  color: white;
}
```","Use `NavLink`'s in your friends app, and style the navbar like we did the Avenger's app.",nIQaDugVV4k,http://youtube.com/watch?v=nIQaDugVV4k,https://www.youtube.com/embed/nIQaDugVV4k,,"NavLink docs,Link Docs",,,React Router II,,Single Page Applications,Full Stack Web Development Core,,1,1,1,3
add React Router to an application and set up basic routing,"What is React Router? Well it's as great as it sounds, a client side wrapper for React applications. This topic will teach out about React Router and how to get it set up in a React application.",,"React Router is declarative style routing for React applications. In fact, they fit the bill with their motto when they say, _Learn once Route anywhere_ because React Router can be used for React and React Native as well. The best part of React Router is that it pushes the envelope for what a router should be on the Client. And because it was built for use within a react ecosystem, it was built using a `Reactive & Declarative` context. Meaning that we get a much more dynamic routing experience when building and designing our Routes within our React Apps. 

By this point you should have read up on the [Philosophy of React Router](https://reacttraining.com/react-router/web/guides/philosophy) and gathered that there have been some previous issues that we've just _dealt_ with when implementing routers into our apps. Well throughout the next couple of days, we're going to learn how to use this awesome piece of technology by implementing routes within our projects.

#### Getting Started


Lets look at how we can build out an application using some dynamic routing. To install react router all we have to do is use `yarn` to download the package from `npm`. In the past we used to just include the entire `react-router` package, but today we get to specify which target we're building for (Web or Native). Because we're building for web we're going to target the `react-router-dom` package and include it into one of our applications. 

Once you have it installed, all you need to do is include it as a package like any other `npm` package we've used to date. 

```
import { BrowserRouter as Router } from ""react-router-dom"";
```

Now we're going to actually use Router as our `Base` component that will wrap our entire app. We'll do this by wrapping our `<App />` component that we pass to `ReactDOM.render`.

```
ReactDOM.render(
  <Router>
    <App />
  </Router>,
  document.getElementById(""root"")
);
```

Now if we inspect our page, and look into the React Dev Tools we can find that we have some really neat things at our disposal, that will eventually get passed down to all other `Routes` (as we define them) in our application. 

Notice how our React elements are now all wrapped with a `BrowserRouter` and a `Router` component.

![BrowserRouter wrapper](https://ibin.co/3xOQ4G9zzQTA.png)

Notice how on Props and State we have some really neat things that come out of the box with React Router. We'll go inter further detail on these objects later but for now just note, that any time we register a route, we'll gain access to these props/state objects! `history` and `match`. This is the power of the Router. It wraps our app, but only the Routes will receive these necessities as necessary.

![Props and State](https://ibin.co/3xOPoxdrBHPL.png)

At the end of the day, this is all way have to do to install the Router. We get everything we need this way. ","Let's create an Avenger's React SPA app by using react-router.

- Start a project using `yarn create react-app avengers`
- Add react-router with `yarn add react-router-dom` or `npm install -s react-router-dom`
- In `app.js` import the `BrowserRouter` component and wrap your app with it:

```js
import { BrowserRouter as Router } from 'react-router-dom';
```

```js
ReactDOM.render(
  <Router>
    <App />
  </Router>,
  document.getElementById(""root"")
);
```","Start up a new React app called friends, install `react-router-dom` and get it wired up to use React Router. Inspect your app in the browser with the React tools and make sure you see your app wrapped in the `Router` component (reference the image above).",oxpdxfQlZwA,http://youtube.com/watch?v=oxpdxfQlZwA,https://www.youtube.com/embed/oxpdxfQlZwA,,React Router Philosophy,React Router 4 Quick Start Guide,,React Router I,,Single Page Applications,Full Stack Web Development Core,,1,1,1,3
describe and demonstrate the differences between `function scope` and `block scope`,"Scope is the context in which a variable can be defined in a JavaScript Program. There are 2 different types of scope, and both can have many different levels. Understanding scope helps us understand when we have access to data that we may need at a given place or time in our program.",,"Remember how we spoke about `var`, `let` and `const` and how they all behaved a little differently with different rules? Remember how we discussed that one of the rules differentiated `let/const` with `var` was the difference in 'scope'? 

Well if you don't remember that, that's ok, we're about to learn all about scope and how `let` behaves differently due to its scoping rules. 


Primarily we deal with function scope when it comes to where a variable is defined/available/being used in our programs. We went over this at length in the `closures` portion of our program today. And for a long time, (even though there have forever been ways of achieving a block scope i.e. a `try catch` statement) we have been primarily concerned with `function scope` and that is because variables were always just defined with the `var` keyword.  With the advent of the `let` keyword we now have a way to actually `block scope` a variable. What does this even mean?

Lets look at the following example. 

<img src=""https://ibin.co/3sVla3IzYbA2.png"" alt=""drawing"" width=""800px""/>

Why would this print 11? Well the short answer is because at the time this block of code runs, there is no `function scope` for the for loop running and the `i variable` gets `hoisted` or moved to the top of the global context of this JavaScript program. _More on hoisting to come_.

What's important to understand is that the variable `i` will become available to the entire global scope of the project because it get's hoisted. And example to demonstrate this very exercise can be useful when getting through this "" what the heckking heck? "" moment. 

```

var bark = 'bow wow';
function dog() {
  bark = 'woof';
  console.log(bark);
}
console.log(bark);
dog();
console.log(bark);
```

![Dog Image](https://ibin.co/3sVu7Zeo9ugb.png)

After the dust settles and we get some clarity here you'll be able to grasp the hoisting principle. `bark` when declared in the function scope of `dog` is declared and without the `var` keyword this variable (as the function is called) gets set and declared in the global scope of the program, which is why we have access to it outside the function as 'woof' instead of 'bow wow'. 

Now that we understand a bit about hoisting and how variables get moved to the top of the program depending on when/where a function is invoked, we can move on and see what happens in a block scoped situation. 

**REALLY it is important for you to be curious here and just keep on playing around with examples.  I cannot stress this enough about any piece of the material we are given**","### Block Scope Tutorial
The differences between block scope and function scope are best understood with practice.  Lets walk through a few examples and non-examples to get a better idea how it works.  

Follow along with the instructions below [use this code pen example](https://codepen.io/lambdaschool/pen/LJQdyR?editors=0012) as starter code.  

#### Var: Block Scope
Lets use a `var` declaration to see how block scope operates.

1. Define an empty block of code `{}`
2. Declare a `var` named `varTest` with a value of `""Var test!""` within the block of code
3. `console.log()` `varTest` after the block of code. Before you run the code in the browser, do you think the log will run?

```js
// Block scope example: var
{
 var varTest = ""Var test!"";  
}
console.log(varTest);
```
What did the console log out?  It should have logged out `""Var test!""` because `var` is **not** block scoped, it can be read _outside_ the block of code! 

#### Let & Const: Block Scope
Now that we have seen a non-example with `var`, lets take a look at how `let` and `const` work in the same block of code.

1. Define an empty block of code `{}`
2. Declare a `let` named `letTest` with a value of `""Let test!""` within the block of code
3. `console.log()` `letTest` after the block of code. Before you run the code in the browser, do you think the log will run?

```js
// Block Scope Example: let
{
 let letTest = ""Let test!"";  
}
console.log(letTest);
```
What did the console log out?  If you were using the example link provided, you will notice nothing logged out.  That is because this is actually an error:  
```js
Uncaught ReferenceError: letTest is not defined
```
_Because `let` and `const` are block scoped_, the curly braces prevent the declaration from advancing beyond their scope. 

**Note:** the example could be either `let` or `const` but because they are identical in their rules with block scope only `let` was used.

### Function Scope Tutorial
Now that we have seen examples and non-examples of block scope, we are prepared to take a look at function scope.   

We will add on to our examples we used from block scope. Continue to [use the same codepen example](https://codepen.io/lambdaschool/pen/LJQdyR?editors=0012)  from the block scope tutorial.

#### Var Example: Function Scope
Remember the block of code we just wrote?  We are going to add a function to the front of it and see what happens.

Study the code example below and notice that `functionTest()` is now in _front_ of the block of code.  This block of code is now function scoped.

Before you copy and paste this snippet of code into your tutorial file, think to yourself if this code will work or not.  

Copy and paste this code into your tutorial file and run it:
```js
// function scope example: var
function functionTest(){
 var varFunctionTest = ""Var test!"";  
}
functionTest();
console.log(varFunctionTest);
```
If you look at the browsers console after running this code you will notice a reference error:
```js
Uncaught ReferenceError: varFunctionTest is not defined
```
This reference error is telling us that `varFunctionTest` cannot be reached in it's current scope.  This showcases how `var` is function scoped and respects the boundaries set forth by our `functionTest` definition.

This is a great behavior because otherwise all our variables would be global and it would be a nightmare trying to debug anything. 

#### Let & Const: Function Scope
Because both `let` and `const` are block scoped, function scope doesn't change anything for their use within a function declaration.  Both `let` and `const` will simply look for their block of code and stay within those bounds.  

If you took the above example from `var` and swapped in `let` we would see identical results:

```js
// function scope example: let
function functionTestLet(){
 var letFunctionTest = ""Let test!"";  
}
functionTestLet();
console.log(letFunctionTest);
```
This would result in the following error because `let` and `const` are scoped to the block _inside_ the function:
```js
Uncaught ReferenceError: letTest is not defined
```
Great work on this tutorial, head down to the challenge and test your knowledge on both block and function scope.",,,,,,,"Scopes,Wes Bos on Scoping","* What is function scope?
* What is block scope?
* What is hoisting?",,,,,,1,,,1
build a kanban board based on project requirements,Managing your time in a measurable way is key to figuring out how much you can actually accomplish in a work day.  Kanban boards are an excellent way to manage your week and report back to your project manager how far you have progressed. ,"* Use trello to build the kanban board
* Build a basic backlog list
* Build a to do list
* Build a progress list
","Go create a free account on Trello which is based off of Kanban:
https://trello.com/

",,,,,,,Kanban board explained,,,Project Planning,,,,,1,,,1
"Explain what the DOM is, and how it relates to an html page","The Document Object Model is an object representation of the html elements of a webpage. It gives us an interface that with which we can interact with and manipulate the page, changing document structure, content, and styling. The object model is a tree structure with each DOM element therefore being a tree node, containing all the same property keys as each other node. Some of these node properties are informational while others are methods that we can use for interaction. The DOM , creating and propagating event objects, which hold information about the event type and target, up the tree.",,"When a web page is loaded into a browser, the browser first looks for the HTML file. The browser uses the HTML file as a blueprint, or instructions on how to build the page (this coupled with the CSS file later). The browser parses these instructions and builds a model for how the page should look and act using Javascript. This model is a Javascript Object containing every element in order on the page. This Object is referred to as the DOM, or Document Object Model.

The DOM is built as a data structure known as a ‘Tree’, because parent elements have nested children elements (or leaves). As with physical trees, we can follow branches of the tree to get to the exact leaf (or leaves) that we want to access. Each branch of our DOM tree can be it's own tree. It is important to remember this as we move through this lesson.

![DOM tree](https://tk-assets.lambdaschool.com/b75e53cc-0f0d-40c3-8f3f-31cc49eab207_dom-tree.jpg)

When the DOM is built and the webpage is loaded, developers get access to it in the form of the global Javascript object `document`. `document` contains the entire hierarchy of the page, each element (or DOM node), and it also contains dozens of built in methods and properties. We can use these methods and properties to manipulate what we see on the screen. 
 - Note: There are so many methods and properties on document (and its subsequent elements and collections) that it would take a lot longer to properly cover them all. We will only be covering the few most commonly used. From this point forward you will be expected to reference the official documentation to learn more about the different methods and properties available, when your need arises for something other than what we have taught. This is a very good habit to get into as we progress deeper in to the course. ","## DOM Investigation

Lets investigate the DOM together by visiting a live website and updating the DOM.  Follow these steps in order:

**Prerequisite: This tutorial assumes you are using Google Chrome.  You can get similar results in any other browser but these steps were tailored for a chrome experience.**

1. Navigate to [lambdaschool.com](https://lambdaschool.com/).
2. Right click on the main heading and you should see a dropdown with an option to `inspect element.` Click that option and chrome developer tools should activate. 
3. The developer tools should be showing the selection you made when you right clicked.  Double click the content of the heading.  You should now be able to edit the text of the header.  
4. Update the text with anything you'd like.  For this example, I will update the text to say ""Hello there!""  _You won't see any changes until you deselect the content in the chrome developer tools._
5. Now try updating the content and HTML of other elements on the page.

Notice that if you refresh the page, the changes you made are gone!  **That is because the elements you were editing existed in the DOM and were not permanent!**

You now have experience editing the DOM without writing code.  Go check out the challenge below to see the DOM inside the console!","Open the console in your web browser and enter 

```console.log(document);```

This should make the document appear on the screen, play around with it for a minute. Notice how the document contains all of the HTML elements (otherwise now known as DOM nodes) on the page. Hover over these nodes and notice how the element on the page is highlighted. ",k6nS8-lq_YY,http://youtube.com/watch?v=k6nS8-lq_YY,https://www.youtube.com/embed/k6nS8-lq_YY,,,"MDN DOM documentation,MDN 'document' documentation,Eloquent Javascript: DOM,Live DOM Viewer","- What is the DOM?
- How is the DOM built?
- How does a browser use the DOM to display a webpage?
- In what data structure is the DOM formatted?
- How do we access the DOM using Javascript?",DOM I,,Applied JavaScript,Full Stack Web Development Core,,1,1,1,3
"Use DOM selectors, and describe the differences in the behavior of each.",Being able to select specific parts of the DOM is key to building user interface experiences.  Learning about the several ways we can do this using DOM and nuances between each will lay the foundation for some amazing interactions.,,"### Dom Selectors

Now that we know how to access the DOM using Javascript, we need a way to select individual elements (or groups of them). Doing so will give us access to the live elements and allow us to manipulate them.

In order to manipulate elements on the DOM, we need a way to select them. There are many ways of doing this, for example we can select the body and the head just by asking for them (document.body, document.head) But when we want to go deeper thats where things start to get complicated. Thankfully `document` has a number of built in methods for accessing the exact element(s) we want.

**It is important to note, that all of these methods are case sensitive. If you are unsure of the case while using them, please refer to the official documentation.**

#### `getElement` Methods

These are the original methods for selecting elements from the DOM. They each take a single string as the only argument, containing either the id or class you are looking for.

```javascript
document.getElementsByTagName('p');
```

 This method will take a single string as an argument containing the element name of the elements you want to select. It will return an array-like object called an `HTMLCollection` containing all the elements that contain the element name supplied. We will discuss what a `HTMLCollection` is after we talk about the rest of our selector methods.

```javascript
document.getElementById('idName');
```

  This method will take a single string as an argument containing the id of an element, search through the DOM and return that element.

```javascript
document.getElementsByClassName('className');
```

  This method will take a single string as an argument containing the class of the elements you want to select. It will return an array-like object called an `HTMLCollection` containing all the elements that contain the class supplied.

#### `querySelector` Methods

These are the newest element selection methods added to the DOM. These methods give us the opportunity to select element(s) based on CSS style selectors (remember `.` is class, `#` is id, etc). Each method takes a string containing the selectors and returns the element(s). Note - We can select by element, id, class or others with both methods.

```javascript
document.querySelector('.custom-style'); 
```

  This method will search for and return the **first element** that matches the value passed into the method. Remember from above that biggest change from the older DOM selection methods is that we now need to pass the proper CSS selector into the argument.

  If we passed `('custom-style')` and not `('.custom-style')` we would error out.

```javascript
document.querySelectorAll('queryString');
```

  This method will search for and return *ALL* elements matching the query string. This methods returns these elements in an array-like object called a `NodeList`

#### The Difference between `HTMLCollection`, `NodeList`, and `Array`

When we use `getElementsByClassName()` or `querySelectorAll()` we get back either an `HTMLCollection` or a `NodeList` respectively. These are referred to as 'array-like objects'. We have seen an array-like object before (the `arguments` object in a function). They both have numerical zero-based indices, and the length property but that is all they share with an Array. `NodeList` does take it one step further, and has access to `.forEach`. There is no `.reduce` or `.map` or any other array method. 

**Pro tip:** The `Array` class does contain a method we can use to create an array from an array-like object, called `.from()`. To use this we would simply give `.from` the array-like object as it's only argument.

```javascript
Array.from(arrayLikeObject)
```","### Selector Tutorial

Let's get some practice using different selector methods.  You can use [this code](https://codepen.io/lambdaschool/pen/eLaXXb?editors=1010) or write your own.

Study this HTML first:
```html
 <header>
    <h1 class=""main-header"">Selectors!</h1>
    <nav class=""main-nav"">
      <a href=""#"" class=""nav-item"">Home</a>
      <a href=""#"" class=""nav-item"">About</a>
      <a href=""#"" class=""nav-item"">Blog</a>
      <a href=""#"" class=""nav-item"">Contact</a>
    </nav>
  </header>
```

#### `querySelector()`

What if we wanted to select all the first `a` tag within our navigation?  There are several ways to accomplish this task, but let's use `querySelector()` to get started.

When working with the DOM, we may want to re-use the reference several times in our code.  Let's declare a `const` to hold our DOM reference:

```javascript
const mySelection = document.querySelector('a');
```

Notice we had to use `document` in front of `querySelector()` that is because querySelector is a method of the document object.

Next, let's log the result of our selection.

```javascript
const mySelection = document.querySelector('a');
console.log(mySelection);
```

We should see this log in the console:

```javascript
""<a href='#' class='nav-item'>Home</a>""
```

We now have access to that element node in the DOM!  What if we wanted to select multiple elements at once?  We have just the method for that: `querySelectorAll()`.

#### `querySelectorAll()`

If you recall from the introduction to selectors, `querySelectorAll()` will allow us to return an array-like object called a `NodeList`. Let's set up a new const for our new selection:

```javascript
const multipleSelections = document.querySelectorAll('a');
```

Notice that all we really changed on the right side of the operator was adding an ""All"" to ""querySelector.""  The returned value is very different though, check your console's log to see what happened. If you are using chrome developer tools, you will see something like this in your console:

```javascript
NodeList(4)
  0: a.nav-item
  1: a.nav-item
  2: a.nav-item
  3: a.nav-item
  length: 4
  __proto__: NodeList
```

Wow, that is totally different than our result from `querySelector()` in the first example! We now have a `NodeList` and all of the nodes matching the `a` elements.  

What can we do with a `NodeList`?  You can [dig deeper into the documentation](https://developer.mozilla.org/en-US/docs/Web/API/NodeList) but for our tutorial, lets see how it is ""array-like.""

Study this code:

```javascript
const multipleSelections = document.querySelectorAll('a');
console.log(multipleSelections[2]);
```

Notice the `multipleSelections[2]`.  That looks very similar to how we can use indices in arrays.  The log result from the code above should read as follows:

```javascript
""<a href='#' class='nav-item'>Blog</a>""
```

Being able to access elements in this way is extremely powerful and will allow you to be creative if an HTML solution is not possible.  Imagine you didn't have a class or ID to hook into, you could use the `NodeList` index to get the job done!

#### Don't Forget The Selector

When using `querySelectorAll()` don't forget you are required to use the proper CSS selector.  Using the same HTML example:

```html
<header>
  <h1 class=""main-header"">Selectors!</h1>
  <nav class=""main-nav"">
    <a href=""#"" class=""nav-item"">Home</a>
    <a href=""#"" class=""nav-item"">About</a>
    <a href=""#"" class=""nav-item"">Blog</a>
    <a href=""#"" class=""nav-item"">Contact</a>
  </nav>
</header>
```

Use querySelectorAll() to select all of the `nav-item` classes:

```javascript
const multipleClasses = document.querySelectorAll('.nav-item');
```

Note that we had to use type out the `.` in `.nav-item`.  This trips up new developers to JavaScript all the time.  If you were to log out the results of this selection, you would see it's just a `NodeList` like before, but now it's using classes instead of the `a` element.  Push yourself further by using the challenge below!","You have been provided HTML and LESS with instructions on what to do in the JS portion of the code.  You will need to finish the DOM selector requests.  [Follow this link for the challenge.](https://codepen.io/lambdaschool/pen/mGYarw?editors=1010)

",WVq-2Yp7wgU,http://youtube.com/watch?v=WVq-2Yp7wgU,https://www.youtube.com/embed/WVq-2Yp7wgU,,,,"- What are the four different selector types?
- What are the different characteristics of each?
- How can you create a new element?
- What is the difference between HTMLCollection, NodeList, and Array?",DOM I,,Applied JavaScript,Full Stack Web Development Core,,1,1,1,3
Use different properties and methods to manipulate a selected element.,"Being able to change live DOM elements is part of any front end web developers tool kit.  Updating text, HTML attributes, or styles is part of building interactive web sites and web apps.",,"Now that we have access to an element(s), we can start to manipulate it and change characteristics about the element that were set (or not set) on it when it was written as HTML.

After we have captured our element (eg. `const el = document.querySelector(‘#idName’);` we can then use that instance of the element we selected to access and assign values to properties natively contained on it. Once again, there are dozens of properties and methods given to us on each element, it is wise to read up on the different ones. Here are a few of the most commonly used:

#### .textContent
- Gets and sets the text of an element. Essentially whatever text is between the open and closing tags of an HTML element. 
- Can use the assignment operator ( = ) to reset the text of an element
- Setting this property on a node removes all of its children and replaces them with the new single text node.
- `<div>Something Here</div>` 
- `element.textContent = 'Something New`;

#### .setAttribute() (or .{attr})
- This method (or property) is used as a way to set or reassign an attribute on the element. 
-  '.setAttribute()' is a method that takes two arguments, the attribute to set, and the value to set to that attribute.
- eg: `element.setAttribute('src', 'http://www.imagsource.com/image.jpg')`
- Can also use the pattern: `element.'attrName' = ‘value’`.
- eg: `element.src = 'http://www.imagsource.com/image.jpg'`

#### .style
- Every element contains a style object. This property accesses that style object. The style object contains every available style as a key and a value as the value. It is important to note, that these are NOT the CSS styles, these are inline HTML styles. 
- These styles are associated with the HTML inline style set on the element 
  - eg: `<div style=“color: red;”>DIV STUFF</div>`
- You can access and change a property on the style object by using the assignment operator `=`.
- eg: `element.style.color = ‘blue’;`
- Changing a property on the style object will effectively give this element an inline style.
- Inline styles have the highest specificity, overriding any other selector except `!important`.
- VERY IMPORTANT to note that this does NOT access or change anything in the CSS file.

#### .className, .id
- `.className` accesses or assigns a string containing all of the classes on the element.
- `.id` accesses or assigns a string containing the id of the element.

#### .classList
- `classList` will return an array-like object of all the classes on the element. There are a number of useful methods available on `classList`.
  - `classList` is a `DOMTokenList`.
    - A `DOMTokenList` is an array-like object with a numerical zero-based index, a length property, also the `.contains()` and `.forEach()` methods.
   - Most notably the methods `.add()` `.remove()` and `.toggle()` exist. All three take a single string representing the class.
       - `.add('className')` and `.remove('className')` do as their names indicate.
       - `.toggle('className')` will add the class if it does not exist and remove it if if does.

#### .appendChild() and .prepend()
- These methods are used for adding child elements to parent elements.
- `.appendChild(child)` will take an element and add it to it children. It will add it to the ‘end’ physically so if the children are displayed in order it will be the last.
  - eg: `parentElement.appendChild(childElement)` 
- `.prepend(child)` adds a child to the beginning, displaying it first.
  - eq:  `parentElement.prepend(childElement)`

#### .children and .parentNode
- These properties are used for accessing relatives of the element. 
- `.children` returns an `HTMLCollection` of all the children of that element.
- `.parentNode` returns the parent element of that element.
","# DOM Manipulation Tutorial

Let's get some practice manipulating the DOM.  You can use [this code as a base for your JavaScript](https://codepen.io/lambdaschool/pen/jvjjGB?editors=1011) or write your own HTML and CSS along the way.  

## Updating Text

When we want to update the text using the DOM, the go-to property is called `textContent`.  We can both read and write text inside of elements using `textcontent`.

Given this HTML, lets make some updates to the text:

```html
<h2 class=""second-heading"">I am the DOM</h2>
```

First, lets set up a reference to our element on the DOM:

```javascript
  const secondHeading = document.querySelector('.second-heading');
```

We are now prepared to update the content of our heading.  Let's update the content to say ""Dom updated!""

```javascript
  secondHeading.textContent = ""Dom updated!"";
```

Notice that we are first getting the text node of the element and then setting a new value!

**Security Note** You may read about `innerHTML` in your DOM learning. Avoid using `innerHTML` as it could potential be used as an attack vector for cross site attacks.

## Updating Attributes

Updating HTML attributes is vital to DOM manipulation.  Let's update the style for the `h1` in the code below.

```html
<header>
  <h1 class=""main-header"">Dom Manipulation</h1>
  <nav class=""main-nav"">
    <a href=""#"" class=""nav-item"">Home</a>
    <a href=""#"" class=""nav-item"">About</a>
    <a href=""#"" class=""nav-item"">Blog</a>
    <a href=""#"" class=""nav-item"">Contact</a>
  </nav>
</header>
```

Updating the DOM usually happens in two steps:

### Step 1: Select the element

```javascript
const mainHeader = document.querySelector('.main-header');
```

### Step 2: Use the desired attribute property to update the element

```javascript
mainHeader.style.color = 'red';
```

You can even chain the two steps together like this:

```javascript
const mainHeader = document.querySelector('.main-header').style.color = 'red';
```

This two step process can be repeated for other attributes as well!  What if we had an empty `src` attribute on an image tag?  Let's try it out provided we have this HTML:

```html
<img class=""custom-img"" src="""" alt=""Kitty image"" />
```

Select the image element's class and update the `src` attribute with this link:

`https://images.pexels.com/photos/20787/pexels-photo.jpg?auto=compress&cs=tinysrgb&h=350`

```javascript
const customImg = document.querySelector('.custom-img');

customImg.src = 'https://images.pexels.com/photos/20787/pexels-photo.jpg?auto=compress&cs=tinysrgb&h=350';
```

### JavaScript CSS Syntax

When using JavaScript to update CSS style properties, we need to be careful to remember that JavaScript does not accept dashes as a valid naming value!  Whenever a CSS property contains a dash, we must use camel casing in JavaScript.

Example:

```css
.some-class {
  background-color: gray;
}
```

The JavaScript version would look like this:

```javascript
  const someClass = document.querySelector('.some-class');

  someClass.style.backgroundColor = ""gray"";
```

**Pro Tip:** Don't forget the string when you assign a value to a CSS property.
","# DOM Manipulation Challenge

 [Take the example code from your tutorial](https://codepen.io/lambdaschool/pen/jvjjGB?editors=1011) and try updating the DOM in various ways.  

Here are some ideas:
- Change the color of the paragraphs
- Change the text contents of any element of your choosing
- Change the `href` of an anchor tag
- Update the `alt` tag of an image
- Update layout styles, try out flex properties with JavaScript syntax",cuXOWWsrcNk,http://youtube.com/watch?v=cuXOWWsrcNk,https://www.youtube.com/embed/cuXOWWsrcNk,,,,,DOM I,,Applied JavaScript,Full Stack Web Development Core,,1,1,1,3
"Explain what events are in the browser window, and how event listeners can listen for those events.","We will learn what events and event listeners are, and you will be able to explain those concepts. This is the foundation for adding dynamic usability to our sites. ",,"We use Javascript to make our pages dynamic and usable. Now that we can access and manipulate elements on our page, you might be wondering to yourself, “Why don’t we just change the elements in the HTML file directly? Why do we have to go through all of this just to change some styling on an element?” In fact, those are valid questions, and the way we have been using Javascript so far, it might be a better idea to just change our HTML. But, Javascript also allows us to add features and make modifications to our site by directly reacting to user interactions. Think about a button click, drag and drop, a zoom, or any number of user interactions. We create functionality for those interactions using Javascript. Now that we know how to manipulate and modify DOM nodes, we can learn about events. 

Every interaction a user has with a site is known as an event, a click, moving the mouse, scrolling the page, pressing a key on the keyboard, these are all events on the page and the browser can detect all of them. There are tons of different events the browser tracks. When an event happens on a page it is known as a trigger. 

- It is worth looking into the events documentation to see all of the events available to us, we will detail a couple of the most common. 

Now that we know what an event is and we know the browser is always tracking them, we need to be able to listen for specific events on specific elements. Did a user click that button? Did a users mouse hover over an element? Was there text entered into the input field? There are dozens of events an element can listen for. And when one of those events happens on that element, we can do something about it. This is called an event listener. We put an event listener on an element and give it a callback. When that event is triggered on the element, the callback is run. ",,,,,,,,,,DOM II,,Applied JavaScript,Full Stack Web Development Core,,1,,,1
add event listeners and event handlers to elements.,We can chose specific elements to listen to specific events and fires a callback when that event occurs. This is called an event listener. ,"TODO: Write a tutorial, create a few HTML elements and add event listeners to them, click, mouseenter, mouseleave, keydown, etc. Show how to add event listeners. Show how the event object is used inside of an event handler callback. Manipulate the element itself, it's children and it's parent to showcase the abilities of the eventHandler.","#### .addEventListener
Once we have an element selected, we can use the '.addEventListener' method on that element. `.addEventListener` will take two arguments, first the event to listen for, second the callback to fire when that event is triggered. For a complete list of events see the resources below. 
- eg: `element.addEventListener('click', callback);`

#### Events
We learned before that there are different types of events we can listen for. Obviously the most common are mouse events highlighted by the 'click' event, but there are dozens of more events we can listen for. We can add event listeners for as many events as there are for each element, meaning we can listen for a `mouseclick`, `keypress`, `hover`, and more all on the same element. Although to do so we need to call `.addEventListener` and pass in a callback for each one. 

Take 5 minutes and study this MDN page. Choose an event that is NOT a mouse event, and read about it and how it works.

[MDN Event Listeners](https://developer.mozilla.org/en-US/docs/Web/Events)


#### The callback and the `Event Object`
The callback (also known as an event handler) will take a single argument, this is known as the `Event Object`. This is a Javascript Object and contains all we need to know about the event and the element that it was triggered on. 
- eg: `element.addEventListener('click', (event) => {//Handle event});`
- One of the most important properties of the event object is `.target`, this property will give us all of the info about the DOM node the event was triggered on. It has many of the same properties as a regular DOM node, `.children`, `.parent`, `.style`, `innerText`, etc. We can use these properties to manipulate the element itself or it's relatives. 
- We can use this to manipulate the target in any way we want, for example to change the background color we would write the following: `element.addEventListener('click', (event) => { event.target.style.backgroundColor = 'blue'; });`
- Depending on the type of event listened for we can have access to other information about the even as well such as the key pressed (in the form of a code) and other things. Spend 5 minutes reading about the event object here: [MDN Event Object: Properties](https://developer.mozilla.org/en-US/docs/Web/API/Event#Properties)",,"Follow the instructions in the Javascript section of this codepen on your own. Use the `sampleButton` element at the top as a reference, and add the appropriate event listeners to the elements.  Please Fork and save your code, and share it with your PM.

[Codepen: DOM-II Events](https://codepen.io/lambdaschool/pen/gqmrwx?editors=0010)",,,,,,DOM Events - MDN,,DOM II,,Applied JavaScript,Full Stack Web Development Core,,1,1,,2
recognize event propagation and the method used to prevent it.,"Event propagation can cause many headaches when dealing with events. It is best to learn how to recognize this feature, and how to properly prevent it from happening, when need be. ",TODO: create tutorial showcasing event propagation. How it can effect parent elements. Explain event bubbling and capture. ,"Think of a pyramid. Pyramids are made up of many layers, the bottom layer is the largest and as it goes higher, ever decreasing sized layers are added to the one before it. If you are standing on the uppermost layer of a pyramid, you are also standing on every layer below it.  When we look at a DOM tree we can see those child elements are nested inside parent elements, like a pyramid. And, like a pyramid, if you stand(trigger an event) on a child element, you are also triggering that same event on every parent element all the way up to the body. This process is called event propagation. If you have an event of the same type on a parent element and a child element, and you trigger that event on the child element, it will also trigger on the parent. We have to be careful not to create unwanted interactions because of this. In the future, you may consider this is a feature, for now, this is something we would like to avoid.

In our event handler, we are passed the event object. The event object has lots of methods and properties on it including one called `.stopPropagation()` if we call this method in our event handler, it will effectively stop our event from bubbling any further up the chain. 
- eg: `const eventHandler = (event) => { event.stopPropagation() };`

#### .preventDefault
Some elements have a native default reaction to certain events. For example, form elements will refresh the page on submit.  .preventDefault is a method on the event object and it will stop an HTML element from reacting in its default way. This will be used less than .stopPropagation, but it is important to know about.",,Go back to the codpen you were working on. And complete steps 9 - 12.,,,,,,Event Propagation,,DOM II,,Applied JavaScript,Full Stack Web Development Core,,1,1,,2
build a React app in one week from the ground up based on project requirements,,"* Learn techniques on breaking projects down to simplify complex ideas
* Build a project using past code as a boiler plate",,,,,,,,,,,Project Planning,,,,,0,,,0
report on project requirements with their project manager through daily check ins,"Being able to manage your priorities is no small task.  Multiply your work by several other people and things could get out of control quickly.  Project management techniques and methodologies are meant to wrangle ideas and resources into a powerful plan of action.  As a professional software developer, you will be involved in many different kinds of project management systems.  We will take a look at a few of these systems to help you understand how many companies get work done.",Give examples from your work life where these project management systems worked for you.,"Project Management Methodologies

Waterfall
https://en.wikipedia.org/wiki/Waterfall_model

Agile:
https://en.wikipedia.org/wiki/Agile_software_development

Scrum:
https://www.collab.net/sites/default/files/uploads/CollabNet_scrumreferencecard.pdf

Kanban:
https://www.atlassian.com/agile/kanban

Scrum VS Kanban
https://www.projectmanager.com/blog/kanban-vs-scrum-better

Standup
https://martinfowler.com/articles/itsNotJustStandingUp.html",,,,,,,,,,Project Planning,,,,,1,,,1
follow specific time management techniques to accomplish tasks in a project,Being able to control your time is essential to becoming a professional developer.  The most productive developers take their time as seriously as their code.  There are several time management techniques you can adopt but a popular one among development teams is called The Pomodoro Technique. ,"Encourage the students to really give this is a try for the rest of the week.  

Ask the project managers to follow up with students in team meeting.  

Project managers should ask students to share experiences where the pomodoro helped or hurt.","The Pomodoro Technique’s main goal is to protect your time by focusing on manageable time increments, usually 25 minutes long, called pomodoros.  By watching your time, you will start to develop amazing habits and learn how long tasks take you.  This will make you even more valuable to any team you join.  Here are the steps used in The Pomodoro Technique:

1. Choose a task to complete
2. Set a timer for 25 minutes, this timeframe is known as 1 pomodoro
3. Work on that task without interruption for the duration of the timer
4. When you have completed the timer, put a checkmark on paper or digital device
5. Take a short break, usually 5 minutes is enough
6. Every 4 pomodoros, take a longer break, 20-30 minutes is ideal",,,,,,https://youtu.be/eIxsqvWWWvA,The Pomodoro Technique Website,,,Project Planning,,,,,1,,,1
describe the importance of frequent git commits and follow best practices,"The importance of frequent git commits cannot be overstated.  When you are writing code, you want to have small checkpoints you could revisit at any time.  Think of a rock climber traversing several rock faces without any backup.  You could attempt it, but it would be wise to create several holds to prevent you from falling.","Sometimes students get a little confused on commits and how they relate to pull requests.  Take time to explain that commits are very frequent and pull requests are less often.

* Anytime you get a thing working, that’s when you commit.
* When you’re about to leave your computer, make a commit showcasing progress
* Commit notes: try to bullet point out progress where you have been","Git commits should be frequent updates to your local repository.  Many new developers and even some seasoned ones can be annoyed by the chore of leaving their code for a quick git commit.  

It takes a some discipline but the results always pay off with the added safety of multiple commits.  You will save your project manager lots of time in case of an emergency roll back and you will save yourself a lot of stress if you accidentally mess your current build up.

When should you commit and how often?  Review this commit guide and you will find many places for creating commits:

**General Commit Guide
* Did you build any structure?
* Finish a component?
* Finish a route?
* Finish a view?
* Finish any concept?

**Git Commit Content
The content of your git commit message holds a lot of meaning.  A good practice for to follow is to think of a future developer that would need to read your notes.  Are you leaving enough information to that future developer to decipher what occurred in your commit?

Leaving a small trail of bullet points is a great idea to outline what you have inside of a commit.  Here is a simple example of a commit message you could leave to a future developer after finishing a header component:
* Built our header component structure
* Added routing to header
* Added ",,,,,,,,,,Project Planning,,,,,1,,,1
describe and be able to use PropTypes to 'type check' specific data being passed down to a child component,"PropTypes are a way for us as React Developers to catch a few more bugs before they become a problem. If our data is laid out in a specific way and passed around to components via other components, you can think of PropTypes as a way to ensure the `type` of data being passed around.",,"[Link to follow along CodeSandbox from the video](https://codesandbox.io/s/91xolwl38y){:target=""_blank""}
[Link to the PropTypes Docs](https://reactjs.org/docs/typechecking-with-proptypes.html){:target=""_blank""} 


One of the blessings/curses of JavaScript is that we have dynamic typing. This can be a glorious feature that is baked into the language. Some consider it to be the 'best' part of the language itself, and other consider it to be a huge issue with JavaScript at large. 

Today we build large scale web applications, and as the application we are building grows, so shall the amount of bugs that can potentially be introduced into our programs. Today, there are new JavaScript `super sets` or `type systems` like `Flow` and `TypeScript` that give us developers the ability to add TypeChecking into our programs. These systems are great, and are wildly gaining in popularity, but React has a way for us to check our data in a more lightweight fashion. And as opposed to being installed and utilized at the global level of our application, we can use PropTypes to check our data on a component by component bases. 

We used to have `PropTypes` included with the react library, but, as time went by, and the React ecosystem grew, they eventually removed it from React and left it as a standalone npm package. So to get up and running with PropTypes we'll need to install it first. 

```
yarn add prop-types
```

This package works by defining the PropTypes module within the scope of the component which want to test. 

```
import PropTypes from 'prop-types';
```
Once have declared and built some component that will be receiving props, we then simply create a property on the component called `propTypes` and set it equal to an object. This would normally be found at the bottom of the file where you're building your component, but before the `module.exports` or `export default` statement. 

```
CitiesList.propTypes = {

};
```

Now that we have the package available to us, lets use it with that previous example that we had built before. Remember our cities app that we put together? Lets validate that data that we're passing down to the `CitiesList` Component. Our data looks a lot like this, so lets check up on what types of information we have.

```
{ city: ""seattle"", state: ""WA"", population: 652405, land_area: 83.9 },
```

We have an object with four fields `city, state` which are String types and `population, land_area` which are Number types. As of now, we're just passing down an object so we can use our proptypes to check the type of data that is assigned to each field. 

```
CitiesList.propTypes = {
  cityObject: PropTypes.shape({
    city: PropTypes.string,
    state: PropTypes.string,
    population: PropTypes.number,
    land_area: PropTypes.number,
  )
};
```
","Lets build out a small application that passes some data around and then use `PropTypes` to type check that data that we're sending through components. We'll start with some data that we have on state. 

```js
class App extends React.Component {
  constructor() {
    super();
    this.state = {
       memoData: [
        {
          id: 1,
          title: ""Hawaiian Shirt Friday"",
          memo:
            ""Oh, and remember: Next Friday…is Hawaiian shirt day. So, you know, if you want to, go ahead and wear a Hawaiian shirt and jeans.""
        },
        {
          id: 2,
          title: ""Sunday Weekend Catch-up"",
          memo:
            ""Ahh, I'm also going to need you to go ahead and come in on Sunday, too. We've got some new people coming in and we... need to play catch-up. Thanks!""
        }
      ]
    };
  }
  render() {
    return (
      <div className=""App"">
        <h1>Mr. Lumbergh's Memos</h1>
      </div>
    );
  }
}
```

We're going to pass this data down through a child component that's simply going to take the list of elements and render a new component for each object in that list. Our `QuoteList` component will look like this.

```js
const QuoteList = props => {
  return <div>{props.memos.map(memo => <Quote quote={memo} />)}</div>;
};
```

Now that `QuoteList` is actually going to be mounting another Component `Quote` for each item in our array, lets make sure we build out the `Quote Component` before we get ourselves into trouble.

```js
const Quote = props => {
  return (
    <div>
      <h2>{props.quote.title}</h2>
      <h3>{props.quote.memo}</h3>
    </div>
  );
};
```

So we'll need to make sure we pass it the memos in the `App.js` component:

```js
...
  render() {
    return (
      <div className=""App"">
        <h1>Mr. Lumbergh's Memos</h1>
        <QuoteList memos={this.state.memoData} />
      </div>
    );
  }
...
```

Okay, lets stop and pause for a minute because we haven't even gotten into type checking our Props yet. So we'll need to make sure first that we have installed the dependency that we need to make that happen. Remember that [PropTypes](https://www.npmjs.com/package/prop-types){:target=""_blank""} is a `npm package` like any other. It was once a part of the React library, but has since been removed. So we can just use `yarn` to install it.  Be sure to install that package now.

Inside of our `QuoteList` lets pull in `prop-types` like so:

```js
import PropTypes from 'prop-types';
```

And use it to check that we're sending an array of Objects through the `QuoteList` component. We don't need to worry about the shape of each object quite yet, we'll do that at the `Quote Component` level.

```js
QuoteList.propTypes = {
  memos: PropTypes.arrayOf(PropTypes.object)
};
```

Notice the conventions here. The casing is really important when using this library. The library itself is called `prop-types`, we import the default `PropTypes` object and that's how we use the `API` we then use `propTypes` when defining our object on component itself. This will be confusing, but just following this syntax is what becomes important. 

If we send some bad data around then we'll see that our warnings start showing up in the console. Now lets make sure that the `Quote` component is set up to have `PropTypes` inspect it's data. Lets make sure that all fields are `Required` as we want to throw warnings to any developers using this component in the future.

```js
Quote.propTypes = {
  quote: PropTypes.shape({
    id: PropTypes.number.isRequired,
    title: PropTypes.string.isRequired,
    memo: PropTypes.string.isRequired
  })
};
```

And there we have it, we have protected the developer from their mistakes they would potentially make in the future! Now it's your turn!

Here's a breakdown of what we just effectively achieved.

[![Edit 913m46ynyo](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/913m46ynyo) ","Use Create React App to build out a starter react project and make sure that you include `prop-types` inside of your application.

That this list of JSON data, and build out a component that can hold this data on it's state:

```js
[
  {
    ""id"": 1,
    ""make"": ""Bugatti"",
    ""model"": ""Veyron"",
    ""color"": ""Khaki""
  },
  {
    ""id"": 2,
    ""make"": ""Dodge"",
    ""model"": ""Ram 1500"",
    ""color"": ""Indigo""
  },
  {
    ""id"": 3,
    ""make"": ""Chevrolet"",
    ""model"": ""Camaro"",
    ""color"": ""Puce""
  },
  {
    ""id"": 4,
    ""make"": ""Honda"",
    ""model"": ""Odyssey"",
    ""color"": ""Violet""
  },
  {
    ""id"": 5,
    ""make"": ""Infiniti"",
    ""model"": ""I"",
    ""color"": ""Mauv""
  }
]
```

Once you have that component built, pass this data around to an `list` component, and make sure that the array's shape is properly inspected by your `PropTypes`.

After you complete that, pass the data down to a `Presentational Component` and make sure that each `Object's shape` is properly inspected by `PropTypes`.
",ta855xN_xRQ,http://youtube.com/watch?v=ta855xN_xRQ,https://www.youtube.com/embed/ta855xN_xRQ,,,,,React Tooling,,Intermediate React,Full Stack Web Development Core,,1,1,1,3
describe ReactJS and the problems that it tries to solve,"As you gain experience in the world of Web application development, you'll find that there are many frameworks and libraries out there that are all trying to accomplish the same thing, the ability to build large scale applications effectively and rapidly. In today's world, software changes fast, and we as developers have developed packages, software, libraries and frameworks that, when utilized, allow us to write software and deploy our changes to our systems rapidly enough to keep up with demand. This is one of the reasons (among many others) why these libraries, frameworks and packages are built. One of the most popular libraries out there for building applications today is [ReactJS](https://reactjs.org/).

It is really important to understand that React is just a single paradigm or one of many ways to write large scale application software. It is our impression that there are many benefits to learning ReactJS, especially as new developers, because of the way it leans you toward learning more about JavaScript and it doesn't force you to rely on too much of it's API in order to get things done. This allows for one to gain much more in depth knowledge about the JavaScript programming language, because you get a chance to write a lot of vanilla from within the React ecosystem. ",,"React has quickly become one of the most commonly used libraries for building applications today, and as a result of its rapid adoption, the community is unlike any other. In fact, it is really difficult to not encounter React when learning JavaScript these days. Because you've now seen some code that allows you to build custom components with Vanilla JavaScript, you've come to an understanding of how you can use JS to manipulate DOM elements. React is going to take that knowledge you have learned, and abstract away a lot of the `document.getElementByClassname` syntax. As you'll see later on, there will only be one targeted DOM element for your entire application to live within. React will simply handle the rest for you. 

Because we have such rich user interfaces today, that interact with ever-changing data and multiple users interacting with DOM elements at the same time, with lots of animations and events firing, the DOM is certainly doing a lot of work. Imagine an app like twitter or Facebook that has users clicking all over the place, with data changing and almost instant status updates etc. for these types of large scale applications, react is very important. In fact, you can imagine what a company like Facebook would need to power such apps like Facebook/Instagram today. Simply put, we need a way to offload a lot of the `state` (data) that our apps need to use, from the DOM. To keep up with today's demands of the web, we need a way to build applications that can take care a lot of the work for us. And this is where React's Virtual DOM comes into play. 

Lets face it, working with the DOM API is actually really hard. With React and the `virtual DOM` we have been granted simple engine that is super easy to work with to build UI elements. You can think of this Virtual DOM as an agent between the browser, and the developer. 

This virtual DOM is how React does what it does. Essentially the virtual DOM is a programming paradigm in where we build out our perfect world DOM environment, thinking ""This DOM element should have access to this data, and should have these specific handlers attached to it, and should have this particular look and layout"". When we hand that information to the Virtual DOM using components in react, we then have an engine that checks what the DOM is actually representing, and when some data changes, React knows what the present DOM looks like, and what it then should look like due to change, and then make those changes in the least amount of steps possible. This takes a lot of pressure off of our browsers and it's why React is as powerful as it is.

To recap: React is a powerful unopinionated UI library who's main purpose is to be used to build powerful applications. React uses these encapsulated pieces of UI called Components that concern themselves with their own individual pieces of the DOM. React uses an engine called the Virtual DOM to update any changes that will be made over time to our applications. This paradigm is designed to be super efficient and takes a lot of work off of the dom. Today, web applications are huge, complex pieces of software that millions and millions of users interact with simultaneously. React solves the problem of providing a smooth experience for our users, as well as those developing applications. ","Please read through the 'Try React' tutorial found [here](https://reactjs.org/docs/try-react.html) and follow along with the documentation there. Take it a far as you'd like. But we'd love for you to come into class on Monday having played around with React and seen some react code. 

* Read through [this portion](https://reactjs.org/docs/thinking-in-react.html) of the React documentation. ","On your own, write a paragraph about what ReactJS is and what problems that it tries to solve. 

Submit that paragraph to your Project Manager via Slack. ",moTpUR8I6-I,http://youtube.com/watch?v=moTpUR8I6-I,https://www.youtube.com/embed/moTpUR8I6-I,,,What problems does React JS solve?,"* What is ReactJS and what problems does it attempt to solve?
* What package or library is necessary for mounting a React Element to the DOM? 
* What is the Virtual DOM and how does React use it to build out actual DOM elements?",Functional Components I,,React,Full Stack Web Development Core,,1,1,1,3
use an html file set up a react environment and mount an application to a target DOM element using React and ReactDOM.render,"At it's core react is pretty simple. The API is very straightforward and lightweight. Throughout this module you'll learn how to set up a react application in the simplest way possible. At the end of the day, you'll have seen how easy it is to mount a react application to the DOM using React and ReactDOM.",,"The `React API` is actually very simple and easy to use. We'll get into the more complex portions of the API later on as we talk about `class components`. For now all we need to focus on is the idea that React takes what we have written, and passes it to this function called `React.createElement()` which turns our code into DOM elements with all of their appropriate handlers, styles and attributes laid out. 

What we get with react is this idea of `composability` because all we have to do is think about React elements as smaller pieces of UI, and build out those small pieces of UI in these code blocks we call `components`. In the article [Thinking In React](https://reactjs.org/docs/thinking-in-react.html) we can gain an understanding of what the Facebook team had in mind when the built react, and how we should be thinking when using react to build out applications. 

The bare essentials for building a react application come down to 2 packages, `React and ReactDOM`. All we need to set up the most basic React environment is an `index.html` file and a couple of [Content Delivery Network](https://en.wikipedia.org/wiki/Content_delivery_network) (CDN) links to pull in React and ReactDOM. For that we will be using [UNPKG](https://unpkg.com/#/about) which is an open sourced package delivery network.

Now that we know about what dependancies we'll be needing to even get started with writing react, lets take a look at the React API and see what we can use to select existing DOM elements by some `id or class` and mount some HTML to the DOM. React comes with a method called `React.createElement()` that we can pass a few arguments to in order to render out some sort of DOM elements. Everything you do in react will done through this `createElement()` method however, as you'll see in the coming material, this has now been abstracted away from us and we now have the ability to use this new technology called `JSX` to write out our react elements. 

`React.createElement()` can be used to build out some UI so lets take a look at how this might be achieved. First we want to pass to it the `type of element` that we want to assign to the dom, like an `h1`. Next we pass an `enumerable amount of attributes` we would like assigned to our element that we mount, this can be done in the form of an object like so `{className: 'heading', id: 'heading-id', onClick: function() { console.log('Clicked')}}`. And lastly, we can pass some sort of `children` to our `createElement` method, in this case the string `Hello, world`. It is important to note, that we could pass multiple `React.createElement()` methods around as children to achieve nesting DOM elements.  

* _Notice that we added a key value pair `className: 'heading'`, because the `class` keyword is now a reserved keyword in JavaScript, we use the `className` attribute in React to set `classes` as attributes on our HTML elements. _

By following this fashion we are being declarative by essentially saying `""React, mount up an h1 element with this object full of attributes as properties/values and children as some text to be nested inside our HTML Element.""` This is, at a high level, how ReactJS works. Now lets build some stuff.","Lets create our first React application. Don't worry, it's simple and we're going to walk you through it. 

### Hello World with ReactJS

First we'll need to create an index.html file and save it somewhere so that we can open it up in a text editor of our choosing. 

* `mkdir react-hello`
* `cd react-hello`
* `touch index.html`

Inside our index.html file lets create a scaffolding for a normal HTML document.

```html
<!DOCTYPE html>
<html lang=""en"">

<head>
  <title>Hello World React</title>
</head>

<body>
  <div id=""target""></div>
</body>
<script>
  // we'll write our app in between this script tag.
</script>

</html>
```

Now that we have an HTML document for us to use to build a React application lets include the dependancies we need. Just before the opening `<script>` tag lets add in our packages that we need to create a react application. 

```
...
<script crossorigin src=""https://unpkg.com/react@16/umd/react.development.js""></script>
<script crossorigin src=""https://unpkg.com/react-dom@16/umd/react-dom.development.js""></script>
<script type='text/javascript'>
  // we'll write our app in between this script tag.
</script>
...
```

Now we're ready to build a react application and mount it to the DOM. We ought to at this point have React and ReactDOM packages available to us for use. So lets build something. First, we're going to create a DOM element using `React.createElement()`. In between our empty script tag lets make an `h1` element with a `class=""heading""` and some child text `Hello world`.

```js
const myElement = React.createElement('h1', {className:'heading'}, 'Hello World');
```
After we've done this, lets `console.log(myElement);` and open our HTML file in Chrome. You should see something that looks like this, and we're going to point out what's going on here.

![My Element](https://ibin.co/3uzG5yNFXlah.png)

First note that your element is just an object :). This object will be passed up through the `React Virtual DOM` and eventually added to the `target` div when it gets reconciled, however, for now, we just have the object. `props` is a very special property object on all react objects that we'll cover in depth later on. For now notice that there is a `children property` (if multiple children are found this will be an array NOT just the string we passed it 'Hello World', but potentially an array of strings etc.) and a `className property` set equal to `'heading'`  that we supplied as an object. 

Eventually React will use all of these properties to create out out `<h1>` tag an inject it into the DOM. So lets see how we can achieve this. We use the `ReactDOM` library for targeting where our application will live, and injecting our new created `myElement` element. So lets do that now using the `.render` method from `ReactDOM`.

```js
ReactDOM.render(myElement, document.getElementById('target'));
```

Notice we are passing our `myElement` as the first argument to render and  we're selecting our `<div id=""target""></div>`.  For every single react application you'll **ONLY DO THIS ONE TIME** for a single application. Everything else well be built out as a child of this and we'll learn about that later on. 

Now you should be able to refresh your screen and see your first `Hello World` example rendered out to the page. React is set up and ready for you to use. Here is what your `index.html` file should look like, and you can use this if you haven't been able to get everything up and running yet. 

```html
<!DOCTYPE html>
<html lang=""en"">

<head>
  <title>Hello World React</title>
</head>

<body>
  <div id=""target""></div>
  <script crossorigin src=""https://unpkg.com/react@16/umd/react.development.js""></script>
  <script crossorigin src=""https://unpkg.com/react-dom@16/umd/react-dom.development.js""></script>

  <script type='text/javascript'>
    const myElement = React.createElement('h1', {className: 'heading'}, 'Hello World');
    console.log(myElement);
    ReactDOM.render(myElement, document.getElementById('target'));
  </script>

</body>

</html>
```","Now that you've seen how we can build out a `Hello World` React application I want you to do this alone from scratch. You can reference your previous HTML document, but I don't want you copying and pasting the whole thing. Things you can copy and paste would be the `script tags` you need with the react library being pulled in via `unpkg`. 

Steps to complete this assignment

* create and index.html file
* scaffold out a regular html page and add a <div> with an id of ""target"" or ""app"" or something that makes sense to you in terms of distinguishing the div as the container for your application to live.
* pull in the React and ReactDOM packages via CDN/UNPKG
* create a script tag and add the attribute 'type = ""text/javascript""' so that you can write your react application inline
* inside your script tag, create your `myElement` variable and set it equal to the `React.createElement()` function.
* Decide what type of element you want rendered to the screen, and what attributes (should have at least 1 className) you want on your element and what children text you'd like your element to display. Pass multiple strings to as children and see what happens.
* finally, mount your element to your wrapper div using ReactDOM.render. 

** Stretch Problem ** If you're done early, create a `<style></style>` tag in your HTML document and select your className class and try changing the color of your element. 
",k5cwMsTgFV4,http://youtube.com/watch?v=k5cwMsTgFV4,https://www.youtube.com/embed/k5cwMsTgFV4,,,,* What are the 2 bare essential packages one would need to set up a React environment? How can we get these packages included into an HTML document?,Functional Components I,,React,Full Stack Web Development Core,,1,1,1,3
use JSX to mount a DOM element and display that element in a web browser,"`React.creatElement()` is a very poweful piece of the React API as it has the ability to build out complex user interfaces using ReactJS. However, there isn't much available to us in terms of scalability when using this method. We actually could build out an application using solely the `createElement` method, but eventually it'll get really complex, and hard to reason about, as our application scales. This is why React gave us an abstraction on top of this method, called `JSX`. Learning to use JSX may feel a bit cumbersome at first, and in fact, when it was first introduced, there was an audible `boo` from those attending the conference talk when it was introduced. But spending just a little bit of time with `JSX` you'll start to see why it is awesome, and why it is the preferred method for building React Applications. ",,"So far what we've been able to accomplish is mounting our first `Hello world` application to the DOM using react. We're going to keep working in our `index.html` file that we built. Now we're going learn about one of the greatest tools that React provides us with `JSX`. 

Writing our entire application using `React.createElement()` is totally possible, however, it's pretty cumbersome and it doesn't lend itself well to the `DRY` principle. So the react team created `JSX` as an abstraction for us to get this type of thing done. Keep in mind that [React takes your JSX and boils it down through `React.createElement()` calls](https://reactjs.org/docs/introducing-jsx.html#jsx-represents-objects) that is why it's important to understand a little bit about this particular method. 

So lets take a look at what this `JSX` syntax looks like. At first it'll seem really familiar to you so you should feel at home here. Lets refactor our `myElement` variable to use `JSX` instead of `React.createElement()`.

```js
const myElement = <h1 className=""heading"" >Hello World</h1>;
```

If you're like me, you're probably thinking to yourself right now _""What in the JavaScript and HTML?""_. Yeah it is exactly what it looks like. That line of code above is JavaScript or at least it will become JavaScript at some point. It is NOT HTML at this point. React's `Virtual DOM` will transform it later on. The hard thing here right now though is if you refresh you page you're going to get an error. 

![Syntax Error](https://ibin.co/3v6uzNpI5bdw.png) 

That is because this form of JavaScript `JSX` isn't interpreted by the browser alone, we need to transform it into some actual standard JavaScript. 

In a normal React application you'd use something like `Babel` [Link Here](https://babeljs.io/) to transpile your JSX into a regular version of JavaScript so that Chrome can read it. For this demo we'll be using `babel-standalone`. You'd also use something like `Webpack` to do this for you in an automated and bundle up all of your `JSX` files so that all you get at the end of the day is a single JavaScript file and an index.html file. To get `babel-standalone` included into our html file for now, we can simply use the `UNPKG` cdn to retrieve it. 

```js
<script crossorigin src=""https://unpkg.com/babel-standalone@6.26.0/babel.js""></script>
```

You can throw this into any application the same way you would do for React and ReactDOM. Now that you have the `babel-standalone` package available at your disposal, you'll need to format your `<script>` tag to read from `text/javascript` to `text/babel`. This will simply tell your HTML Document to take what's written in between that tag, and translate anything that doesn't look quite like the JavaScript standard into the standard format. ","Lets re-factor our previously built Hello World application to use JSX and babel. This shouldn't take us too long to put together. Your finished project could look like this. 

```html
<!DOCTYPE html>
<html lang=""en"">

<head>
  <title>Hello World React</title>
</head>

<body>
  <div id=""target""></div>
  <script crossorigin src=""https://unpkg.com/react@16/umd/react.development.js""></script>
  <script crossorigin src=""https://unpkg.com/react-dom@16/umd/react-dom.development.js""></script>
  <script crossorigin src=""https://unpkg.com/babel-standalone@6.26.0/babel.js""></script>

  <script type='text/babel'>
    const myElement = <div className=""heading""><h1>Hello World</h1></div>;
    ReactDOM.render(myElement, document.getElementById('target'));
  </script>

</body>

</html>
```

And there you have it. This will set you up for the proper React Syntax that is considered Best Practices today. If you were to encounter a React Application without `JSX` it would be most likely be very difficult to read and reason about.","From scratch, build out a React application within an HTML file that will mount an `header` with your name, age and location. Use a `<style>` tag to add some CSS and make your profile you just built look nice and pretty.",1dBEUmLWEHE,http://youtube.com/watch?v=1dBEUmLWEHE,https://www.youtube.com/embed/1dBEUmLWEHE,,,JSX Documentation,"* What is JSX? 
* What does JSX abstract away from us as React Developers?
* What packages would one need in order to use JSX in a React application?
* What is Babel? And what does it do for us?",Functional Components I,,React,Full Stack Web Development Core,,1,1,1,3
"explain how components work, and implement a functional component to render a piece of UI to the screen",Everything you'll do in React will revolve around components. They are the building blocks of any react application. There are actually a few different types of React components that are commonly seen today in use by React developers. Today you'll learn about a simple Functional Component and you'll learn how to build on your own to mount different types of DOM elements to the web page. ,,"Components are encapsulated pieces of UI that we can use to compose out web applications using React. 

 There are different types of components that we can use, and we're going to start with the simplest type, the `Functional Component`. Simply put, we can use basic functions as components. These functions will simply return out some sort of JSX.  Which will then be rendered out to the Browser. 

The key abstraction that React provides is that of a component. To reiterate, a component is some thing that is being rendered in the browser. It could be a button, a form with a bunch of fields in it, a navigation bar at the top of the page, a single input field, etc. Any of these could be its own component. React doesn't place any restrictions on how large or small a component can be. You _could_ have an entire static site encapsulated in a single React component, but that at that point you may as well not be using React. So the first thing to remember about a component is that a component must _render_ something. If nothing is being rendered from a component, then React will throw an error. 

Our most basic of components looks like this:
```js
const BasicComponent = () => <h1>Hello World</h1>;
```

This truly is it, what we have here is a component that simply returns a h1 tag with the words Hello World inside. 

Notice that this component looks exactly like an anonymous arrow function that we've named `BasicComponent`. In fact, that is literally what this is. Nothing
more, nothing less. The arrow function then is simply returning the div tag. When a component is written as a function like this one is, it is called a
_functional_ component. 

While a component can of course get a lot more complicated than this, fundamentally, all a component does is render some HTML. 

Lets actually extend out the functionality of this and create a few components that we can include into our application. Because components can be built as simple functions that return a chunk of UI, we can pass them into other components in a compositional way.

Lets take our wrapper element `App` that we want to pass to `ReactDOM.render` and build out a few simple reusable components. This is one way that we could use React to craft out UI. It's actually really fun.

```js
const App = () => (
  <div>
   // we'll fill this in with some components that we craft.
  </div>
);

ReactDOM.render(<App />, document.getElementById(""root""));
```

Ok, now that we have our wrapper, we're ready to build out some reusable `function components`. We'll build out a `basic button component` that returns a button to the screen
```js
const BasicButton = () => {
  return <button>Click me I'm a button!</button>;
};

const BasicInput = () => {
  return <input type=""text"" placeholder=""Change the world, one input at a time"" />;
};

const Header = () => {
  return <h1>Hello From React</h1>;
};
```
Beautiful. We're making elements out of JavaScript functions in a really clean way. of course, as your knowledge of Components and React grows, you'll start to see a lot more rich functionality here. For now, we're really just concerned with some basic, pieces of UI that will set us up for a future of learning react. Now these components are good and all but we now need to pass them into our wrapper `<App/>` component that is being fed through the `render` method.

```js
const App = () => (
  <div>
    <BasicButton />
    <BasicInput />
    <Header />
  </div>
);
```

Notice, that I have capitalized my components that I'm feeding through the `App` wrapper, there is good reason for that.","Now lets create a few components and see how we can use many of them together to compose out some fun elements. From our previous example, that we were playing around with in our `Hello World` react application, let's see what we can do to utilize this feature. First, I want to actually change how we're rendering out the JSX and wrap our application in a `<div>` element. To do this we can simply change a bit of code on the `myElement` code block. 

```js
const myElement = (
  <div>
    <h1>Hello World</h1>
    </div>
  );
```
Everything should work exactly as we had it earlier, only this time, if you look at your elements in your Chrome console, you'll see that the `<h1>` tag is now wrapped in a `<div>`.",Your task here is to start to build out a few pieces of composed components that you'll build from scratch. We'll have a few design files available for you to follow along with. ,_5rbeY5Ofco,http://youtube.com/watch?v=_5rbeY5Ofco,https://www.youtube.com/embed/_5rbeY5Ofco,,,"React Cheat Sheet,Another React Cheat Sheet",,Functional Components I,,React,Full Stack Web Development Core,,1,1,1,3
implement reusable and nested class components,"React's compositional paradigm is one that lends itself really well to the idea of `reusability`. Not every component you'll build in react will be a reusable one, however, the idea that you could build a single component, and share it all over your application is one that React does really well. Because components can be singular representations of UI, you can achieve reusability rather simply and eloquently. This will help your applications grow and scale in a wonderful way.

Now, because our User Interfaces aren't always just single one off pieces of DOM elements, and we need the ability to nest elements in order to lay things out on the screen like we would on any web page or web application, we're going to teach you how to build out `nested components`. Think of this idea in terms of DOM elements. A navigation bar may have a container, and multiple buttons/links, some logo. You'd need to pass these children elements into the navbar container you build right? It's the same with react, we'll build some complex piece of UI that we can nest together using the `compositional paradigm`. This is how we build large apps. ",Nested stateful components: https://codesandbox.io/s/qvkrx4zm56,"The codesandbox to follow along with the video can be found [here](https://codesandbox.io/s/qvkrx4zm56)

When it comes down to reusability everything will rely upon the `props` object that we can use within each one of our React Components. This is how we make our component dynamic and reusable, we define the data that we want to be used in our component at the time that we are going to be using that component. For example, if I wanted some dynamic text to be given to a button component and that button component was called `MyButton` I would pass that data down in the following manner. 

```js
<MyButton text=""Some dynamic text"" />
```

And then, if this were a `class component` I could use that data from `this.props` but we need to ensure that our constructor is aware of any props that we pass down to it.

```js
class MyButton extends React.Component {
  constructor(props) {
    super(props);
  }

  render() {
    return (
      <button>{this.props.text}</button>
    );
  }
}
```

So now that we have achieved some dynamic text within our button, lets look at what we can do in terms of nesting components together. Lets imagine for a second that we have a form that renders out multiple children elements. At the bare minimum we'd need an input field, a button and maybe some heading describing what the form did. Lets put it all together and think about each element on our form as a react component.

When creating reusable and nested Class components the biggest thing to remember is to feed our constructor w/ the props data that it needs and to pass the props data back up to `super`. You'll see in this example that we're doing just that. We also change the way we access the props by referencing the `this` keyword.

```js
import React, { Component } from 'react';
import { ReusableInput } from './ReusableInput';
import { ReusableButton } from './ReusableButton';

class FormComponent extends Component {
  constructor(props) {
    super(props);
  }

  handleInput = () => {
    alert('input event changed');
  };

  handleClickButton = () => {
    alert('Button was clicked!');
  };

  render() {
    return (
      <form>
        <h3>{this.props.formTitle}</h3>
        <ReusableInput
          type=""text""
          placeholder=""I am an input field""
          onChange={this.handleInput}
        />
        <ReusableButton
          type=""button""
          text=""Click Here!""
          onClick={this.handleClickButton}
        />
      </form>
    );
  }
}

export default FormComponent;
```

Notice that we're actually using some dynamic props that are being passed in from another components. So we're using our `constructor` to pass the props being received back up the prototype chain, so we can access those props on `this.props.foo`. In this particular example we're saying that the `<h3>{this.props.formTitle}</h3>` is going to be dynamic. `formTitle` is a prop that is being set above where we're actually using the app. 

FormComponent is in turn, taking in 2 other reusable components as it's own children `ReusableButton` and `ReusableInput`. We're defining some functions in the `FormComponent` and in turn, passing them down as props to the `ReusableComponents` that we have built. Lets take a look at _HOW_ we're using those props inside of our `ReusableComponents`

```js
import React from 'react';

export const ReusableButton = props => (
  <button type={props.type} onClick={props.onClick}>
    {props.text}
  </button>
);

export const ReusableInput = props => (
  <input
    type={props.type}
    placeholder={props.placeholder}
    onChange={props.onChange}
  />
);
```
Everything we want to use as dynamic data, is being set on `props`!!! We have achieved `Nested/Reusability` in this fashion and this is how we're going to be composing react applications from here on out. 

For more on this you can play around with [THIS CODESANDBOX](https://codesandbox.io/s/32n9klrr86)
Try clicking around and changing some things as necessary.","Now lets put together some nested Class components. Remember that the main concept that changes for us syntactically is that we need to supply our constructor with the necessary props data.

Lets build out a `class component` that holds onto some state data and passes that data down to a `child class component`.

```js
class Peter extends React.Component {
  constructor() {
    super();
    this.state = {
      parentName: 'Peter Griffin',
      childAttributes: {
        name: 'Stewie',
        hairColor: 'N/A',
        catchPhrase: 'Victory is mine!'
      }
    };
  }

  render() {
    return (
      <div className=""App"">
        <h1>My name is: {this.state.parentName}</h1>
        <Stewie child={this.state.childAttributes} />
      </div>
    );
  }
}
```

Stewie will be a class component that will receive the props object containing `childAttributes`. When we build this component we'll be sure to set the props we pass down to it on state. This will be an important concept when it comes to separating out our original given data.

```js
class Stewie extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      child: props.child // props back to state.
    };
  }

  render() {
    return (
      <div>
        <h4>{this.state.child.name}</h4>
        <p>Hair Color: {this.state.child.hairColor}</p>
        <blockquote>{this.state.child.catchPhrase}</blockquote>
      </div>
    );
  }
}
```

Ok, now that we have Stewie controlling his own state, we have achieved a few important items. Lets say that stewie was to grow up and as a result has grown a head of brown hair. Right now, his hair is non existant. Well we could have a function that sets Stewies hair.

Lets add a function handler and the ability to click to execute it to our Stewie Class:

```js
handleTurnHairToBrown = () => {
  const childAttrs = this.state.child;
  childAttrs.hairColor = 'Brown';
  this.setState({ child: childAttrs });
};

...
<button onClick={this.handleTurnHairToBrown}>Change Hair</button>
...
```

Now, we originally had some props being fed into this Stewie Class and immediately used the constructor to control our new state. This is how we could utilize nested class components and extend out their potential to us. Each time we use a class component we have the opportunity to let it control it's own state.

You can see a working example of this here:
https://codesandbox.io/embed/30oq87w30m ","[Use this codesandbox link](https://codesandbox.io/embed/pwkl9zr140)

Take all of these components and convert them all over to class components. Don't forget to pass your props through the constructor and access them through the `this` keyword. Extend the functionality of a few of the components to be able to control their own state that will be derived from the props object they receive.",zlBDC1-hf-s,http://youtube.com/watch?v=zlBDC1-hf-s,https://www.youtube.com/embed/zlBDC1-hf-s,,Composition vs. Inheritance,,,Class Components II,,React,Full Stack Web Development Core,,1,1,1,3
"create, read and update a component's state object","State is a fancy term for `data that we have available in our application`.  You can think of state as the data your components need, and the ability your components have to update/access data that would need to be displayed by the component itself. There are many layers to this, but the most commonly seen representation (and WHY react was built in the first place) is the component level layer. When we think in terms of Component state, we gain the ability to really think about our components as we are building them. And this state object that we use in our components will help shape what our component ought to look like. 

Learning to use the `state object` and `setState` function will help you gain an understanding as to why we have React and what it's really good at doing. State drives our applications. You're going to love it when you see how state is organized on a component. We won't bog you down by trying to learn a state management machine like Redux or MobX quite yet, there will be more on those `flux-paradigms` later. For now, at the end of this objective, you'll have the ability to use `component state` to `create, update and read` data for use within your component.",,"Link to the code sandbox from the pre-class video: [link](https://codesandbox.io/s/7w3jknrnr1)

Now we see that our Components need to have some sort of dynamic data. It would not be efficient of us to pass down all the data we need for a component by simply putting it on a component as a prop. We _will be doing this_ but not in a way that makes it cumbersome. Also, if we simply passed down some items to a component via props on an array for example, we wouldn't really have a way for us to manipulate and update that information as needed. We aren't building static websites anymore. Our data must be dynamic, so we need the ability **CREATE** **READ** **UPDATE** and **DELETE** data that we want our component work with. And this is where your JavaScript-Fu will become strong. 

React gives us a tool to work with the `state` object that we put on our constructor function. This tool is called `setState` and it lives on the `Component` base-class as a method that we can tap into in order to make changes to state. **Note** calling `setState` will for React to trigger an _invocation_ (call) to `render`. This is how react is `_react_ive`. Any time we change our state, our component gets re-rendered and our changes are immediately reflected on the screen. Lets look at some code that makes this work for us.

Lets consider the following component:

```js
import React from ""react"";
import { render } from ""react-dom"";

class App extends React.Component {
  constructor() {
    super();
    this.state = {
      title: ""Welcome aboard the State Train!""
    };
  }

  render() {
    return (
      <div>
        <h2>{this.state.title}</h2>
      </div>
    );
  }
}

render(<App />, document.getElementById(""root""));
```
Our state is very simple `{ title: 'some string' }` but we're binding our `h2 element` to that state object's title property, so anything found there will end displayed to the DOM. This so, lets make a function that will eventually update the `title` prop on state, when the state changes, we'll get the chance to watch the DOM change, as `render` will be invoked in the process.

```js
handleInputChange = (event) => {
  this.setState({ title: event.target.value });
}
```

This little input handler will be added to an input field and fired when someone types into it. This is not much different than when you were doing this in `event` handling just a few short days ago. There will be some caveats that we'll address here shortly. But the important part to notice here is _how_ we're using `setState`. We're passing it an object, with the property of `title` and the input's `event.target.value`. In this fashion, whatever we type in that field, will be set on the state's `title` prop. This is how you use `setState`. You select the property you want updated on the state object, and add the new data to that state object. We'll go over how to make this reusable and dynamic soon, but for now, lets link this up to an input field inside of our component.

```js
<input
  type=""text""
  placeholder=""change the title""
  onChange={this.handleInputChange}
/>
```

By adding this input field into our `render` function we'll create an input that is linked up to our `handleInputChange` function that we created earlier. Now, as we type into that input field we should see some updates like this:

<img src=""https://imagebin.ca/40JprNkLYJHK/ScreenShot2018-05-01at2.49.54PM.png"" style=""width:800px;""/>

Notice that as we type, the information changes on state and the information changes on the screen in the `<h2>` element's text which is bound to that `title` prop. This is great! this is how React is **REACT**ive. We bind our data to our `JSX` and it when setState is called, it simply re-renders the data elements that are updated. 

This input field is pretty trivial, and demonstrates the use of `setState` pretty well, however, we're trying to achieve the idea of `reusability`. So lets take a look at what happens to our input handler if we bind it to our input in a `controlled` fashion. Most of what you're about to witness is pretty new and partly abstracted. So let's at a `name` and `value` `attribute` to our input field so that we can `control` the input update flow. We'll set the value to the title prop on state so it'll look like this `value={this.state.title}` and the name will simply be set to string 'title'  like this `name=""title""`.  Our input field should look like this:

```js
<input
  type=""text""
  placeholder=""change the title""
  onChange={this.handleInputChange}
  value={this.state.title}
  name=""title""
/>
```

Lets talk about what we just achieved. Well simply put, by binding the `input's` value to the state we wanted updated, are controlling what is being set as the value of that input field. So when our `setState` function is fired, the data is saved in a local place. We have control over it input field in a formal fashion. And by adding name, we now have another property on our `target` object for a reference, so we actually have a really cool trick now that will allow us to reference that `name` property and use it to actually update the title prop. But first lets peek under the hood and see what's going on. 

```js
 handleInputChange = event => {
  console.log('event name', event.target.name);
  console.log('event value', event.target.value);
  this.setState({ title: event.target.value });
};
```

Looking at the console as we type we'll see that these values are being logged out. We should see something like `a` if the 'a' key was the letter typed, and `title` from the `event.target.name` logged out. 

<img src=""https://imagebin.ca/40JvOp181Pz0/ScreenShot2018-05-01at3.13.03PM.png"" style=""width:850px;"" />

Ok, so we see that we have instant access to that `target.name` prop and whatever the value that is typed in the input field is, will also be stored on state, and then bound to that input field. So... here's the trick, when we call `this.setState({})` lets use that name field. ES6 gives us a really cool solution to this out of the box!

```js
this.setState({ [event.target.name]: event.target.value });
```

Whatever is found as the value of our `event.target.name` prop, will be interpreted between the `[]` on that object. And thus, we update the title prop on state as opposed to having to hard code this. In this way we could bind this input field to as many inputs as we want! This trick is called `controlled inputs`. More on that can be found in the `extended resource material` here in training kit.
[Here is a codesandbox link](https://codesandbox.io/s/5xk6z6k4mx) that demonstrates what we just did! Enjoy!","Lets build out an application that has some data that we can read from, edit and create. The idea here is to get at least one example of each of these functions put together as a team so that when you're ready you can dive right in knowing full well how to change and manipulate state. 

","Build out a React Component that can hold onto a title prop:
- Create a constructor function that holds state and create a state property called `title`
- Read a component state property called `title`.
- Type in an input field that updates that `title` prop.
",yUZLRXosMcM,http://youtube.com/watch?v=yUZLRXosMcM,https://www.youtube.com/embed/yUZLRXosMcM,,State and lifecycle,Controlled Inputs,,Class Components II,,React,Full Stack Web Development Core,,1,1,1,3
compare and contrast the differences between functional and class components,There are a few different ways to write components in react. So far you've seen how we would write functional components and class components. These two are the most common. You'll learn later on about `Higher Order Components` and potentially we'll take a peek into a pattern called `render props`. Learning how to use both functional and class based components will certainly set you up for react production application building in the future. ,,,,,,,,,,,,,,,,,0,,,0
"explain class components, and use a class component to render some state data to the DOM",React comes with it a constructor class called `Component` that has some very special properties on it. This is a class like any other class that you've already become familiar with. React gives us a bunch of functionality through this single `base Component`. Using this is how we can scale out our static component based web pages to become fully functioning web-applications. To understand how to build out is fundamental and crucial for success when working with JS. ,"CodeSandbox Link from the Pre-class video


Take the time to introduce the students to codesandbox.io at this point in the curriculum. They need to understand that while it's great to get up and running with an `index.html` document/codepen, the react ecosystem DOES require some overhead when building apps at scale. All lessons from here on out should be done with either Codesandbox or later on, through create react app. 

The follow along exercise for this lesson can be found [here](https://codesandbox.io/s/3xwzql38nm)

``` 
googling this is hilarious: converting functional components to class
```","One of the principle paradigms that react gives us is this idea of Components (independent pieces of UI). And thus far you have learned how to build out `functional components` for use in composing multiple DOM elements. Now we're going to be learning about the `React.Component` _base_ class that allows us to use some of the methods that the React team has curated to tap into what we call the `Component Lifecycle`. These methods (known as life cycle hooks _more on these to come_) give us control into how our components work, and if we'd like to use them, we have to build out a class component that `extends` the `React.Component` parent class. Any time you see a line of code that looks like the following, you're using the React.Component parent class and you have the ability to tap into these methods.

```js
class FooComponent extends React.Component {}
```

One integral part of creating components as classes is that you have the ability to set up a data object that your component might need to be concerned with. This is done by way using `state` as we call it and setting that object up on our constructor method. Once we have some data that we can render out to the DOM we need a vehicle that will allow us to render that data. This is achieved by `returning some sort of JSX from within the life-cycle hook called _render_`. We'll walk you through the steps below.

* First: declare your `class component` by extending the `React.Component` parent class. `class FooComponent extends React.Component {}`.
* Second: Use the `constructor` function to set up some state. _because we're calling extends, we also need to call `super();` otherwise we wont have access the `this`_
* Third: we need to render some sort of UI to the DOM. We do this by calling the life-cycle method called `render`. 

_Note_. I like to remember these steps by referencing one of my favorite bands `Creedence Clearwater Revival` *CCR* _ class constructor and render/return_

Step 1. Declare your *class*, and extend the `React.Component` Base class.

```js
class FooComponent extends React.Component {
```

Step 2. Now we'll set up our *constructor* and add state.

```js
constructor() {
  super();
  this.state = {};
}
```

Step 3. *Render* some UI and don't forget to *return* some `JSX`

```js
render() {
  return <div>Hello, I am Foo Component</div>;
}
```

Our final component should look like this.

```js
class FooComponent extends React.Component {
  constructor() { 
    super();
    this.state = {};
  }
  render() {
    return <div>Hello, I am Foo Component</div>;
  }
} 
```

Now that we have constructed a skeleton for our Class component we are able to actually allow it to be a bit more dynamic. The way we'll achieve this will be to use some data that we'll pre-define as some information we'd like our component to display. We'll then take that data and do this really cool thing called `interpolation` in order to present it to the DOM within some Text. 

Components built out extending the Base `React.Component` class come with them a bunch of benefits given to us directly from the React API.  A list of the benefits to what we get out of the Component class can be found [Here](https://reactjs.org/docs/react-component.html#getsnapshotbeforeupdate) in the react Documentation about class components. We will be discussing the `life-cycle` methods at another place in time so don't worry too much about those for now.

For now lets focus on a component caring about it's own state (data) and managing that state in a reactive way. The `state` object that we set up on our `constructor` is a very `React-specific` way of doing things. It allow us to _drive_ our UI using data. Again, think about Facebook here. You see a LOT of data, and interact with it all of the time when you're using the facebook App. And because of the way we work with social media today, we expect this data the UI to represent that data in almost real time. This is what React is really good and, and this reactivity is achieved in this manner. 
","Lets work together to build out a class component that prints a message to the screen using a few DOM elements. We will hold a message on state, and print that message to the screen by selecting it an assigning it to a DOM element. Then we will take it a step further and pass that message down to another component using props. 

Go ahead and navigate over to [this Codesandbox](https://codesandbox.io/s/3xwzql38nm) where we will write our React Code. CodeSandbox is an online editor that can be used to write React Code right away! I can't emphasize how cool this really is. For now you'll just have to trust me.

You'll notice that we're getting an error on this page. As we begin to define our `App class` things will start to come to life on the screen for us. For now lets start by simply adding our class the way that we know how to do from above. Don't forget CCR.

When you're done, your browser window should re-render and not throw any more errors. Your App class should look like this: 

```js
class App extends React.Component {
  constructor() {
    super();
    this.state = {};
  }
  render() {
    return <div>Hello From App!</div>;
  }
}
```

Now lets add a property to our state data. Define a `message` property on the state object. 

```js
this.state = { 
  message: ""Hello from App State!!""
};
```

Now we have that message on our Component's state we can use it through interpolation. In our render method lets change the the message that we are currently printing out inside of that `div` to reference the state object. Remember the `this` keyword when pointing to an object on the Class constructor.

```js
render() {
  return <div>{this.state.message}</div>;
}
```

Hooray! You've now built your first class component and you're ready to rock n' roll.","Lets take the functionality of this class component that we built earlier and extend it just a little bit. Declare a `Functional Component` called `RenderMessage` inside [this CodeSandbox](https://codesandbox.io/s/103jkor46q). 

* Make sure you declare your Props Object that will be passed into this component.
* Return a `div` who's child is `props.message`
* Now inside of the `App` class pass in that `RenderMessage` component and pass down a message prop to `RenderMessage`. This message prop should be set equals to the message property on the state object.
* Once it's all wired up properly you've done it!",lksl2l5sVek,http://youtube.com/watch?v=lksl2l5sVek,https://www.youtube.com/embed/lksl2l5sVek,,React.Component,Functional Components vs. Class Components,,Class Components I,Active,React,Full Stack Web Development Core,,1,1,1,3
share data between components using state and props,"We know about state already, and we know how to nest components. Now we're going to learn about how to share state with nested components using the react paradigm called props. Understanding how we link up data in a `uni-directional` (top to bottom) fashion will help you understand how react works generally. ",,"Here is a link to the follow along exercise from the video: [link](https://codesandbox.io/s/yk37ykmyrz) 

We are nothing in React if we can't pass state around from one component to another. The way that we achieve this is this idea of `state to props`. Whatever is set on the state of our `Components` can be shared between components by passing it down as props. Up until this point we haven't had a significant need for this approach, but as your applications grow, you most certainly will. Now that we understand reactivity we need to understand this `parent child` relationship in react in order to work with state more effectively and fluidly.

Because state is as persistent as long as the component is on the screen, we can use it to hold on to memory for our application. That memory could be any data that we pull in from a server elsewhere, some edits from a submission form or simply just based on Users interacting with your web page.

Remember that state is just an object that we have access to which lives on the `class component's` constructor. We can take this state and pass it around as props. This will be one of biggest aha moments for many of us when it comes to understanding 'why react is so powerful'. What's great about this state object, is that when it changes our component will re-render. We can also pass whatever data is found on this state object around as props to other components.

Remember that props are read only and components can use props to display information to the screen. One other principle that is built into React, is that when a component's props are bound to the state of a parent component the child component will re render as well. This is again how we have _reactive_ data in react.

Ok, now that we know more about _state_ lets actually see how this works. We'll have a component set up to pass some Props around to a `functional component`

```js
class App extends React.Component {
  constructor() {
    super();
    this.state = {
      welcomeMessage: 'world!'
    };
  }

  render() {
    return (
      <div>
        <h1>Hello, {this.state.welcomeMessage}!</h1>
      </div>
    );
  }
}
```

Now lets take this a step further and instead of rendering an `<h1>` lets actually put this message in another component, we'll be sure to pass

```js
const WelcomeBanner = props => <h1>Hello, {props.message}!</h1>;
```

Now to pass this around properly we need to re-factor our render function inside the `<App />` component.

```js
...

render() {
  return (
    <div>
      <WelcomeBanner message={this.state.welcomeMessage} />
    </div>
  );
}

...
```

There we have it, now we are sharing data between a Component's State and a components Props. This means that when the state object changes, so too will the props. We're going to combine that functionality in our follow along section.","Lets build out a few components and put some concepts together there.

- We're going to be updating some state on a parent component.
- That state will be wired up to a few other components as we pass the props around.
- We will also be passing around a few handler functions that help us update/delete our state.

Lets set up a form component that we can use to updae our message component from above.

```js
const WelcomeBanner = props => <h1>Hello, {props.message}!</h1>;

class App extends React.Component {
  constructor() {
    super();
    this.state = {
      welcomeMessage: 'world!'
    };
  }

  render() {
    return (
      <div>
        <WelcomeBanner message={this.state.welcomeMessage} />
      </div>
    );
  }
}
```

Now lets build a form component that can handle some data defined on state, below on the child components.

```js
const FormComponent = props => {
  return (
    <form>
      <input placeholder=""change state"" onChange={props.updateStateMessage} />
    </form>
  );
};
```

We're going to need to build out a change handler function on our `App` component that we can pass down to the form. We'll have to define the prop as `updateStateMessage` in order to make our `onChange` event handler work out properly. 

```js
...

messageChangeHandler = event => {
  this.setState({welcomeMessage: event.target.value});
};

render() {
  return (
    <div>
      <WelcomeBanner message={this.state.welcomeMessage} updateStateMessage={this.updateStateMessage}/>
    </div>
  );
}
...
```","Using the following tools:
- Class component
- functional FormComponent, MessageComponent
- click, and change handlers
- `setState`

Build out a form that will allow a user to handle data. You'll need a button, input field and some data bound to a DOM element that displays what the user is submitting.

When a user clicks submit, show the data that's on state in an `alert` statement.

**Stretch** Loop over a list of items showing those items to the screen. (Can be a list of strings). When a user clicks submit, instead of logging the item, push an item into that list and watch the magic happen.",qRPM_CWPRfM,http://youtube.com/watch?v=qRPM_CWPRfM,https://www.youtube.com/embed/qRPM_CWPRfM,,,,,Class Components I,,React,Full Stack Web Development Core,,1,1,1,3
respond to events triggered by user interaction and handle user input via forms in React,In Web development everything you do is based around the Document Object Model (DOM). The DOM has built into it an event loop that listens for changes across some part of the UI. To access that event loop in the Virtual DOM the react team put together what is called the Synthetic Event so that we can pretty much have access to all the events we would need to provide users with an interactive web application. Learn to harness the power of events in React and you'll be set to build out React Web Applications.,,"Here is the link to the codesandbox follow along exercise from the video: [Link](https://codesandbox.io/s/k0q2wwyj2o) 

Events in any programing language will all be unique to the language itself. JavaScript being run in web browsers has a very eloquent way of handling events that can be triggered by users interacting with our web pages. For us, in the browser, this is one of things we're most concerned with. How do we take in user input via forms, respond to clicks, mouse events and scrolling? Because we're building out Web Applications, we will be learning how to respond to events within the React Ecosystem. Here is an statement straight from the [React Docs](https://reactjs.org/docs/handling-events.html) 

> Handling events with React elements is very similar to handling events on DOM elements. There are some syntactic differences:

- React events are named using camelCase, rather than lowercase.
- With JSX you pass a function as the event handler, rather than a string.

Now lets dive in and see what it is like to handle events in ReactJS.

It is important to understand that React has it's own ""Synthetic Event"" built into the API. This is what will mimic event handling as you're already used to when it comes to the DOM. When we bind up click/change/mouseOver etc handlers to DOM elements we usually do so on the element itself, or we select the DOM element using vanillaJS to target by ID and append some function handler to that element.

```js
<button onclick=""getElementById('demo').innerHTML=Date()"">What is the time?</button>
```

We see stuff like the above code example all of the time. Now the purpose of today's exercises is to get us used to handling these types of events in the ReactJS ecosystem using Components/JSX and plain ol' JavaScript function handlers. This is where React starts to get really fun, when we actually start interacting with it. React provides what we call the [Synthetic Event](https://reactjs.org/docs/events.html) which is similar to the Event object in the DOM. This is how we interact with the DOM within the `React Virtual DOM` ecosystem.

Lets build a little button that we can click on too see what's going on under the hood.

```js
class Button extends React.Component {
  render() {
    return <button onClick={// we'll fill this in}>Click Me</button>;
  }
}
```

So we have a simple button component that will return some Button JSX to the screen and mount up a button. Notice the `onClick prop` we passed our button. It's `camelCase` which is different already from the standard `onclick` function that we normally would store as an attribute on a standard `button` element. This will be one of the major differences between react `Event Handling` and native `DOM event handling`. So now that we have our button, we'll build a function handler that will allow us to interact with it. Lets assume that this function handler was found on a `class component` so we'll just add it as method on that class.

```js
clickHandler = event => {
    console.log(event); // this is the react Synthetic Event
};
```

I know the above code looks a lot like a typo, but inside of a class this is valid JS. We'll chat more about this at length later, but now we need to bind this function up to our JSX element and use it to log out the `React Synthetic Event`.

```js
class Button extends React.Component {
  clickHandler = event => {
    console.log(event); // this is the react Synthetic Event
  };

  render() {
    return <button onClick={this.clickHandler}>Click Me</button>;
  }
}

```

Now we should see this on the screen, and when we click on it we can see what the console is logging out for us.

<image src=""https://tk-assets.lambdaschool.com/439c001d-9009-4454-8afc-4d18d19363ed_ScreenShot2018-07-23at3.21.03PM.png"" alt=""synthetic event handler console.log""  style=""width:500px;""/>

You should also see a bunch of warnings in the console from the ReactAPI warning engine at this point as well. That's ok, it's just telling us there are things to be aware of when working with the event. For now, we can ignore the warnings are recognize that this `SyntheticEvent` Object looks a little bit different than the original object we would see from the DOM. The key principles to take away here, is how we're wiring up a component to talk to a button on the dispatching of an event. This is how we're going to be doing this in the future.","Now, lets build out a little Application that can handle some data that we pass through a few JSX elements.

We're going to build out some event handler functions for the following events across multiple elements: 

```markdown
- onClick 
- onDoubleClick 
- onMouseEnter 
- onChange
```

Build out a `singleClickHandler` function that will call `alert(""Single Click!"");`

```js
singleClickHandler = () => alert(""Single Click!"");
```

And add it to the first Button in our App. 

```js
<button onClick={this.singleClickHandler}>Click Handler Demo</button>
```

Lets do the same with a `doubleClickHandler` function, a `mouseEnterHandler` function and an `changeHandler` function.

```js
doubleClickHandler = () => alert(""Double Clicked!"");

mouseEnterHandler = () => alert(""Mouse Entered"");

changeHandler = () => alert(""Item was changed"");
```

```html
<div className=""App"">
    <h1>Hello Handlers</h1>
    <h2>Lets build out some handler functions.</h2>
    <button onClick={this.singleClickHandler}>Click Handler Demo</button>
    <button onDoubleClick={this.doubleClickHandler}>
      Double Click Handler
    </button>
    <div onMouseEnter={this.mouseEnterHandler}>Mouse Enter</div>
    <input onChange={this.changeHandler} placeholder=""Change my input"" />
</div>
```

Play around with the events on the screen and see how things are interacting one with another. 

Lets take a closer look at the input `changeHandler` for a min. Lets pass in the synthetic event through the function body. One thing that is cool about an input field is that we can pull in the resources it uses off of the `event.target.value` property that is found on the Synthetic Event object that will be passed in.

```js
changeHandler = event => alert(event.target.value);
```

So now as we type, we can see what's in the input field. Lets take this a step further and set up a state object. Then use a new function `setState` to reset the state on that object. Add this `constructor to our class Component`.


```js
  constructor() {
    super();
    this.state = {
      someValue: '',
    }
  }
```

Now change our change handler to look like this.

```js
changeHandler = event => {
  this.setState({someValue: event.target.value});
};
```

Great, setState will update our `someValue` property on our state object by simply typing in the input field. Lets prove this by logging our our state object inside the render function

```js
render() {
  console.log(this.state);
...
```

Check your console!

https://codesandbox.io/s/rmnj2r1o0p Here is a working copy of what we achieved!","Using this Code sandbox that we've been working in together, build out an app that holds a string item on the state object. 
- Build out a function handler that can take in the edits from an `onChange event` and then use the `setState` function to set those items on state. 
- You should have seen me do this already, so you may have to refer back to previous walk-throughs.",8SELYmSaRvA,http://youtube.com/watch?v=8SELYmSaRvA,https://www.youtube.com/embed/8SELYmSaRvA,,React Synthetic Event,,,Class Components I,,React,Full Stack Web Development Core,,1,1,1,3
style,,,,,,,,,,,,,,,,,,0,,,0
use JavaScript expressions inside of JSX,,,,,,,,,,,,,,,,,,0,,,0
,"Forms are an integral part in working with Front end applications. For you to be able to interact with data that a user inputs into form fields, and send that data across the web is a task that is completely necessary and fundamental when working on a web application. ",,,,,,,,,"How to handle forms with just react,Forms from React Docs",More on forms,,,,,,,0,,,0
explain why state driven views and components are useful patterns for scalability and reuse and how React enables those patterns,"This particular objective is more theoretical in nature. The ideas presented here are ones that will shape your way of thinking, but there isn't a lot of practical application in terms of hard skills found in throughout learning this lesson. 

Everything we build in react will be driven by the data that we have to display to our users. And in order to allow users to interact with that data, we need to be able to start thinking in terms how ""how does this data drive our view"". 

 I want you to reflect back on the beginning of when we started learning about React, when we talked about ""What React is, and what problems does it try and solve?"" What was your answer to that question? Now that you've played around with React for a few days, would you change anything about your answer? For this objective we're going to learn about why state driven views and components are important.",,"Wether it be a static website or a large scale web application, react is a great library of choice for doing one thing really well, displaying data as UI. User interfaces that are driven by state are incredibly powerful because they encapsulate everything your user is going to need to be able to interact with your product. 

Think about your favorite/most commonly used piece of software. Imagine how it is constructed under the hood. Each element that you interact with, scroll or touch event that is triggered by your interaction has some sort of data attached to it. Now that you've done this a little bit, it probably feels pretty good to sort of peek behind the curtain?

Also think about that software you enjoy using in terms of having a life-cycle like that of a React Component. What does it mean that software can have a lifecycle, that your app can be born, grow and develop and eventually will die off? To me this means that we have a very unique way of looking at the development world because of the patterns that React lends itself to. 

I love the following analogy: `State is the heart of every React Application`. Think about what the heart does for us as living beings. It provides all of the life that our organs need by passing blood through it to different parts of our bodies. React State is no different. The `state` object will drive the decisions we make as we start to layout our application","We will now have a chance to dive into [this article](https://dev.to/nimmo/state-driven-development-for-user-interfaces-part-1-an-introduction-27f1) together to learn more about how this will all affect our day in and out of learning to use React as a Web UI library.

Essentially the problem that this author presented is that there are assumptions that we typically make about our data coming into our applications. In this case, his company had a problem during the re-write of an application and that problem was that their code wasn't pliable. The data that the application represents was more of an afterthought, as opposed to a starting point.

> Basically, we believe that an application's state (or rather the possible states it can have) should be the starting point in our development process, but we feel that state is often mistakenly considered to be a mere side effect of any actions within our applications.

React's built in state management lends itself to this idea that our views are state/data driven really well. Because we have our encapsulated pieces of DOM/JS Logic and styles all in one single component, we also get the opportunity to hold onto the data that a particular component may need to read from, write to, or simply delete. This gives us developers some very powerful and seamless control over our data and our views. 

As front end developers, you ought to be asking yourself the follow when it comes to choosing technologies to incorporate within your project:
- Does the package have a way to hold onto state/data?
- How large is the community of support around the package?
This is important because one needs to be able to find debugging techniques, commonly solved issues on Stack Overflow and the like, and a rich support for 3rd party API's plugins to interface with your code. 
- Does the library lend itself to modern good practices and techniques like functional programming/immutability 

If you start researching these questions/ideas you'll start to understand WHY libraries like react are such a good advent. These are the types of questions that will separate you from those that simply just learn how to work with the technologies. Stay curious my friends!",Consider the items that we just learned from that article above. I want you go now go back through that article and put together a paragraph on what you've learned about using Data/State to drive the views that you build. Submit that paragraph to your PM via slack.,s9gsbj6qcPk,http://youtube.com/watch?v=s9gsbj6qcPk,https://www.youtube.com/embed/s9gsbj6qcPk,,"Design Patterns in react,State Driven Development",,,React Composition Patterns,,Intermediate React,Full Stack Web Development Core,,1,1,1,3
use in-memory sessions to persist authentication information across requests,"Sessions are commonly used to allow a server to store information about a client. That information can then be used for a variety of purposes. 

We'll use it to persist authentication information so there is no need to re-enter credentials on every new request the client makes to the server.",,"Sessions provide a way to persist data across requests. We'll use it to persist authentication information so there is no need to re-enter credentials on every new request the client makes to the server.

When using sessions **each client will have a unique session** stored on the server.

Now that we have a solution for keeping authentication information we need a way to transmit that information between the client and server. For that we'll use **cookies**.

## Authentication Workflow for sessions

The basic workflow when using a combination of _cookies_ and _sessions_ for authentication is:

- client sends credentials.
- server verify credentials.
- server creates a session for the client.
- server produces and sends back cookie.
- client stores the cookie.
- client sends cookie on every request.
- server verifies that cookie is valid.
- server provides access to resource.

To understand how cookies are transmitted and stored in the browser we need to look at the basic structure of and HTTP message. Every HTTP message, be it a request or a response, has two main parts: the _headers_ and the _body_.

The _headers_ are a key/value store that includes information about the request. There are several standard headers, but we can add our own if needed.

To send _cookies_ the server will add the `Set-Cookie` header to the response like so: `""Set-Cookie"": ""session=12345""`. Notice how the value of a header is just a string. The browser will read the header and save a cookie called `session` with the value `12345` in this example. We will use a library that takes care of creating and sending the cookie.

The _body_ contains the data portion of the message.

The browser will add the `""Cookie"": ""session=12345""` header on every subsequent request and the server.

Cookies are not accessible from JavaScript or anywhere, they are cryptographically signed. Very secure.

There are sever libraries for handling sessions in Node.js, below are two examples:

- [client-sessions](https://www.npmjs.com/package/client-sessions)
- [express-session](https://www.npmjs.com/package/express-session)

We will use the latter.

### Common ways to store session data on the server:

- memory
- memory cache (like Redis and Memcached)
- database

## Cookies

- automatically included on every request
- unique to each domain + device pair
- cannot be sent to a different domain
- sent in the cookey header
- has a body that can have extra identifying information
- max size around 4KB

### Storing session data in memory

- data stored in memory is wiped when the server restarts.
- causes memory leaks as more and more memory is used as the application continues to store data in session for different clients.
- good for development due to its simplicity.

### Using cookes to transfer session data.

- a cookie is a small key/value pair data structure that is passed back and forth between client and server and stored in the browser.
- the server use it to store information about a particular client/user.
- workflow for using cookies as session storage:
  - the server issues a cookie with an expiration time and sends it with the response.
  - browsers automatically store the cookie and send it on every request to the same domain.
  - the server can read the information contained in the cookie (like the username).
  - the server can make changes to the cookie before sending it back on the response.
  - rinse and repeat.

**express-session uses cookies for session management**.

Drawbacks when using cookies

- small size, around 4KB.
- sent in every request, increasing the size of the request if too much information is stored in them.
- if an attacker gets a hold of the private key used to encrypt the cookie they could read the cookie data.

### Storing session data in Memory Cache (preferred way of storing sessions in production applications)

- stored as key-value pair data in a separate server.
- the server still uses a cookie, but it only contains the session id.
- the memory cache server uses that session id to find the session data.

Advantages

- quick lookups.
- decoupled from the api server.
- a single memory cach server can serve may applications.
- automatically remove old session data.

Downsides

- another server to set up and manage.
- extra complexity for small applications.
- hard to reset the cache without losing all session data.

### Storing session data in a database

- similar to storing data in a memory store.
- the session cookie still holds the session id.
- the server uses the session id to find the session data in the database.
- retrieving data from a database is slower than reading from a memory cache.
- causes chatter between the server an the database.
- **need to manage/remove old sessions manually** or the database will be filled with unused session data. Most libraries now manage this for you.

Here is a list of [express-session compatible stores.](https://github.com/expressjs/session#compatible-session-stores)","Let's add session support to our Web API:

```js
const session = require('express-session');

// configure express-session middleware
server.use(
  session({
    name: 'notsession', // default is connect.sid
    secret: 'nobody tosses a dwarf!',
    cookie: {
      maxAge: 1 * 24 * 60 * 60 * 1000,
      secure: true, // only set cookies over https. Server will not send back a cookie over http.
    }, // 1 day in milliseconds
    httpOnly: true, // don't let JS code access cookies. Browser extensions run JS code on your browser!
    resave: false,
    saveUninitialized: false,
  })
);
```

The `resave` option forces the session to be saved back to the session store, even if the session was never modified during the request.

The `saveUninitialized` flag, forces a session that is ""uninitialized"" to be saved to the store. A session is uninitialized when it is new but not modified. Choosing `false` is useful for implementing login sessions, reducing server storage usage, or **complying with laws that require permission before setting a cookie**.

Now we can store session data in one route handler and read it in another.

```js
app.get('/', (req, res) => {
  req.session.name = 'Frodo';
  res.send('got it');
});

app.get('/greet', (req, res) => {
  const name = req.session.name;
  res.send(`hello ${req.session.name}`);
});
```

The server sends back a session id with every response, the client then sends back that session id on every request.

[`express-session`](https://www.npmjs.com/package/express-session) uses in-memory storage by default.

Note how we generalize the session cookie's name, to make it harder for attackers to know which library we're using to manage our sessions. This is akin to using helmet to hide the `X-Powered-By=Express` header.",Implement session storage in your Web API using the [client-sessions](https://www.npmjs.com/package/client-sessions) library instead of `express-session`.,ke85xaOTTqg,http://youtube.com/watch?v=ke85xaOTTqg,https://www.youtube.com/embed/ke85xaOTTqg,,"express-session package documentation,How do express sessions work?",,,Using Sessions and Cookies,,Authentication,Full Stack Web Development Core,,1,1,1,3
build out a CRUD API in one week from the ground up based on project requirements,,,,,,,,,,,,,,,,,,0,,,0
explain what CORS stands for and what abilities it enables in our server-side applications,"Cross Origin Resource Sharing (CORS) is the technology that enables clients to be given persmissions to talk to servers. Thus far, we haven't had the need to implement CORS in most of our applications/projects that we've been working with. There have been a few instances where we've had clients talking to servers across the web (HTTP), but normally we've been using an application like Postman to request our resources from a server. Or we've been using what is called same-resource request which is always allowed. 


",,"The reason that CORS exists is simply because we need to have the ability to restrict access to which URLs (clients, addresses etc.) ACTUALLY can talk to our server-side applications that we are building. Think of it this way, if you had the ability to simply send a request to a resource willy-nilly, you could imagine what types of security risks your API may run into.

What this all really means is that if domain's are not the same ",,,,,,,"CORS documentation from Mozilla,A great point on CORS",,"* What does CORS stand for and what does it allow us to achieve?
* When do we need CORS?",,,,,,1,,,1
be able to explain and implement a React Higher Order Component to conditionally render protected content to the screen,Higher order components (HOC) are commonly used as advanced react patterns for designing some components that share some kind of behavior or data in a way that makes them connected differently than just the traditional `state -> props` pattern. Learning a little bit about these patterns will help you gain an understanding of some ways we can share functionality between components. This also helps us as react developers to recognize patterns when we see them. In our use case for the example that we'll be working with in the Client Auth project we'll see a good case for rendering a component conditionally based on whether or not we are authenticated.,I'll be pulling from the basic example in [this video](https://youtu.be/Yfr-gUAfyw8) for the guided demo of this portion. ,"A Higher Order Component (HOC) is an advanced React JS pattern that allows us the capability of reusing component logic. To be more exact and put rather simply, an HOC is a function that receives a Component as an argument and returns a new component [Source](https://reactjs.org/docs/higher-order-components.html). 

This paradigm allows us developers the ability to encapsulate some shared functionality between components and avoid repeating ourselves. HOC's take in a component as an argument and then add some functionality to that supplied component and return it. But it can be pretty difficult to understand from code examples that exist out there which is why we're going to have this broken down step by step. 

Not only can we use HOC's for the sharing of information and functionality, we can use them to act as a container for other components, and perform some ""higher level logic"" checks to conditionally render a component best on some sort of variable. 

Consider the functionality of a login component. Login could be some sort of form that accepts user input like a `username` and `password` and performs a check against a database to see if that user lives in the system. If the user is in the system, and the user's password entered is correct, then the App would show the content that the user has access to. 

This example could be performed in a Higher Order Component, Where the HOC is the component that renders either,  a `Login` component, or the entire `App` component. This will actually be a part of the assignment you'll be working with this afternoon. But for now, lets dive into an example of how HOC's work and why they're a fun way of composing our application together.","[Link to follow along with the instruction video](https://codesandbox.io/s/jpnn8j7z2y)

In the following code example, we'll build out a HOC that renders a basic counter button to the screen for us. 

```js
const HelloWorld = () => <h1>Higher Order Components</h1>;
const Button = () => <button className=""btn btn-primary"">Press button</button>;

const App = () => {
  return [<HelloWorld key=""1"" />, <Button key=""2"" />];
};
```

So what we have here are a few components in this very basic React Application. App's job is to act as a container returning out the `<HelloWorld />` and `<Button />` components. HelloWorld is going to be updated along with Button to share some functionality that we can use to extend out with a HOC. 

First, however, we need to craft out our HOC in order to supply some sort of shared state to the simple components that we just built. Lets look at how we will craft this beauty.

```js
const higherOrderComponent = (WrappedComponent) => class extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      counter: 0,
      text: ""Hello World!""
    }
  }

  render() {
    return (
      <div className=""container"">
        <WrappedComponent />
      </div>
    )
  }
}
```

Notice a few key things here. We're simply declaring HOC as a function and passing in what we call `WrappedComponent` as a parameter to this function. THEN what we render out will be the <WrappedComponent /> that we pass in. This will allow us to use this HOC in multiple contexts with different components. Also note that we're returning an anonymous `class` which extends `React.Component`. This is the magic sauce right here. This HOC returns a class. The rest `constructor(props), super(props); and the values on this.state` you already know about. Nothing should be new to you there. 

So now that we have that HOC set up, we can refactor our `<App />` component to extend our `Button` and `HelloWorld` Components. But first we'll need to pass our simple components into our HOC in order for them to be rendered by the HOC.

```js
const HOCButton = higherOrderComponent(Button);
const HOCHelloWorld = higherOrderComponent(HelloWorld);

const App = () => {
  return (
    [<HOCHelloWorld />, <HOCButton/>     
  )
}
```

Ok. So now that we have this all set up, we can start building out some functionality that both of our wrapped components will share. We're going to build an `addUp` function that we can pass to both of our components and watch the magic of all of this come together. 

Go ahead and add this to your HOC

```js
addUpCounter = () => {
  this.setState((prevState, props) => {
    return { 
        counter: prevState.counter + 1 
    };
  });
}
```
And don't forget to bind this function to our constructor

```js
constructor(props) {
  super(props);
    this.state = {
      counter: 0,
      text: ""Hello World!""
    }
}
```

Now, all we have to do is take this function we just made and pass it down as props to our `<WrappedComponent/>'s` that we have built. That way we can wire up our Button and HelloWorld components to use it. 

```js
<WrappedComponent {...this.state} addUpCounter={this.addUpCounter}/>
```

Notice that I'm de-structuring state here. This is so that I don't have to pass everything individually to my Wrapped Components to be able to have access to tall the props that I'll need. Now all we need to do is simply refactor our `<HelloWorld /> and <Button />` components to utilize this function and increment the counter. And then we can play with our app and watch the magic happen in the `console`.

```js
const HelloWorld = (props) => {
  console.log('Hello World Props: ', props);
  return (
    <h1 onMouseEnter={props.addUpCounter}>{props.text}: {props.counter}</h1>
  )
};

const Button = (props) => {
  console.log('Button Props: ', props);
  return (
    <button onClick={props.addUpCounter} className=""btn btn primary"">Current Count: {props.counter}</button>
    )
};
```","This challenge is designed to stretch your knowledge of what you just put together in terms of building out Higher Order Components. 

Using the example we just put together, build a HOC that can be reused as an input. 

You should be able to reuse the logic of your input component across multiple use cases. Each case should contain and encapsulate it's own state.

When working on your afternoon assignment today, you'll want to make sure that you're taking what you know about HOC's and apply that knowledge to a Login Component that you're going to use to simulate a little authentication system for your Instagram Clone. 

Think about what will be useful for you for this component to work. Before you dive into the afternoon project, make sure that you have given this some significant thought.",OXdrsFnVSiw,http://youtube.com/watch?v=OXdrsFnVSiw,https://www.youtube.com/embed/OXdrsFnVSiw,,"Higher Order Component Docs,Higher Order Component Explained",,,React Composition Patterns,,Intermediate React,Full Stack Web Development Core,,1,1,1,3
Understand and apply the BEM naming convention to their components. ,"Before we begin building javascript components, let's talk about using CSS naming conventions to make our style code more readable and reusable. ",,"As your application grows larger, code can get out of control very fast. Generally we like to set up a system to deal with things like file structure and naming from the get go. One area of code that can get especially unwieldy is CSS. LESS and other preprocessors do a fantastic job of reigning that code in, but we can also look to CSS naming conventions to adopt for our project. There are a few different options out there (most of them very similar), we will be looking at the most popular, BEM

#### BEM 
BEM is an acronym, it stands for Block Element Modifier. The BEM naming convention is very straightforward and, if applied to all of your CSS from the get go, makes it very easy to locate and change any CSS you may need. It also make it incredibly convenient to style individual components without worrying about affecting other elements in your project (a major concern on very large codebases). 

#### Block
The heart of BEM is the `Block`. We can think of this as our components name. For example, if we were creating a header for our page the name of the block could be `'Header'` as such:
'''html
<div class=""Header"">
  <-- Header Stuff -->
</div>
'''

Pretty straightforward.

#### Element
The second part of our BEM component is the `Element`. The element is ANY element inside of our `Block`. Note this also means any nested element inside another element, there is no such thing as nested elements in the BEM naming structure, every element is just an element. Elements are written with the name of the block, two underscores, and the name of the element, as such: `'Block__element'`
Building on our last example would look like this:
'''html
<div class=""Header"">
  <div class=""Header__title-box"">
    <h1 class=""Header__title"">Our Page</h1>
  </div>
  <div class=""Header__menu-button"">
    <button class=""Header__button"">Menu</button>
  </div>
</div>
'''
In this example you can see that we've added a 'title-box' element, as well as 'title', 'menu-button', and 'button' elements. Notice how even the nested elements are still just a single element on the class.

#### Modifier
We now have access to our `Block` and the `Element`. We can style them respectively. Occasionally we want to modify the styling of these components and elements. Maybe we want a border around some, and no border around others. That is where the `Modifier` comes in. The modifier is denoted by two hyphens followed by the Modifier name. This can be added to either the Block directly or the element, as such: `'Block__element--modifier'`
Take our last example: 
'''html
<div class=""Header"">
  <div class=""Header__title-box"">
    <h1 class=""Header__title"">Our Page</h1>
  </div>
  <div class=""Header__menu-button"">
    <button class=""Header__button Header__button--bordered"">Menu</button>
    <button class=""Header__button"">Log Out</button>
  </div>
</div>
'''",,,,,,,,,,,,,,,1,,,1
create custom data attributes with HTML and utilize them in CSS and JavaScript,Data attributes give developers another way to hook into the DOM without having to use classes and IDs as a unique way to make selections.,,"#### data-attributes
We know many attributes on elements already (src, href, etc.), well, the HTML5 standard allows us to add our own attributes, preceded by `data-`. This allows us to pass info from our HTML element to Javascript (or CSS). Here are a couple examples:

```html
  <div data-school=""Lambda"" class=""school"">Lambda School</div>
```
We can use the data attribute as a CSS selector using brackets.
```css
  div[data-school='Lambda']{
    /* CSS Style rules here */
  }
```

To access the data attribute in javascript we use the `.dataset` property. This property will return an object, we can access the data we want using standard object dot notation. 
```javascript
  const school = document.querySelector('.school');
  const schoolName = school.dataset.school;
  console.log(schoolName); //Lambda
```
We can also use the data attribute in a CSS style selector used in `querySelector`
```javascript
  const schoolElement = document.querySelector(""div[data-school='Lambda']"");
```",,,,,,,Data Attributes in HTML,,,Components II,,Applied JavaScript,Full Stack Web Development Core,,1,,,1
describe the Finite State Machine pattern and it's relationship to building Redux applications,"Have you ever wondered why most buggy behaviors in software can be _corrected_ by restarting the software?

Bugs are often caused by the software getting into an inconsistent **state** and **restarting it resets the state**. 

That implies that most software at it's core happens to be a _Finite State Machine_. Throughout this objective we're going to learn all about what Finite State Machines are, how they work and how we as developers can utilize them to create more consistent/fluid software.",,"A _state machine_ is a mathematical model of computation.

A machine can have a finite number of states, but it is only in one state at a given time.

There are different types of state machines, but for building UIs (and understaning Redux) we'll concentrate on the type that has an initial state and the next state is calculated based on input and the current state.

For our purposes, a State Machine has:

* initial state (store).
* current state (store).
* inputs or actions (action creators) that trigger transitions (reducers) to the next state.

It helps to think in terms of _states_ instead of _transitions_.

Redux is **NOT** a finite state machine, but the thinking in states helps our understanding of how Redux works.

A simple example would be an application that has two main parts, a control dashboard and a display. The application can be expressed in states and actions like so:

| current state   | action (input) | new state       |
| :-------------- | :------------: | :-------------- |
| locked closed   |     unlock     | unlocked closed |
| unlocked closed |      lock      | locked closed   |
| unlocked closed |      open      | unlocked open   |
| unlocked open   |     close      | locked closed   |
| unlocked open   |      lock      | locked open     |
| locked open     |     unlock     | unlocked open   |",What we are going to do now is exercise our brain power and [read an article about State Machines](http://krasimirtsonev.com/blog/article/managing-state-in-javascript-with-state-machines-stent) and how they may have some pertinence to UI and React State in particular.,"Consider the following Diagram:

<div class=""mermaid"">

graph LR
    A(isLoggedOut) -- HTTP Request Login --> B(pendingLoginState)
    B -- Success/Failure --> C(isLoggedIn)
    C -- HTTP Request Logout --> B
    B -- Success/Failure --> A

</div>


On your own: Write a paragraph that tells us what you know about the finite state machine pattern. It doesn't have to be long, just a few sentences on the subject. Submit that paragraph to your PM.",g57ZVWD4HFo,http://youtube.com/watch?v=g57ZVWD4HFo,https://www.youtube.com/embed/g57ZVWD4HFo,,"From Redux to State Machine,Introduction to Finite State Machines",,,Async Redux - Redux Thunk,,Redux,Full Stack Web Development Core,,1,1,1,3
explain what Redux is and the problem it solves,"Managing application state and keeping it in sync across all layers of our application is very important.

Many bugs are caused by applications going into an inconsistent state.",,"Redux is a predictable state management library for JavaScript applications and is the most popular State container that is used for React applications. By now we have discovered that building out applications using React is a process that requires a lot of forethought if one were to do it in such a way that allows their application to scale. Particularly we have been able to notice some complications around the area of state-mangement. We may have been caught asking ourselves a question like _""Which of my components should have state vs. which of my components should just be way to present some DOM elements?""_

Luckily you're not alone in this dilemma. In fact, the Facebook team that built React in the first place noticed that managing state could be come a nightmare at scale were they to only use Component state. So they built a pattern, and said, ""everyone here at Facebook is going to write code after this pattern"" so as to eliminate many of the problems that unwieldy state-full components could surface. That pattern was called `Flux` [link to docs](https://facebook.github.io/flux/docs/overview.html) and it's primary use case was to add some stringency to the React ecosystem because by itself, React is very unopinionated in how one should be designing their application, managing state etc.

Flux was great but developers had a hard time buying in completely to its implementation because the delivery of the pattern presented a few other problems. Because of this, (and around the same time that React was becoming so popular) [Dan Abramov](https://github.com/gaearon) had been working on a way to debug an application through a 'Time-traveling' approach and had created Redux. Essentially Dan wanted to be able to go back in time to see when/where state had changed in his application and in order to do that he ended up creating one of the most popular state-management libraries known to React Developers today.

Redux is a small, light-weight state container for use when building JavaScript applications. Remember, Redux has nothing to do with React other than the fact that many developers use them together. The core concepts/principles of Redux are 3 fold:

#### The Store

>Everything that changes within your application will be represented
by a single JavaScript Object known as the store. The store
contains our state for our application


#### Application state is Immutable

>When changes are made to our application state we never write to
our store object. We simply clone the state object, modify the
clone, and replace the original state with the new copy. We never
mutate the original object.


#### Pure functions change our state

>Given the same input, a pure function will return the same output every time. All functions (reducers) in Redux must be pure functions. Meaning they take in some state, and a description of what changes took place and return a copy of our state.

Redux is pretty simple at its core, the complications with Redux arise when we try and implement it within a React application because there is some new syntax, and it's often found that there are a few hiccups along the way when it comes down to learning. ",Watch the first 4 videos in [this series](https://egghead.io/lessons/react-redux-the-single-immutable-state-tree) and try to wrap your head around how this would be useful in a React application. Think of your projects that you've built in React up until this point. What types of problems would Redux have solved in those projects if any?,Write your thoughts on why Redux exists and at least one reason to use it as well as one reason to not use it.,b0x1cwFX5rM,http://youtube.com/watch?v=b0x1cwFX5rM,https://www.youtube.com/embed/b0x1cwFX5rM,,Presentational and Container Components,"A Cartoon Intro to Redux,Introduction to Redux",,Redux Fundamentals I,,Redux,Full Stack Web Development Core,,1,1,1,3
create a Redux Store and connect it to a React application,"When using Redux, the state for the whole application is contained inside the _Store_. This objective will guide you through the process of what it takes to wire up a React application to use Redux. ",,"In this section we'll learn how to create the _Redux Store_ and how to use a library called `react-redux` to connect our React application to the _Store_. Because Redux is a standalone library, 
(meaning it can be used on its own or with another library/framework for state-management and data flow) we have to use a second helper package that will enable us to string together Redux within a React application. That package is called [React-Redux](https://github.com/reduxjs/react-redux). Some more documentation and information can be found [here](http://redux.js.org/basics/usage-with-react). Just to re-emphasize the point that both packages `React` and `Redux` are completely separate, please pay attention to this first statement from the Redux documentation.

> From the very beginning, we need to stress that Redux has no relation to React. You can write Redux apps with React, Angular, Ember, jQuery, or vanilla JavaScript.","The first step we're going to take to enable Redux within a React application is to install it. This process assumes you've used Create React App to boilerplate out a React application.

```js
yarn add react-redux redux
```

Now that we have `redux` and `react-redux` installed lets learn how to set it up within our Application. We will need the `createStore` function from `redux`, so lets import that now.

```js
import { createStore } from 'redux';
```
This is the function that will take in a single reducer that will represent the state (data) of our application globally. We need create a `store` variable, and use `createStore` to create the Redux store.

```js
const store = createStore(reducer);
```

You'll notice that we passed a reducer into `creatStore`, but we don't have a reducer yet. We'll learn a lot more about reducers soon. For now, let's create a function called `reducer` that simply returns an object that will represent our state.

```js
function reducer() {
  return {
    title: 'Hello world! I\'m in the Redux store!',
  }
}

const store = createStore(reducer);
```

Now that we have a store, we want to make our application aware of it. The way this works is that react-redux gives us a `<Provider></Provider>` component that we will wrap our entire application within. We then pass our newly created store to that component as a prop. 

Within our Root Component (usually `Index.js`) go ahead and import `Provider` from `react-redux`.

```js
import { Provider } from 'react-redux';
```

Then all we need to do is wrap our `<App/>` with the `<Provider>` component and pass it a `store` prop set equal to the store we created. This will look like this:

```js
<Provider store={store}>
  <App/>
</Provider>
```","Lets go ahead and take a peek at our application using the React Dev Tools now that we've wrapped it up in a Provider Component.

Now, take the time to think about where and when you've done this before? Is there a package that we've used this same way? If so which package is it? It is important to note that a large amount of packages that we use in React will be implemented this way.

Write down a few thoughts on what you see, where you've seen similar patterns, etc, and send that to your PM.",gyJ31YLkYnU,http://youtube.com/watch?v=gyJ31YLkYnU,https://www.youtube.com/embed/gyJ31YLkYnU,,,,"What is the Redux Store.

What are the components of the Redux Store.

Which library can we use to make the _Store_ available for use from our React application.",Redux Fundamentals I,,Redux,Full Stack Web Development Core,,1,1,1,3
write Actions and Action Creators to describe state changes,"The Redux store is read only. The only way to modify application state when using Redux is by dispatching actions. 

We can use action creators and the `react-redux` library in order to dispatch those actions.",,"When we dive into the world of redux we'll hear a whole new set of terms. The first we'll talk about here is `actions`. 

#### Actions
Actions in Redux are packets of information that contain an action type and some data that we want associated with that action type.

In code, an action is simply an object with up to two properties - a `type` property and an optional `payload` property. Each action MUST have a `type` property. The `type` property is a string that explains what interaction just happened. By convention, we use all caps and underscores for types - ie `'LOGIN_USER` or `TOGGLE_TODO`. The `payload` property is data that goes along with that interaction.

Actions are ""dispatched"" to our reducer - aka, passed in to the reducer function as an argument. When our reducer recieves and action, it will know how to update the state according to the type and payload on the action.

Lets say we have a toggle handler function that simply switches a boolean field called `show` which is set on our state in our Redux store. An action for such an event would look a lot like this:

```js
{ type: ""TOGGLE_SHOW"", show: !state.show };
```

What's cool about all this is is that it allows us to keep things as simple as possible when responding to events and interactions!

It will good for us to keep in mind a seemingly simple, but very important pattern with Redux - reducers are the only place we can update our state. Actions tell our reducers ""how"" to update the state, and perhaps with what data it should be updated, but only a reducer can actually update the state. _More to come on reducers later...._.

From what we've learned so far, we can start to see the flow of data in a React/Redux application:

```
Store sets the state ->
Event or user interaction happens ->
An action desctibing the event and possible changes is dispatched to reducer ->
The reducer handles the action and replaces the store accordingly.
```

#### Action creators
Actions should not be confused with `action creators` (though admittedly it's very easy to confuse them 🥴). An action creator is a function that _creates_ an action. Or in other words, an action creator is a function that returns an object that just happens to be an action.

Action creators are kind of a middle step between events/interactions and the dispatch process. They make it possible to write reusable functions that can create actions on the fly, rather than us hard coding actions into our components. With action creators in mind, here is an updated look at our data flow:

```
Store sets the state ->
Event or user interaction happens ->
An action creator is called and dispatches an action ->
Actions tell us about the changes from the event ->
Reducers handle those actions and replace the store accordingly.
```

This flow is one of the reasons that Redux is so powerful. The two major principles that are being carried out here are that of `Functional Programming` and `Immutability`. Actions being dispatched are the trigger for calling reducers, and reducers are pure functions that never produce any side-effects. Everything you do in Redux is functional.

#### Action types
The final term we want to cover here is `action types`. We've talked about, and even demonstrated the `type` property of an action. We want to change that up right now, ever-so-slightly... Instead of passing a string to `action.type` we will create an variable with the name of the string, and assign it the string we would have passed to an action. Then we give `action.type` the variable as it's value. 

We do this because when we deal with strings like we are with `types`, and those strings are used in multiple places, like you'll see in reducers very soon, mispellings will occur, and are very hard to debug. If we mispell our action type in our reducer, our state won't be updated correctly, and we'll be left wondering what went wrong. 

Instead, we'll create an action type, and import it whereever we need it. That way, with linters intellisense in our code editor, we will spot errors a lot quicker. This is what it looks like:

```js
export const TOGGLE_SHOW = 'TOGGLE_SHOW';

// then in our action:
{ type: TOGGLE_SHOW, payload: !state.show }
```

Now let's try all of this in code!","Phew... that was a lot 😅! But with some repetition, it becomes a lot easier than it seems at first glance. 

Let's build our first action creator. We'll assume that we have a Redux store connected to our app, and a component connected to the store. On the state object, we have a `title` property that has been brought into the component via the `mapStateToProps` function. Our component has an input field, and a ""Update title"" button. When we type into the input, and click the button, we want to update our state object with our new title. (You can start with [this codesandbox](https://codesandbox.io/s/rj862kxkkp))

First we will create a new folder in the `src` folder called `actions`. Inside that folder create an `actions.js` file. Inside that file, create a variable called `UPDATE_TITLE` with the value `'UPDATE_TITLE'`. This is an action type. Next, let's create a function called `updateTitle` that takes in a new title. This will be our action creator, and it will simply return an action with the type `UPDATE_TITLE` and a payload of the new title we passed into it. Don't forget to export both the action type and the action creator function. (Note that these will be `named exports`, so they will  be imported with curly brace sytnax - `import { namedExport } from './place';`)

```js
export const UPDATE_TITLE = 'UPDATE_TITLE';

export function updateTitle(newTitle) {
  return {
    type: UPDATE_TITLE,
    payload: newTitle
  }
}
```

See how easy that was? It sounded pretty scary up above, but in practice, this is all very concise and intuitive. Now we have an action creator that will dispatch our action to the reducer and send the reducer the new title. Let's import our action creator into our component, and talk about how to use it there.

When we want to use action creators in our connected components, we first import the action creator. Then we pass the action creator into the `connect` function. Action creators are passed to the object that is the second argument in the first `connect` invocation.

```js
export default connect(mapStateToProps, { actionCreator: actionCreator })(Component);
```

Then, just like our state pieces that we brought into our component via the `mapStateToProps` function, we will have access to our action creator in props. This step is important because it is the `connect` function that works in the background to actually dispatch our actions to the reducer. We can't just import an action creator and use it in our component. It must go through `connect` and be used from the props object. 

Let's see how we would do this in the app we have been building. Go to the `Title` component, import `updateTitle`, and pass it into the `connect` function.

```js
import React from 'react';
import { connect } from 'react-redux';

import { updateTitle } from '../actions/actions';

...

export default connect(
  mapStateToProps,
  { updateTitle }  // same as { updateTitle: updateTitle }
)(Title);
```

Now when the ""Update title"" button is pushed, invoke a function on the class that invokes `this.props.updateTitle` that gets `this.state.newTitleText` passed into it.

```js
updateTitle = (e) => {
  e.preventDefault();
  this.props.updateTitle(this.state.newTitleText)
}

...

<button onClick={this.updateTitle}>Update title</button>
```

Yes, names will be the same all over the place with this stuff. Just note that `props.updateTitle` is the action creator.

To make sure it is working, let's add a console.log in the action creator, and log out the newTitle that is being passed into it. Since we don't have a reducer to handle this action yet, we won't see the state or title updated yet. So this is the best way we can make sure it's working.

```js
export function updateTitle(newTitle) {
  console.log(newTitle);
  return {
    type: UPDATE_TITLE,
    payload: newTitle
  }
}
```

Here's what our [codesandbox](https://codesandbox.io/s/w2n0o4qwmw) should look like now.","In the application you created earlier, look at the state you are displaying. Find something easy, like a string or a number, to update. (Add a string to your state if you only have arrays or objects. This will keep things simple today while we learn this brand new state management flow). Build an action creator, pass it in to your component, and call that action creator (from props) after some interaction like a button click. Make sure you have a console.log in the action creator so you will know if it's working.",nF2HkjPz01A,http://youtube.com/watch?v=nF2HkjPz01A,https://www.youtube.com/embed/nF2HkjPz01A,,,,,Redux Fundamentals I,,Redux,Full Stack Web Development Core,,1,1,1,3
write Reducers to respond to actions and update state,"Reducers calculate the new version of state based on the current state and a given _Action_. The best way to think about Reducers is as the make-up of our state. So when we create a reducer it can be described as the portion of state that it represents. Reducers are pure functions and they are the glue that bind together our Actions and our Store.



",,"When an action is dispatched, it flows through all Reducers. This key principle is one of the patterns by which Redux was built. Reducers are pure functions, meaning they don't produce any side-effects. A reducer is given the name to follow of of the key principles that come from the `Array.reduce()` function, in that they behave similarly to the callback that you would pass to `reduce`. They aren't the same thing, but they behave and do similar things, so that is a good parallel to think about.

Reducers take in two arguments, the `current state` from the Redux store, and the `action` object that is sent to them via the action creator functions. Remember that actions give us a packet of information as an object with a `type` and `payload` field that we can use. The `type` is used to _tell the reducer what to do_, and the payload is to tell the reducer what needs to be updated on state.

**Reducers will NEVER update state directly, but will always return a new object** Remember this as you craft your reducers - that they are not only functional and pure, but they lend themselves to the pattern of Immutability really well.

Inside reducers, we use `switch` statements to look at the action type, then return the uodated state. `switch` statements are like long `if / else if / else if / ... / else` statement. If you haven't encountered a `switch` statement yet, read [this](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/switch) before continuing.","Back in our title app, let's create another folder inside `src` called `reducers`, and inside that, a `reducer.js` file. To start out, we will create an `initialState` object that looks a lot like the one returned in the `reducer` function in `index.js`. (You can start [here](https://codesandbox.io/s/w2n0o4qwmw) if you need to).

```js
const initialState = {
  title: 'Title from Redux store'
};
```

Then we'll create the reducer function. Remember, it takes two arguments - state (with initial state as a default - _watch the syntax there_), and action. Then it will contain a `switch` statement that will look at `action.type` and return `state` as the default.

```js
function reducer(state = initialState, action) {
  switch(action.type) {
    default:
      return state;
  }
}

export default reducer;
```

Next we need to build a `case` for our action. The action that is being dispatched is the `UPDATE_TITLE` action, right? So we'll want to import the action type from the `actions.js` file first. It is a named export, so you will have to use brackets to import it.

```js
import { UPDATE_TITLE } from '../actions/actions';
```

Then in the `case` for `UPDATE_TITLE`, we will return a new state object. We do this be returning an object with `state` spread into it, and updating the `title` property with `action.payload`.

```js
function reducer(state = initialState, action) {
  switch(action.type) {
    case UPDATE_TITLE:
      return {
        ...state,
        title: action.payload
      }
    default:
      return state;
  }
}

export default reducer;
```

Take a minute to study that syntax. Here are a couple important details:
  * We are returning a brand new object. We do NOT update the state object and return that
  * We are using the `spread operator` to ""spread"" in our old state
  * We then update the one piece of data we want to update - `title`

This syntax is the convention when building reducers. This is something that takes some good repetition to get used to!

Now that we have built our reducer, we need to import it into the `index.js` file, and pass it into the `createStore` function in place of the fake one we built earlier. The convention for the import is to call it `rootReducer` inside `index.js`. 

```js
import rootReducer from './reducers/reducer';

const store = createStore(rootReducer);
```

Now we have come full circle! Go ahead and test out your app to make sure it is working. Great job creating your first ever React/Redux application! Here is a working [codesandbox](https://codesandbox.io/s/j357oqxwov) with everything we have implemented for this app.","In your app that you were working on earlier, create a reducer that will handle state changes for whatever action you are dispatching from your action creator. Pass the reducer into your `createStore` function and test out your app.",VT9iMpTRexI,http://youtube.com/watch?v=VT9iMpTRexI,https://www.youtube.com/embed/VT9iMpTRexI,,,,,Redux Fundamentals I,,Redux,Full Stack Web Development Core,,1,1,1,3
implement Redux Middleware libraries into a Redux Store using `applyMiddleware`,"Middleware is a powerful extension point for Redux. We can use middleware to add new functionality to Redux.

There are plenty of third party middleware available for use. We will learn how to use them in our React/Redux applications.","Custom middleware challenge possible solution:
```js
const capitalizer = store => next => action => {
  const uppercased = { ...action, value: action.value.toUpperCase() };
  return next(action); 
};
```","Middleware is a common tool used in programming. You will see middleware used heavily when you start learning about NodeJS. The idea behind middleware is to intercept some process, run a function at the intercept point, then (usually) continue the process. Or, sometimes middleware stops the process entirely. When this ""process"" is kicked off, there is normally some data that is flowing through different functions. With middleware, when we ""intercept"" the process, we are usually trying to do something with the data that is flowing with the process.

Middleware in redux is very common, and gives us a chance to do quite a few things with the data that we are passing through our action creators to the reducers. This is what it looks like with Redux:

Middleware will intercept every action **before** it flows through to the Reducers.

Middleware can:
* stop actions.
* forward an action untouched.
* dispatch a different action.
* dispatch multiple actions.

We can have multiple middleware.

Middleware runs sequentially, in the order they are defined.

Middleware is added to the store when it is created.

A traditional Redux application flows like this:

<div class=""mermaid"">

graph LR
    A[Component] -- calls --> B[Action Creator]
    B -- returns an --> C[Action]
    C -- is dispatched to all --> D[Reducers]
    D -- updates --> E[State]
    E -- sends changes to --> A
</div>

When we add middleware the flow changes to this:
<div class=""mermaid"">

graph LR
    A[Component] -- calls --> B[Action Creator]
    B -- returns an --> C[Action]
    C -- flows through all --> D(Middleware)
    D -- _AND THEN_ dispatched to all --> E(Reducers)
    E -- updates --> F[State]
    F -- sends changes to --> A
</div>","Let's add a logger middleware library to any React/Redux app you have in codesandbox. It can be literally _any_ sandbox you have with Redux implemented and the app working. Find one you want to work on.

Next, we want to add `redux-logger` as a dependency. In codesandbox, you will add it from the dependency button. In a normal app, you would run

```
yarn add redux-logger
```

Next we want to import it into our application. 

```js
import logger from 'redux-logger';
```

Finally, we need to import a helper function from redux. This function is the `applyMiddleware` function. You can probably guess that we will be passing `logger` into this function. You would be correct! But the `applyMiddleware` function is going to be inside the `createStore` function. It will look like this:

```js
import { applyMiddleware, createStore } from 'redux';
import logger from 'redux-logger';

const store = createStore(
  reducer,
  applyMiddleware(logger)
);
```

... That's it! This is a very basic middleware package that will console.log your actions as they flow through the action creators, before they hit the reducer. Go ahead and try it out. Open your console (it will look better if it is in its own window, and not in the codesandbox page), open the console, and then interact with your app. You will see the actions being logged, the state tree before the action is passed to the reducer, and the resulting state tree after the action is passed to the reducer!

_Note: if you use redux-logger with other middleware packages, make sure logger is passed to applyMiddleware last._ ","Look at this package - https://github.com/elgerlambert/redux-localstorage. Try to now implement this so that your store is saved to `localStorage`. The configuration is a little different than what we did above, so you will have to follow what the docs show.",yTOVUuFX5TU,http://youtube.com/watch?v=yTOVUuFX5TU,https://www.youtube.com/embed/yTOVUuFX5TU,,,,,Async Redux - Redux Thunk,,Redux,Full Stack Web Development Core,,1,1,1,3
"install Node, Yarn, LESS, and less-watch-compiler",Package managers allow developers to install several code dependencies with just a few commands.  We will be using Yarn as our go-to package manager here at Lambda. ,We are globally installing yarn to avoid node modules at this point in time. Refer students to the detailed videos for both PC and Mac.  Linux users should feel the most comfortable in a CLI and no instructions have been provided because of that.,"In preprocessing we have 3 main concepts we need to understand:

1. The language or syntax that we use to write our code (LESS)
2. The compiler that converts the language (Node)
3. The CSS that is outputted from the compiler (Normal CSS)

This module focuses on the compiler.  In order for us to use our language (LESS) we need to have a compiler that understands that specific language input.  

A compiler is a program that converts language into code.  In our case, LESS is the language and CSS is the outputted code.  We utilize compilers to provide more features than normal CSS can offer.  ","Installing our working environment can be daunting at first.  We will be covering a lot of ground.  Get through each step before going back and trying to learn everything you did.  

If you are on a mac, follow the mac instructions below.  If you're on a PC, scroll down after the mac instructions to the PC instructions.  

If you're on Linux machine follow your specific instructions found on the Yarn install page:  https://yarnpkg.com/en/docs/install 

After you have it installed Yarn you can look at step 3 in the mac instructions for the commands to install LESS and less-watch-compiler.

## Step By Step Install Instructions for Mac

***Step 1: [Install Homebrew](https://brew.sh/)***
- Follow the instructions on how to install Homebrew using your terminal
- Pay attention to the terminal as the installer will ask for a password
- The Homebrew installer automatically includes Node.js

***Step 2: [Install Yarn Using Homebrew](https://yarnpkg.com/en/docs/install)***
- Once Homebrew has been installed, run `brew install yarn`
- If you get a warning to upgrade Yarn run `brew upgrade yarn`
- Test that yarn is running by opening your terminal and run `yarn --version`

***Step 3: Install Less***

*NOTE:* You will see our commands have `global` in them.  Please write the commands exactly as you see them.  Globally installing packages is ideal for our situation.  As you learn more about Yarn in the future you will be using a lock file to control your packages but for now, please use the `global` keyword.

- Open terminal and run `yarn global add less`
- If it's not working, restart terminal and try again

***Step 4: Install less-watch-compiler***
- Open terminal and run `yarn global add less-watch-compiler`

***Step 5: Use less-watch-compiler On Your Project***
- Fork and clone the project
- `cd` into your project on your local machine
- Once you are in the root of your project run `less-watch-compiler less css index.less` 
- Your project should be up and running, change some styles around in your .less file and save the file to make sure you see a change in your CSS.
- Great work, you're all set up!

## Step By Step Install Instructions for PC

***Step 1: [Install Node.js](https://nodejs.org/en/)***

***Step 2: [Install Git Bash (Git SCM)](https://git-scm.com/download/win)***
- After installer is finished, open git bash and run `node -v` to make sure node is installed correctly
- If you don't see some node version numbers display in your git bash window, restart git bash and try again

***Step 3: [Install Yarn Using .msi Installer](https://yarnpkg.com/en/docs/install)***
- Once installed, open git bash and run `yarn --version` to see if you got Yarn working
- If it's not working, try restarting your computer and attempting the .msi installer link again

***Step 4: Install Less***

*NOTE:* You will see our commands have `global` in them.  Please write the commands exactly as you see them.  Globally installing packages is ideal for our situation.  As you learn more about Yarn in the future you will be using a lock file to control your packages but for now, please use the `global` keyword.

- Open git bash and run `yarn global add less`
- If it's not working, restart git bash and try again

***Step 5: Install less-watch-compiler***
- Open git bash and run `yarn global add less-watch-compiler`

***Step 6: Use less-watch-compiler On Your Project***
- Fork and clone [Preprocessing-Part-I](https://github.com/LambdaSchool/Preprocessing-Part-I)
- `cd` into your project on your local machine
- Once you are in the root of your project run `less-watch-compiler less css index.less` 
- Your project should be up and running, change some styles around in your .less file and save the file to make sure you see a change in your CSS.
- Great work, you're all set up!","1. Follow the instructions provided to you in the tutorial above
2. Once in your project, change the background color of your body tag to `red`
3. Once you have seen the background turn red you have verified the compiler is working correctly",,,,,"Install Yarn Package Manager,""PC Install: Node, Git Bash, Yarn, LESS, less-watch-compiler"",""Mac Install: Node, Yarn, LESS, less-watch-compiler""",,,Preprocessing I,,Advanced CSS,Full Stack Web Development Core,,1,1,,2
use the jQuery library to select and manipulate DOM elements,"jQuery is one of the earliest Javascript libraries. It revolutionized the way we work with the DOM and UI components. Many of the DOM methods and properties we use are directly derived from jQuery syntax. Understanding jQuery is not only an incredibly marketable skill, but allows us to better understand native DOM manipulation and a is great lead in to understanding modern frameworks. ",,"#### What jQuery is and why do we use it?

We learned about the browser wars during UI week, and how we could not rely on CSS rules to work similarly in different browsers.  The same was true for DOM methods and DOM manipulation. You couldn’t depend on a DOM method working in the same way in different browsers. This inconsistency forced developers to create thousands of lines of  work arounds for each method for each browser. As you may imagine, this created worlds of headaches and confusion in the front end development world.   Not only that, to top it off until recently (last 6 years) native DOM methods were severely lacking, and required far more work (eg: You needed to traverse the entire DOM just to find the element you wanted to manipulate). Hundreds of thousands of developer hours were waisted writing and rewriting these work arounds. 

In 2006 the DOM manipulation library `jQuery` was introduced to the web development world. jQuery introduced ideas such as selecting elements based on CSS type queries, simple clear methods allowing for easy DOM manipulation regardless of browser, event delegation, animations, and built in AJAX calls. The introduction of jQuery was game changing, it quickly became the de-facto way of accessing and manipulating DOM elements. Virtually every professional web developer used it regularly and nearly every web library came with jQuery preinstalled. Over time, browsers started coordinating their efforts to implement a native DOM that works cross browser (we’re still not nearly 100% there). jQuery’s popularity eventually forced browsers to implement jQuery type DOM methods (you may notice some similarities between many jQuery methods and some of the native DOM methods we’ve been using. Many of these are new to the DOM and have only been around for the last couple of years). Even with all of this in place, jQuery still remains the most popular library in professional web development, and knowing how to use it is a skill that many employers seek out and/or expect out of their developers. 

#### Why we continue to use jQuery

Since the introduction of jQuery, hundreds of similar solutions have come out. The rise of web frameworks and SPA’s has come about, and, as mentioned before, the most useful and most popular jQuery methods have been incorporated in the native DOM. But, there are millions of web sites and applications out there still using jQuery. You may ask why we still use jQuery? For one, these new DOM methods are just that, new. Millions of web apps have been built using jQuery when it was the best choice (and in many cases, still is the best choice). Legacy code is a huge sector of the market, and jQuery works so well and is small enough, that many businesses don’t see a need to change that. Secondly, most of those new DOM methods are not supported in older browsers, many companies actively support users on older browsers, and jQuery gives us the ability to use these 'modern' techniques while still maintaining support for those users. Finally, there are many features of jQuery that have not been absorbed to the native DOM. jQuery is massive and has a tremendous amount of functionality. jQuery has a full featured AJAX library. Many teams use jQuery solely for this functionality, we are not going to get into it in this sprint, but just know that it does exist and is one of the most popular parts of jQuery. To top all of this off, jQuery remains the most popular javascript library and will be a sought after skill for many years to come. 

#### Including jQuery in our Projects

In order to use it, we need to install jQuery in our project. We can do this a couple of ways. We can download the jQuery file ourselves and include it in our project, or we can use a `CDN (Content Delivery Network)`. We can get both from the [jQuery website](http://jquery.com/download/). Either way, we will use the `script` tag in our HTML just like we do with our own Javascript files.

```html
<!-- With a file we have downloaded and included: -->
<script type=""text/javascript"" src=""./jquery-3.3.1.min.js""></script>

<!-- OR with a CDN: -->
<script
  src=""https://code.jquery.com/jquery-3.3.1.min.js""
  integrity=""sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8=""
  crossorigin=""anonymous""></script>
```

Now that we have the jQuery library installed we can use it in our javascript file(s). All jQuery methods live on the global jQuery object, this is represented with the `$` symbol. While using jQuery anywhere we see a `$` symbol we will know we are using jQuery for that operation. 

Note: Often times you will see this syntax wrapping the entire javascript file :

```javascript
$('document').ready(function(){});
```
This is needed when we are supporting a browser that doesn't support the `defer` or `async` attributes on our script tags. This syntax will wait until the DOM has completely loaded to run the javascript.

#### jQuery Selector

Selecting elements may seem rudimentary to us now, but that's only thanks to jQuery. Beofre jQuery we have to write functions that would traverse the entire DOM tree looking for the element(s) we wanted. jQuery popularized the CSS style selectors to get an element. Just like we use in `document.querySelector`, we supply jQuery with a query string:

```javascript
const $el = $('.className h3'); 
```

That will give us access to the element(s) and it gives us the added jQuery methods on that element.

Note: jQuery will always return an array when selecting element(s). Although, we don't need to worry about selecting specific items like we do with native DOM methods. We will go over why that is a little bit later.

We can also use this selector style to create new elements like so:

```javascript
const $el = $('<div></div>'); 
```

#### Understanding basic jQuery methods and chaining.

* .addClass, .removeClass, .toggleClass
    * Select an element (or create a new one) and pass a string to the {add/remove/toogle}Class method

* .text, .html, .append, .appendTo, .prepend, .prependTo, .remove, .empty
  * jQuery has many methods we are used to in modern DOM manipulation, but these methods were created in jQuery and absorbed by the native DOM. .text and .html will act like inner{text/html} (important to note that these are all methods, not properties). .append and prepend works just like appendChild and prepend, appendTo and prependTo are methods on a new element and lets us tell it where we want the element placed. Remove allows us to remove a child element. And empty remove all html and text from within the selected element. 

* Events
  * [List of jQuery Event Methods](https://api.jquery.com/category/events/)
  * jQuery allows us to easily add event listeners to elements. Usually you will use the name of the event you want to listen for as the method and the callback as the only argument as such:
```javascript
const $el = $('className');
$el.click(() => { /* Function to run after event is fired */});
``` 

* .map, .each
  * There was once a time that `forEach` and `map` were not native javascript array methods. In order to perform these operations you need to use a manual `for` loop. jQuery introduced these methods to us. An unfortunate side effect of being first is that the call back is not in the order ECMA decided later to use. In jQuery the index comes first and the item comes second (index, item) => {}. This will confuse you as to why it is not working the way you expect, keep this in mind. 
  * A Note: When we select elements with jQuery, we always receive an array. When we call a method on a jQuery selected element, jQuery will run that method on every element in the array. This allows us to use shorthand on a single element and also allows us to call a single method on an entire array of elements. This is known as `Implicit Iteration`. 
  * An example of this is:
```javascript
const $el = $('ClassOnMultipleElements'); //returns an array of all elements
$el.click(() => { /* Click event handler will be added to all the elements in the array */})
```

* chaining
  * once an element is selected you can chain methods together to achieve the effect you desire. eg:
```javascript
const $el = $('.className');
$el.text('Changing text!').addClass('ClassTwo').click(callback);
```

* TONS MORE!
  * jQuery is HUGE! There are tons of methods for everything from animation to AJAX calls. Take a look at the documentation and see for yourself. If there is something you want to do on the screen, there is probably a jQuery method for it. 
  * [jQuery Documentation](http://api.jquery.com/)",,,,,,,Learn How jQuery Works,,,,,,,,1,,,1
describe promises and demonstrate the use of the `.then` and `.catch` methods,Promises exist everywhere in Asynchronous JavaScript,"let time = 0;

const asyncFunc = () => {
  return new Promise (
    (resolve, reject) => {
      setTimeout(() => {
        time += 1000
        resolve(time)
      }, 1000)
    }
  )
}

const parseTime = (ms) => {
  return new Promise(
    (resolve, reject) => {
      if(ms > 1000){
        const timeString = time/1000 + ' seconds'
        resolve(timeString)
      } else {
        reject(new Error(""Not enough time""))
      }

    }
  )
}

asyncFunc()
  .then(parseTime)
  .then((string) => { return string + 'foobar'; })
  .then(newStr => console.log(newStr))
  .catch((err) => { console.log(err)})","Promises are a design pattern for use when handling asynchronous code in JavaScript. We use them as an alternative to nesting multiple callbacks. You may have heard of a problem called `callback` hell. Promises are a way to avoid this problem. Implementing promises is not something you'll need to do very often, especially in front end development. However, understanding how they work under the hood will help you deal with them, for example when requesting data from web servers.

Learning how to handle promises is pretty straight forward. In fact, on a `Promise` object there are really only two methods that we need to use to handle promises `then` and `catch`. For what we're trying to accomplish in terms of transferring data between our apps and some server somewhere, we will actually be using what is called a `Promise Library`. I want to ensure that you understand that the built in `Promise` object you're about to see, is **NOT** a promise library, rather it is a feature built into the JavaScript language as of ES6. Now, let's dig in.

Consider the following code and what it is doing here.

```
let time = 0;
const timeMachine = () => {
  return setTimeout(() => {
    return time += 1000;
  }, 1000);
};

timeMachine();
console.log(time); --> OUTPUTS: 0;
```

What we have seen here is that at some point in time, the setTimeout function (1 second later) will actually end up manipulating the `time` variable. However, when we `console.log` time we get `0`. The reason for this, is because of the way that we are manipulating the `time` variable is defined. It is happening inside of a `setTimeout` block, which waits 1000ms to actually do its thing. This is an important concept to grasp here. _Even though we've manipulated the data, we don't have access to the data that was manipulated quite yet_. In a nutshell this is asynchronous JavaScript.

Ok, so the problem, is that we're expecting `time` to be equal to `1000` by the time we want to work with it, one way we can solve this is by using Promises. Before we do that let's figure out what a `promise` is first. 

Straight from MDN: 

> _A Promise is a proxy for a value not necessarily known when the promise is created. It allows you to associate handlers with an asynchronous action's eventual success value or failure reason. This lets asynchronous methods return values like synchronous methods: instead of immediately returning the final value, the asynchronous method returns a promise to supply the value at some point in the future._ 

Simply put, while we wait for an actual value, we are able to represent it (or an error, if the asynchronous operation where to fail) using a promise object. A promise can exist in one of three states:

* `Pending`: a state where the promise is neither rejected nor fulfilled.
* `Fulfilled`: a state where _all's well_ and a resolved value can be used by our code.
* `Rejected`: a state where _something went wrong_ and there is an error that needs to be dealt with.

The Promise constructor takes a callback as its first argument. This callback has two parameters:  a `resolve` function (let's fulfill this promise) and a `reject` function (let's reject this promise and send an error). If the promise succeeds, the callback passed into `.then()` runs, taking the resolved value as its argument. If the promise fails, the callback passed into the `.catch()` runs, taking an error as its argument.","Ok that's a lot of words, now lets see some code.

```
let time = 0;
const timeMachine = () => {
  return new Promise((resolve, reject) => {
    setTimeout(() => {
      resolve((time += 1000));
    }, 1000);
  });
};
```

Notice here that we've now wrapped our `setTimeout` function in a `new Promise` and we're resolving the addition of the `time += 1000` and passing that resolved result. This allows us to do what we call `promise chaining` when we invoke our `timeMachine` function. Remember that every promise ships with `then and catch` methods and we can use those methods to either receive a `resolved promise` or a `rejected promise`. Lets find out how!

```
timeMachine().then(newTime => {
  console.log(newTime); --> OUTPUTS: 1000 
});
```

Ok, in the above code, the `thenified` timeMachine invocation is now receiving a callback itself, (this is how all promise chains should look) with some item being received as a parameter. We can chain multiple `thens` together. Inside of each `then` block when/if we return something new, we can be directed into a new `then` block which is really neat. Or maybe we're `resolving` more than one process, and we want to see the next result in the next `then` block. Lets manipulate the data in the `.then` block we have now, and see what happens when we use another `then`. 

```
timeMachine()
  .then(newTime => {
    const myTime = newTime / 1000;
    return `${myTime} seconds have passed`;
  })
  .then(newString => {
    console.log(newString); --> OUTPUTS ​​​​​""1 seconds have passed​​​​​""
  });
```

In our first `then` block we are manipulating the time that is originally being resolved by the `Promise` and then sequentially returning it with some text concatenated onto the time. Because we are returning a value from our first `then` statement, we can now chain on another `then`. And thus we have achieved some promise chaining. This isn't a terribly useful program at this point. But we're about to see some power. 

Now lets make another function that we can use to return yet another promise. This is where some of the `then chaining` starts to really come in handy. We're going to have to refactor our code, ONLY where we're calling `timeMachine`. The function we're going to write is called `parseTime` and it will receive a `ms` milliseconds parameter that we can use to reject a promise in the future.

```
const parseTime = ms => {
  return new Promise((resolve, reject) => {
    const timeString = time / 1000;
    resolve(`${timeString} seconds have passed`);
  });
};
```

Ok! Now we've offloaded some work from our `then` block into a function that resolves a promise. We can now use it like above, but this time, when we call our `timeMachine` function  we'll pass this `parseTime` function as an argument to our first `then` block.

```
timeMachine()
  .then(parseTime)
  .then(timePassed => {
    console.log(timePassed); --> OUTPUTS: ""1 seconds have passed​​​​​""
  });
```

We've effectively achieved the same thing, but now we're chaining promises and their resolves together. This is Promise chaining. Now the last thing we need to cover is a `rejected promise` because up until now all the things have just... worked. That is not the case in the real world, so because of that, we need to learn how to handle rejections. Lets tweak our `parseTime` function so that we can reject a promise instead of resolving a promise that is, if a certain condition matches. 

```
const parseTime = ms => {
  return new Promise((resolve, reject) => {
    const timeString = time / 1000;
    if (ms > 999) {
      resolve(`${timeString} seconds have passed`);
    } else {
      reject(new Error(`ms is less than 1 second promise rejected!`));
    }
  });
};
```

Here's whats going to be sweet, when this function actually runs, ms will be 1000. So our condition will resolve the promise, but lets remember where we're actually using this function.. it's within a `then` block on the resolve of another promise. If we tweak our `timeMachine` function to resolve under `1000 ms`, we'll get a rejection. So lets change the `timeMachine` function in such a way that breaks our promise chain so that we can deal with it.

```
resolve((time += 999));
```

Now we should hit our condition, and our promise will then be rejected. So we have a `catch` block for this purpose. 

```
timeMachine()
  .then(parseTime)
  .then(timePassed => {
    console.log(timePassed); --> OUTPUT: DOES NOT RUN
  })
  .catch(err => {
    console.log(err); --> OUTPUT: ​​​​​[Error: ms is less than 1 second promise rejected!]​​​​​
  });
```

And that is that! We have successfully built out a promise chain that allows us to see the benefit of writing them in the first place. So now, when you're dealing with Promises in the future, the `.then` and `.catch` won't be all that scary! That last part is the part to remember. HOW we handle promises is what is important for us in the future. Not HOW we implement them. We will be using Axios for that and we're going to teach you what that is soon.","Using the time machine example you just built, build one more function from scratch that returns a `Promise` that has a setTimeout inside it. In the `.then()` console.log what is resolved from inside the setTimeout.",7I3TeN2Sj1k,http://youtube.com/watch?v=7I3TeN2Sj1k,https://www.youtube.com/embed/7I3TeN2Sj1k,,Promises in JavaScript explained,,,HTTP / AJAX I ,,Single Page Applications,Full Stack Web Development Core,,1,1,1,3
test React components.,"You know react and you know how to use it to build out rich user interfaces. Now it's time to ensure that what you're building is tested prior to reaching the hands of your clients. Client side testing frameworks like `Jest` and `Enzyme` make this not only possible but they also make it relatively painless to add tests to your React code. 

We'll cover:
- component testing.",High level overview of testing React Components using Jest and Enzyme.,"#### Component Testing

- appearance and functionality of a component.
- highly sensitive to small changes.
- great against regression.
- verifies changes to component output resulting from changes to state.
- does **NOT** verify interaction between components.

#### What do we test?

- does it render?
- does it render correctly?
- are sub-components rendered, and how many of them.
- are props handled correctly.
- is state handled correctly.
- does it handle events correctly?

#### What makes a good test?

- should be independent.
- test only what needs to be tested.
- one test per behavior/functionality, multiple assertions are ok.
- one code unit at a time.

#### Workflow

- render component in isolation without any sub components. This is called `shallow rendering`.
- we'll use a library called `enzyme` for `shallow rendering`.
- inside the `README.md` file generated by `create-react-app` there are instructions on how to add `enzyme` to the project. Follow the instructions under","#### Install Enzyme

- type: `yarn add enzyme enzyme-adapter-react-16 react-test-renderer`.
- add a global setup file: `src/setupTests.js`.

```js
import { configure } from 'enzyme';
import Adapter from 'enzyme-adapter-react-16';

configure({ adapter: new Adapter() });
```

#### Using enzyme. 

[Example from the Enzyme documentation](http://airbnb.io/enzyme/)

- add library.
- add this code to `App.test.js`.

```js
import { shallow } from 'enzyme';

it('shallow renders without crashing', () => {
  shallow(<App />); // notice this only renders App and will not render any child components
});
```",,,,,,,,,,Active,,,,1,,,1
# vectors and eigenspaces,,,,,,,,,,,,,,,,,,0,,,0
add and subtract vectors,,,,,,,,,,,,,,,,,,0,,,0
translate a group of vectors around a different centroid,,,,,,,,,,,,,,,,,,0,,,0
compute the L1 and L2 distances of a pair of vectors,"""Distance"" is simply a mathematical measurement. Different distance norms produce different sorts of results.",,"Distance is the most common measure of error, or ""loss"", in machine learning. The distance from our actual model prediction to our desired model prediction is how we update parameters, training toward better predictions. We can measure distance in different ways. The two most common ways are L2 distance:

![L2 distance equation d_{a,b,L2} = \sqrt{(a-b)^2}](https://www.dropbox.com/s/qg15z4vxoybu2ha/Screenshot%202018-03-23%2013.35.37.png?raw=1)

and L1 distance:
![L1 distance equation d_{a,b,L1} = \sum{|a_i - b_i|}](https://www.dropbox.com/s/qqt76wsv0czbn20/Screenshot%202018-03-23%2013.38.31.png?raw=1)",Lets manually calculate some distance norms. The iris dataset ought to be of interest!,"L1 distance allows for efficient distance computation on sparse datasets. L2 distance provides a much more unique distance than L1, but is more expensive to compute.

Find a dataset that allows you to demonstrate these differences, compute them, and submit them to thomson@lambdaschool.com",,,,,High Dimensionality: L1 and L2 norms,,,High Dimensionality,,High Dimensionality,Machine Learning Core,,1,1,,2
predict a vertex value v_i from v_0...v_i-1 via linear regression,Linear regression is the simplest ML model.,," Regression is the first example of this:

    import numpy as np
    import matplotlib.pyplot as plt

    data = np.matrix([[4,1],[2,2],[3,3],[1,4]])

    # Y = XB + e

    Y = data[:,0]
    X = data[:,1]
    regression_matrix = np.c_[ np.ones(data.shape[0]), X]

    beta = np.linalg.inv(regression_matrix.transpose() * regression_matrix) * regression_matrix.transpose() * Y

    regression_result = regression_matrix * beta

    plt.plot(data[:,1],data[:,0],'ro')
    plt.plot(data[:,1],regression_result)
    plt.title(""Linear Regression"")
    plt.show()

<img src=""https://www.dropbox.com/s/gxxvqblfojhuiqx/Screenshot%202018-02-27%2011.46.53.png?raw=1"" alt=""Linear regression of [4,2,3,1]"">

The above is the simplest approach to linear regression, creating a ""best-fit"" solution to the sample `y` values `[4,2,3,1]` at their respective `x` values `[1,2,3,4]`.

`beta` contains `f(x)`: 

    >>> beta
    matrix([[ 4.5],
        [-0.8]])

`f(x) = 4.5 - 0.8x`

The python code above implements the following equation:

<img src=""https://www.dropbox.com/s/6ix4ig07wt4iexh/linear_regression_matrix.gif?raw=1"" alt=""f(x) = b_0 + b_1x, [b_0, b_1] = (M^TM)^{-1}M^TY"">

```
f(x) = b_0 + b_1 x
\\
\begin{bmatrix}
b_0\\ 
b_1\\ 

\end{bmatrix}
= (M^TM)^{-1}M^TY
```

This is your first real ML model! This newly discovered function `f(x)` predicts the value of any unknown sample based on computing the least-squares minimum line of fit to the data that we do have. Obviously, the `f(x)` that we just discovered is not correct! It doesn't even match the observed data points!",,,,,,,,,,Ordinary Least Squares Regression,,"Modeling, Regression",Machine Learning Core,,1,,,1
predict a vertex value v_i from v_0...v_i-1 via cubic regression,"Cubic regression makes a perfect fit for four data points - this is a mathematical aspect of cubic polynomials. Any other size of points, that is, more than four points, or less than four points, does not produce the same perfect fit.

Nonetheless, your skillset should include polynomial regression, which cubic is an instance of. Lets learn the matrix form of polynomial regression so that you can extend it do any degree.",,"You can also use this for polynomial regressions, curve-fitting, and taylor series computations. Every curve is a combination of curves and this simple model will tell you what they are!

<img src=""https://www.dropbox.com/s/2azwg8luiw81v7v/Screenshot%202018-02-27%2012.54.28.png?raw=1"" alt=""The cubic regression that exactly fits the training data"">","Lets modify the linear regression code to perform 3rd degree polynomial (cubic) regressions. If we have time, lets try for more!",,,,,,,,,Ordinary Least Squares Regression,,"Modeling, Regression",Machine Learning Core,,1,,,1
"compute the eigenvalues and eigenvectors of a nonsingular matrix (SVD, PCA)","Eigenvalues and eigenvectors are the ""true orientation"" of a dataset.",,"Every set of data in N-dimensions has N eigenvalues and N eigenvectors. The 1st eigenvalue is the dimension with the greatest variation, the second has the second greatest variation, and so forth. The 1st eigenvector is the direction in the original space of the data described by the first eigenvalue.

The eigenvectors of a space are its true basis vectors. Basis vectors are the set of vectors for which every point in the space is constructed.

In a perfectly random sampling of data in any M-dimensions, there are exactly M eigenvectors and they are the M canonical eigenvectors - [0,1] and so forth. But in any real sample of data collected from the world, the data doesn't perfectly occupies the space, but instead occupies a subset of space.

This subset is what is described by eigenvalues and eigenvectors.","One cannot compute a PCA without finding the eigenvalues and eigenvectors. One of the funnest examples of eigenvectors is from a face dataset. Lets have a look at some images from a face dataset, then compute their SVD and show the first eigenvector of the set.

This face is the first building block for every face in the set! Each one begins with this familiar-looking ""first eigenface"", then adds components of all of the other eigenfaces in order to produce each unique face. :)",Show the coefficients that make up a particular face from the dataset.,,,,,,,,Dimensionality Reduction,,High Dimensionality,Machine Learning Core,,1,1,,2
add kI to a singular matrix to make it nonsingular,,,,,,,,,,,,,Dimensionality Reduction,,High Dimensionality,Machine Learning Core,,0,,,0
display the eigenfaces of a collection of images,,,,,,,,,,,,,,,,,,0,,,0
# function optimization,,,,,,,,,,,,,,,,,,0,,,0
"compare optimal values of f(x,y,z)",,,,,,,,,,,,,,,,,,0,,,0
"visualize the 2d shape of f(x,y) and the 3d shape of f(x,y,z)",,,,,,,,,,,,,,,,,,0,,,0
describe two real world examples of an application of function optimization,,,,,,,,,,,,,,,,,,0,,,0
discover the local optimum of a function f(x) using gradient descent,,,,,,,,,,,,,,,,,,0,,,0
discover the local optimum of a function using covariance matrix analysis (CMA),,,,,,,,,,,,,,,,,,0,,,0
# classification,,,,,,,,,,,,,,,,,,0,,,0
compute neighborhoods of classes using k-means,,,,,,,,,,,,,,,,,,0,,,0
write an SVM that can classify non-polynomially,,,,,,,,,,,,,,,,,,0,,,0
write a boosted SVM that can classify four classes,,,,,,,,,,,,,,,,,,0,,,0
describe the difference in ROC curve produced by the above algorithms,,,,,,,,,,,,,,,,,,0,,,0
# neural networks,,,,,,,,,,,,,,,,,,0,,,0
write a feed-forward neural network in python,,,,,,,,,,,,,,,,,,0,,,0
write a neural network with backprop in python,,,,,,,,,,,,,,,,,,0,,,0
create a convolutional neural network capable of classifying regions of images,,,,,,,,,,,,,,,,,,0,,,0
derive the gradient descent function used in backprop,,,,,,,,,,,,,,,,,,0,,,0
# introductory material,,,,,,,,,,,,,,,,,,0,,,0
list three specific subdomains of machine learning,,,,,,,,,,,,,,,,,,0,,,0
describe two uses cases for each of the three subdomains,,,,,,,,,,,,,,,,,,0,,,0
explain briefly the history of ML development,,,,,,,,,,,,,,,,,,0,,,0
identify important modern toolsets that have enabled deep ML,,,,,,,,,,,,,,,,,,0,,,0
Find derivatives and optima,Calculus is the basis of machine learning. Be able to do the most fundamental calculus operations.,,"Given some function y = f(x), plot a graph of its derivative dy/dx and find the optima", Explain the difference between `f(x) = 0` and `dy/dx = 0`.,https://colab.research.google.com/drive/1o8r9XRnQ-lsWutLeVGFSSfMR0lzfBUDk,,,,,,Precourse: Khan Academy Calculus,,,,,,,1,1,,2
create and edit a vector of scalars with numpy,"<p>
The vector is the most basic data element in Machine Learning. A vector is the programming equivalent to a list, usually a list of floating point numbers (scalars). Whenever you train an ML model, you are training it against a large set of vectors.
</p>
<p>
Vectors aren't just lists, they also have a set of numeric operations defined on them. Be sure that you know at least some vector operations.
</p>",,"<code>
import numpy as np
</code>

<p>
Simple: I create a variable in numpy for storing a vector of numbers. I can edit each value separately, or replace the entire vector. I can copy the vector and put it into a new variable, and I can keep any arbitrary collection of vectors.
</p>

<code>
v = np.array([4,3,2,1,0])
</code>

<p>
The most important collection of vectors is called a matrix.  A matrix is a powerful mathematical structure that has many uses and representations.
</p>

<code>
v = np.array([[1,0,0],[0,1,0],[0,0.1]])
</code>","Here is where I demonstrate to you, again, the creation and manipulation of vectors.","Create a vector, edit its values in place, sum it with another vector, and square its values.",,,,,Numpy,,,Linear Algebra,,Mathematical Foundations,Machine Learning Core,,1,1,,2
draw a simple 2d graph of a vector of `y = sin(x)` values with matplotlib,Graphing data is one of the foundations of Machine Learning. You can't build a model or understand its results unless you can draw a picture of the data and the decisions provided by the model.,,"Draw a 2d graph of sin(x), x^2, and others. Use matplotlib to generate those 2d graphs digitally.","We do: Create data dynamically in python and draw it with matplotlib, providing code examples that can be used by students going forward.","Draw `y = sin(x)` with matplotlib and properly annotate the: Title, x axis, y axis, limits, and positions of optima.",,,,,,,,,,,,,1,1,,2
add two vectors together,"Adding two vectors has many descriptions, but the simplest description is that of motion. When two 1d vectors (that is, a single scalar value _not actually a vector_) are added together, the location of of the first number being added on the number line is moved by the second number steps.


Another word for vector addition is ""translation"". Any two vectors differ by their difference, that is, `v2 - v1`.",,"I spin up numpy, create 1d, 2d, and 3d. I sum them together, and I draw what it looks like after two vectors have been added: One vector coordinate from origin, plus another vector coordinate from origin, is the same as the second coordinate only with the first vector as origin.","We do: I reiterate that the origin is position 0 and that vectors all originate from there. Two vectors added together become their sum from the original origin, or simply the second ector with the first vector as origin.",,,,,,,,,Linear Algebra,,Mathematical Foundations,Machine Learning Core,,1,,,1
subtract a vector from another vector,Subtracting a second vector from a first vector changes the origin of the second vector. This allows us to center any origin or group of origins around a common position.,,"Subtraction of vectors is just like addition. When we add two vectors, we can treat one or the other vector as the ""origin"", relative to the second vector. When we subtract vectors, the subtracted vector becomes the origin of the subtracted-from vector.","Lets subtract a group of vectors from a shared origin. Notice how they all move around the new center. In particular, it is helpful to compute the average of a set of vectors, then subtract that average from each one. This now centers them all around the new origin.","<p>
From the set of vectors V, for each vector `v_i` where `v_i.y > 0`, compute their average value or centroid `v_yc`. Now subtract `v_yc` from all vectors in `V` and draw then on a 2d graph.
</p>
<p>
From the same set of vectors, for each vector `v_j` where `v_j.x < 0`, compute their average value `v_xc`. Subtract `v_xc` from all vectors in `V` and graph them.
</p>
<p>
Share any observations you can make.
</p>",,,,,,,,Linear Algebra,,Mathematical Foundations,Machine Learning Core,,1,1,,2
calculate the magnitude of a vector in numpy,The magnitude of a vector is defined as ...,,Here I demonstrate the foundation of the vector magnitude operation `|v|`.  This matters profoundly for normalization and direction: a vector is a direction times a magnitude.,"Lets look at magnitude, direction, and their relationship.","Calculate the magnitude of 2d, 3d, and 10d vectors. Divide those vectors by their magnitudes in order to produce a ""unit vector"", that is, a unit whose magnitude is equal to 1.0.",,,,,,,,Linear Algebra,,Mathematical Foundations,Machine Learning Core,,1,1,,2
compute the orthogonal cross product of two vectors in numpy,Two vectors ,,,,,,,,,,,,,,,,,0,,,0
multiply a simple affine matrix with a vector,"Multuplying a vector by a matrix enables all of the basic skills of vector operations in a single simple operation: `w = Mv` where `v` is some original vector, `M` is a matrix that transforms it, and `w` is the outcome of that transformation.",,"Computer graphics are enabled by the ability to apply a single transformation to a large set of vectors, quickly and in parallel.  We accomplish this through a matrix multiply, often called a perspective or affine matrix multiply. 

I draw you the basic matrix form, explain all of the coefficients and the mathematics behind them, then apply it. This piggybacks on top of the addition and multiplication techniques that we have performed previously, and the basis of Deep Learning through parallelization.","Here I create a matrix in numpy and multiply it by a variety of vectors, demonstrating 3d transforms, scale, translation, and affine transform. A matrix can be used to represent a multitude of composed basic vector operations.","<p>
Create a matrix that adds this value to this dataset `V`. What happens to the data after the matrix has been applied?
</p>
<p>
Create a matrix that subtracts the centroid of a dataset. Can you explain how we would use this with a graphics accelerator to translate large clouds of points more efficiently?
</p>
<p>
Create a matrix that scales a set of points by 2 in the x direction and 1.5 in the y direction. What happens if we apply this matrix to a set of points that isn't centered? What if it is centered? How do we center it before applying the transformation?
</p>",,,,,,,,Linear Algebra,,Mathematical Foundations,Machine Learning Core,,1,1,,2
draw `y = f(x)` where x is a scalar in matplotlib - deprecated,"The first step to understanding Machine Learning is understanding the simple function.

<img src=""https://upload.wikimedia.org/wikipedia/commons/7/76/Gerade.svg"" text=""Adrian Neumann - a function"">
<br>
By Adrian Neumann - <span class=""int-own-work"" lang=""en"">Own work</span>, <a href=""http://creativecommons.org/licenses/by-sa/3.0/"" title=""Creative Commons Attribution-Share Alike 3.0"">CC BY-SA 3.0</a>, <a href=""https://commons.wikimedia.org/w/index.php?curid=1834463"">Link</a>",,Recorded video where I write out mathematics by hand and explain why it is fundamental to Machine Learning.,"Screenshare where we create the same functions using python, and graph them.","You write a loop that generates `y` values for some `f(x)` function, then plots them.",,,,https://www.youtube.com/embed/8k8yFklBLgU,"Youtube: Functions,Youtube: What is a function?",,,,,,,,1,1,,2
calculate the derivative of `f(x)`,"The derivative of a function is a simple mathematical transformation of the equation. Functions that don't have known equations also have derivatives, though their exact values are often difficult to find exactly.

<img src=""https://www.dropbox.com/s/hc09sqspddye4j0/400px-Tangent_to_a_curve.svg.png?raw=1"" text=""The tangent of a curve is its derivative at that point"">

Any coordinate in a function where the derivative is `0` is called an ""optimum.""This is usually a place where the function value is either higher or lower than all of the surrounding values.

Machine learning discovers these locations in order to optimize how well a model fits data.","- derivative: not the function, but the speed at which the function changes
- anywhere the speed that the function changes is 0 is usually a place where it changes direction
- places where the derivative changes direction are locally maximal, or optimal
- difference between minimal, maxima, and optima","Give a talk about the above discussion. Briefly touch on the topics  of calculus that reveal the derivative, take the derivative of a few real functions.

Then give examples of ML datasets for which the function is not known, but optima still exist. Show that the optima can be either maximal or minimal. These are what we are looking to discover in ML.","The same as the I Do demo, except live. Bring up a screenshare and draw and talk about derivatives.

Take the derivative of three examples of differentiable functions `y = f(x)`.

Identify optima in three discrete datasets manually.","From three written functions, solve for dx/dy = 0. From five datasets, identify which specific data indices are optima by visualizing the data by hand.",,,,,Youtube: Sketching the derivative of a function,,,Functions and Optima,,Mathematical Foundations,Machine Learning Core,,1,1,,2
compute rmse between pairs of vectors and select the smallest,"The essence of k-nearest neighbor clustering, a fundamental of k-cross-validation, and the basis of the closest pair of points algorithm. What's not to like?",,"The distance between two points is often referred to as their ""similarity"". That is, two points `p_1` and `p_2`, for which the distance `d = sqrt(sum((p1+p2)^2))` are very similar! They are the same point! As their dissimilarity grows, so does their distance.","Computing a function over each data item is essential! Lets load up some datasets and iterate them, computing rmse as we go. Computing the brute-force solution to the Closest Pair of Points problem is `O(n^2)`. Lets do it!","Doing this using the recursive divide and conquer approach is challenging, but not too difficult. Divide up the points by `x_MAX/2` and recursively do so until only two points remain, then calculate their distance and unfold.

This is a challenging problem! Solve the brute force solution in the same manner as our group-coding session, then if you have the time work on the divide and conquer approach.",,,,,Wikipedia: Closest pair of points problem,,,High Dimensionality,,High Dimensionality,Machine Learning Core,,1,1,,2
explain the decreasing value of rmse as dimensions increase,RMSE is less informative the larger the space.,,"Just as magnitudes increase as dimensions increase, so does root mean squared error. Comparing error between models pointed at different dimensionalities will always lead you astray.","RMSE becomes ""noisy"" as the number of dimensions increase. The sum of squares of a vector tends toward zero as dimensions increase because each dimensions edges toward the origin. ",Create a plot ,,,,,Wikipedia: Curse of dimensionality,,,High Dimensionality,,High Dimensionality,Machine Learning Core,,1,1,,2
write a singular value decomposition of 1000 points in R^15 in python,,"* Create gaussian distributions for making random points
* Generate lots of random points
* Multiply points by rotation matrix","This exercise will help you with more fundamentals of data science, by generating random datasets from underlying funcftions.
",,,,,,,,,,Dimensionality Reduction,,High Dimensionality,Machine Learning Core,,0,,,0
graph the top two dimensions using PCA of a high dimensional data set,,,"Principal Components Analysis (PCA) is a great way to visualize data. When there are too many dimensions to create a visualization, just graphing two or three dimensions together tends to be not-very-informative. PCA uses a mathematical technique called Singular Value Decomposition (SVD) in order to determine which dimensions of a large dataset have the most variance, and what direction those dimensions point! The canonical basis vectors in 4d space [0,0,0,1], [0,0,1,0], [0,1,0,0], and [1,0,0,0] don't tend to contain the true spatial structure of the space. The orientation of the space is also determined by SVD, providing us the means to create plots of the ""most highly varied"" data in a set, which can lead to real intuition and great visualizations.","In this presentation we'll work through PCA on the iris dataset, demonstrating ways that even linear regression can be productive when you use PCA to get better data separation.",Create a PCA of a new dataset and demonstrate a separation that would be useful with linear least squares.,,,,,,,,Dimensionality Reduction,,High Dimensionality,Machine Learning Core,,0,1,,1
find suitable d3 template projects for great web presentations,,,,,,,,,,,,,Presenting for the public: LaTeX and D3,,Presenting,Machine Learning Core,,0,,,0
write a short LaTeX report about results,,,,,,,,,,,,,Presenting for the public: LaTeX and D3,,Presenting,Machine Learning Core,,0,,,0
create math equations in LaTeX,LaTeX is how academics in ML and CS write about their findings.,,"LaTeX is a markup language, just like HTML. It is more complicated and powerful as a pure markup language, but it doesn't include Javascript and is therefor much less powerful than the web. :)

LaTeX's great strengths are that it is always clean and attractively formatted, it includes powerful templates for writing articles for any journal or scientific community, and its mathematical notation engine is unparalleled. LaTeX is how researchers write about math.

The ML community has started moving away from LaTeX and toward powerful web driven tools like Jupyter and Colaboratory. However, you should all have a passing familiarity with LaTeX and the creation of LaTeX documents.

In this lesson we will practice:

1. Creating and templating LaTeX documents in ShareLaTeX
2. Basic math expressions
3. Subscripts and superscripts
4. More advanced expressions, sums, derivatives
5. Matrices, vectors
6. Greek letters
7. Figures
8. Citations","At one time installing LaTeX and learning the methods of LaTeX compilation were your first steps. Today, https://www.sharelatex.com is definitely the way to go.

![LaTeX, Evolved](https://www.dropbox.com/s/ked5hj5zmz6awva/Screenshot%202018-03-23%2015.27.06.png?raw=1)

Using ShareLaTeX means you don't have to mess with installing plugins or other dependencies - you get great, professional looking formatting in a familiar web presentation.","Report on your favorite insight so far for the course. Write a few paragraphs on the subject, with math, figures, and citations. Export it to pdf and email it to thomson@lambdaschool.com",,,,,"ShareLaTeX: Getting started,ShareLaTeX: Templates",,,Presenting for the public: LaTeX and D3,,Presenting,Machine Learning Core,,1,1,,2
"create a simple website with a description, data, and d3 template",ML results always need presentation.,,d3 is one of the most popular tools for displaying data on the web. The web is where you will be presenting to colleagues.,,,,,,,,,,Presenting for the public: LaTeX and D3,,Presenting,Machine Learning Core,,1,,,1
copy data from a spreadsheet or matrix into a d3 website,,,,,,,,,,,,,Building an ML Portfolio,,Presenting,Machine Learning Core,,0,,,0
"describe the process to create a local plugin to generate ML data, making it available to a d3 website",,,,,,,,,,,,,,,,,,0,,,0
gather data from a remote api and display it on a d3 website,,,,,,,,,,,,,,,,,,0,,,0
run a library for three supervised learning algorithms,"Supervised learning is an important term to know right now. Supervised learning describes the class of all Machine Learning techniques and algorithms that are used for classification or regression of previously unknown data.

The technique is as follows:

Take a large dataset of arbitrary dimension and manually label each value in the dataset. Train an ML model to correctly classify all of the values in the labelled dataset, and to produce the correct classifications on new values from the test set. Now, using real world data that has not been previously classified, the accuracy of the model on the test data is assumed to apply to the real world data.

In this way, we can train a model to classify kittens from a training and test set of kitten and non-kitten images. Any future image that has not previously been tagged can be measured by our model, and a classification produced without the need of a human observer.

There are a great many methods for creating supervised learning models. Lets briefly study the following five:

Neural networks


Support vector machines
Regression
Decision Trees
Random Forest",,"Explain the basis and purpose of supervised learning.

Examples:
Cat/dog identification (classification)
Outdoor temperature (regression)
",Load data from a dataset into a modelling library and train/test it using that library. Demonstrate outcomes.,You load a machine learning library in TensorFlow and classify cat/dogs,,,,,Wikipedia: Supervised learning,,,Supervised Learning,,The Machine Learning Framework,Machine Learning Core,,1,1,,2
adjust hyper parameters of three supervised learning algorithms,"Supervised learning is, at its core, simply a carefully designed mathematical approach to organizing large sets of data. The organization of such a dataset is only useful when it produces outcomes that are recognizable, intuitive, and satisfying to human brains. Machine Learning can be applied to literally any data set, but doesn't always produce results that are interesting.

This objective describes a few examples of supervised learning that have produced valuable and interesting results to humans. These successes don't guarantee what types of successes we will have in the future, but they can help us decide which types of models might work with different problems.",,Tell the story above - supervised learning has been very successful in certain use cases. Lets examine them.,"Supervised learning works really well with:

- handwritten digit recognition

Why? How does one structure the data to make it recognizable. Can we identify anything about it that makes success likely?",Write a LaTeX document about useful applications of supervised learning.,,,,,,,,Supervised Learning,,The Machine Learning Framework,Machine Learning Core,,1,1,,2
explain the difference between accuracy and precision,,,,,,,,,,,,,,,,,,0,,,0
can describe with some proficiency what AUC means,"Classification algorithms, unless ""perfect"", require tuning in order to produce the most desirable results.

One of the more unintuitive tunings required of classification systems involves their ""receiver operating characteristic curve"", or ROC curve.

Students should learn the fundamental language of the ROC curve: specifically sensitivity, specificity, and precision.","Know the equations for sensitivity, specificity and precision.",Describe the ROC curve and what it means in detail.,"Find some data from Kaggle, run it, and produce an ROC curve (this can be very time consuming).","Use a publicly available, pretrained model, to produce an ROC curve.",,,,,Wikipedia: ROC Curve,,,Model Tuning,,The Machine Learning Framework,Machine Learning Core,,1,1,,2
manually select a test/train/validation set to run a single controlled experiment,"Supervised learning involves taking a large collection of well understood, pre-classified data, and training a model on that data. The data is divided into two sets: training and testing.

## Training set
A fraction of the full data set. The training set contains the proper labels for each item. When fully trained, the model should have 100% accuracy for each item in the training set. The portion of the dataset not selected for training is then used for testing. Choosing the right ratio of training-set size and testing-set size is a hyper-parameter of model configuration.

## Test set
The test set is used after the model has been trained in order to measure its accuracy. The correct classification for each vector is removed, then compared against the model output for the class prediction. If they are equal, the model has correctly predicted this item in the test set.

## Set size ratio
Choosing the correct ratio of test and training data is a challenging hyper parameter problem. If the training set is too large, there is a danger of over-fitting the data to the training set. If it is too small, then accuracy of the model will be reduced. A common rule of thumb is 90% training set, 10% test set.",,"Here's a dataset from a kaggle source. We can separate it by choosing random rows, writing a function like this. The training set won't have classification labels, the testing set will.",Do it again,Pull your own dataset and write a function to separate it into training and testing sets.,,,,,,,,Model Tuning,,The Machine Learning Framework,Machine Learning Core,,1,1,,2
describe the general implementation of two clustering algorithms,,,,,,,,,,,,,Clustering,,"Unsupervised Learning, Unsupervised Learning","Machine Learning Core, DS - Annex",,0,,,0
identify other unsupervised ML models other than clustering,,,,,,,,,,,,,Clustering,,"Unsupervised Learning, Unsupervised Learning","Machine Learning Core, DS - Annex",,0,,,0
give two examples of unsupervised learning providing new insight via data mining,,* Cluster,,,,,,,,,,,Clustering,,"Unsupervised Learning, Unsupervised Learning","Machine Learning Core, DS - Annex",,0,,,0
can implement a simple feed-forward perceptron,,,Remember what we learned in the main lecture? Lets go over that one time.,"Neural nets are:

* A cool drawing
* A layer of ""neurons"", that is, an array of floats. Each neuron is a weight.
* A bias for each neuron. The bias of the neuron says how strong each connection is to its _next_ neuron. Biases are a parallel array of floats.
* A set of output neurons: the sum of all the weighs and biases
* A rectifier function for each neuron. This just caps the value of any neuron and doesn't let it ""go crazy"". The original was the Sigmoid (1), followed by the ReLU (2), followed by the ""Smooth ReLU"", (3). Typically all three can be represented with \sigma() (4).",,,,,,,,,,,,,,0,,,0
can implement a three-layer NN with 10 neurons per layer with back propagation,This is the real deal.,,"This NN has three layers each with 10 neurons, and two bias layers connecting them.

```
n_0 = np.array([0,0,0,0,0,0,0,0,0,0,0])
b_0 = np.array([0,0,0,0,0,0,0,0,0,0,0])
n_1 = np.array([0,0,0,0,0,0,0,0,0,0,0])
b_1 = np.array([0,0,0,0,0,0,0,0,0,0,0])
n_2 = np.array([0,0,0,0,0,0,0,0,0,0,0])
// np.random.rand([1,10]) <- do this instead
```

`n_2` is the output layer.

Now we write a simple function that multiplies a set of ten values v with a layer of neurons n, then adds a bias term b. We iterate over our set of neuron layers, calling this function each time like this:

```
neuron_function(input, layer, bias):
    return sigma(input * layer + bias)
```
TODO the above sigma function is not quite right, how do the terms combine exactly?

input to each layer becomes the output of the preceeding layer.

When the iteration forward is complete, we need to compute backpropagation back up the layers, correcting `n` and `b`.","Ok, I already did the forward propagation. Lets work through backprop again one more time together.","Can you write the code? Submit solutions to the Kaggle MINST dataset. :)

Don't worry! This is hard! Luckily great libraries have been made to do this stuff automatically for us. We just get to parameterize it. :)",,,,,,,,,,,,,1,1,,2
can loosely describe the derivation of back propagation,"Learn backprop. This is the main reason you need to know calculus in ML! However, you don't have to invent it. :)",,"Backprop takes the derivative of x - t, where x is the final prediction of the neural net and t is the target value it is supposed to match. This works because of careful consideration of what functions create the final value `x - t`, then using a calculus trick called the ""Chain Rule"" to call the derivative of those functions the same as the derivative of `x - t`.
","Time to work through this again. If you are struggling, you better be writing down every single thing that I also write down, in the same order. Write them down, then write down what I say about them around them.",TODO,,,,,,,,,,,,,1,1,,2
explain briefly the history of NN development prior to Deep CNNf,Deep CNN is the cause of the recent resurgence in ML popularity! Make sure you know as much as you can about this game changing technology.,,"Deep CNN adds 5 updated technologies to the Original Perceptron.

* Backpropagation
* ReLU activation function
* Max-pooling layers
* Convolutional neurons
* Lots of powerful computing hardware

",Build a CNN in TensorFlow. It is not deep yet.,"* Build your own CNN in TensorFlow.
* Read the paper by Hinton",,,,,,,,,,,,,1,1,,2
describe convolution mathematically,,,,,,,,,,,,,Deep CNNs,,Major Neural Network Architectures,Machine Learning Core,,0,,,0
describe convolution as signal processing,,,,,,,,,,,,,Deep CNNs,,Major Neural Network Architectures,Machine Learning Core,,0,,,0
explain in detail the layers and their structure in Hinton's seminal CNN,I said we would learn Hinton's benchmark.,,I review what Hinton's paper contains - what technologies and how they are combined.,Lets take a deep dive into the original paper and study each expression together.,Do you get it? Write a basic summary of what neural net they built.,,,,,,,,Deep CNNs,,Major Neural Network Architectures,Machine Learning Core,,1,1,,2
explain why Deep Learning depends on remote processing resources,Deep means fast.,,Lets talk about deep learning.,Lets talk about parallelization as a speed-up method in the field of combinatorics.,Make sure you have an account at a remote ML server farm.,,,,,,,,Deep CNNs,,Major Neural Network Architectures,Machine Learning Core,,1,1,,2
"use a remote service to implement Hinton's benchmark CNN, with comparable results",,,,,,,,,,,,,Deep CNNs,,Major Neural Network Architectures,Machine Learning Core,,0,,,0
describe an eigenface,Images are just really high dimension datapoints!,,"Images are critical to machine learning because they are one of the highest dimensional datasets that exist. Very few human pursuits can generate a dataset that stores 33,554,432 values per sample - the raw size of a 4k image in bytes.

Such high dimensionality is hard for Machine Learning algorithms, but easy for humans.


Vision pipeline:
Retinal subsampling and pixel creation
Transmission through image neurons to visual cortex
repeated convolution of arbitrary orientations and areas
distribution in cortex

TODO: Fix","Lets do SVD/PCA on some images, plot the results of the PCA, and look at the eigenfaces.",Compute the top three eigenvalues of the wine dataset. Is there anything we can intuit here?,,,,,,,,Computer Vision,,Major Neural Network Architectures,Machine Learning Core,,1,1,,2
create a .ppm image in rgb of any dimension,,,,,,,,,,,,,,,,,,0,,,0
allocate memory and fill with image data,,,,,,,,,,,,,,,,,,0,,,0
template match a simple template on a black and white image,,,,,,,,,,,,,Computer Vision,,Major Neural Network Architectures,Machine Learning Core,,0,,,0
describe three examples of important image processing techniques,These are the basics of Computer Vision.,"* Image raster array
* Pixel format
* Compression
* Iteration
* Convolution
* Corner detection
* Edge detection","Discovering what an image contains is built on the components listed in the rationale.

Images are stored like this:

```
x = np.array([[0,0,0,0,0],[0,0,0,0,0],[0,0,1,0,0],[0,0,0,0,0],[0,0,0,0,0]])
```
The above is a very simple 5x5 image with a white dot in the middle.

Images are actually stored like this:
```
y = np.array([[[0,0,0,1],[0,0,0,1],[0,0,0,1]],
[[0,0,0,1],[1,1,1,1],[0,0,0,1]],
[[0,0,0,1],[0,0,0,1],[0,0,0,1]]]);
```
The above is a 3x3 image with the white dot in the middle.

Images are usually represented in <a href=""https://en.wikipedia.org/wiki/RGBA_color_space"">RGBA format</a>. RGBA means that one number is stored for each of the red, green, blue, and alpha (transparency) values for each pixel. The contents of your computer screen right now is just a long list of [R,G,B,A] tuples, uploaded to your graphics card.

Unfortunately, real images are almost always compressed (because a long list of 8-bit R,G,B,A values takes up a lot of space). This compression and format encoding makes up the greatest difficulty in all of Computer Vision and cannot be taught here. Remember any time you want to read a new image, you need to figure out what format it is and how to decode it.

<a href=""https://en.wikipedia.org/wiki/Image_file_formats"">Image file formats</a>

There are also video file formats, which are even more difficult.

# Iteration

Iteration is the method used for traversing image pixels and gathering information about them:

```
image = np.array(np.random.rand(20,20));
for y, column in enumerate(image):
    for x, pixel in enumerate(column):
        print(pixel)
```
Often when we import images we separate the channels into separate images so that the RGBA notation is not required, as you see above. 1 ""channel"" per image is the easiest.

The above is usually written in other languages akin to:
```
for(int y = 0 ; y < image.width ; y = y + 1) {
  for(int x = 0 ; x < image.height ; x = x + 1) {
    print(image[x][y]);
  }
}
```

Be ready to identify both.

# Convolution

Convolution is a special case of iteration, and has deep roots in Signal Theory. You will learn more details about convolution in an upcoming Objectives Lesson.

<img src=""https://www.dropbox.com/s/1rwmwkg3wuicncz/convolution_sum.gif?raw=1"" alt=""The equation for convolution: sum of (image values times convolution mask values)"">

```
i is the image we are iterating over
m is called a convolution ""mask"", it is another small image.
```

Convolution involves performing some operation on the neighborhood of pixels that surround the current position of iteration. So, if `pos` contains the current `x,y` values from our iteration

```
def convolve_image(x,y):
    result = 0
    for i, mask_value in enumerate(mask):
        mask_middle_point = len(mask)/2
        result = result + mask_value * image[x-i,y]
```

TODO: Drawing of 4x4 c


# Corner Detection

Corner detection is a special case of convolution. Instead of summing the values multiplied by the mask, sum the difference of adjacent orthogonal (or contra-lateral, or perpendicular) pixels.

TODO: Draw a picture of corner detection

Locations where the sum is higher a threshold are ""corners"". The threshold could be some ratio of the mean ""cornerness"" of the whole image, the median, or an arbitrarily chosen value. 

TODO: Write code for corner detection

# Edge Detection

Edge detection takes a lesson from corner detection, summing the differences of adjacent pixels in the horizontal and vertical directions. Edges are then pooled into a special data structure.

TODO: Describe Hough transform in more detail or postpone for later lesson or put into Objective.","Lets convert from .png to .ppm, load the image in python, iterate over its values, and create a new image containing its corners.","Find the corners in the following image: 

TODO: Image

Your threshold is 1.4.",,,,,,"Wikipedia: Convolution,Wikipedia: Image file formats,Wikipedia: RGBA Color Space",,Computer Vision,,Major Neural Network Architectures,Machine Learning Core,,1,1,,2
find corners in an image,Corners are the most basic feature in an image - anything simpler is just a pixel!,,,,,,,,,OpenCV,,,Computer Vision,,Major Neural Network Architectures,Machine Learning Core,,0,,,0
vector magnitude,,,,,,,,,,,,,,,,,,0,,,0
draw `y = sin(x)` using R,"ML students should know how to create visualizations in any of the primary languages popular with data science programmers. This lesson teaches basic plotting in R.

`brew install R`","* R plotting is considerably more sensitive than numpy, with many more variables
* Remember when googling for R solutions to use R/Splus, since R is a horrible index term in Google.",Here I plot `sin(x)` as we've seen in so many other languages.,"This time, I'll generate a small set of random data points and graph them as such.","Graph the following function: `5*x^2 * 990*sin(x)`.
Is there an optimum of this function? Where is it? It is trivial to take the derivative of this (known) function. Can you solve it for where it is equal to 0?

<img src=""https://www.dropbox.com/s/4u8ow0k01p5pkk2/Screenshot%202018-02-15%2017.45.58.png?raw=1"" alt=""A graph in R of the above function"">",,,,,,"Quick-R,R Plot Graphical Parameters",,Data Visualization,,Data and Visualization,Machine Learning Core,,1,1,,2
draw `y = sin(x)` in matlab/octave,"Matlab is one of the most powerful mathematical programming languages. It contains dozens of high powered libraries for numerical programming, and has many dozens more for sale. Luckily for us, the boom in Machine Learning popularity and the growth of tools like TensorFlow means we don't have to buy Matlab anymore!

Last I checked the basic annual license for Matlab, professionally, is $800/yr. Adding a powerful tool like a Convolutional Neural Network library might cost an additional $5000/yr.

`octave` is the open source competitor for Matlab. It doesn't come with the amazing business agreements one can establish for a $5000/yr library plus support; However, its syntax perfectly matches that of Matlab.

`brew install octave`",,Let's plot `sin(x)` again!,"This time, I'll generate a small set of random data points and graph them as such.","Graph five dots in Octave: [[-1,0],[-1,-1],[0,0],[1,-1],[1,1]].
* Is this a unit square?
We call the center the origin, or sometimes centroid. 
You can center any set of points around [0,0].
* Can you draw ten points centered around [10,10]?",,,,,,"GNU Octave 2d Plots,GNU Octave",,Data Visualization,,Data and Visualization,Machine Learning Core,,1,1,,2
identify the relationship between spreadsheets and data,"A spreadsheet is data. Every time you hear someone talking about data, imagine a giant Microsoft Excel table in your head. Or a small one. ""Big Data"" is a table with 10 petabytes of rows in it, spread across multiple machines invisibly.

Any time a measurement is made, that measurement is added to a table row somewhere. Machine Learning is the process of importing spreadsheets into carefully thought-out numerical methods and performing fast calculations on them.",,"I tell you about data and types of spreadsheets, including: 
* Microsoft Excel 
* Open Document Format
* CSV delimited
* numerical matrices.",I'm going to import a spreadsheet from Excel and save it to CSV. Lets play with the ways we can edit and visualize this data.,"Type up a spreadsheet in CSV, import it, and graph it in matplotlib.",,,,,,,,,,,,,1,1,,2
identify five different types of data,Data comes in many varieties.,,"I'll talk to you about Qualitative vs Quantitative data as the basic breakdown, followed by types of Qualitative data.

In general, Machine Learning only works with quantitative data. Luckily, there are ways of transforming quantitative data into qualitative data.",I write code that converts qualitative data into quantitative data for you.,"Observe the following table:

##### Weather data
| temp | date | time | barometric pressure | humidity % | latitude | longitude | estimated chance of rain | cloudy | wind direction | wind speed
| 72 | 2018-01-01 | 9:25 | 1.1 | 43 | 40.125 | 73.592 | 10 | false | 270 | 4

Classify each column into one of the five types of data.",,,,,Google: Types of data,,,,,,,,1,1,,2
convert a csv file into a numpy data frame,Data always needs to be converted from one form into another. This objective will train you up on data type conversions from one format to another.,,"I write up a .csv file, then import it into numpy, and graph it.","Lets get together and play with data types. Parsing data is not a skill that is going away any time soon, get used to it! Usually there's a library already written...","Time to import your own .csv file into numpy! Once you've done so, calculate the min, max, and average values of each column and graph them.",,,,,,,,,,,,,1,1,,2
convert an excel spreadsheet into csv data,Excel spreadsheets are slightly more popular than .csv format.,,Lets take a look at an excel file. Can we parse this easily?,Lets try again. What if I Google for a library?,"This isn't something you can do yourself. Instead, get the library and make it work for you!",,,,,,,,,,,,,1,1,,2
create a data frame containing 100 x/y values for sin(x) and plot it,"2d data plots always have two axes, but they're not usually ordered.",,"2d graphs are always plotted along two dimensions. Up to this point, we've always used small and continuous values of `x` in order to calculate some `y = f(x)` and then plot it.

In reality, data comes in large vectors of values that may or may not be correlated, but they are almost never sorted in order. We can make informative 2d graphs of any two dimensions.","In this lesson, we'll graph two dimensions of a random data frame simultaneously. `x` and `y` are independent variables that adjust the shape of our plot, but they aren't sequenced in time or any other way.",Create a DataFrame object containing 100 random x/y pairs and plot them such that it transforms into a beautiful sin graph. Now plot them without the `x` axis to see a mess of noise.,,,,,,,,,,,,,1,1,,2
normalize a vector into a magnitude and a unit vector,"Every point, regardless of its dimensionality, is a unit vector and a magnitude.",,Previously you've learned to normalize vectors. This lesson demonstrates that the magnitude of a point in high dimensional space is generally larger than the magnitude of a point in low dimensional space. This is one of the reasons that data normalization is important.,"Lets normalize vectors in 3-space, 10-space, and 1000-space.",,,,,,,,,High Dimensionality,,High Dimensionality,Machine Learning Core,,1,,,1
create a website demonstrating PCA using d3 or another JS graphing library,,,,,,,,,,,,,Building an ML Portfolio,,Presenting,Machine Learning Core,,0,,,0
make list of three interesting portfolio pieces worth developing into their personal website,,,,,,,,,,,,,Building an ML Portfolio,,Presenting,Machine Learning Core,,0,,,0
build a simple resume showcasing CS and ML skills for job applications,,,,,,,,,,,,,Building an ML Portfolio,,Presenting,Machine Learning Core,,0,,,0
use heroku to create a simple static portfolio site,,,,,,,,,,,,,Building an ML Portfolio,,Presenting,Machine Learning Core,,0,,,0
explain the fundamentals of using a reward/punishment for model training,,,,,,,,,,,,,Reinforcement Learning,,Reinforcement Learning,Machine Learning Core,,0,,,0
identify the reward function of a car attempting to center in the lane,,,,,,,,,,,,,Reinforcement Learning,,Reinforcement Learning,Machine Learning Core,,0,,,0
use the Hough transform to find road lines,,,,,,,,,,,,,"Computer Vision for Self Driving Cars,Reinforcement Learning",,"Reinforcement Learning, Reinforcement Learning","Machine Learning Core, Machine Learning Core",,0,,,0
fit historical road lines to best fits of the current frame,,,,,,,,,,,,,Reinforcement Learning,,Reinforcement Learning,Machine Learning Core,,0,,,0
identify methods of correlating road lines with expected gps data,,,,,,,,,,,,,Simultaneous Location and Mapping (SLAM),,Reinforcement Learning,Machine Learning Core,,0,,,0
identify important road objects with CNN,,,,,,,,,,,,,Simultaneous Location and Mapping (SLAM),,Reinforcement Learning,Machine Learning Core,,0,,,0
use road data to predict expected speeds and other driving conditions,,,,,,,,,,,,,Simultaneous Location and Mapping (SLAM),,Reinforcement Learning,Machine Learning Core,,0,,,0
use weather data to inform driving behavior,,,,,,,,,,,,,Simultaneous Location and Mapping (SLAM),,Reinforcement Learning,Machine Learning Core,,0,,,0
update initial gps map with sensor inputs,,,,,,,,,,,,,Simultaneous Location and Mapping (SLAM),,Reinforcement Learning,Machine Learning Core,,0,,,0
draw a histogram of 2d data,Histograms summarize data visually.,,"A histogram is a particular mode of data visualization. A histogram shows the relative quantity of values in a vector, sorting the values into ranges or ""bins"" before displaying a bar group of the count of each value that falls into each bin. Histograms tell us about the distribution of data. 

![Setosa histogram of sepia length](https://www.dropbox.com/s/0xnyg2985dm4gnf/Screenshot%202018-03-23%2013.20.30.png?raw=1)

A histogram can have one mode, two modes, or more.",Lets histogram data into a few modes.,Find a unimodal and a bimodal feature in the UCI Wine Dataset. Submit the code to generate them via github.,,,,,,,,Data Visualization,,Data and Visualization,Machine Learning Core,,1,1,,2
describe object recognition and feature collection,,,,,,,,,,,,,Computer Vision for Self Driving Cars,,Reinforcement Learning,Machine Learning Core,,0,,,0
compute a cost function for a pair of road lines,,,,,,,,,,,,,Computer Vision for Self Driving Cars,,Reinforcement Learning,Machine Learning Core,,0,,,0
explain decision trees,,,,,,,,,,,,,,,,,,0,,,0
explain how random forests work,,,,,,,,,,,,,,,,,,0,,,0
implement a simple random forest algorithm,,,,,,,,,,,,,,,,,,0,,,0
describe the advantages of random forests,,,,,,,,,,,,,,,,,,0,,,0
"explain how regression is the simplest model for ""learning"" `y = f(x)`",,,Remember all that talk about `y = f(x)`? Regression is our first opportunity to identify `f(x)` without knowing it in advance.,"OLS Regression computes a line of ""best fit"" to a dataset. The dataset is only constructed of some finite set of values. Any value that is not in the dataset is unknown.

Consider the following 4 points:

<img src=""https://www.dropbox.com/s/w9ls4rzcyuuestz/Screenshot%202018-02-26%2017.46.29.png?raw=1"" alt=""Four points: 4, 2, 3, 1"">

The 4 points are four 2d samples of data: `[[1,4],[2,2],[3,3],[4,1]]`. The first value in each pair can be described as the independent variable, and the second value is the dependent variable. There exists some function `f(x)` so that 

    4 = f(1)
    2 = f(2)
    3 = f(3)
    1 = f(4)

What is `f(5)` equal to? Or `f(0)`, or any other value put into `f`. One goal of ML is to train a model that can predict what `f(x)` will be equal to for the unobserved values.

More advanced models produce better fits. There are many more ways of computing a function `f(x)` for the above data, which we will continue to study throughout the course.",,,,,,,,,Ordinary Least Squares Regression,,"Modeling, Regression",Machine Learning Core,,0,,,0
describe and implement a basic genetic algorithm,,,,,,,,,,,,,Evolutionary Algorithms,,Artificial Intelligence,Machine Learning Core,,0,,,0
describe and implement a basic ant colony optimization,,,,,,,,,,,,,Evolutionary Algorithms,,Artificial Intelligence,Machine Learning Core,,0,,,0
describe and implement simulated annealing,,,,,,,,,,,,,Evolutionary Algorithms,,Artificial Intelligence,Machine Learning Core,,0,,,0
Tokenize a body of text,"A document is comprised of sentences and sentences are made up of words. The first thing you want to do when you receive a document is break the document into a number of pieces such as sentences, words and punctuation marks. The process of decomposing a document into its constituent parts is called Tokenization.  

In text processing, we start off by making sense of the smallest or most granular units (i.e. words) and then progressively (as needed) work our way up the hierarchy to decipher the sentence, paragraph, document and the corpus.

The tutorial covers the following tokenizers:
1) Sentence Tokenizer - breaks the body of text into sentences
2) Line Tokenizer - breaks the body of text into lines
3) Space Tokenizer - splits the body of text based on the space character
4) Tweet Tokenizer - Since tweets contain special characters, special words, hashtags, and emojis, there is a special tokenizer i.e. TweetTokenizer that can be leveraged when dealing with tweets which contain special strings 
5) Word Tokenizer - It operates similar to the Space Tokenizer but breaks up the words and punctuation marks

In this session, we will be using the Word Tokenizer often.",,,"# Ensure nltk is installed correctly
import nltk

# Get all the data associated with NLTK – could take a while to download all the data

nltk.download('all')

# Import the relevant packages

from nltk.tokenize import LineTokenizer, SpaceTokenizer, TweetTokenizer
from nltk import sent_tokenize, word_tokenize

# Raw Text
text = ""Mr. Jones loves pizzas.\nHe has a Ph.D. in Pieology.""

#Initializing Line Tokenizer
lineTokenizer = LineTokenizer();

#output from LineTokenizer - breaks body of text into lines
print(""Line Tokenizer output :"",lineTokenizer.tokenize(text))

#Initializing Space Tokenizer
spaceTokenizer = SpaceTokenizer();

#output from SpaceTokenizer - splits the body of text based on the space character
print(""Space Tokenizer output :"",spaceTokenizer.tokenize(text))

#output from Sentence Tokenizer - breaks the body of text into sentences
tokenize_sentences = nltk.sent_tokenize(text)
for sent in tokenize_sentences:
    print(""Sentence:"")
    print(sent)
    print()

#output from Word Tokenizer - breaks up the words and punctuation marks
print(""Word Tokenizer output :"", word_tokenize(text))

#output from Tweet Tokenizer - use this tokenizer when dealing with tweets which contain special strings 

tweetTokenizer = TweetTokenizer()
print(""Tweet Tokenizer output :"",tweetTokenizer.tokenize(""This is a awesome #gesture: :-) :-D""))",,,,,,,Installing NLTK,,Natural Language Processing - Introduction,,"Natural Language Processing, Natural Language Processing","Machine Learning Core, DS - Machine Learning",,0,,,0
Filter out Stop Words,,,,,,,,,,,,,,,,,,0,,,0
Filter out Stop Words,"Stop words are words that do not add much to the semantic content of text – they are effectively filler words. Words such as ‘when’, ‘nor’, ‘or’, ‘and’, ‘the’ are considered as stop words and it is best to filter then out while processing text.  The Natural Language Toolkit comes with a stop word list that will be used to eradicate stop words. 

In the tutorial, we will cover how to filter out stop words.",,,"# print the English stop words
en_stopwords = set(nltk.corpus.stopwords.words('english'))
print(en_stopwords)

# Tokenize the sentence
from nltk.tokenize import word_tokenize
rawText = ""The dog ran up the steps and entered the owner's room to check if the owner was in the room""
tokens = word_tokenize(rawText)

# Print only the words that are not deemed as stop words
not_stop_tokens = [token for token in tokens if token.lower() not in en_stopwords]
print(not_stop_tokens)",,,,,,,,,Natural Language Processing - Introduction,,"Natural Language Processing, Natural Language Processing","Machine Learning Core, DS - Machine Learning",,0,,,0
Utilize stemming to derive the base form of a word,"Stemming is a technique to uncover the base form of a word without any suffixes. Many variations of words carry the same meaning, for example: drive and driving. A stemming algorithm removes the suffix and returns the stem of the word which in our simple example is drive. Search engines utilize stemming for indexing words. Storing all forms of a word would be highly redundant and inefficient. Instead a search engine stores only the stems, greatly shrinking the size of index while enhancing retrieval accuracy.

In the tutorial, we will cover 2 Stemming algorithms i.e.
1)	Porter Stemming Algorithm
2)	Lancaster Stemming Algorithm

The Lancaster Stemmer is greedier than the Porter Stemmer. It tries to eradicate as many characters as possible from the end. However, the Porter Stemmer is usually the default algorithm utilized for stemming.

One of the drawbacks of Stemming is that it results in considerable data loss which detracts from truly understanding the semantics of text. Therefore as part of the next objective, we will explore Lemmatization.",,,"#Importing the Stemmers and Word Tokenizer
from nltk import PorterStemmer, LancasterStemmer, word_tokenize

rawText = ""My name is Thomson Comer, commander-in-chief of the Machine Learning program at Lambda school. I am creating the curriculum for the Machine Learning program and will be teaching the full-time Machine Learning program beginning in April 2018.""

tokens = word_tokenize(rawText)

pStemmer = PorterStemmer()
porter_Stems = [pStemmer.stem(t) for t in tokens]
print(porter_Stems)

#You will notice that the suffixes such as ""ing"" has been removed. 
#In some case, trailing 'e' has been removed as well.

lStemmer = LancasterStemmer()
lancaster_Stems = [lStemmer.stem(t) for t in tokens]
print(lancaster_Stems)

#You will notice that the suffixes such as ""ing"" has been removed. 
#However in the case of Lancaster Stemmer, trailing 'e', 'um', 'er', 'e', 'a' have been removed as well.",,,,,,,,,Natural Language Processing - Introduction,,"Natural Language Processing, Natural Language Processing","Machine Learning Core, DS - Machine Learning",,0,,,0
Understand how Lemmatization differs from Stemming,"A Lemma is a base form of a word. Unlike a stem which is obtained by removing the suffixes, a lemma is a dictionary-matched base form and removes suffixes only if it can find the resulting word in a dictionary. Even though Lemmatization performs better at uncovering the base form of a word than Stemming, it is not completely perfect. 

In the Lemmatization example covered in the tutorial, we will use WordNet which is a lexical database for the English language, created by Princeton University, and is part of the NLTK corpus.

As you step through the tutorial, you will uncover that the lemmatizer makes fewer mistakes than the stemmer. As a result, the lemmatizer does a far better job of getting us to a base form as compared to the stemmer.",,,"#Import WordNet
from nltk.corpus import wordnet

#Import packages
from nltk import word_tokenize, PorterStemmer, WordNetLemmatizer

#Raw Text
rawText = ""My name is Thomson Comer, commander-in-chief of the Machine Learning program at Lambda school. I am creating the curriculum for the Machine Learning program and will be teaching the full-time Machine Learning program beginning in April 2018. We are driving full steam forward to have enough content ready for the launch.""

#Break the body of text into tokens
tokens = word_tokenize(rawText)

#Apply from the Porter Stemmer
pStemmer = PorterStemmer()
porter_Stems = [pStemmer.stem(t) for t in tokens]
print(porter_Stems)

#Apply the WordNet Lemmatizer
lemmatizer = WordNetLemmatizer()
word_lemmas = [lemmatizer.lemmatize(t) for t in tokens]
print(word_lemmas)

#The WordNet Lemmatizer is essentially doing a match against the WordNet lexical database",,,,,,Using Spacy to find words and phrases,,,Natural Language Processing - Introduction,,"Natural Language Processing, Natural Language Processing","Machine Learning Core, DS - Machine Learning",,0,,,0
Use Part-Of-Speech (POS) Tagging to label words in a sentence,"Part-Of-Speech (POS) tagging indicates what type of word in a sentence each word is. It informs you what is a verb, what is a noun, what is a pronoun, what is an adjective, etc. 

The tutorial illustrates how the POS capabilities offered by the NLTK library can be utilized to tag the parts of speech per sentence. 

For your reference, the link below provides definitions for a majority of the tags in the POS tag list:

https://stackoverflow.com/questions/15388831/what-are-all-possible-pos-tags-of-nltk


",,,"#Import nltk
compoundSentence = ""Sacramento is the Capital of California and Washington DC is the Capital of the United States""

#tokenize the sentence
tokensInSentence = nltk.word_tokenize(compoundSentence)

#Retrieve the parts of speech
posTags = nltk.pos_tag(tokensInSentence)
print(posTags)

# A list of tuples is output
# Each tuple contains the token i.e. work and the POS identier
#The POS identifiers for this example is outlined below

#NNP -- proper noun, plural
#VBZ -- verb, 3rd person sing. present
#DT  --  determiner
#NN  -- noun, singular 
#IN  --  preposition/subordinating conjunction
#CC --  coordinating conjunction
#NNPS -- proper noun, plural





",,,,,,,,,Diagnosing the structure of text,,Natural Language Processing,Machine Learning Core,,0,,,0
Utilize Dependency Parsing to glean chunks of meaning and relations,"POS tagging labels words in a sentence as adjectives, verbs, nouns, etc. as we saw in the tutorial. However at times, there is a need to determine the dependency between the words and understand relations beyond merely tagging the parts of speech. 

For Dependency Parsing, we will use spacy which is one of the newer NLP libraries in Python.

For your reference, the link below provides the list of dependency tokens (scroll down to the Dependency Tokens section):

https://stackoverflow.com/questions/40288323/what-do-spacys-part-of-speech-and-dependency-tags-mean","The instructions to download spacy can be accessed via the following link:
https://spacy.io/usage/",,"#Import spacy
import spacy

#Load English version of tokenizer, tagger, parser
nlp = spacy.load('en')

# Define a function to show what word each word depends upon
def show_dependency(rawText):
    tokens = parser(rawText)
    for token in tokens:
        print(""{} : {}"".format(token.orth_,token.dep_))

# Call the function
show_dependency(""The batter hit the ball out off AT&T park into the pacific ocean."")


#The Dependency Tokens for this example are outlined below:

The : det --- determiner
batter : nsubj --- nominal subject
hit : ROOT --- root
the : det --- determiner
ball : dobj --- direct object
out : prt --- particle
off : prep --- prepositional modifier
AT&T : compound --- compound
park : pobj --- object of a preposition
into : prep --- prepositional modifie
the : det --- determiner
pacific : amod --- adjectival modifier
ocean : pobj --- object of a preposition
. : punct --- punctuation",,,,,,,,,Diagnosing the structure of text,,Natural Language Processing,Machine Learning Core,,0,,,0
Determine the head of a sentence,"The head of a sentence governs the central structure of the sentence. It is the most important word of the sentence and it is usually a verb. In the previous example, the word ""hit"" is the root around which the rest of the sentence revolves. The word ""hit"" has a direct object i.e. the ball and a subject i.e. the batter.

The tutorial will showcase how to determine the head of a sentence. ",,,"#Import spacy
import spacy

#Load English version of tokenizer, tagger, parser
nlp = spacy.load('en')

# Define a function to show what word each word depends upon
def show_dependency(rawText):
    tokens = parser(rawText)
    for token in tokens:
        print("" {} : {} : {} : {}"".format(token.orth_,token.pos_,token.dep_,token.head))

#print the header
print(""token : POS : dep. : head"")
print(""#########################"")

# Call the function
show_dependency(""The batter swung the ball out off AT&T park into the pacific ocean"")

#In the above example, the central structure of the sentence is dictated by the ROOT which is the word ""hit""",,,,,,,"Dependency Parser Visualizer: https://demos.explosion.ai/displacy/,Blog Post: Parsing English in Python",,Diagnosing the structure of text,,Natural Language Processing,Machine Learning Core,,0,,,0
Find Named Entities in a body of text,"So far, we have explored part-of-speech tagging, dependency parsing, and identifying the head of a sentence. Now, we will look at finding proper nouns or named entities. Named Entity Recognition (NER) helps understand what a body of text is about; essentially, it provides an insight into what is being referred to in the body of text. For example: Relationships between different named entities (like who works where, when the event takes place etc…) can be extracted using NER.

NLTK has built-in support for NER which helps extracts named entities such as PERSONS, ORGANIZATIONS, LOCATIONS, THINGS, etc.

In the tutorial, we will leverage NLTK to identify the named entities in a body of text.

Commonly Used Types of Named Entity

ORGANIZATION 
PERSON 
LOCATION 
DATE 
TIME 
MONEY 
PERCENT 
FACILITY
GPE (Geo-Political Entity)


 ",,,"#Import word tokenizer
from nltk.tokenize import word_tokenize

#In this example, we will use the data from the treebank corpus which provides a syntactic parse for each sentence

#read the first tagged sentence from the treebank corpus
rawText = nltk.corpus.treebank.tagged_sents()[0]

#print the first tagged sentence read from the treebank corpus to review the structured of the tagged sentence
print(rawText)

#Note that the 'ne_chunk' function requires part-of-speech tags to add Named Entity labels to the sentence.  The output from the 'ne_chunk' function is a nltk.Tree object. 

#A classifier which has been trained to recognize NE’s is provided by NLTK and is accessed via the function nltk.ne_chunk(). If the argument “binary” is set to “True”, then the named entities are just tagged as NE (as in the code below). Otherwise, the classifier specifies the entity type such as ORGANIZATION, LOCATION, GPE, PERSON, etc. 

#Extract the Named Entities
chunks = nltk.ne_chunk(rawText, binary=""TRUE"")
print(chunks)

#Review the tree-like structure
chunks.draw()

#Named Entity Recognized
# (NE Pierre/NNP Vinken/NNP)

#Extract the Named Entities
chunks = nltk.ne_chunk(rawText)
print(chunks)

#Named Entity Recognized with Entity Type. Best Practice to follow: The NE classifier provided by NLTK is not always 100% accurate (as seen below); therefore, review the categorization before committing to it
#(PERSON Pierre/NNP)
#(ORGANIZATION Vinken/NNP)

#Good practice to follow: Assign IOB format to the POS-tagged words

#IOB format is useful when named entities span multiple words
#The IOB tagging system contains the following tags
#I - Inside Chunk
#0 - Outside Chunk
#B - Beginning Chunk

#Here is the sample code to do that

#Import the conversion function
#from nltk.chunk import tree2conlltags
#iob_tagged = tree2conlltags(rawText)

#Then apply the ne_chunk function to the IOB formatted data
#chunks = nltk.ne_chunk(iob_tagged)
",,,,,,,,,Diagnosing the structure of text,,Natural Language Processing,Machine Learning Core,,0,,,0
Determine document similarity using TF-IDF,"To determine document similarity, we will utilize the Gensim library to compute TF (Term Frequency) - IDF (Inter-Document Frequency). Before we walk through a tutorial, let's quickly review the concepts behind TF-IDF.

While comparing documents, we should account for how many times a word shows up in a document. This is the ""Term-Frequency"" portion of TF-IDF. However while performing the comparison, more weight should be given to ""rare"" words rather than the ""common words"" that occur in documents. The ""IDF"" portion is the relative strength of the words (or how common is the word)  across the documents. A log function is leveraged to compute ""IDF"".

IDF = log (total # of documents/# of document containing the term)

Here is an example:

We have 2 files:

File 1: Cheetahs are amazing to watch

File 2: Spotting a Cheetah in the Jungle is difficult

After tokenization and elimination of the stopwords, we will be left with:

File 1: Cheetahs amazing watch

File 2: Spotting Cheetah Jungle difficult

The “Term Frequency” is the relative strength  of the word in the document i.e. in the case of Cheetahs (file 1) it is 1/3

The “Inter Document Frequency” is the relative strength of the words across the documents or files i.e. in the case of Cheetah(s) it is log(2/2)

We will use the Gensim library to do the computation for us.



",,,"#Import word tokenizer
from nltk.tokenize import word_tokenize

#Raw documents

raw_documents = ['The dog ran up the steps and entered the owner\'s room to check if the owner was in the room.',
             'My name is Thomson Comer, commander of the Machine Learning program at Lambda school.',
             'I am creating the curriculum for the Machine Learning program and will be teaching the full-time Machine Learning program.',
            'Machine Learning is one of my favorite subjects.',
            'I am excited about taking the Machine Learning class at the Lambda school starting in April.',
                'When does the Machine Learning program kick-off at Lambda school?',
                'The batter hit the ball out off AT&T park into the pacific ocean.',
                'The pitcher threw the ball into the dug-out.']

 # A function that tokenizes the text
def convert_to_tokens(text):
    tokens = word_tokenize(text)
    return tokens

# Create a Gensim document that contains a list of tokens
gensim_doc = [get_tokens(text) for text in raw_documents]
print(gensim_doc)

# Use the Gensim document to create a dictionary - a dictionary maps every word to a number
dictionary = gensim.corpora.Dictionary(gensim_doc)
# Examine the length of the dictionary
num_of_words = len(dictionary)
print(""# of words in dictionary: {}"".format(num_of_words))
for index,word in dictionary.items():
    print(index,word)

# Output the string/word associated with the index
print(dictionary[5])

# Output the index associated with the string/word
print(dictionary.token2id['dog'])

#Illustrating the concept behind bag of words
# Create bag of words to showcase term frequency
# Compare the words below to the words in the dictionary
# Words not in the dictionary are ignored
bag_of_words = dictionary.doc2bow(['Machine','Learning','is','a','lot','of','fun','.', 'Lambda', 'School', 'rocks', '.'])
print(bag_of_words)

# Convert the list of tokens from the gensim_document (created above) into bag of words
# The bag of words highlights the term frequency
# each element in the bag of words is the index of the word in the dictionary and the # of times it occurs
bag_of_words_corpus = [dictionary.doc2bow(gen_doc) for gen_doc in gensim_doc]
print(bag_of_words_corpus)

#Use Gensim to create a TF-IDF module
gensim_tfidf = gensim.models.TfidfModel(bag_of_words_corpus)

#Rewiew the 5th document
#Review the bag of words for the first document i.e. term frequency
#Review the Inter Document Frequency for each term in the bag of words
print(gensim_doc[4])
print(bag_of_words_corpus[4])
print(gensim_tfidf[bag_of_words_corpus][4])

# Generate the idf measure for another bag of words
another_bag_of_words = dictionary.doc2bow(['Machine','Learning','rocks',';','Lambda','School','is','fun','.'])
# Print the term frequency
print(another_bag_of_words)
# Print the relative strength across the different documents
print(tf_idf[another_bag_of_words])


#The Similarity class builds an index for a given set of documents
#Once the index is in place, queries like “Tell me how similar is this query document to each document in the index?” can be performed
#Reference: https://radimrehurek.com/gensim/similarities/docsim.html
sim_object = gensim.similarities.Similarity('/Users/dimplem.MBHARCH',tf_idf[bag_of_words_corpus], num_features=len(dictionary))

#Query to compare - determine tf and idf
query_to_compare = ""Machine Learning at Lambda school is awesome"".split()
query_to_compare_bow = dictionary.doc2bow(query_to_compare)
print(query_to_compare_bow)
query_to_compare_tfidf = tf_idf[query_to_compare_bow]
print(query_to_compare_tfidf)

#Determine document similarity
sim_object[query_to_compare_tfidf]",,,,,,,Document Similarities Query,,Comparing documents or words,,Natural Language Processing,Machine Learning Core,,0,,,0
Leverage Word Vectors (Word2vec)  to compare words,"A key challenge in Natural Language Processing is understanding the language. Text or speech is our main communication channel but the computer can only understand numbers. Therefore the words need to be converted to numbers. The process of converting words to numbers (i.e. vectors) is called Word Embedding. In this session, we will cover word2vec which is a popular algorithm for building vector representations of words (i.e. word embeddings).  The vector for each word is a semantic depiction of how that word is used in context. 2 words are closer in meaning if they share contexts (Reference: Distribution Hypothesis Theory - https://en.wikipedia.org/wiki/Distributional_semantics). The Distribution Hypothesis Theory states the following: 

Linguistic items with similar distributions or similar context have similar meanings.

Here is a simple example to clarify the underlying principle of the Distribution Hypothesis Theory:

Sentence 1: Traffic was light today
Sentence 2: Traffic was heavy yesterday
Sentence 3: Prediction is that traffic will be smooth-flowing tomorrow since it is a national holiday

Per the Distribution Hypothesis Theory, the words light, heavy, and smooth-flowing must be related in some way since they occur in a similar context (close to the word traffic). Similarly, the words today, yesterday and tomorrow are related since they appear next to a word indicating the state of traffic. Therefore, a word's meaning is governed by the context it occurs in.

Another example that highlights the principles that underpin the Distribution Hypothesis Theory is as follows:

Let’s take the word ‘mobile’. One of many meanings of this word is the ability to move freely and another one could be a handheld device. In the sentence: “I have become increasingly mobile with the purchase of a car” – we can easily glean that it is the former meaning of mobile. However in the sentence: I just purchased a new mobile phone – mobile takes on the latter meaning (i.e. handheld device).

Building on the insights provided by the Distribution Hypothesis Theory, let's construct a vector of words by counting context in order to decipher similar distributions or similar context. The table (attached image i.e. Vector of Words.jpg)  illustrates a vector of words where we have a column for every context for every word in a given source text. So for the given text ""It was the sunniest of days, it was the rainiest of days"", the vector of words is depicted in the attached image . The values in each cell highlight how many times the word occurs in the given context. The numbers in the columns constitute that word's vector. For example, the vector for the word ""sunniest"" is:
[0,	0,	0,	1,	0,	0,	0,	0,	0,	0]

We have a vector representation that is comprised of 10 dimensions since there are 10 possible contexts (as depicted by the column headers within the table). Once we have a vector representation for the words, we can conduct vector arithmetic (calculate the Euclidean distance between 2 words) to determine which vector representations are similar or closest to each other. In our example scenario, a quick cursory glance of the vector space surfaces that the words ""sunniest"" and ""rainiest"" are similar since they have identical vector representations and the Euclidean distance is 0. 

A common question that arises at this point is how to we handle a large corpus of text given that there will be many possible context to deal with - just dealing with a vector space of 10 dimensions in the example scenario was cumbersome enough. Luckily, instances of pre-trained word vectors are available that can be used to detect word similarities. We will leverage an instance of a pre-trained word vector from Google in the tutorial. 

However before we step into the tutorial and utilize Word2vec, I would like to highlight 2 variants of the Word2vec model i.e. 

1) SkipGram: This variant tries to predict the neighbors of a word.

Skip-grams: This variant tries to predict the neighbors’ of a word. In Skip-gram model, we take a center word and a window of context (neighbors) words to train the model and then predict context words out to some window size for each center word.

This notion of “context” or “neighboring” words is best described by considering a center word and a window of words around it. For example, if we consider the sentence “The speedy Proshe drove past the elegant Rolls-Royce” and a window size of 2, we’d have the following pairs for the skip-gram model:

Text:
The	speedy	Proshe	drove	past	the	elegant	Rolls-Royce

Training Sample with window of 2: (the, speedy), (the, Proshe)

Text:
The	speedy	Proshe	drove	past	the	elegant	Rolls-Royce

Training Sample with window of 2: (speedy, the), (speedy, Proshe), (speedy, drove)

Text:
The	speedy	Proshe	drove	past	the	elegant	Rolls-Royce

Training Sample with window of 2: (Proshe, the), (Proshe, speedy), (Proshe, drove), (Proshe, past)

Text:
The	speedy	Proshe	drove	past	the	elegant	Rolls-Royce

Training Sample with window of 2: (drove, speedy), (drove, Proshe), (drove, past), (drove, the)

The Skip-gram model is going to output a probability distribution i.e. the probability of a word appearing in context given a center word and we are going to select the vector representation that maximizes the probability.

2) Continuous Bag of Words (CBOW): This model tries to predict a center word based on the neighboring words. In the case of the CBOW model, we input the context words within the window (such as “the”, “Proshe”, “drove”) and aim to predict the target or center word “speedy” (the input to the prediction pipeline is reversed as compared to the SkipGram model).

A graphical depiction of the input to output prediction pipeline for both variants of the Word2vec model is attached. The graphical depiction will help crystallize the difference between SkipGrams and Continuous Bag of Words.","Download the pre-trained word vectors from Google. Access the pre-trained vectors via the following link: https://code.google.com/archive/p/word2vec

Scroll down to the section: Pre-trained word and phrase vectors

Get the archive:  GoogleNews-vectors-negative300.bin.gz

Un-tar/Un-zip the archive

We will reference to the pre-trained word vector in the tutorial

",,"#Import KeyedVectors which is used to perform operations on the vectors such as vector lookup, distance, similarity etc.
from gensim.models import KeyedVectors

#Get a reference to the downloaded pre-trained word vectors
vec_file_from_vector = '/Users/dimplem.MBHARCH/GoogleNews-vectors-negative300.bin'

#Load the pre-trained word vectors
model = KeyedVectors.load_word2vec_format('/Users/dimplem.MBHARCH/GoogleNews-vectors-negative300.bin', binary=True)

#Examine the first 100 keys or words
list(model.vocab.keys())[:100]

#Outputs the vector representation for the word ""elephant""
model['elephant']

#Examine the similarity between words
#In this case the cosine similarity is computed - quantifies the similarity between objects
# -1 implies that the words are opposite
# 1 implies that the words are the same
# 0 means that there is no similarity between the words
model.most_similar('elephant')

 #Review the similarity between 2 words
#Not always focused on semantic similarity (i.e. animal family) but also examine the context in which the words appear (i.e. dry, wet)
model.similarity('house', 'bungalow')

model.similarity('house', 'umbrella')

###############################################
#Train word2vec with own set of raw documents
###############################################
raw_content = ['The dog ran up the steps and entered the owner\'s room to check if the owner was in the room.',
             'My name is Thomson Comer, commander of the Machine Learning program at Lambda school.',
             'I am creating the curriculum for the Machine Learning program and will be teaching the full-time Machine Learning program.',
            'Machine Learning is one of my favorite subjects.',
            'I am excited about taking the Machine Learning class at the Lambda school starting in April.',
                'When does the Machine Learning program kick-off at Lambda school?',
                'The batter hit the ball out off AT&T park into the pacific ocean.',
                'The pitcher threw the ball into the dug-out.']

#Tokenize the body of text
from nltk.tokenize import word_tokenize
def get_word_tokens(text):
    tokens = word_tokenize(text)
    return tokens

#Iterate through the body of text and examine the tokenized content
import gensim
sentences  = [get_word_tokens(r) for r in raw_content]
print(sentences)

#Train the Word2vec model with tokenized content; size of the word vectors is 5; the word should show-up at least once in the corpus
model = gensim.models.word2vec.Word2Vec(sentences,min_count=1, size=5)

#Review the vector of words for a few of the tokens
#Ignore the warnings i case you get any while outputting the vector of words
print(model['curriculum'])
print(model['ocean'])
print(model['pitcher'])

#Output words most similar to 'favorite'
#Note: We have a very small sample training set for the output to be trusted
model.most_similar('favorite')

#Now we are going to train the model with more data - larger corpse
#The 20 newsgroups text dataset
#Fetch the data from the training subset
from sklearn.datasets import fetch_20newsgroups
text_from_corpus = fetch_20newsgroups(subset='train')

#provides the metadata for the data that is fetched
dir(text_from_corpus)

#Query the metadata
print (text_from_corpus.description)
print (text_from_corpus.filenames)
#Output the first file name
print(text_from_corpus.filenames[0])

#Outputs the  integer index of the category
print(text_from_corpus.target)
#Outputs the different categories

print(text_from_corpus.target_names)
#Output the # of posts across the different categories
len(text_from_corpus.data)

#Tokenize the body of text from each post
 def get_tokens(body_of_text):
    tokens = word_tokenize(body_of_text)
    return [token.lower() for token in tokens]

#Each post within the newsgroups is treated as a sentence
sentences = [get_tokens(document) for document in data]

#Train the Word2vec model
#Words should show up at least 3 times in the corpus of text
#The size of each word vector is 200 (i.e. dimension = 200)
model_news_group = gensim.models.word2vec.Word2Vec(sentences,min_count=3,size=200)

#Examine word similarity
model_news_group.most_similar('christ')

#Revisiting document similarity with doc2vec
#We a doc2vec model with the 20 Newsgroup dataset
#One of arguments to the model is a ""TaggedDocument"" so well will first go ahead and create a Tagged document
#Details on dec2vec is provided as one of the resource links

#Import TaggedDocument
from gensim.models.doc2vec import TaggedDocument

#Tokenize each of the posts within the newsgroups
sentences = [get_tokens(document) for document in text_from_corpus.data]

#Create a list of tagged_documents
#Every item within the tagged_documents list is a tokenized version of the posts 
tagged_documents_list = []
for i, sent in enumerate(sentences):
    tagged_documents_list.append(TaggedDocument(sent,[""sent_{}"".format(i)]))

#Examine the first item within tagged_document_lists
print(tagged_documents_list[0])

#Train the model with the list of Tagged Documents
#size of the vector is 300
doc2vec_model = gensim.models.doc2vec.Doc2Vec(tagged_documents_list, size=300)

#Get the vector representation for a new document
vec_representation = doc2vec_model.infer_vector('Machine Learning is one of my favorite subjects.'.split())
print(vec_representation)

#Determine the documents (posts) similar to the new document/post
doc2vec_model.docvecs.most_similar( [ vec_representation] )
",,,,,,,"Deep Learning with Word2vec,Video on Word2vec by Stanford University,Sklearn newsgroup dataset,Information on doc2vec model",,Comparing documents or words,,Natural Language Processing,Machine Learning Core,,0,,,0
Classify text in preparation for Sentiment Analysis,"Text Classification can be utilized for a number of different tasks. It can be used to classify a body of text into different categories such as sports, health, education, etc. It can also be leveraged to filter a body of text; a common usage scenario is whether an email is spam or not-spam. In this case (our first step in the sentiment analysis journey), we will use text classification for sentiment analysis. We will train a Naive Bayes classifier on a subset of the movie_reviews data set which is part of the NLTK corpus. Once the classifier has been trained, we will evaluate it's accuracy by testing it against a subset of data from the movie_reviews data set. 

Point to note: Training can be a time intensive process given the size of the underlying dataset. If you are planning to leverage the trained algorithm over and over again, then it would be prudent to save the algorithm to disk and load it back again when it is needed instead of undertaking the training process all over again. Saving the algorithm to disk and loading it back again is demonstrated towards the end of the tutorial.",,,"#Import nltk
import nltk

#Used to shuffle the data
import random

#Import the data set from the nltk corpus
from nltk.corpus import movie_reviews

#Examine the categories within the movie_reviews data set
movie_reviews.categories()

#Examine the files that constitute the movie_reviews data set
movie_reviews.fileids()

#Initialize a document list
documents = []

#store a list of words for each file ID, followed by the positive or negative label in one big list.
#each review has its own ID

for category in movie_reviews.categories():
    for fileid in movie_reviews.fileids(category):
        documents.append([movie_reviews.words(fileid), category])

#Examine the contents of the 10th element in the document list
print(documents[10])

#Examine the length of the document list
len(documents)

#Since we are training and testing, we need to randomize the items of a list in place. Otherwise, there is a high probability that we would train on all of the negatives, some positives, and then test only against positives. So, we shuffle.  Shuffle randomizes the items of a list.
random.shuffle(documents)

#Initialize a words list
words = []

#Iterate through all the words across the different reviews and append the lower case version of the word to the words list

for word in movie_reviews.words():
    words.append(word.lower)

#Find the most-used words in a text and count how often they are used
words_FD = nltk.FreqDist(words)

#Output the top 10 most commonly used words
words_FD.most_common(10)

# Honing in on the top 5,000 most common words
word_features = list(words_FD.keys())[:5000]

# Iterate  over the top 5,000  words and build a feature set that contains words from across the reviews including whether the word is among the top 5000 (True or False) words and the corresponding category 
#Decipher trends in specific types of words in positive or negative reviews

featuresets = []
for (review, category) in documents:
    words = list(review)
    features = {}

    for w in word_features:
        features[w] = w in words
    featuresets.append([features, category])

#Examine the first element in the feature set
featuresets[0]

#Let's go ahead and train our model
# We will use the Naive Bayes Classifier which is one of the most popular models used for Text Classification
#First we will split the feature set list in a training and testing subsets

training_set = featuresets[:1800]
testing_set = featuresets[1800:]

#Train the Naive Bayes Classifier model with the training data set
clf = nltk.NaiveBayesClassifier.train(training_set)

#Evaluate the accuracy of the model
nltk.classify.accuracy(clf, testing_set)

#Output the most informative features
clf.show_most_informative_features(15)

#Interpreting the output
#it appears 'x' number of times more often than in a positive or #negative review

#Code to save the classifier
#Open the 'naive_bayes.pickle' file and write in bytes (wb)
save_clf= open(""naive_bayes.pickle"",""wb"")
#Serialize the trained algorithm to file  
pickle.dump(classifier, save_clf)
save_clf.close()


#Code to load the classifier
#Open the 'naive_bayes.pickle' file and read in the bytes (rb)
clf = open(""naive_bayes.pickle"", ""rb"")
clf_algorithm= pickle.load(clf)
clf.close()",,,,,,,,,Sentiment Analysis,,Natural Language Processing,Machine Learning Core,,0,,,0
Utilize a Sentiment Dictionary to decipher the sentiment of text,"A sentiment dictionary is the mapping of words to sentiment values. For example: the word awesome (which is a positive sentiment) could have a value of +3.7 and the word horrible (which is a negative sentiment) could have a value of -3.1. While using a sentiment dictionary, the values of the sentiment words are summed to get the overall sentiment of the text. 

For example: I loved the ambience of the restaurant but the drive to the restaurant was horrendous. Overall, it was a good evening.

Now let's say the value of the word love is +3.9, the value of the word horrendous is -4.2 and the value of the word good is +2.9. So, the overall sentiment of the text is positive since the aggregate of the values of the sentiment words is positive. 

In the tutorial for this session, we will utilize NLTK's VADER Sentiment Tool. VADER stands for Valence Aware Dictionary for Sentiment Reasoning. The dictionary was designed specifically for Twitter and contains emoticons and slang. It also provides support for sentiment intensifiers  (words such as incredibly funny) and negations (words such as ""not bad"" which is a slight/small positive sentiment). 

How it works? VADER analyzes a piece of text to check if any of the words in the text are present in the lexicon. It  produces 4 sentiment metrics from the word ratings i.e. positive, neutral, negative and compound. The compound score is the sum of all of the lexicon ratings which is standardized to a range between -1 and 1.


","Install the VADER Sentiment Tool

pip install vaderSentiment
",,"#Load the SentimentIntensityAnalyzer object from the VADER package
from vaderSentiment.vaderSentiment import SentimentIntensityAnalyzer

#Create a handle to the SentimentIntensityAnalyzer object
analyzer = SentimentIntensityAnalyzer()

#function that outputs the sentiment ratings
def print_sentiment_ratings(sentence):
    sent = analyzer.polarity_scores(sentence)
    print(""{} {}"".format(sentence, sent))

#Examining the sentiment ratings for different pieces of text
#No sentiment expressed
#Overall rating is neutral
print_sentiment_ratings(""I have to work on the weekend"")

#Sentiment expressed via emoticon
#Overall rating is negative
print_sentiment_ratings(""I have to work on the weekend :("")

#Expressing a more intense feeling via 2 emoticons
#Overall rating is even more negative than the above piece of text
print_sentiment_ratings(""I have to work on the weekend :( :("")

#VADER handles emotion intensifiers (i.e. words such as very, really, super, etc.)
print_sentiment_ratings(""I did well on the test"")
#The sentiment rating for the sentence below is higher than the one above
print_sentiment_ratings(""I did very well on the test"")

#VADER takes into consideration how the words are written - capitalization has an impact on the sentiment ratings
print_sentiment_ratings(""I had a super day"")

#The sentiment rating for the sentence below is higher than the one above
print_sentiment_ratings(""I had a SUPER day"")

#Finally, VADER handles changes in sentiment intensity; specifically when a sentence contains the word ""but"". Higher weighting is given to the sentiment after the word ""but"".
#The overall rating for the sentence below is negative
print_sentiment_ratings("" I loved the ambience of the restaurant but the drive to the restaurant was horrendous"")




",,,,,,,"Best way to understand VADER Sentiment Tool,View the actual VADER dictionary,Paper on the VADER package",,Sentiment Analysis,,Natural Language Processing,Machine Learning Core,,0,,,0
create a python environment with pipenv,,,,,,,,,,,,,,,,,,0,,,0
install requirements with requirements.txt,,,,,,,,,,,,,,,,,,0,,,0
create Python experiments with colaboratory,,,,,,,,,,,,,,,,,,0,,,0
convert a vector of values into a set of probabilities,,,,,,,,,,,,,,,,,,0,,,0
graph a gaussian,,,,,,,,,,,,,,,,,,0,,,0
explain sigma and its relationship to Gauss,,,,,,,,,,,,,,,,,,0,,,0
calculate a priori and a posteriori probabilities,,,,,,,,,,,,,,,,,,0,,,0
compute variance of a vector and say what it means,,,,,,,,,,,,,,,,,,0,,,0
use grid search to automatically explore some hyper parameters,,,,,,,,,,,,,Model Tuning,,The Machine Learning Framework,Machine Learning Core,,0,,,0
"disambiguate a ""hyper parameter"" from a ""parameter""",,,,,,,,,,,,,Model Tuning,,The Machine Learning Framework,Machine Learning Core,,0,,,0
save a model parameterization for use during productization,,,,,,,,,,,,,Supervised Learning,,The Machine Learning Framework,Machine Learning Core,,0,,,0
predict cost of future home sales,,,,,,,,,,,,,Project Predicting Real Estate Market,,"Portfolio Projects, Portfolio Projects 1",Machine Learning Core,,0,,,0
predict future real estate inventory availability,,,,,,,,,,,,,Project Predicting Real Estate Market,,"Portfolio Projects, Portfolio Projects 1",Machine Learning Core,,0,,,0
predict location of home sale based on data,,,,,,,,,,,,,Project Predicting Real Estate Market,,"Portfolio Projects, Portfolio Projects 1",Machine Learning Core,,0,,,0
read and review Hinton's paper,,,,,,,,,,,,,Project CNN Reproduce Hinton's Benchmark,,"Portfolio Projects, Portfolio Projects 1",Machine Learning Core,,0,,,0
understand the techniques in convolutional neural nets,,,,,,,,,,,,,Project CNN Reproduce Hinton's Benchmark,,"Portfolio Projects, Portfolio Projects 1",Machine Learning Core,,0,,,0
find and train against the ImageNet database,,,,,,,,,,,,,Project CNN Reproduce Hinton's Benchmark,,"Portfolio Projects, Portfolio Projects 1",Machine Learning Core,,0,,,0
explain programmatic concepts in audio processing,,,,,,,,,,,,,Project Building Alexa,,"Portfolio Projects, Portfolio Projects 2",Machine Learning Core,,0,,,0
convert audio signals into written text,,,,,,,,,,,,,Project Building Alexa,,"Portfolio Projects, Portfolio Projects 2",Machine Learning Core,,0,,,0
tokenize a written verbal command into a software API,,,,,,,,,,,,,Project Building Alexa,,"Portfolio Projects, Portfolio Projects 2",Machine Learning Core,,0,,,0
obtain access to an interesting email content database,,,,,,,,,,,,,Project Email Content Clustering,,"Portfolio Projects, Portfolio Projects 2",Machine Learning Core,,0,,,0
propose a model to classify emails based on their content,,,,,,,,,,,,,Project Email Content Clustering,,"Portfolio Projects, Portfolio Projects 2",Machine Learning Core,,0,,,0
identify information about the sender and receiver based on text content,,,,,,,,,,,,,Project Email Content Clustering,,"Portfolio Projects, Portfolio Projects 2",Machine Learning Core,,0,,,0
create an image input after selecting an output class,,,,,,,,,,,,,Project Copy Deep Dream Generator,,Portfolio Projects 3,Machine Learning Core,,0,,,0
create images from principal dimensions of a trained model,,,,,,,,,,,,,Project Copy Deep Dream Generator,,Portfolio Projects 3,Machine Learning Core,,0,,,0
build or utilize a strong CNN for image classification and training,,,,,,,,,,,,,Project Copy Deep Dream Generator,,Portfolio Projects 3,Machine Learning Core,,0,,,0
load MNIST data,,,,,,,,,,,,,Project NN Recognizing Handwritten Digits,,Portfolio Projects 3,Machine Learning Core,,0,,,0
train a model to recognize letters from the MNIST database,,,,,,,,,,,,,Project NN Recognizing Handwritten Digits,,Portfolio Projects 3,Machine Learning Core,,0,,,0
"productize a system to classify new, freshly written digits",,,,,,,,,,,,,Project NN Recognizing Handwritten Digits,,Portfolio Projects 3,Machine Learning Core,,0,,,0
describe how computers work at an architectural level,,,,,,,,,,,,,Monoservices and microservices,,Computer Architecture,Machine Learning Core,,0,,,0
describe how the internet works,,,,,,,,,,,,,Monoservices and microservices,,Computer Architecture,Machine Learning Core,,0,,,0
build docker containers,,,,,,,,,,,,,Containers,,Computer Architecture,Machine Learning Core,,0,,,0
anticipate platform inconsistencies and incompatibilities with ML software,,,,,,,,,,,,,Containers,,Computer Architecture,Machine Learning Core,,0,,,0
list operating systems used in the ML world,,,,,,,,,,,,,Operating Systems,,Operating Systems and Parallelization,Machine Learning Core,,0,,,0
knows the three fundamental jobs of an operating system,,,,,,,,,,,,,Operating Systems,,Operating Systems and Parallelization,Machine Learning Core,,0,,,0
identify the difference between local and remote OSes for ML purposes,,,,,,,,,,,,,Operating Systems,,Operating Systems and Parallelization,Machine Learning Core,,0,,,0
describe a simple way of parallelizing a convolution,,,,,,,,,,,,,Parallelization,,Operating Systems and Parallelization,Machine Learning Core,,0,,,0
describe a simple way of parallelizing a NN model training,,,,,,,,,,,,,Parallelization,,Operating Systems and Parallelization,Machine Learning Core,,0,,,0
understand in which cases it is possible to spread out the work across different cores,,,,,,,,,,,,,Parallelization,,Operating Systems and Parallelization,Machine Learning Core,,0,,,0
import a C library for use in python,,,,,,,,,,,,,Call C from python,,C Programming: Get 'er done faster,Machine Learning Core,,0,,,0
load and write a basic function to import via Cython,,,,,,,,,,,,,Call C from python,,C Programming: Get 'er done faster,Machine Learning Core,,0,,,0
write convolutions and other matrix operations from scratch,,,,,,,,,,,,,Make C do linear algebra,,C Programming: Get 'er done faster,Machine Learning Core,,0,,,0
compare the performance of LAPACK native C with that of python LAPACK,,,,,,,,,,,,,Make C do linear algebra,,C Programming: Get 'er done faster,Machine Learning Core,,0,,,0
list three NP-Hard/Complete algorithms that can't be solved with algorithms,,,,,,,,,,,,,CS Algorithms,,Algorithms and Theory,Machine Learning Core,,0,,,0
create array algorithms,,,,,,,,,,,,,CS Algorithms,,Algorithms and Theory,Machine Learning Core,,0,,,0
create and describe Hash map algorithms,,,,,,,,,,,,,CS Algorithms,,Algorithms and Theory,Machine Learning Core,,0,,,0
write and optimize BFS and DFS,,,,,,,,,,,,,CS Algorithms,,Algorithms and Theory,Machine Learning Core,,0,,,0
explain how to perform GPU synchronization to parallelize deep learning,,,,,,,,,,,,,Shader Programming,,"""CUDA, OpenCL, and Shaders""",Machine Learning Core,,0,,,0
run ML training code on a GPU,,,,,,,,,,,,,Shader Programming,,"""CUDA, OpenCL, and Shaders""",Machine Learning Core,,0,,,0
load and utilize OpenCL,,,,,,,,,,,,,Shader Programming,,"""CUDA, OpenCL, and Shaders""",Machine Learning Core,,0,,,0
load and utilize CUDA,,,,,,,,,,,,,Shader Programming,,"""CUDA, OpenCL, and Shaders""",Machine Learning Core,,0,,,0
productize an ML model for execution on the cloud or on local GPUs,,,,,,,,,,,,,Deep Learning,,"""CUDA, OpenCL, and Shaders""",Machine Learning Core,,0,,,0
describe the expected speedup available when using GPUs or TPUs,,,,,,,,,,,,,Deep Learning,,"""CUDA, OpenCL, and Shaders""",Machine Learning Core,,0,,,0
write ML code that takes advantage of GPUs,,,,,,,,,,,,,Deep Learning,,"""CUDA, OpenCL, and Shaders""",Machine Learning Core,,0,,,0
Build a Twitter Sentiment Analyzer,"A common question that often arises is how do I decipher the sentiment within a large set of tweets regarding a specific topic on Twitter in an autonomous fashion. In this session, we will construct a Twitter Sentiment Analyzer. The Sentiment Analyzer will search twitter for a list of tweets about any topic of choice, then it will analyze each tweet to ascertain whether a positive or negative emotion is expressed in the tweet. ","Before we go through the tutorial, the following items need to be taken care of:

1) Register for the Twitter API - a) Go to https://apps.twitter.com, b) click on ""Create New Application"", c) Under Application details, enter name, description, website details (can be anything), d) click on ""Create Application"" and e) make a note of the tokens on the ""Keys and Access Tokens"" tab
 
2) Install dependencies: a) pip install tweepy - library for accessing the twitter API, b) textblob (pip install textblob) which will facilitate the actual task of performing sentiment analysis",,"#Test drive TextBlob
from textblob import TextBlob

#Initialize a variable
txtblob = TextBlob(""Lambda School is awesome."")

#Get the POS
txtblob.tags

#Tokenize the text
txtblob.words

#Examine the polarity of the sentiment expressed in the text
#It is a positive statement
txtblob.sentiment.polarity

#Import tweepy
import tweepy

#Define 4 variables for authenticating with Twitter
#Each student will have their own unique tokens
consumer_key = 'insert your own key'
consumer_secret= 'insert your own key'

access_token = insert your own key'
access_token_secret = 'insert your own keyl'

#Autenticate with Twitter
authen = tweepy.OAuthHandler(consumer_key, consumer_secret)
authen.set_access_token(access_token, access_token_secret)

#Get a connection to Twitter
tweetapi = tweepy.API(authen)

#Search tweets within a topic, create tweets, delete tweets, find Twitter users
#This method is going to return tweets that contain the word 
visible_public_tweets = tweetapi.search('Gates')

#Iterate through the tweets that have been retrieved
#Examine the polarity (positive or negative the tweet is) and the subjectivity (how much of an opinion it is)

for tweet in visible_public_tweets:
    print(tweet.text)
    sentimentAnalyzer = TextBlob(tweet.text)
    print(sentimentAnalyzer.sentiment)",,,,,,,"Twitter Sentiment Analysis using Python,Details on TextBlog for Sentiment Analysis,TextBlob Tutorial",,Sentiment Analysis,,Natural Language Processing,Machine Learning Core,,0,,,0
draw a 3d topology plot as an image,One of the most common 3d graphs.,,"There are many names for 3d graphs. Topology, heat map, and image are three of them. In this lesson, we will make a plot of 3d data such that it appears to be an image. Indeed, all images are:
* an x coordinate
* a y coordinate
* a brightness value","In matplotlib, we'll generate data and use it to draw an image, visualizing the 3 axes.",Build a 10x10 image and fill it with brightness values such that you can graph a smiley face. Send a push request when completed via github.,,,,,,,,Data Visualization,,Data and Visualization,Machine Learning Core,,1,1,,2
draw a 3d topology plot as an oblique heat map,"Oblique heat maps are beautiful visualizations, know how to make one.",,"Heat maps and topologies typically mean the same thing. The color of each x,y coordinate position reflects ""heat"" or ""height"". One common representation is as a heat map - a perfect overhead similar to the image in the previous objective. Topologies are better.

Instead of a direct overhead, we want to look at our topology at an offset angle. This will give it a real 3d sense of depth.

<img src=""https://www.dropbox.com/s/bqdj4ryyme4a9k7/Screenshot%202018-03-20%2018.27.21.png?raw=1"" text=""Lambda School Logo"">
",Lets write simple matplotlib code to draw a 3d topology at an offset angle.,"Find some real 3d topology data. Convert the x/y coordinates (possibly lat/lon?) into linear x/y values, then plot the heights using the code using during the tutorial. Submit via github.",,,,,,,,Data Visualization,,Data and Visualization,Machine Learning Core,,1,1,,2
Graph sentiment polarity extracted from tweets,"In the previous section, we explored how to connect to Twitter, fetched tweets from twitter on a specific topic and then examined the sentiment of the tweets (i.e. polarity and subjectivity). As discussed earlier, the polarity score is a float within the range [-1.0, 1.0] where a score greater than 0.0 indicates positive sentiment whereas a score less than 0.0 indicates negative sentiment. The subjectivity score is a float within the range [0.0, 1.0] where 0.0 is very objective and 1.0 is very subjective. 

From the output of the previous example, it is hard to ascertain how the sentiment is trending over time. You could glance through the output and make an educated guess as to how the sentiment is trending. However a more efficient way to decipher how the sentiment is trending would be to graph the polarity to determine whether the trend over time is a positive one or a negative one.

In the tutorial for this session, we will create a listener class that continuously listens for tweets on a specific topic, writes the polarity of the fetched tweets to file and then graphs the polarity data so that it becomes easy to discern the trend over time.","The code in the tutorial adds animation to the plot so that the trend depicted on the plot is continuously refreshed as the polarity data in the ""twiter.out.txt"" is updated (i.e. similar to a stock ticker). However if you run the code using Jupyter Notebook (instead of the terminal), then the plot is not refreshed in real-time. In Jupyter Notebook, the plot gets refreshed only if the code is executed again.

Refer to the links below for additional details on the issue. A specific backend needs to be enabled for your respective operating system which works with FuncAnimation.

https://stackoverflow.com/questions/25333732/matplotlib-animation-not-working-in-ipython-notebook-blank-plot

http://nbviewer.jupyter.org/github/gregnordin/PythonShare/blob/master/matplotlib/matplotlib_backends_summary.ipynb

Prerequisite: Ensure that the ""matplotlib"" packages are installed; otherwise, install it i.e. pip install matplotlib


",,"#In Tweepy, an instance of tweepy.Stream establishes a streaming session and routes messages to StreamListener instance. So first, we need to import the requisite classes

from tweepy import Stream
from tweepy.streaming import StreamListener
import json

#get the tweets on a specific topic and write the polarity to file
class listener(StreamListener):


    def on_data(self, data):
        all_data = json.loads(data)
        tweet = all_data[""text""]
        sentimentAnalyzer = TextBlob(tweet)
        print(sentimentAnalyzer.sentiment)
        polarity = sentimentAnalyzer.sentiment.polarity
        #subjectivity = sentimentAnalyzer.sentiment.subjectivity
        output = open(""/Users/dimplem.MBHARCH/twitter-out.txt"",""a"")
        output.write(str(polarity))
        output.write('\n')
        output.close()

        return True

    def on_error(self, status):
        print(status)

#Autenticate with Twitter
authen = tweepy.OAuthHandler(consumer_key, consumer_secret)
authen.set_access_token(access_token, access_token_secret)

#Establish a streaming section and route messages to the StreamListener instance
twitterStream = Stream(authen, listener())

#Track tweets related to Musk
twitterStream.filter(track=[""Musk""])

###########Generate the animated plot#############
#Import the respective classes
import matplotlib.pyplot as plt
import matplotlib.animation as animation
from matplotlib import style
import time

#Apply the ""ggplot"" style sheet
#More details: https://matplotlib.org/gallery/style_sheets/ggplot.html
style.use(""ggplot"")

figure = plt.figure()
#To the figure, add a 1 row X 1 column subspot
#More details on subplot: https://matplotlib.org/api/pyplot_api.html#matplotlib.pyplot.subplot
plotHandle = figure.add_subplot(1,1,1)

def animate(i):
    fetchlData = open(""/Users/dimplem.MBHARCH/twitter-out.txt"",""r"").read()
    dataArray = fetchlData.split('\n')
    xarray = []
    yarray = []

    xcord = 0
    ycord = 0

    for l in range(len(dataArray)):
        xcord += 1
        polarity = dataArray[l]
        #print(float(polarity))
        if len(dataArray[l])>1:
            if float(polarity)>0.0:
                ycord += 1
                #print(y)
            elif float(polarity)<0.0:
                #print(y)
                ycord -= 1

        xarray.append(xcord)
        yarray.append(ycord)
        #print(l)

    plotHandle.clear()
    plotHandle.plot(xarray,yarray)


ani = animation.FuncAnimation(figure, animate, frames=200, interval=20)
plt.show()
",,,,,,,"Matplotlib Animation Tutorial,Matplotlib API",,Sentiment Analysis,,Natural Language Processing,Machine Learning Core,,0,,,0
Utilize Sklearn within NLTK,"In the previous session, we explored how to construct a Text Classifier using NLTK's Naive Bayes algorithm. However, NLTK is a NLP tookit and not a machine learning toolkit. Therefore in the tutorial for this session, we will leverage the Scikit-Learn Machine Learning module in Python to classify text and compare the accuracy of the predictions. 

The Scikit-Learn module has its own classifiers and contains several different versions of the Naive Bayes classifier such as MultinomialNB, BernoulliNB and GaussianNB. 

The difference between the 3 above mentioned classifiers is the underlying distribution. 

The Bernoulli Naive Bayes model is useful if your feature vectors are binary (i.e. 1's and 0's). An application would be text classification with a bag of words model where the 1 represents that the ""word occurs in the document"" and the 0 represents that the ""word does not occur in the document"".

The Multinomial Naive Bayes model is used for discrete counts. A application would be a text classification problem where instead of whether the word occurs in the document, we have to count how often the word occurs in the document.

The Gaussian Naive Bayes model is used when the features follow a normal distribution i.e. we have continuous features. An example of a dataset with continuous features is the the popular Iris dataset where the features are sepal width, petal width, sepal length, petal length. 

",,,"#Import nltk
import nltk

#Used to shuffle the data
import random

#Import the data set from the nltk corpus
from nltk.corpus import movie_reviews

#Import the SklearnClassifier class
from nltk.classify.scikitlearn import SklearnClassifier

#Import different variations of the Naive Bayes Model
from sklearn.naive_bayes import MultinomialNB,BernoulliNB, GaussianNB

#Examine the categories within the movie_reviews data set
movie_reviews.categories()

#Examine the files that constitute the movie_reviews data set
movie_reviews.fileids()

#Initialize a document list
documents = []

#store a list of words for each file ID, followed by the positive or negative label in one big list.
#each review has its own ID

for category in movie_reviews.categories():
    for fileid in movie_reviews.fileids(category):
        documents.append([movie_reviews.words(fileid), category])

#Examine the contents of the 10th element in the document list
print(documents[10])

#Examine the length of the document list
len(documents)

#Since we are training and testing, we need to randomize the items of a list in place. Otherwise, there is a high probability that we would train on all of the negatives, some positives, and then test only against positives. So, we shuffle.  Shuffle randomizes the items of a list.
random.shuffle(documents)

#Initialize a words list
words = []

#Iterate through all the words across the different reviews and append the lower case version of the word to the words list

for word in movie_reviews.words():
    words.append(word.lower)

#Find the most-used words in a text and count how often they are used
words_FD = nltk.FreqDist(words)

#Output the top 10 most commonly used words
words_FD.most_common(10)

# Honing in on the top 5,000 most common words
word_features = list(words_FD.keys())[:5000]

# Iterate  over the top 5,000  words and build a feature set that contains words from across the reviews including whether the word is among the top 5000 (True or False) words and the corresponding category 
#Decipher trends in specific types of words in positive or negative reviews

featuresets = []
for (review, category) in documents:
    words = list(review)
    features = {}

    for w in word_features:
        features[w] = w in words
    featuresets.append([features, category])

#Examine the first element in the feature set
featuresets[0]

#Let's go ahead and train our model
# We will use the Naive Bayes Classifier which is one of the most popular models used for Text Classification
#First we will split the feature set list in a training and testing subsets

training_set = featuresets[:1800]
testing_set = featuresets[1800:]

#Train and test the accuracy of the Multinomial Naive Bayes model
Multinomial_NB_clf = SklearnClassifier(MultinomialNB())
Multinomial_NB_clf.train(training_set)
print(""Multinomial Naive Bayes accuracy percent is:"",nltk.classify.accuracy(Multinomial_NB_clf, testing_set))

#Train and test the accuracy of the Bernoulli Naive Bayes model
Bernoulli_NB_clf = SklearnClassifier(BernoulliNB())
Bernoulli_NB_clf.train(training_set)
print(""Bernoulli Naive Bayes accuracy percent is:"",nltk.classify.accuracy(Bernoulli_NB_clf, testing_set))

#Train and test the accuracy of the Gaussian Naive Bayes model
Gaussian_NB_clf = SklearnClassifier(GaussianNB())
Gaussian_NB_clf.train(training_set)
print(""Gaussian Naive Bayes accuracy percent is:"",nltk.classify.accuracy(Gaussian_NB_clf, testing_set))",,,,,,,"Different flavors of Naive Bayes Classifiers,Naive Bayes and Text Classification,Scikit-Learn Naive Bayes",,Sentiment Analysis,,Natural Language Processing,Machine Learning Core,,0,,,0
"Load, access and perform operations on a built-in corpus","Hands-on or practical work in NLP usually requires working with large quantities of text or corpora. NLTK provides many corpuses, the complete list of built-in corpora provided within NLTK is available at: http://www.nltk.org/nltk_data. To access the set of data packages included with NLTK, you will have to download the packages fist. Instructions to download the data packages can be accessed via the following link: https://www.nltk.org/data.html

In this session, we will load, access and perform operations on a few of the many corpora included with NLTK. ",Please ensure that the students have installed the data packages within NLTK using the installation instructions provided within resources section below ,,"#Inaugural is one of the data packages included within NLTK

#Import the ""inaugural"" data package
 from nltk.corpus import inaugural

#Output the list of all Inaugural addresses included
inaugural.fileids()

#All words in the Inaugural Address Corpus that begin with future or fellow are counted; separate counts are kept for each inaugural address; these are plotted so that trends in usage over time can be observed
condfreqdist = nltk.ConditionalFreqDist(
            (tget, fileid[:4])
            for fileid in inaugural.fileids()
            for w in inaugural.words(fileid)
            for tget in ['future', 'fellow']
            if w.lower().startswith(tget)) 
condfreqdist.plot()

#Accessing the ""reuters"" data package
#Import the ""reuters"" data package
from nltk.corpus import reuters

#List the files within the ""reuters"" corpus
reuters.fileids()

#Fetch the words from a specific

words14862 = reuters.words(['test/14862'])
print(words14862)

#Fetch the first 25 words from the file which is part of the corpus
words25 = reuters.words(['test/14862'])[:25]
print(words25)

#The reuters corpus is a list of files  hierarchically categorized into 90 topics
#Examine the categories within the reuters corpus
reutersCategories = reuters.categories()
print(reutersCategories)

#Fetch the files associated with a specific category
reuters.fileids(categories='barley')

#Fetch the words from the specific category
reuters.words(categories='barley')[:25]

#Fetch words from 2 categories
reuters.words(categories=['barley', 'carcass'])

",,,,,,,"Installing NLTK Data,Compilation of NLTK Corpora",,Accessing built-in corpuses and building custom corpuses,,Natural Language Processing,Machine Learning Core,,0,,,0
"Use WordNet, which is part of the NLTK corpus to find the meanings of words, synonyms, antonyms, and more","The objective of this session to to leverage WordNet to uncover what the word ""sense"" is. English is an ambiguous language and almost every word has a different meaning depending on the context it is used in. For example, the word bat could mean a club used for hitting a ball. However, the same word could also refer to a nocturnal creature. The meaning of the word is contingent on the context it is used in. 

In this session, we will use WordNet to discover the the meanings of words, synonyms, antonyms, and more. WordNet is a dictionary for the English language and was created by Priceton University. It is bundled with the NLTK corpus. One important thing to note is that WordNet stores all information about words in a hierarchical manner and this tree-like structure will come to the fore when we touch on the concepts of hyponyms and hypernyms.",,,"#Determine the sense of a word
#Import wordnet as the wn_reader object
from nltk.corpus import wordnet as wn_reader

#Define a string variable containing the word bank
bank = 'bank'

#Fetch all the senses associated with the word bank
bank_synsets = wn_reader.synsets(bank)
print('Synsets/Senses of Bank :', bank_synsets, '\n\n')

#Iterate over the list of sysnets and perform some operations
#Print the definition of each sense, associated lemmas/synonymous words, and an example usage of each of the senses in a sentence

for synset in bank_synsets:
  print(synset, ': ')
  print('Definition: ', bank_synsets.definition())
  print('Lemmas/Synonymous words: ', bank_synsets.lemma_names())
  print('Example: ', bank_synsets.examples(), '\n')

#Fetch the antonyms
antonyms = []

for syn in wn_reader.synsets(""bank""):
    for l in syn.lemmas():
        if l.antonyms():
            antonyms.append(l.antonyms()[0].name())

#Output the antonyms
print(set(antonyms))

#Exploring the concepts of hyponym and hypernym
#From Google: hyponym - a word with a more specific meaning. For example: spoon is a hyponym of cutlery

#From Google: hypernym - a word with a broad meaning that more specific words. For example: cutlery is a hypernym of spoon

#First, fetch the synonyn for spoon
spoon = 'spoon'
spoon_synsets = wn_reader.synsets(spoon)
print('Synsets/Senses of Spoon :', spoon_synsets, '\n\n')

#First, fetch the synonyn for spoon
cutlery = 'cutlery'
cutlery_synsets = wn_reader.synsets(cutlery)
print('Synsets/Senses of Cutlery :', cutlery_synsets, '\n\n')

#For the purposes of this example, we will use the following word senses
# Synset('spoon.n.01') - first word sense of spoon
# Synset('cutlery.n.02') - second word sense of spoon

spoon = wn_reader.synset('spoon.n.01')
cutlery = wn_reader.synset('cutlery.n.02')

#For the purposes of this example, we will use the following word senses
print(spoon.hypernyms())
spoon_paths = spoon.hypernym_paths()

#Spoon belongs to the container and cutlery categories in the hierarchical structure of the WordNet database

#We will try to print the paths from root node to the spoon.n.01 node
for index, path in enumerate(spoon_paths):
  print('\n\nHypernym Path :', index + 1)
for synset in path:
  print(synset.name())

#Examining hyponym
print(cutlery.hyponyms())

#Extract the individual hyponyms
cutlery_hyp = cutlery.hyponyms()
for synset in cutlery_hyp:
    for lemma in synset.lemmas():
        print((lemma.name()))

#We will conclude by covering Polysemy
#Given that English is an ambiguous language typically more than one meaning exists for a word
#The meaning of a word varies depending on the context it is used in
#When performing text processing, there may be a need to return the word sense for a specific type/form of a word
#In this case, we will return the senses of the word from the WordNet database of only the given POS type (i.e. noun)

#Definethe POS type
type = 'n'

#Return all synsets of type n that is a noun present in the WordNet database
synsets = wn_reader.all_synsets(type)

#Iterate over the list of synsets and the lemmas in each synset and add them to the list of lemmas
lemmas = []
for synset in synsets:
  for lemma in synset.lemmas():
    lemmas.append(lemma.name())

#Eradicate duplicates by converting a list into a set
lemmas = set(lemmas)

#Return all the senses (synsets) belonging to the lemma word. It will return senses of the word of only the given POS type 
count = 0
for lemma in lemmas:
  count = count + len(wn_reader.synsets(lemma, type))

#Print the total number of lemmas,  the total word sense count along with the average polysemy of POS type noun
print('Total distinct lemmas: ', len(lemmas))
print('Total senses :',count)
print('Average Polysemy of ', type,': ' , count/len(lemmas))

#If you like to print the distinct lemmas; below is some sample code
lemmas_noun = []
for lemma in lemmas:
  lemmas_noun.append(wn_reader.synsets(lemma, type))

print('Noun Form ', type,': ' , lemmas_noun)",,,,,,,,,Accessing built-in corpuses and building custom corpuses,,Natural Language Processing,Machine Learning Core,,0,,,0
Set-up a custom corpus and use a corpus reader to extract the contents,"A custom corpus is just a bunch of text files in a directory, often alongside other directories of text files. Often times, there may be a need to train a model using your own dataset which is not included within NLTK. In such cases, a custom corpus will have to be created.
In this session, we will cover the topic of setting-up a custom corpus. 

In this session, we will cover the topic of setting-up a custom corpus and utilizing a corpus reader to read/access the contents from the corpus. A point to note is that NLTK bundles a list of data directories in nltk.data.path. The custom corpora that we will create must be within one of these paths so it can be found by NLTK. In order to avoid conflict with the existing data packages, we'll create a custom nltk_data directory in the root directory.",Students should already have the NLTK data package installed.,,"# Create a custom nltk_data directory in the root directory if one does not exists

import os, os.path
path = os.path.expanduser('~/nltk_data')

if not os.path.exists(path):
    os.mkdir(path)

os.path.exists(path)

Ensure that the path exists
import nltk.data
path in nltk.data.path

# Create the following subfolders (corpora, custom)
# On Unix, Linux, and Mac OS X, you could run the following code to create the directory. On Window, go ahead and create the directories
# mkdir -p ~/nltk_data/corpora/custom

#Create a simple wordlist corpus
#You can create the wordlist corpus using Notepad
#The simple corpus will contain the following files:
#wordlist1
#wordlist2
#Drop the files in the custom corpora directory that we created

#Import the WordListCorpusReader class
from nltk.corpus.reader import WordListCorpusReader

#Create an instance of the WordListCorpusReader
reader = WordListCorpusReader(r'/Users/dimplem.MBHARCH/nltk_data/corpora/custom/wordlist', r'.*\.txt')

#The words() function calls the nltk.tokenize.line_tokenize() on the raw file data and outputs the list of words in the respective files
reader.words()

#Now, we will explore the how to create and use a training corpus of part-of-speech tagged words
#Recall that Part-of-speech tagging is the process of determining the part-of-speech tag for a word
#In this case, we will create a file which includes a tagged corpus in the form 'word/tag'
#Here is the text that I have inserted into a file
#The/at-tl effort/nn and/cc time/nn involved/vbn is/ber enormous/jj ./.

#Drop the file into the /nltk_data/corpora/custom/pos folder
#We will utilize the tagged corpus reader to extracts the tagged content and examine it

#Import the TaggedCorpusReader class
from nltk.corpus.reader import TaggedCorpusReader

#Create an instance of the TaggedCorpusReader
reader = TaggedCorpusReader(r'/Users/dimplem.MBHARCH/nltk_data/corpora/custom/pos', r'.*\.txt')

#Retrieve the tagged token which is a tuple of (word, tag)
reader.tagged_words()

#Fetch a list of every sentence
reader.sents()

#Fetch the paragraphs where each paragraph is a list of sentences
reader.paras()

#Now, we will explore the how to create and use a chunked phrase corpus
#Recall from grade school that a chunk is is a short phrase within a sentence. We explored tree-like representation of phrases within a sentence. So, a chuck is essentially a sub-tree within a sentence tree
#In this case, we will create a file which includes part-of-speech tags and also has square brackets for representing chunks.
#Here is the text that I have inserted into a file

#[Job-reduction/NN moves/NNS] have/VBP eliminated/VBN about/IN [250/CD position/NNS] ,/, [the/DT representative/NN] mentioned/VBD ./.

#Import the ChunkedCorpusReader class
from nltk.corpus.reader import ChunkedCorpusReader

#Create an instance of the ChunkedCorpusReader
reader = ChunkedCorpusReader(r'/Users/dimplem.MBHARCH/nltk_data/corpora/custom/chunked', r'.*\.txt')

#Each chunk is an instance of nltk.tree.Tree
#Noun phrase trees begin with Tree('NP', [...])
#Sentence level trees begin with Tree('S', [...])
#Get a list of noun phrase trees alongside tagged tokens of words that are not in a chunk
reader.chunked_words()

#Get a list of sentence trees with each noun phrase as a subtree of the sentence
reader.chunked_sents()

#Get a list of sentence trees with each noun phrase as a subtree of the sentence
reader.chunked_paras()

#You can use the following line of code to illustrate the sentence tree along with the sub-trees (i.e. chunked phrases)
reader.chunked_sents()[0].draw()
",,,,,,,,,Accessing built-in corpuses and building custom corpuses,,Natural Language Processing,Machine Learning Core,,0,,,0
Load and access an external corpus,"When training sentiment analysis models, there may be a need to load and access an external dataset. In this session, we will download a movie review dataset (put together by Cornell University) which is already labelled with positive and negative reviews. ","Please request the students to go though the following steps in preparation for the tutorial:
1) Download the dataset accessible via the following link: http://www.cs.cornell.edu/people/pabo/movie-review-data/mix20_rand700_tokens_cleaned.zip
2) Unzip the dataset
3) Store the unzipped folder in your root directory - in my case the root is located at C:\Users\your user name\",,"#Import the random class to shuffle the elements in the documents array
import random

#Since the data within the corpus we downloaded is already categorized, we will use the Categorized Corpus Reader

#Import the appropriate Reader
from nltk.corpus import CategorizedPlaintextCorpusReader

#Load the downloaded corpus
#The three arguments from left to right are Absolute Path to the tokens folder on your computer, all sample document names from the tokens folder, and the categories in the given corpus (in our case, 'pos' and 'neg')
readCorpus = CategorizedPlaintextCorpusReader(r'/Users/dimplem.MBHARCH/mix20_rand700_tokens_cleaned/tokens', r'.*\.txt', cat_pattern=r'(\w+)/*')

#Verify that the corpus has been loaded correctly
print(readCorpus.categories())
print(readCorpus.fileids())

#Output the files that contain the positive reviews
readCorpus.fileids(categories='pos')

#Output the files that contain the negative reviews
readCorpus.fileids(categories='neg')

#We will go through the process of training and testing a Naive Bayes Classifier using the external movie reviews dataset that we just loaded

#Initialize a document list
documents = []

#store a list of words for each file ID, followed by the positive or negative label in one big list.
#each review has its own ID

for category in readCorpus.categories():
    for fileid in readCorpus.fileids(category):
        documents.append([readCorpus.words(fileid), category])

#Examine the contents of the 10th element in the document list
print(documents[10])

#Examine the length of the document list
len(documents)

#Since we are training and testing, we need to randomize the items of a list in place. Otherwise, there is a high probability that we would train on all of the negatives, some positives, and then test only against positives. So, we shuffle.  Shuffle randomizes the items of a list.
random.shuffle(documents)

#Initialize a words list
words = []

#Iterate through all the words across the different reviews and append the lower case version of the word to the words list

for word in readCorpus.words():
    words.append(word.lower)

#Find the most-used words in a text and count how often they are used
words_FD = nltk.FreqDist(words)

#Output the top 10 most commonly used words
words_FD.most_common(10)

# Honing in on the top 5,000 most common words
word_features = list(words_FD.keys())[:5000]

# Iterate  over the top 5,000  words and build a feature set that contains words from across the reviews including whether the word is among the top 5000 (True or False) words and the corresponding category 
#Decipher trends in specific types of words in positive or negative reviews

featuresets = []
for (review, category) in documents:
    words = list(review)
    features = {}

    for w in word_features:
        features[w] = w in words
    featuresets.append([features, category])

#Examine the first element in the feature set
featuresets[0]

#Let's go ahead and train our model
# We will use the Naive Bayes Classifier which is one of the most popular models used for Text Classification
#First we will split the feature set list in a training and testing subsets

training_set = featuresets[:1200]
testing_set = featuresets[1200:]

#Train the Naive Bayes Classifier model with the training data set
clf = nltk.NaiveBayesClassifier.train(training_set)

#Evaluate the accuracy of the model
nltk.classify.accuracy(clf, testing_set)

#Output the most informative features
clf.show_most_informative_features(15)

#Interpreting the output
#it appears 'x' number of times more often than in a positive or #negative review",,,,,,,,,Accessing built-in corpuses and building custom corpuses,,Natural Language Processing,Machine Learning Core,,0,,,0
Compute Standard Deviation to get an understanding of spread of the data,"Let's start by reviewing the concept of Standard Deviation. Standard Deviation provides an insight into the spread of the data points within a data set. Let's say that you have 2 data sets. Data Set 1 has a standard deviation of 17.06 and Data Set 2 has a standard deviation of 12.03. We can safely assume that the data points in data set 2 are more similar to each other as compared to data set 1.

On a number of occasions, you hear things such as 1 standard deviation from the mean, 2 standard deviations from the mean, so on. What does this mean?

Let's say you have computed the mean and standard deviation of a group of men. The mean is 167 and the standard deviation is 69.12. 

One Standard Deviation from the mean would be:
Lower end = 167 - 69.12 = 97.88
Upper end = 167 + 69.12 = 236.12

If we had a nice symmetrical data set wherein we had a bell-shaped distribution centered at the mean, it is estimated that about 68% of the data points should fall within one standard deviation of the mean. 95% of the data points should fall within two standard deviations of the mean and 99.7% of the data points should fall within three standard deviations of the mean. 

Now, you can compare the individual data points (weights of each respective man) to the lower end and upper end to determine whether the data point lies in that range and use the comparison to easily decipher any outliers. As witnessed via this example, standard deviation can be a very useful tool in diagnosing data sets and the individual data points within it.","When reviewing the concepts, draw out the Standard Deviation formula on the whiteboard",,,,,,,,,,,Statistics Foundations,,Probability and Statistics,Machine Learning Core,,0,,,0
Compute the “Z-Score” to determine how many standard deviations do the data points lie from the mean,"As covered in the previous session, the Standard Deviation enables us to hone in on individual data points within a data set to determine whether any of the data points could be deemed as outliers. In this session, we will compute the z-score to determine how far (or how many standard deviations) a data point lies from the mean. 

Let's say you get a z-score of 1.79 - this means that the data point is 1.79 standard deviations away from the mean in the positive direction. On the other hand if you have a z-score of -2.39 - this means that the data point is -2.39 standard deviations away from the mean in the negative direction.

Now it's time to cover the ""Empirical Rule"" which is useful in understanding the distribution of data. The rule works well with symmetrically distributed data i.e. the distribution of data adheres to a bell-shaped curve (i.e. normal distribution) centered around the data set's mean. Per the ""Empirical Rule"" most of the data points within the symmetrically distributed data falls inside 3 standard deviations of the mean. For most data sets, the ""Empirical Rule"" holds up well wherein 68% of the data points fall within 1 std. deviation of the mean, 95% of the data points fall within 2 std. deviation of the mean and 99.7% of the data points fall within 3 std. deviation of the mean. 

As highlighted above, a z-score of 1.79 means that the data point is 1.79 standard deviations away from the mean in the positive direction. You can extrapolate further that the data point is among 95% of the data points in the data set. However if the z-score was greater than 3, you can conclude that the data point is an outlier since it was not among 99.7% of the data points in the data set. 

Before concluding this module, let's cover the concept of ""Percentiles"". If you receive a score which is in the top 10% of the class, this implies that you are in the 90th percentile.  However if you receive a score of 80 out of 100, it does not imply that you are in the 80th percentile. A score of 80 could be one of the lowest scores so the percentile rank will be much lower. The ""percentile"" formula will help you arrive at the correct percentile rank which takes into consideration how your data point compares to the other data points in the data set.","When reviewing the concepts, draw out the 1) z-score and 2) percentiles formulas respectively on the whiteboard",,,,,,,,,,,Statistics Foundations,,Probability and Statistics,Machine Learning Core,,0,,,0
Compute the probability of multiple events ,"At times, multiple outcomes lead to the same conclusion. When this is the case, you should ensure that when computing the probability there is no overlap. You want to avoid double counting. To clarify this concept, let's review an example. You flip 2 coins and you win if either or both of the coin tosses turns up as heads. 

The total # of possible outcomes is:
Outcome 1: HT
Outcome 2: HH
Outcome 3: TH
Outcome 4: TT

The probability that the first coin turns up as heads is -- A:
2/4 = 50%

The probability that the second coin turns up as heads is -- B:
2/4 = 50%

However from the total # of possible outcomes, it is clear that there is an overlap between the following outcomes:

Outcome 1 and Outcome 2
Outcome 2 and Outcome 3

The probability of the overlap is: 1/4 i.e. 25% -- C

In order to prevent double-counting, we will use the""addition rule""

A + B - C = 75% - the probability of getting heads on at least one of two coin flips is 75%

Point to note: If you determine that there is no overlap, there is no need to subtract anything. 

Now, we will examine the concept of ""Conditional"" probability. Conditional Probability helps us address the question: What is the probability of an event happening given that another event has already happened?  Let's review an example to clarify this concept. There are 6 folks (Thomson, Austen, Matt, Caleb, Ben, and Karen) in the Machine Learning class at Lambda School.  We have to pick 2 to represent Lambda School at the AI Conference in Las Vegas. First we will compute the probability of selecting Thomson and Austen for  the AI Conference in Las Vegas.

The # of possible outcomes is 15 as highlighted below:
Thomson Austen
Thomson Matt
Thomson Caleb
Thomson Ben
Thomson Karen
Austen Matt
Austen Caleb
Austen Ben
Austen Karen
Matt Caleb
Matt Ben
Matt Karen
Caleb Ben
Caleb Karen
Ben Karen

The # of desired outcome(s) is 1:
Thomson Austen

So, the overall probability of selecting Thomson and Austen for the conference in Las Vegas is:
1/15 = 6.67%

Now let's say that a specific event has already transpired i.e. Thomson has already been picked. What is the probability that Austen will be picked?

The # of possible outcomes is 5:
Thomson Austen
Thomson Matt
Thomson Caleb
Thomson Ben
Thomson Karen

The # of desired outcome(s) is 1:
Thomson Austen

So, the conditional probability that Austen will be picked based on the fact that Thomson is already picked is 1/5 = 20%.

Moving on, now we will explore the concept of Independent and Dependent events. You have 2 events: Toss of a coin (either H or T) and Weather (either Rain or Sun)

You tossed a coin 100 times, 50 Heads and 50 Tails

35 instances when you got heads, it rained
15 instances when you got heads, it was sunny

Similarly, 35 instances when you got tails, it rained. 15 instances when you got tails, it was sunny

Based on your knowledge, you can instantly glean that the 2 events are independent. When 2 events are independent, you can multiply the respective probability of each event happening to arrive at the overall probability.

Therefore, what is the overall probability that when you got a heads, it rained?

The probability of getting a heads is 50/100 = 50%
The probability of rain is 70/100 = 70%

The overall probability that when you got a heads, it rained is .5 X .7 = 0.35 or 35%

In this example, it is clear that the 2 events are independent based on our knowledge since there is no correlation between getting a heads and it raining. However in more complex cases, this may not be evident right off the bat. Therefore a good rule of thumb is to analyze the data to arrive at the decision whether 2 events are dependent or independent.

So far, we have looked at Conditional Probability i.e. what is the probability of an event occurring given that another event has already happened/transpired? The events could be either independent or dependent. There is a formula called Bayes Theorem that can be leveraged to calculate conditional probability. 

P(A/B) = [P(B/A) X P(A)]/P(B)

The Bayes Theorem helps compute the actual probability of an event given information about tests. Tests and events have different connotations within the context of Bayes Theorem. Testing positive for a disease does not mean you have the disease. Many tests could yield false positives. Rare diseases tend to have a higher incidence of false positives. Bayes Theorem evaluates the test results and determines the real probability that the test has identified the disease. The Bayes Theorem is not just restricted to medical tests, it can be applied to a number of different scenarios such as ""spam filtering"". ""Spam filters"" could have a high rate of false positives. When using the Bayes Theorem, it is important to get the ""events"" and ""tests"" clearly identified i.e. what your “tests” and “events” are? Let's look at a couple of examples:

Example 1

You might be interested in finding out a patient’s probability of having heart disease if they consume red meat every day. “Consuming red meat every day” is the test for heart disease.

A --- the event “Patient has heart disease.” Past data tells you that 10% of patients entering your clinic have heart disease. Therefore, P(A) = 0.10.
B --- the test that “Patient is consuming red meat every day.” Five percent of the clinic’s patients are consuming red meat every day. P(B) = 0.05.

You might also know that among those patients diagnosed with hear disease, 7% consume red meat every day. This is your B|A: the probability that a patient is consuming red met every day, given that they have heart disease is 7%.

Bayes’ theorem tells you:

P(A|B) = (0.07 * 0.1)/0.05 = 0.14

In other words, if the patient is consuming red meat every day, their chances of having heart disease is 0.14 (14%). 

Example 2 - More complex problem. We will leverage a tree diagram to walk through this example scenario

P(Cancer) - 1% of women over 55 years have breast cancer
P(+ve | Cancer) = 90% of women who have Cancer test positive on mammogram test

P(false +ve) = 8% of women who do not have cancer will have a false postive

Compute: What is the probability that a woman has cancer given that she has a positive mammogram test? P(Cancer | +ve)

P(Cancer | +ve) = [(0.9)(0.01)]/[(0.9)(0.01)+(0.99)(0.08)]

P(Cancer | +ve) = 10%



","In the 2nd example on Bayes Theorem, please showcase the concepts by drawing a tree diagram.",,,,,,,,"Khan Academy: Bayes Theorem,Bayes Theorem Video",,,,,,,,0,,,0
Model continuous random variables with a Probability Density Function,"Before we delve into modeling continuous random variables, we first need to understand what is a ""random variable"".  An unknown outcome is considered to be a random variable since we are unsure what the result or value of the outcome is. For example: The number of ice cream cones the next customer will order is a random variable. Similarly, the amount of snowfall in the Sierra Nevada in the month of April is a random variable. 

The number of ice cream cones the next customer will order is very likely as low as zero, perhaps they just wanted a brownie, but probably no larger than 15. The outcome of the first example above is a whole number since you cannot order half-a-cone. This is an example of a discrete random variable. 

In the case of the snowfall example above, there really is no end to the possible snowfall outcomes for the month of April. It could be 7.2 inches, 12.5 inches, or 19.1 inches. There is an endless number of possibilities for the amount of snowfall in the Sierra Nevada in the month of April. This is an example of a continuous random variable. Given that there are endless possibilities for the continuous random variable, we will now examine how to model a continuous random variable using a Probability Density Curve. 

Probability Densities

Given that the range of possible outcomes for a continuous random variable is endless, we will leverage curves to demonstrate the distribution of outcomes. These curves are called probability densities (refer to attachment - Probability Densities). The probability of outcome A is Y and the probability of outcome B is X. Note that the area under the curve represent the probability of the range of outcomes. The total area under the curve is 1 or 100%. Now let's use this concept of probability densities to decipher what is the probability of a car passing through a toll booth between a specific time interval? (please refer to attachment # 2). 

The famous bell-shaped curve: Normal Curve

Often times, we are told that the data is normally distributed. What does this mean? Normal distribution implies that the data is taking on the shape of a normal curve (please refer to attachment #3). Now, let’s explore the key characteristics of a normal curve:

1)	The mean (or center) is located at the highest point in the curve
2)	The data around the mean is symmetrical meaning that 50% of the data is below the mean and 50% of the data is above the mean
3)	The area under the curve accounts for 100% of all possible outcomes
4)	The curve never touches the axis and continue on to infinity
5)	As we go further away from the mean in either direction, the probability of the outcomes gets lower
6)	It can take on different shapes i.e.1) taller and narrower or 2) flatter. The flatter form of the curve is more accommodating since it has more room to accommodate a range of possible outcomes. 

A point to make a note of is that the normal distribution is quite pervasive when dealing with data sets.

Calculating probabilities using the Standard Normal Distribution Table

As covered in the first module of week 5, the z-score provides an insight into how far (or how many standard deviations) a data point lies from the mean. We will use the z-score along with the Standard Normal Distribution Table to find the probability that a continuous random variable X falls in some interval (a, b).

Let's say we are working with a normal distribution (remember that per the central limit theorem in statistics, most data sets adhere to the normal distribution) that has the following 2 data points related to the weight of women:

Data point 1: 90 pounds
Data point 2: 120 pounds

Mean is 100 and Standard Deviation is 15

What is the probability that a woman weighs between 90 lbs and 120 lbs?

Z-score of Data Point 1: = (90-100)/15 = -0.67
The value from the standard normal distribution table is 1- 0.7468 = 0.25 or 25%
(Remember that the normal distribution is symmetrical)

Z-score of Data Point 2: = (120-100)/15 = 1.33
The value from the standard normal distribution table is 0.9082 or 90.82%

Therefore, the probability that a woman weighs between 90 lbs and 120 lbs is approx. 65.82%

",,,,,,,,,,Standard Normal Distribution Table,,Probability Demystified,,Probability and Statistics,Machine Learning Core,,0,,,0
determine the level of confidence for a possible outcome,"""Statistical significance"" is a norm - an arbitrary line in the sand. Confidence can be evaluated and used more generally, and understanding that is key to understanding hypothesis testing.","Work in a mention of effect size/magnitude/impact/power as a caveat here - that is, confidence is great, but it doesn't necessarily mean something matters (it's ""necessary but not sufficient"").","Suppose you have sample data on 500 registered voters in a town where the total population is 500,000. Out of the 500 registered voters, 70% of them planned to vote for the existing president. Based on this information, should the president feel confident of victory in the upcoming elections? We cannot guarantee the percent of votes the president will win based on sample data. However to address this question, we will construct a confidence interval which will surface the level of confidence that highlights the range of votes the president is likely to win based on the sample data.","Before we get into the process of constructing a confidence interval, let's touch on another example that will crystallize the concept of Confidence Intervals. Let's say that there are 2 bills on the ballot (i.e. Parcel Tax Bill A and Parcel Tax Bill B). What is the likelihood that Parcel Tax A will be voted in? The county of 'Contra Costa"" has 100K voters. If it were possible, we would poll each one of the likely voters to figure out which bill they would support. From that, we would uncover the population proportion (p) or percent of population that support Parcel Tax A. However polling each one of the likely voters is not possible. Therefore, we resort to sampling and take a poll of 100 voters (i.e. sample size: 100). Then, we compute the sample proportion (also called p hat) to determine the proportion of voters from within the sample that would support Parcel Tax A.

Now let's go ahead and draw the sampling distribution of the sample proportions. The sample proportion is a single dot on this distribution. We are going to build an interval centered on the sample's p hat (i.e. the interval will have a lower limit and an upper limit) and hope that the true population proportion falls within that interval. A 95% Confidence Interval would imply that 95% of my samples would have an interval within range of population proportion (i.e. p). In other words when we gather a sample with a certain sample proportion p-hat and then we create an interval around that p-hat, we are 95% certain that the real population proportion lies between the lower and upper limit of that interval. We are now ready to go through the process of constructing a confidence interval.

Building on the scenario we highlighted above, the chief proponent of Parcel Tax Bill A is interested in determining what is the likelihood of Parcel Tax Bill A being voted into law. So, she requests her team to conduct a poll. The team polls a random sample of 1000 voters and checks whether they will be voting for Parcel Tax A or Parcel Tax B. 57% of the 1000 voters polled said they planned on voting for Parcel Tax A.
Anything over 50% in the ballot would result in a win for Parcel Tax A. Based on the results of the poll, things look promising for Parcel Tax A but remember, this was only one sample with a sample size of 1000. This small pre-ballot poll likely did not provide the actual proportion of votes Parcel Tax A will get on the day of the ballot but perhaps it is close to the actual outcome.

Let's utilize our sample proportion to create an interval that most likely includes the actual proportion of votes that Parcel Tax A will get on the day of the ballot. To construct a 95% Confidence Interval centered on the sample proportion assuming a normal distribution means that 2.5% of the area under the curve on the right side of the curve would not be included and 2.5% of the area under the curve on the left side of the curve would not be included. Now we will proceed with determining the upper and lower limits of the interval. In order to do that, we will find the z-score using the Standard Normal Distribution Table. In the
Standard Normal Distribution Table, we locate 0.975. Why? 0.975 will give us 97.5% of the data points are to the left of the point which means that 2.5% are to the point of this point. Therefore if if we go 1.96 standard deviations in either direction from the sample proportion, 95% of the area will fall between these two limits. In our case, the sample proportion is 0.57. Therefore, the limits can be defined as follows:

UL = 0.57 + 1.96*Standard Deviation

LL = 0.57 - 1.96*Standard Deviation

Since we do not know the population's standard deviation, we will use the Standard Error instead. We touched on the formula for the Standard Error in the last session connected to sampling. The Standard Error is:

SE (p-hat) = square root [(p-hat)*(1 - p-hat)/n]

SE(p-hat) = 0.0156

UL = 0.57 + 1.96*0.0156 = 0.60

LL = 0.57 - 1.96*0.0156 = 0.54

If the results of the ballot were identical to anything within our 95% confidence interval, Parcel Tax A wins. In other words, there is now a 95% chance that on the day of the ballot, Parcel Tax A will receive between 54% and 60% of the vote.",Reproduce the tutorial example with Python code. Stretch goal - refactor your code into more general methods.,2QL6d_ikpcc,http://youtube.com/watch?v=2QL6d_ikpcc,https://www.youtube.com/embed/2QL6d_ikpcc,,,,,"""Sampling, Confidence Intervals and Hypothesis Testing""",,Statistical Tests and Experiments,DS - Statistics Fundamentals,,1,1,1,3
use hypothesis testing to determine an outcome is significant or just the result of chance,"""Statistical significance"" - it may sound like a buzzword, but there is a precise mathematical meaning and proper interpretation. As data scientists it is a core skill to understand and perform these tasks.","This is, per some industry partners, ""table stakes"" - things that students should know as a baseline.","Hypothesis testing is a well-known approach for exploring outcomes. In statistics, an assumption is made about a population. Then, a random sample is collected from the population. Measurements around the sample are derived and then the statisticians check whether or not the measurement supports their assumption.","Let's say you work for a drug-manufacturer. The company you work for has developed a drug that expedites the recovery time after a cataract eye operation. The average adult who has undergone cataract eye surgery takes about 14 days to recover. When the new drug is tested on a random sample of 100 who have undergone the cataract operation, it is found that the patients who took the drug recovered approx. 3 days sooner than those that did not take the drug.

Are the findings significant? Could this outcome just be the result of chance, or did the drug truly have an impact? Should the drug undergo further testing? This is where hypothesis testing comes into play.

Now we will walk through a scenario to showcase the process of how to test a Hypothesis. Before we cover the steps within the process, here is the scenario.

About 1000 adult residents inhabit a small resident town in the East Bay. Out of the adult residents, 50% are women and 50% are men. Every year a Home Owners Associated (HOA) committee gets formed that includes 10 adults. The HOA committee is selected from the pool of residents that constitute the HOA. The resident male adults have complained that they are getting selected more often to the committee than the resident female adults. An independent panel is created to investigate the claim. They use the newly selected pool of members as a sample. They find that in that pool of 10 members, 7 are men and 3 are women. The HOA administration contends that this happened by chance. The resident male adults disagree. This is a perfect scenario to cover the steps involved in Hypothesis Testing.

In step 1, we come up with the Hypothesis. H sub-zero represents the status-quo in that the HOA committee did happen by chance. In other words, the chances of a adult male being picked for the committee was at least 50%.

Our null hypothesis is p is less than or equal to 0.50. In other words, adult males had a 50% chance, or even less than a 50% chance, of being chosen for the HOA committee.

The alternate hypothesis (H sub-one) is the opposite of the null hypothesis i.e. adult males did not have a 50% chance of being chosen to the HOA committee. Actually, the chance of an adult male being selected to jury is greater than 50%. So the alternative hypothesis is: p is greater than 0.50.

In Step 2, we will specify the significance level.The significance level defines the threshold for the Hypothesis Test. For the purposes of this sample scenario, let's say we specify the significance level to be 5%. If the likelihood of 7 or more adult males ending up on the HOA committee has lower that a 5% chance of happening at random, then we can reject the status-quo i.e the null hypothesis.

In Step 3, we find the test statistic which enables us to ascertain the validity of the null hypothesis. The test statistic measures the level of agreement between a sample of data (i.e. the newly selected pool of HOA committee members) and the null hypothesis. Once we have the test statistic, we compute the p-value of the test statistic. The p value is the probability that this outcome, 7 adult males and 3 adult females, or perhaps an outcome even more extreme, could occur by chance. Suppose for this sample scenario, the p-value is 0.0015 or 0.15%.

In Step 4, we compare the p-value with the significance level. In our case, there is only a 0.15% chance that at random 7 or more adult males would be selected for a committee of 10 members. Given that the significance level is 0.05 or 5%; the p value falls short of our significance level and thence, we must reject the null hypothesis. This means that we believe that something is making it much more likely for an adult male to be selected v/s an adjust female. However by no stretch of imagination does it prove that the cause is intentional or for malicious reasons.",Use Python and scipy to reproduce a scenario similar to described above. Stretch goal - use the `random` library and write a method to generate test data.,6ccMvjyGadg,http://youtube.com/watch?v=6ccMvjyGadg,https://www.youtube.com/embed/6ccMvjyGadg,,,"Hypothesis Testing,What is a test statistic?",,"""Sampling, Confidence Intervals and Hypothesis Testing""",,Statistical Tests and Experiments,DS - Statistics Fundamentals,,1,1,1,3
"Use the ""Chi-square"" technique to compare 2 or more populations","When utilizing the ""Chi-square"" technique, we will leverage the ""Chi-square"" distribution table. How do you work with the ""Chi-square"" distribution table?  The ""Chi-square"" distribution table highlights the probability of occurrence for a X-square value depending on degrees of freedom. Think of X-square as the values on the x-axis that is going to be squared. 

We will calculate the value of X square which will be compared to the values in the ""Chi-square"" distribution table based on the the specific degrees of freedom. This evaluation will tell us whether the probability of the deviations between what we expected versus what we actually saw is mainly due to chance alone; this in turn will help us ascertain whether the stated hypothesis can be supported.

Before utilizing the “Chi-square” goodness of fit test, let’s review the scenario at hand. To verify whether the rate of admissions for cardiac emergencies followed the stated seasonal distribution, the total of emergency admissions for cardiac reasons by season for last year was gathered. As seen, the numbers for last year do not match up with the historical rates that were quoted by the hospital supervisor.

Below is the breakdown for total admissions for cardiac emergencies by season for last year - this represents the the actual data:

WINTER    90
SPRING     60
SUMMER  75
FALL         75

The expected data is:

WINTER    105
SPRING     75
SUMMER  60
FALL         60

The question at hand is: Does the actual data (or observed frequencies) for the last year provide sufficient evidence to support the rate of admissions for cardiac emergencies quoted by the hospital supervisor?

In order to address the question highlighted above, let's conduct a goodness of fit test? Here is the hypothesis that we are going to test:

1) Null Hypothesis (H sub-zero): The distribution suggested by the hospital supervisor was accurate
2) Alternate Hypothesis: (H sub-one): The distribution suggested by the hospital supervisor was not accurate

We will test the aforementioned hypothesis at a significance level of 5%. First, we will calculate a chi-square test statistic using the formula highlighted below:

X-Square (Chi-square) = Sum[ (observed – expected)^2/ expected]

Per the above formula, the Chi-square critical value is the sum of our observed value minus our expected value squared divided by our expected value. 

For each season, we calculate a chi-square value, and then we add up those individual chi-square values.

Therefore for each of the seasons, the Chi-square value is:

X-Square (Winter) = (105 – 90)^2/90 = 2.5
X-Square (Spring) = (60-75)^2/75 = 3
X-Square (Summer) = (75-60)^2/60 = 3.75
X-Square (Fall) = (75-60)^2/60 = 3.75

Given that we have all four seasonal chi-square values, we can add them and get our chi-square test statistic. In this case, the chi-square critical value is 13.

Since we have our Chi-square test statistic, we need to compare that to our chi-square critical value that we get from the Chi-square distribution table. Next, we will find the degrees of freedom first. The degrees of freedom are expressed as k minus one, where k is the number of categories (i.e. seasons). In this case, it is 3 (4 – 1).

Looking up the Chi-square distribution table with degrees of freedom as 3 and a significance level of 0.05, we get a Chi-square critical value of 7.81. It you were to visualize the Chi-Square in this case (see attachment), 

If the computed chi-square value is to the left of 7.815, the rate of admissions for cardiac emergencies for the last year would be a likely outcome given the stated distribution. On the other hand, if the computed chi-square value is to the right of 7.815, the rate of admissions for cardiac emergencies for the last year would be a rather extreme outcome given the stated distribution.

In our case, the computed chi-square value is 13. This indicates that we are to the right to 7.815, so we reject our null hypothesis. We can conclude with 95% confidence that the hospital supervisors stated seasonal distribution is highly unlikely.
",,,,,,,,,,Chi-Square Distribution Table,,Goodness of fit,,Probability and Statistics,Machine Learning Core,,0,,,0
Compute R-squared to determine whether the regression line is a good fit for the data.,"The R-squared will help us ascertain whether the regression line is a good fit for the data under consideration. Let's walk through a simple example: 

The table below highlights the heights and weights for the men's water polo team representing team Romania. 

Height (inches)                  Weight (pounds)
73                                       165
76                                       185
79                                       195
78                                       190
83                                       220

Let's go ahead and add a scatter plot representing the above data points. Once we have the scatter plot (see attachment), we will go ahead and add a trend line along with the associated equation and the R-square value. 

A visual examination of the trend line reveals that there is a positive correlation between the height and weight of the men that constitute the water polo team. As the height increases, there is  corresponding increase in the weight.

The slope of the line is 5.31 which means that  for every inch in height, the weight of the player is expected to increase by 5.31 pounds. To verify this point, go ahead and substitute x with 74 and you will notice that the weight has gone up by 5.31 pounds. 

Now the question at hand is whether the line is a good fit for the data. Just a visual examination proves that the line is a excellent fit. The high R-square also supports the point that the line is indeed an excellent fit for the data. Note that R-squared is a number between zero and one. A zero indicates that the regression line is an extremely poor fit for the data points. On the other hand, a r-squared of 1.0 hand indicates that the line is a perfect fit for our data. In this case the r-squared is 0.98 which proves that it is an excellent fit. Given that the regression line is an excellent fit for the data at hand, we can use it to make predictions about the weights and heights of the players.







",,,,,,,,,,,,An Overview of Regression Analysis,,Probability and Statistics,Machine Learning Core,,0,,,0
Use the correlation coefficient to examine the tightness of fit of the data points.,"The correlation coefficient informs us the about the tightness of fit of our data points and also indicates the upward or downward trend of the data from left to right on the axis. A positive correlation coefficient usually represents an upward trend of the data from left to right whereas a negative correlation coefficient usually represents a downward trend of the data from left to right. 

The correlation coefficient (r) is related to the coefficient of determination (R-squared) in that r is equal to the square root of R-squared and the sign of r is the same as the slope of the regression line. In our sample scenario, the slope is positive so the sign of the correlation coefficient is also positive. 

Based on a visual inspection of the line regression line within the scatter plot, we can anticipate a high positive value for the correlation coefficient. Let's go ahead and compute the numeric value for r to determine whether our intuition is correct. To calculate r, we will utilize the ""CORREL()"" function - see attachment. As anticipated, the  correlation coefficient is 0.9920 which implies that there is a strong linear relationship between the variables (i.e. height and weight).",,,,,,,,,,Interpreting the Correlation Coefficient,,An Overview of Regression Analysis,,Probability and Statistics,Machine Learning Core,,0,,,0
invert a matrix and describe what it does,Matrix inversion is the fundamental answer to Machine Learning. Too bad it doesn't work!,,"A matrix inverse `M^{-1}` is the ""solution"" to the original matrix M. Their multiple `MM^{-1}` is equal to `I`, the identity matrix, which does nothing.

Only square matrices can be inverted - matrices that have the same number of rows and columns.

One can make a nonsquare matrix into a square matrid by multiplying it by its transpose, covered in the next Objective.","Lets create the solution to

```
x + 2y = 4
3x - 5y = 1
```

using a simple matrix inversion, because

```
AX = B
```
and
```
A^{-1}AX = A^{-1}B
```","See if you can implement the same solution as above, but produce your own data.",,,,,,,,Linear Algebra,,Mathematical Foundations,Machine Learning Core,,1,1,,2
transpose a matrix,"You can't invert a non-square matrix, so first you must multiply it by its transpose.",,"Transposing a matrix simply swaps the columns and the rows, and all of the values move along the axis.",,,,,,,,,,Linear Algebra,,Mathematical Foundations,Machine Learning Core,,1,,,1
Select and filter the data - the first step in the data preparation phase,"The first step in the data preparation phase is to select data from an underlying data source. The data source could be an Excel spreadsheet, a relational database or even a Big Data repository such as Hadoop. Once you have selected or loaded the data, there may be a need to filter the selected data set in order to hone in on a subset of the records.

In this session, we will examine a few different techniques to read records and then we will filter the data set to extract the record(s) that are of interest. In the tutorials, we will utilize Pandas which is a library geared towards data preparation. Pandas is built on top of NumPy which makes it easy to work with arrays and matrices. Arrays is synonymous with Series and matrices is synonymous with Data Frames.","All the files used in the tutorial are uploaded are attachments - please see the attachment section below.

[Colab Session](https://colab.research.google.com/drive/1I4nAjuMxns9EM2cbp2Z1mr1rzTXSLbhT)",,"#Read in the requisite libraries
import numpy as np
import pandas as pd

#Read the ex1.csv file into a data frame
df = pd.read_csv('https://www.dropbox.com/s/xf7zl714uf3hhpm/dataset1.csv?raw=1')

#Output the contents of the data frame
df

#Read the dataset4.csv file into a data frame
#Skip rows 0, 2, 3 and 4 while reading the file
pd.read_csv('https://www.dropbox.com/s/5289dy0uob415u2/dataset4.csv?raw=1', skiprows=[0, 2, 3,4])

#When processing large files, there may be a need to read in only a subset of the records in the file or iterate over smaller chunks of the file

#Since we are working with large files, it is prudent to make the display option mode concise
#In this case, it will output only 15 records (i.e. the first few records and the last few records)

#Now we will work with large files, When working with large files, it is prudent to make the display option mode concise
#In this case, we will output only 15 records (i.e. the first few records and the last few records)

pd.options.display.max_rows = 15

#Read in data from the dataset6.csv file and output the read records
result = pd.read_csv('https://www.dropbox.com/s/v0i36e6jzml2s0t/dataset6.csv?raw=1')
result

#Only read in a few rows
pd.read_csv('/Users/dimplem.MBHARCH/Data_Prep/dataset6.csv', nrows=15)

#Process a file in pieces, read 100 records at a time
read_chunk = pd.read_csv('/Users/dimplem.MBHARCH/Data_Prep/dataset6.csv', chunksize=100)

#Iterate over the read records, aggregate the value counts in the 'key' column
#Note that Arrays and matrices are called Series and DataFrames in Pandas
tot_array = pd.Series([])
for piece in read_chunk:
    tot_array = tot_array.add(piece['keys'].value_counts(), fill_value=0)

#sort the values in descending order
tot_array = tot_array.sort_values(ascending=False)

#Output the first 100 indexes from the series
tot_array[:100]

#Extract only a subset of the values
tot_array[30:100]

#Finally, read the  example5.csv into a data frame and select only a subset of the rows/columns. In this case, the 'something' column is the index of the returned data frame 
result = pd.read_csv('https://www.dropbox.com/s/g734w4clkco701u/dataset5.csv?raw=1', index_col='somestuff')

#Retrieve a subset of the data frame using the special indexer 'loc'. It is used to retrieve specific row/columns
result.loc[['one','two'], ['a', 'b']]",,,,,,,"API Documentation:  Pandas Series Add,API Documentation: Pandas Series Filter",,Data Preparation: An Overview,,Data and Visualization,Machine Learning Core,,0,,,0
Treat missing values and de-duplicate data - the second step in the data preparation phase,"In a typical analytics life-cycle, the first step is to load the data. We reviewed this in the previous session. Once the data is loaded, a significant amount of time is devoted to addressing missing values, cleansing the data and transforming the data. The second step in the data preparation phase is a very important step and usually consumes a large proportion of an analysts' time.

In this session, we will focus on 1) addressing or treating missing values and 2) De-duplicating data or removing duplicates These concepts will be covered by walking through a step-by-step tutorial.

One thing to note is that missing values in Python are represented by 'NaN'. In the step-by-step tutorial, we will look at 1)  identifying missing values, 2) treating the missing values, and 3) filtering out or discarding the missing values. Once we have examined how to handle missing values, we will review how to handle duplicates. Removing duplicates is important to maintain the accuracy of the data set and also to avoid producing misleading or erroneous statistics. ","Provide an example of missing values by using the attached screenshot. The screenshot includes responses to a survey conducted by a local restaurant. You will notice that Ben and Austen have not rated the ""Ambience""' however, they have provided responses to the other questions. What do we do? Do we disregard the responses from Ben and Austen? Note that Ben and Austen have provided responses to 3 out of the 4 questions. Therefore, you do not want to disregard their responses completely. We should treat the missing value. One way to do that is to use approximation i.e. take an average of the responses to the ""Ambience""  question and then fill in the cells for Ben and Austen respectively using the approximation. 

Similarly, lay the stage for why removing duplicates is important by narrating a simple example. Let's say you are conducting analysis on retail data to determine the ""right"" recipients for a marketing campaign; the , marketing campaign is intended to cross-sell into the existing customer base. Before you roll out the campaign, you have to ensure that the recipients are not inundated with the same promotion multiple times since it may detract the customer from making the purchase. Therefore, removing duplicates from the retail data set you are analyzing becomes important.

Below is a code snippet the you can share with students since it will be required for the challenge. In the code snippet below, you create a 6 X 6 matrix i.e. Data Frame and fill it will random numbers

np.random.seed(25)
DataFrame_obj = DataFrame(np.random.rand(36).reshape((6,6)), 
                   index=['row 1', 'row 2', 'row 3', 'row 4', 'row 5', 'row 6'],
                   columns=['column 1', 'column 2', 'column 3', 'column 4', 'column 5', 'column 6'])
DataFrame_obj",,"#Import the requisite packages
import numpy as np
import pandas as pd
from pandas import Series, DataFrame

#Read in a file that has some missing values
result = result = pd.read_csv('https://www.dropbox.com/s/g734w4clkco701u/dataset5.csv?raw=1', index_col='somestuff')

#Print the read-in contents
result

#Use the isnull() method to ascertain the missing values
result.isnull()

#Update the missing ""message"" cell
result.loc['one', 'message'] = ""blank""

#Fill the missing values with 0
filled_DF = result.fillna(0)
filled_DF

#Use a dictionary to fill in missing values
filled_DF = result.fillna({'c': 1})
filled_DF

#You can leverage the fill forward method to fill in the missing values with values from the adjacent cell
filledforward_DF = result.fillna(method = 'ffill')
filledforward_DF

#When you are profiling your data, it is important to understand which #variable(s) have the most missing values i.e. which variable(s) in the #data set is the most problematic
result.isnull().sum()

#The output is a list that highlights the # of missing values per column

#Filtering out missing values
drop_missing_values = result.dropna()

#The output only contains row(s) without any missing values
drop_missing_values

#The truncation in the data frame based on the above command is quite excessive
#Next, we will only filter out the columns that have missing values instead of the rows
drop_missing_values = result.dropna(axis=1)
drop_missing_values

#The command below is for your reference
#Only drop rows if it contains all missing values
drop_missing_values = result.dropna(how='all')

#Cautionary note: Each time you eliminate or drop rows and columns #from your data set, you are losing information. A better and more #recommended approach is to do approximations to fill in the missing #values rather than dropping them completely. 

#Removing duplicates
#Let's create a data frame that contains duplicates

DataFrame_obj = DataFrame({'column 1': [4, 4, 5, 5, 6, 6, 6],
                  'column 2': ['x', 'x', 'y', 'y', 'z', 'z', 'z'],
                  'column 3': ['X', 'X', 'Y', 'Y', 'Z', 'Z', 'Z']})
DataFrame_obj

#Determine which rows are duplicates
DataFrame_obj.duplicated()

#Drop the duplicates. It scans the data frame and drops rows that are duplicates of the rows that came before
DataFrame_obj.drop_duplicates()

#Now we will look at dropping rows that has duplicates in only one column i..e column 3
#We need to tweak the Data Frame object slightly
DataFrame_obj = DataFrame({'column 1': [1, 1, 2, 2, 3, 3, 3],
                  'column 2': ['a', 'a', 'b', 'b', 'c', 'c', 'c'],
                  'column 3': ['A', 'A', 'B', 'B', 'C', 'D', 'C']})
DataFrame_obj

#Drop rows based on duplicates in column 3
DataFrame_obj.drop_duplicates(['column 3'])

#As a bonus, let's review detecting outliers before we adjourn the session
#Retrieve summary statistics for the values in the Data Frame object
DataFrame_obj.describe()

#Detect values in column 2 exceeding 3 in absolute value
column = DataFrame_obj[2]
column[np.abs(column) > 3]

 #Select all rows having a value exceeding 3 or –3, leverage the any method
DataFrame_obj[(np.abs(DataFrame_obj) > 3).any(1)]
",,,,,,,Usage: numpy.random.randn,,Data Preparation: An Overview,,Data and Visualization,Machine Learning Core,,0,,,0
Concatenate and Transform data to get it ready for the ML algorithm - the 3rd step in the data preparation phase,"Concatenating data sets and transforming data is very important in data analysis since it helps get the data into a structure fit for analysis. 

Some of you might be familiar with the term ""ETL"" which stands for Extract, Transform and Load. Extract is synonymous with selecting data from a data source, transformation revolves around converting the data into a form ready for analysis (which is the focus of this session) and load is pushing or outputting the data into a repository where the analysis is performed. A good practical use case of this flow is loading data from an operational store into a data warehouse for analytical purposes. Before the data is loaded into the data warehouse, it is transformed so that it conforms to the underlying schema of the data warehouse.

In this session, we will hone in on the following 2 topics:
1) Concatenating data sets
2) Transforming the data

Concatenating is basically combining data from 2 or more sources. For example: Let’s say you have 2 tables i.e. Customers and Orders. The Orders table contains information about purchases made by the customers. In this scenario, we can create one table (via concatenation) that contains information on the customer and their associated purchases. Note that when you concatenate data sets, you create a new data set. On the other hand, transformation is converting and the data into a structure that's required to facilitate analysis.
",,,"#Concatenating 2 data frames

#Create a Data Frame i.e. 6 X 6 matrix with 36 values
DataFrame_obj1 = pd.DataFrame(np.arange(36).reshape(6,6))
DataFrame_obj1

#Create a Data Frame i.e. 5 X 4 matrix with 20 values
DataFrame_obj2 = pd.DataFrame(np.arange(20).reshape(5,4))
DataFrame_obj2

# To concatenate 2 Data Frames, we will use the pd.concat() method #with the axis = 1 argument. The axis=1 argument tells Python to #concatenate the DatacFrames by adding columns or by joining on the #row index values
pd.concat([DataFrame_obj1, DataFrame_obj2], axis =1)

# To concatenate based on column index values, use the pd.concat() #method without any arguments. You get a longer table
pd.concat([DataFrame_obj1, DataFrame_obj2])

#Merging DataFrames
#Use merge() method to merge 2 data sources (i.e. Data Frames) based on a specific column - merging is a commonly applied transformation
#We will create 2 new DataFrames
#DataFrame 1
Customer_data = {
        'customer_id': ['1', '2', '3', '4', '5', '6', '7', '8'],
        'first_name': ['Thomson', 'Ben', 'Caleb', 'Aaron', 'Austen', 'Steve', 'Tim', 'Elon'], 
        'last_name': ['Comer', 'Nelson', 'Hicks', 'Gallant', 'Alfred', 'Jobs', 'Cook', 'Musk']}
DataFrame_obj1 = pd.DataFrame(Customer_data, columns = ['customer_id', 'first_name', 'last_name'])
DataFrame_obj1

#DataFrame 2
Order_data = {
        'customer_id': ['1', '2', '3', '4', '5'],
        'order_id': [51, 15, 15, 61, 16]}
DataFrame_obj2 = pd.DataFrame(Order_data, columns = ['customer_id','order_id'])
DataFrame_obj2

#Merge the 2 data sets on the 'customer_id' value
pd.merge(DataFrame_obj1, DataFrame_obj2, on='customer_id')

#Merge with outer join
# Refresher on outer join: Full outer join produces the set of all records #in Table X and Table Y, with matching records from both sides where #available. If there is no match, the missing side will contain null

pd.merge(DataFrame_obj1, DataFrame_obj2, on='customer_id', how='outer')

#Merge with left join
#Left outer join produces a complete set of records from Table X, with #the matching records (where available) in Table Y. If there is no match, #the right side will contain null

pd.merge(DataFrame_obj1, DataFrame_obj2, on='customer_id', how='left')

#Merge based on indexes
pd.merge(DataFrame_obj1, DataFrame_obj2, right_index=True, left_index=True)

#Transforming Data Frames
#Dropping rows or columns
#To drop rows from a DataFrame object, use the following command
DataFrame_obj1.drop([0,1])

#To drop columns from a DataFrame object, use the following command
DataFrame_obj2.drop([0,1], axis = 1)

 #Create a 3rd Data Frame that we will use to append to Data Frame 1

Customer_data2 = {
        'customer_id': ['1', '2', '3', '4', '5', '6', '7', '8'],
        'first_name': ['Draymond', 'Steph', 'Klay', 'Patrick', 'Kevin', 'Nick', 'Shaun', 'Jordan'], 
        'last_name': ['Green', 'Curry', 'Thompson', 'McCaw', 'Durant', 'Young', 'Livingston', 'Bell']}
DataFrame_obj3 = pd.DataFrame(Customer_data2, columns = ['customer_id', 'first_name', 'last_name'])
DataFrame_obj3

#Append 2 tables together
appended_datatable = DataFrame_obj1.append(DataFrame_obj3, ignore_index=False)
appended_datatable

#Append 2 tables together and let pandas re-index the newly created Data Frame
appended_datatable = DataFrame_obj1.append(DataFrame_obj3, ignore_index=True)
appended_datatable

#Sorting data
#Use the sort_values() method off of the DataFrame and pass in the #""by"" argument to specify the column index upon which 
# the DataFrame should be sorted

DataFrame_sorted = appended_datatable.sort_values(by=['last_name'], ascending=[False])
DataFrame_sorted

#####Bonus Material
###Grouping and aggregating data
###Grouping is utilized to better understand the data and any inherent ###subgroups within the data

###You may only be interested in understanding and exploring specific groups within your data; this is where grouping is useful

#Read the cars data - spreadsheet is attached as well as the link to the github repository is provided
cars_DataFrame = pd.read_csv('https://www.dropbox.com/s/3snmi9821pxi04e/mtcars.csv?raw=1')

#Add column names to the Data Frame
cars_DataFrame.columns = ['car_names','mpg','cyl','disp', 'hp', 'drat', 'wt', 'qsec', 'vs', 'am', 'gear', 'carb']
cars_DataFrame

#To group, we will use the .groupby() method and then pass
# in the column name you want the DataFrame to be grouped by
cars_DataFrame_groups = cars_DataFrame.groupby(cars_DataFrame['carb'])

#Output the mean of the variables within each sub-group
cars_DataFrame_groups.mean()","Use the mtcars data set to walk through the steps highlighted in the ""Practical Business Python"" article",,,,,"Overview of SQL,Practical Business Python",MtCars dataset,,Data Preparation: An Overview,,Data and Visualization,Machine Learning Core,,0,1,,1
link a function with a table of values,Any array of numbers is the equivalent of some function. This is the basis of machine learning.,,"When you look at a spreadsheet of numbers, you are looking at one or more functions.

- y = f(x): a graph
- y = f(x): x is a scalar
- y = f(x): y can be a scalar
- functions can take more dimensions and produce more dimensions
- the basis of machine learning is to build a complicated function `f(x)`, where `x` is arbitrarily large, and produce an output `y` that is predictable and sensical to humans.","## Tables are functions

### Arrays are functions

### Two arrays can be one or two functions

### A table of MxN values can be one function, M functions, or ???",Create a table of values. One column should be numbers that were created with a function you know. The other column should have values that you enter in manually. What is the function?,,,,,,,,Functions and Optima,,Mathematical Foundations,Machine Learning Core,,1,1,,2
graph some of the typical shapes of a 2d function,Most mathematics is a picture. Start visualizing functions.,,"A 2d function, `y = f(x)` always has a shape. `y = f(x)` is convenient because we can draw a neat picture of it on a piece of paper. Any time you see a complicated math equation, some or all of that equation can be drawn on a piece of paper. Part of learning math is learning to draw the right pictures.
","## Shapes of functions

### constant

`5 = f(x)` is a constant function. It doesn't change the shape of any functions it is chained with.

### linear

`ax = f(x)` is a linear function: some constant times the input. Linear functions change slowly and predictably.

### polynomial

`x^2  = f(x)` is polynomial. There are an infinite number of polynomial functions, and only the simplest ones are predictable.

### exponential

There are many exponential function shapes to consider, such as `2^x`, `ln(x)`, and `exp(x)`.

### sinusoidal

Sinusoidal functions are periodic.",What shape does all of the above functions multiplied together have? How can you change the shape of a function using another function?,,,,,,,,Functions and Optima,,Mathematical Foundations,Machine Learning Core,,1,1,,2
load a .json file from the web into colab,,,,,,,,,,,,,,,,,,0,,,0
Compute the probability of multiple events,,,,,,,,,,,,,Probability Demystified,,Probability and Statistics,Machine Learning Core,,0,,,0
build out documentation for a CRUD API using Markdown syntax,"Learning to write decent documentation isn't necessarily hard, it's just tedious. This idea certainly lends itself to testing in general. The more time you spend doing it, the better you become.","When I demo this objective, I like to use VSCode's built in Markdown preview and the Github styling plug in. This allows me to write examples in Markdown and see the examples come forth on the page. I cover the topics found in the introduction section so that students have a great place to start when building out their docs for their Server Testing Projects.

Note I USUALLY spend about 20 min discussing TDD and then transition in to Markdown. And I give the students to work on writing Markdown in their own way for about 10 min. 

Here is an example of the last time I taught this demo. 

```
# Bands API

This API is for interfacing with Ryan's favorite bands. This is an open sourced project. For contributing please reference [this contribution guide](www.ryanisawesome.com).

* A special note on how to work with this API here.

## API Endpoints

* The following is a list of all of the endpoints that you have available for use with our API.

### [POST] `api/band/create`

| TYPE          | URL              | DATA                  |
| ------------- | ---------------- | --------------------- |
| POST          | /api/band/create | bandName*, bandGenre* |
| col 2 is      | centered         | $12                   |
| zebra stripes | are neat         | $1                    |

* all fields marked with `*` are required
```","There isn't a whole lot of information to learn here other than syntax and putting together ideas. We're going to be exploring the Markdown language which will enable us to rapidly write up some documentation for a CRUD API. It is highly recommended you use Markdown and get familiar with it's syntax. This is something that learning now will help you as you won't have to spend too much time learning it on the job. 
",,"Spend the next ten minutes building out some documentation for an API. The things you'll need to demonstrate here are:

```
A #  - that will be the title of your API.
A description of what the API is at a theoretical level. 
A ## - A description of the endpoints and URL's that will be used to interface with your API.
A ### - An endpoint that can be used to interface with your API
A table that describes the end point with then necessary data URL and type
```",,,,,,,,,,,,,1,1,,2
use props to dynamically pass data to a React Component making it reusable in different contexts,"What we've learned up until this point is the ability to compose out Components, however, statically. Static components are great, but do not lend themselves to `Reusable` paradigm, which is something that we're trying to achieve.",,"To ensure that data can be dynamic we need to pass it into our component as a prop. _All React Components have access to the `props` keyword_. In order to grab access to any dynamic data that we want rendered to our component, we use props. All we have to do to ensure that we can pass props into our Components is to define it as a parameter in our function.
```js
const BasicButton = props => <button className="""">Click Me!</button>;
```
And once we do this, we can then reference this `props` object and anything we pass down to our component as an `attribute`. So for example, if we wanted our _Click Me!_ text to be dynamic, we could pass some text down as a `prop` when we go to use `BasicButton` like so:

```js
<BasicButton text=""Click Me!"" />
```
And all we have to do now is refactor our `BasicButton` component to use that `text` prop.

```js
const BasicButton = props => <button className="""">{props.text}</button>;
```
Notice that  we changed `Click Me` to `{props.text}`. The curly braces are extremely important here. We're using a technique called `interpolation` that is not unique to React, but this is how React achieves it. Interpolation is simply the ability to `read` and `interpret` any data that we want to be represent as a string. This is what allows react to be powerful in terms of accessing data that is dynamically passed to a component.","Let's build out a div that will change colors when the page is refreshed. We will generate a random number based on a list of ""hex"" values and set that ""hex"" value string to a variable that we can pass to a style prop on our div. Here is an array of some fun colors:

```js
const colors = ['#FFBAAA', '#27576B', '#D47F6A', '#AA7539', '#003D19', '#6E91A1', '#552D00'];
```

First we need a div.
```js
const MyDiv = props => <div>Click To Change Color</div>
```
Now we'll need to set it up so that we can call a function to set our variable to a random color from our color list.
```js
let backgroundColor = '';
const colorSelectHandler = () => {
  const color = colors[Math.floor(Math.random() * colors.length))];
  backgroundColor = color;
  return;
};
```

Now to put it all together adding our dynamic string to a style prop on our div.

```js
    const colors = ['#FFBAAA', '#27576B', '#D47F6A', '#AA7539', '#003D19', '#6E91A1', '#552D00'];
    let backgroundColor = '';
    const colorSelectHandler = () => {
      const color = colors[Math.floor(Math.random() * colors.length)];
      backgroundColor = color;
      return;
    };
    colorSelectHandler();
    const MyDiv = props => <div style={{background: backgroundColor, color: '#FFFFFF', height: '200px', width: '200px'}}>I am a div</div>;
    ReactDOM.render(<MyDiv/>, document.getElementById('target'));
```

Now, refresh the page and watch the magic happen!","Do this same exercise again from scratch only this time, create a list of friends/family members. Render out a heading tag that prints the string `My favorite friend is {favFriend}` where `favFriend` is the value of your randomly generated favorite friend.",JYhWuCuMa04,http://youtube.com/watch?v=JYhWuCuMa04,https://www.youtube.com/embed/JYhWuCuMa04,,Props documentation,,,Functional Components II,,React,Full Stack Web Development Core,,1,1,1,3
implement a Doubly Linked List,"Having implemented linked lists, students will be pushed to expand on this by implementing a doubly linked list data structure, which are significantly more complex that singly linked list data structures.",,,,,,,,,,,,,Active,,,,0,,,0
enumerate how binary search trees work as well as what some of their pros and cons are.,Binary Search Trees are an extremely efficient data structure when it comes to searching. Students will be exposed to some ways in which operations may be improved past linear runtimes.,"Talk about the binary search tree data structure at a high level. Talk about what applications binary search trees are optimized for, as well as the pros and cons of the binary search tree data structure compared to some of the other data structures in this sprint. Talk about the methods that the students will be implementing for the binary search tree data structure.","Like linked lists, binary search trees consist entirely of nodes holding values, with each node referencing other nodes. In the case of trees in general, each node is not constrained to just referencing a single other node. Binary trees are tree data structures where each node can reference up to two other nodes, a left node and a right node. Binary search trees are an instance of binary trees. 

Additionally, binary search trees maintain the invariant (or rule) that if a node has a left child node that it points to, the value associated with that left child node is strictly less than the value of its parent node. Conversely, if a node has a right child node that it points to, the value associated with that right child node is greater than or equal to the value of its parent node. This invariant makes binary search trees very efficient when it comes to searching (we'll see why). ",Walk through and draw out an example of how a search is performed on a binary search tree. ,"1. Draw/model out inserting a new element into a binary search tree.

2. Draw/model out how to traverse a binary search tree and get to the minimum element in the tree.

3. Draw/model out how to traverse the tree in order from the smallest element in the tree to the largest element in the tree.",SsRVdvRsNG0,http://youtube.com/watch?v=SsRVdvRsNG0,https://www.youtube.com/embed/SsRVdvRsNG0,,,,"1. How does binary search tree insertion work? How does it differ from searching through a binary search tree?

2. How does inserting into a binary search tree compare to inserting into a linked list? Into a dynamic array?

3. In the worst case, how many elements do we need to actually inspect when searching through a binary search tree?
","Data Structures,Data Structures",Active,"Data Structures, Data Structures","Computer Science, DS - Computer Science",,1,1,1,3
enumerate how heaps work as well as what some of their pros and cons are.,"Heaps are a data structure that are optimized for retrieving either maximal or minimal values of a set of data. Although this functionality may be achieved by other data structures, it's important for students to run with the idea of designing a data structure specifically around a certain operation, and the pros and cons that arise as a result in terms of performance and usage.","Talk about the heap data structure at a high level. Talk about what applications a heap is optimized for, as well as the pros and cons of the heap data structure compared to some of the other data structures in this sprint. Talk about the methods that the students will be implementing for the heap data structure.","Heaps are a binary tree (each node can only have at most two child nodes) data structure centered around the heap property. The heap property states that for any node in the heap, the value of the node is larger than the values of its children nodes (assuming the child nodes exist). A heap data structure always satisfies the heap property. What must be true then about the root element of the heap? Yes, it means that the root element of the heap is the maximum value of all the elements in the heap. 

Even though heaps are a binary tree data structure, can be visually represented as such, when it comes time to actually implement them, heaps are implemented using an array. If we were to visualize the heap as a binary tree, we would start at the top level of the tree and add the root node as the first element of the array, then move down to the next level of the tree and then add the elements from that level to the array in left-to-right ordering. 

How do we maintain the parent-child relationship between the nodes then? It turns out with this setup, there are a few simple math formulas we can use. Let's assume we are working with an array where the largest element (top of the heap) is stored at index 0. In order to fetch a parent node's left child, for `i` the parent node's index in the array, the left child's index is `2i + 1`, and the parent node's right child is located at index `2i + 2`. Conversely, if we wanted to fetch some node's parent, we could do that with the formula `floor((i - 1) / 2)`. In this way, we can emulate the binary tree structure of a heap using an array, with the added benefit now of constant-time access to any element in the heap that comes with array indexing. 

Indeed, arrays are very well-suited to storing heaps not just for the constant-time access to any element in the heap, but also because we can much more easily swap elements in different positions throughout the heap easily, again due to the fact that we have array indexing. ",Walk through and draw out an example of a heap's `get_max` and `delete` methods work.,"1. Draw/model out how a heap's `insert` method works.
2. Draw/model out a min heap (as opposed to a max heap) and how its `insert`, `delete`, and `get_min` methods work.",LYWPsV2YQBA,http://youtube.com/watch?v=LYWPsV2YQBA,https://www.youtube.com/embed/LYWPsV2YQBA,,,,"1. How does heap insertion work? What happens in the case when the new element is not the new max? What happens in the case when it is?
2. What is the runtime of the delete algorithm that was outlined?
3. What are some use-cases for a heap data structure?","Data Structures,Data Structures",Active,"Data Structures, Data Structures","Computer Science, DS - Computer Science",,1,1,1,3
start thinking like a software engineer,"Software engineers use computer programming languages to build interesting tools by ""speaking"" directly to the computer. 

What is a programming language? What types of tasks can be accomplished using code? How is it similar or different from the human languages we speak? And how do programmers continue to grow their skillset to dynamically solve the problems that arise on the job? 

These questions will be addressed in this objective. You should come away with a basic understanding of how to think like a computer programmer. ","This is the lead in to the course, take your time and discuss the details about each topic. Be open for questions. Insert anecdotes about your experience in the tech world. ","### How do we think like a Software Engineer?

#### What is a software engineer?

In the most direct sense, a software engineer is someone who writes computer code in order to create and maintain software. Software engineers must understand computer languages in order to build software, but more importantly, they need to be able to think on their feet. Software engineers are often required to maintain, expand, and debug existing codebases. They also may be asked to learn new languages or frameworks on the job. The greatest skill a software engineer must possess is being able to stay calm in the face of a complex problem, and using his or her own creativity (and with the aid of online resources), he or she finds the solution to that problem.  

#### How do we communicate with computers to accomplish tasks?

Computers are everywhere: in our office, in our pocket, in our cars, etc. We have become so accustomed to having them in our everyday lives that we often fail to recognize how complex they truly are. Many people never stop to ask how these devices work, as if assuming they are running on magic. What we often fail to realize is that every computer is following instructions that a human wrote for it in a set of languages that computers understand. Knowing these languages, a programmer can instruct computers to do almost anything imaginable -- build a website, create an AI chess player, store and retrieve data in a database, and even drive our cars for us. 

While the specifics can look wildly different based on what type of task we're trying to accomplish and what language we're working with, there are three basic steps to writing code: 1) understand the rules of the language, 2) use those rules to construct a set of instructions (write a program), and 3) allow the computer to read those instructions (execute the program). 

#### How do we learn a programming language?

Learning your first computer language can be intimidating. It requires a level of precision that we may not be used to. However, just like human languages, the more programming languages you learn, the easier it gets. 

In most computer languages the core building blocks are keywords and syntax. Keywords are special words built into the language that cue the computer as to what your intentions are. For example, in JavaScript the keyword 'const' tells the computer that you are about to store a piece of data in memory. These keywords are built into the language and are designed to accomplish specific tasks. Syntax is a built-in system of ""grammar"" that each language has. It tells us how we are supposed to construct commands, such as the word order and the use of symbols and punctuation (such as brackets, semicolons, and equal signs). 

By knowing the keywords and symbols in a language (syntax) we can construct valid commands which give the computer precise instructions on how to execute certain tasks. 

Luckily, each language has its keywords and syntax well documented online. Languages have official reference pages where you can see lists of keywords and examples of how to use them. We can use a variety of other resources as well, such as YouTube, StackOverflow, and coding blogs, to see examples and explanations of these languages. 


#### Which language should we learn?

There are a multitude of computer programming languages and they can differ in the grammar structure, spelling, meanings of words, and intent. New languages are usually created when a group of programmers finds the current languages lacking in an area they are working on. In turn, most languages are specialized in specific areas (web development, gaming, databases, and etc). 

We'll be covering these three web development languages in our course: HTML, CSS, and JavaScript. They are a great place to start. As you move through Lambda School and then your career, you will learn more languages as the need arises, but as we mentioned, the more you know, the easier it gets to learn a new one. 

#### Where do we write code (text editors and sandbox environments)?

In most of Lambda School and our careers, we'll be writing code directly in a text editor. Some great free text editors we recommend are Sublime, Atom, and VSCode. In this course, however, we will not need a text editor. We will be writing our code directly in sandbox environments (e.g., CodePen and repl.it). Sandbox environments are websites designed to allow you to write and immediately run small pieces of code. They are great learning tools for beginners and excellent debugging tools for experts. 

#### How do we execute code? 

After we have written a bit of computer code, we must actually feed our instructions to the computer. This process is called executing, or running, the code. The exact process of running code can vary depending on the language and the task at hand. For example, a bit of HTML code can be run by opening an HTML file using a web browser. However, if we were to open a C++ file directly in the browser, nothing would happen. 

In this course, we will be using two sandbox environments to both write and execute our code: CodePen and repl.it. The first automatically runs our code as we write it while the second runs it with the click of a button. Executing our code will be very straightforward in this course. It's something that we need to keep considering as we continue to grow as programmers. ",,,,,,,,,,Introduction to Web Development Fundamentals,,Intro to Web Development,Precourse FSW,,1,,,1
"explain what web development is and the roles of HTML, CSS, and JavaScript in creating web content",The focus of Web Dev 101 (and the Lambda School main curriculum) is web development: the branch of software engineering focused around building and maintaining web content. We'll be exploring on a conceptual level the different tools that are used to build sites and the specific concerns that web developers have to address. ,Discuss HTML/CSS/JavaScript in terms of their high-level use cases in web dev. There will be an opportunity to actually discuss the syntax of each in detail later. ,"#### What is web development?
Web development is a specific field of software engineering that focuses on building web pages. Web pages, or web apps, are codebases that are downloaded and run in our web browser (e.g., Google Chrome) each time a user navigates to the website address. This differs from other software which is usually downloaded once and run as a standalone application on your computer or phone. Web development makes for an exciting career, as a web development cycle is usually much shorter and you get to iterate over your software at a much faster rate.

The major building blocks of the web are HTML, CSS, and JavaScript. We will be talking about all three languages in Web Dev 101. We can also think of web development as being split into two main categories: front end and back end. We will discuss what each entails, but this two-week course focuses on front end web development. Both are covered in detail in the Lambda School main curriculum. 

#### What is meant by the term `front end`?

Everything you have ever seen on the web is considered ‘front end’. Front end is what we see when we open a web page or app. Code is downloaded from a server and is rendered to the screen by a web browser. What happens when we interact with the code is also considered front end. This is often referred to as the ‘Presentation Layer’ or ‘Client’ in software development terms.

The front end is built out of three languages: HTML, CSS, and JavaScript. HTML allows us to put content on our page: text, headers, images, buttons, links, and etc. CSS is used to style our page. It allows the contents to have different text colors, background colors, as well as dealing with the positioning of the content on the page. JavaScript makes our page dynamic. It allows for the content to change on a mouse hover or click and also lets us submit data and have data rendered on our page (such as submitting a new blog post or having your feed populated when you open Facebook). We will be exploring each of these languages in more detail throughout Web Dev 101. 

#### What is meant by the term `back end`?

This term usually refers to what happens 'behind the scenes': servers, databases, etc. The back end is the place we don’t see as users. This consists of data storage (databases) and servers running to provide data for the front end. Back end can be a little harder to imagine, especially for someone without much experience with it. Back end is commonly referred to as the ‘data access layer’ or ‘server’ within software development terms. The back end computes the data and content sent to the front end to be used and displayed by your browser.

Back end server code can be written using JavaScript. However, it can be also written using many other languages, such as Ruby, Java, or Python. The database logic required in back end development often utilize a database language, such as SQL or MongoDB. 

We will not be covering any back end within web dev 101, but the JavaScript skills we are developing are core building blocks to writing a JavaScript backend server. Back end development (including servers and databases) is covered extensively in the full course. 

#### What is a framework?

Real world web development relies heavily on the use of frameworks. Frameworks aren't exactly new languages, but are more like add-ons to existing languages. These frameworks slightly change the rules and syntax of a language, but save us a lot of time and effort in writing web development code. 

For example, a CSS framework like Bootstrap will require us to write our CSS using slightly different rules than regular (vanilla) CSS. It will also limit the level of customization we can do using CSS. But the drawbacks are often worth it, because Bootstrap makes styling our sites far easier and allows us to create mobile-friendly pages with minimal effort. 

We do not cover any frameworks in Web Dev 101, but we will learn Bootstrap and React (a JavaScript framework) in the main curriculum. 

#### What are unique challenges web developers face?

While there are a lot of pros in developing software for use on the web, there are some cons as well. These can be unique challenges to a web developer.

Load times. Do you ever go to a website and it takes forever to load? What is your reaction? We usually get frustrated and leave. In fact, most users will leave a site if it does not load for them in 15 seconds or less! As mentioned earlier, connection speed is a large hurdle to overcome when dealing with web development. A user's speed can range from very fast (Fiber optic) to slow (mobile 3G or satellite). It is our job as web developers to take ALL users into account. Therefore, we learn tricks to keep users engaged while our code is being downloaded, and learn to keep our code small so it can be easily downloaded.

Different Browsers. Not only do we have to worry about load times, but also differences in browser technology. Mobile browsers are different than desktop (or laptop) browsers. Older browsers (many computers still use Windows XP and IE9) are extremely different than newer browsers, and developing for each provides a unique challenge. Ultimately you will need to make sacrifices and not support some browsers (which is a call marketing department will make) but you should be able to code for the browser you do support.

Accessibility. If you are not a person that uses an accessibility device to consume software on the web, then you may have no idea these exist. Screen readers, alternative keyboards/navigation devices, devices for the hearing impaired, the color blind, font sizes for visually impaired people, are all concepts that we tend to not think about. As a web developer, you will need to start thinking about these users not only from a human decency perspective, but also because these users make up a non-insignificant market share. There are also legal issues that require accessibility. ",,,,,,,,,,Introduction to Web Development Fundamentals,,Intro to Web Development,Precourse FSW,,1,,,1
use the matrix method to manually compute linear regression,,,,,,,,,,,,,Ordinary Least Squares Regression,,"Modeling, Regression",Machine Learning Core,,0,,,0
use gradient descent to manually compute linear regression,,,,,,,,,,,,,Ordinary Least Squares Regression,,"Modeling, Regression",Machine Learning Core,,0,,,0
calculate `k=0` and `k=1 of small logistic regression set of equations,,,,,,,,,,,,,Classification,,Modeling,Machine Learning Core,,0,,,0
evaluate the results of the predictions using root-mean-squared-error,,,,,,,,,,,,,Classification,,Modeling,Machine Learning Core,,0,,,0
make predictions using a test set on the trained model,,,,,,,,,,,,,Classification,,Modeling,Machine Learning Core,,0,,,0
choose a training set and train a logistic regression model with it,,,,,,,,,,,,,Classification,,Modeling,Machine Learning Core,,0,,,0
use logistic regression to classify Titanic data,,,,,,,,,,,,,Classification,,Modeling,Machine Learning Core,,0,,,0
can use an AUC library to validate a set of experimental results,,,,,,,,,,,,,Model Tuning,,The Machine Learning Framework,Machine Learning Core,,0,,,0
identify available hyper parameters for tuning,,,,,,,,,,,,,Model Tuning,,The Machine Learning Framework,Machine Learning Core,,0,,,0
use cross_validation library to run many experiments,,,,,,,,,,,,,Model Tuning,,The Machine Learning Framework,Machine Learning Core,,0,,,0
evaluate results in the context of business objectives,,,,,,,,,,,,,Supervised Learning,,The Machine Learning Framework,Machine Learning Core,,0,,,0
introspect any dataset to prepare for ML modeling,,,,,,,,,,,,,Supervised Learning,,The Machine Learning Framework,Machine Learning Core,,0,,,0
approach a new dataset with the goal of improving the above objective,,,,,,,,,,,,,Supervised Learning,,The Machine Learning Framework,Machine Learning Core,,0,,,0
reason about an ML problem from a business perspective,,,,,,,,,,,,,Supervised Learning,,The Machine Learning Framework,Machine Learning Core,,0,,,0
use two basic array methods using callbacks.,"Now that we know what callbacks are, and how to use them, lets learn about some helpful array methods that utilize callbacks.",,"## More Array Methods

We already know about and use array methods, `.push`, `.pop`, `.shift`, `.unshift`, and `.length`. But there are a lot more methods available to us natively on an array. The methods we are going to talk about here are called higher order methods, because they take callbacks as arguments. 

### .forEach

`.forEach` is a built in for loop on every array. `.forEach` takes a callback as its only argument, and iterates over every item in the array and calls the callback on it. The callback can take two arguments, the first is the item itself, the second is the index of the item, this argument is optional. 

```javascript
    const cars = ['Ford', 'Chevrolet', 'Toyota', 'Tesla'];

    // We can write the callback function itself in the parentheses as an anonymous function
    cars.forEach(function(item, index) {
        console.log(item);
    });

    // Or we can instantiate a function to be used as a callback.
    // Also, we do not need to use the index argument, if you don’t need it, feel free to leave it out.
    function printNames(item) {
        console.log(item);
    }

    // And call that function in the forEach parentheses
    cars.forEach(printNames);
```

### .map

`.map` is used when we want to change every item in an array in the same way. `.map` takes a callback as its only argument. Like the `.forEach` method, the callback has the optional arguments item and index. Unlike `.reduce`, `.map` will return the entire array.

```javascript
    const nums = [2, 3, 4, 5];

    function multiplyByThree(item) {
        return item * 3;
    }


    const double = nums.map(function(item) {
        return item * 2;
    });

    const triple = nums.map(multiplyByThree)

    console.log(double); // [ 4, 6, 8, 10 ]
    console.log(triple); // [ 6, 9, 12, 15 ]
```",,,,,,,,,,JS VI: Callbacks,,Intro to Web Development,Precourse FSW,,1,,,1
know about common anti-patterns and how to avoid or mitigate them,,,,,,,,,https://youtu.be/hBhWB5ctsWM,,,,Software Design Patterns,,Python/Django I,Computer Science Annex,,0,,,0
iterate over a list of of data and generate an array of React Components ,"One of the crucial aspects to scalability within a react application is the ability to loop over some data, and transform that data into DOM elements. Learning how we can do this will help us when we're attempting to display lists of UI elements.",https://codesandbox.io/s/885w4pnyvl,"[Link to follow along from Recorded demo:](https://codesandbox.io/s/885w4pnyvl)

Lets begin by remembering a key principle to ReactJS. React can take in an array of `JSX elements` and interpolate those elements to the screen.

```js
const App = () => {
  return (
    <div className=""App"">
      {[<div> Element 1 </div>, <div> Element 2 </div>, <div> Element 3 </div>]}
    </div>
  );
};
```

This list of JSX elements will be passed to React's Virtual DOM and by default be iterated over to generate these elements on the real DOM. So, by knowing this principle, what were going to learn about today is how to make this work with a data set that is provided to us. This is where learning all about the `.map` function comes in handy, if you want to brush up on `.map` please do so now by visiting [this portion of the curriculum](https://learn.lambdaschool.com/fsw/module/rec1oabmeosilo2yf#learn-to-demonstrate-ability-to-use-map-reduce-filter-and-descri).

So lets practice with this concept. Lets look at the data we want to represent as DOM elements. We'll render out a list of `Ryan's Favorite Bands`.

```js
const BandsData = [
  { bandName: ""Modest Mouse"" },
  { bandName: ""Led Zeppelin"" },
  { bandName: ""The Beatles"" },
  { bandName: ""Guster"" },
  { bandName: ""Kygo"" },
  { bandName: ""Dear and the Headlights"" },
  { bandName: ""Grizzly Bear"" }
];
```

So we have an array of object's with the property `bandName`. This is how normal data looks in the real world. You'll often receive an array of objects like this. Each object will have the same property name so as to be uniform. SO by this rule, we can take this data set and create a new list of DOM elements. We'll give this new list to React and let it do it's magic! This is all done with `.map` and this is one of the reasons that React makes you a better JS developer. So lets see the logic of this first before we apply it to a React Component.

```js
const newListOfData = BandsData.map(band => {
  return <div>{band.bandName}</div>;
});
```

This should return us an array of `JSX` elements which are `divs` with the child of `band.bandName` interpolated as strings. So if we take the first item in the list, we'll see something like this in an array.

```js
[<div>Modest Mouse</div>]
```

This would of course be full of DOM elements. 

Now lets apply this to a React Component.

```js
const App = () => {
  return (
    <div className=""App"">
      {BandsData.map(band => {
        return <div>{band.bandName}</div>;
      })}
    </div>
  );
};
```

Note that we're doing this inside of the `{  }`. If we don't have these here, then we'll just get an ugly error. Make sure, when you're doing any type of JS Logic inside of your JSX that you're always using the Curly Braces.

Lastly, you may have noticed a warning in the console that looks something like this:

<img src=""https://tk-assets.lambdaschool.com/ab4e5d28-5604-4472-a871-c5e69f7621df_ScreenShot2018-07-20at9.32.11AM.png"" style=""width:700px;""/>

That is because React needs special `prop` for each element in an array. We'll chat more about this but for now you can go take a look at the docs and see at a glance what this is all about.

[Link to docs](https://reactjs.org/docs/lists-and-keys.html#keys-must-only-be-unique-among-siblings)","To follow along with this exercise [click here](https://codesandbox.io/s/n47109np5p)

Now that we've seen this all in action. Lets build out an app that consumes some interesting data. The data that we'll work with will be a list of friends. This list will be an array of Objects and our goal will be to turn it into DOM elements through React. Your friend Data will look a lot like this.

```js
{
  id: 1,
  first_name: ""Klarika"",
  last_name: ""Decort""
},
```

So lets think about this for a min, this data set will be an array of Objects so as we iterate through the list, we'll have to make sure that we select the proper item tha we want to display to the screen. How do we select an item in and object again?

```js
someObj.item;
```

So as we iterate we'll make sure to remember that each item in this array will be an object and that we'll need to select whatever value we want from that object by referencing the proper key. The map function's callback that it receives takes in the given item, (in our case an object) so as we map we'll be sure to call the item for what type of data it represents... a friend. Remember we also need to make sure that we wrap our map function in curly braces.

```js
{friendData.map(friend => {
  return <div>{friend.first_name}</div>;
})}
```

Now you go ahead and make sure you render out the freind's `last_name` as well.","https://codesandbox.io/s/o9ow89qq39

Use this application as an example, and build out a list of your `favoriteBooks` as DOM elements. Each element should be a `<div>` and should have a title of `Book: {some book name} Author: { some author name}`. Your app should also have an `<h2>` element that describes your list of books as `Dianna's favorite books`",y1meinTH4z4,http://youtube.com/watch?v=y1meinTH4z4,https://www.youtube.com/embed/y1meinTH4z4,,,,,Functional Components II,,React,Full Stack Web Development Core,,1,1,1,3
demonstrate the ability to implement nested functional components, Lets think about the Facebook web application for a minute. How many things on our facebook pages could be thought of as reusable? Do buttons look the same? How about thumbnail images? Well you can bet that facebook isn't writing a component for every single button they use. By learning how to build out components for reusability you will really be able to tap into the power of ReactJS for building scalable web applications.,,"Now that we know all about functional components and how to pass props through to those components and render those props data to the screen using JSX, we're going to learn all about nesting components that may rely on one or another prop value from a parent component.

Lets take a look at the following code example and learn how we can achieve this idea of nesting components:

```js
const App = props => {
  return (
    <div>
      <h2>Hello world from, {props.name}</h2>
      <div>
        <h4>My best friend in this world is: {props.bestFriend}</h4>
        <p>My favorite book is: {props.favoriteBook}</p>
      </div>
    </div>
  );
}
```
This component is doing some simple rendering of DOM elements. It only relies on 3 props, so it's not super sophisticated, but it makes for some cumbersome programming. Meaning, here we essentially have a component nested inside of another component. So lets start by breaking out the inner DOM elements that's purpose is to render the `best-friend` data into it's own component.

```js
const BestFriend = props => {
  return (
    <div>
      <h4>My best friend in this world is: {props.bestFriend}</h4>
      <p>My favorite book is: {props.favoriteBook}</p>
    </div>
  );
};
```

While this is good, we really should make it so that best friend can be reusable and nested. Now when we use this component inside of our `App` component we're going to pass some data to it as props. 

```js    
const App = () => {
      return (
        <div>
          <BestFriend bestFriend=""Homer Hickam"" favoriteBook=""October Sky""/>
        </div>
      );
    };
```

Now our component looks a little cleaner. But we can take it one step further. Notice that our `<p/>` tag could also be (if we so wanted) it's very own component. For demonstration purposes of why this is neat, we'll simply go ahead and make this happen.

```js
const Book = props => <p>My favorite book is: {props.favoriteBook}</p>;
```
And to use it nested within the `BestFriend` component

```js
const BestFriend = props => {
  return (
    <div>
      <h4>My best friends in this world is: {props.bestFriend}</h4>
      <Book favoriteBook={props.favoriteBook} />
    </div>
  );
};
```

Now things are getting a little ridiculous but this demonstration shows that react can pass props down as far as you'd like. We recommend not nesting components super deep because in the long run this can cause issues when attempting to work with the props that you're passing down as well. ","Now lets build a few container components that each render their own children and grand children. Lets build out an ancestry tree that shows off the generations of the Simpsons.

Here is our data set: 

```js
const simpsonData = {
  name: ""Orville Simpson"",
  spouse: ""Yuma Hickman"",
  children: [
    {
      name: ""Abraham Simpson"",
      spouse: ""Mona"",
      children: [
        {
          name: ""Homer Simpson"",
          spouse: ""Marge Bouvier"",
          children: [
            {
              name: ""Bart Simpson""
            },
            {
              name: ""Lisa Simpson""
            },
            {
              name: ""Maggie Simpson""
            }
          ]
        }
      ]
    }
  ]
};
```

Lets start by building out our `Parent Component`. Luckily our Parent components will be pretty simple. 

```js
const Parent = props => {
  return <h1>Parent: {props.name}</h1>;
};
```

Now that we have our data and component we can mount up this component inside of a container component. 

```js
<Parent name={simpsonData[0].name} />
```

Should mount an `h1` with `Abraham Simpson's` name being printed to the screen. Now lets tweak our Parent component to be able to conditionally mount a child component if a `child` prop is found on the `props object`. In order to achieve this we'll need a `Ternary Operator` that checks if the `child` prop is defined. If it is, mount a `Child` component else mount `null`.

```js
const Parent = props => {
  return (
    <div>
      <h1>Parent: {props.name}</h1>
      {props.child ? <Child name={props.child} /> : null}
    </div>
  );
};
```

Now we have to build out our child component, so that we can properly use this one. 

```js
const Child = props => {
  return (
    <div>
      <h2>Child: {props.name}</h2>
      {props.grandChild ? <GrandChild name={props.grandChild} /> : null}
    </div>
  );
};
```

Notice we have the same behavior here as we did in the Parent. We'll mount a `<GrandChild />` component if the correct prop exists. So now we need to build out `GrandChild`.

```js
const GrandChild = props => {
  return (
    <div>
      <h3>{props.name}</h3>
    </div>
  );
};
```


So now that everything is put together, lets see how we can mount all these components up properly. 

```js
<Parent
  name={simpsonData[0].name}
  child={simpsonData[0].children[0].name}
  grandChild={simpsonData[0].children[0].children[0].name}
/>
```

Ok, so our data set isn't the greatest, and the way this app is architected is completely stringent upon data being fixed a certain way. 

Your goal now is to try and extend this to `GreatGreatGrandchild` to be able to render out `Bart, Lisa and Maggie` to the screen! 

A good place to start would be right [here:](https://codesandbox.io/embed/pwkl9zr140)

You can use CodeSandbox to build Live ReactJS applications. I recommend logging in through their Github OAuth portal. Have fun!","Create an object that represents a generational tree of your family similar to the `Simpsons Object` found in our follow along example. Keep it simple. Build out a few nested components that demonstrate the ability to pass data and conditionally render components if certain props are available. 
",5lzKaiC8ask,http://youtube.com/watch?v=5lzKaiC8ask,https://www.youtube.com/embed/5lzKaiC8ask,,,,,Functional Components II,,React,Full Stack Web Development Core,,1,1,1,3
demonstrate the ability to use the React Docs to find a solution to a specific problem,One of the BEST features of ReactJS is the rich documentation provided to us by the React team. Learning how to navigate the docs will help you while learning this amazing library. ,,"Welcome to ReactJS. I cannot tell you how amazing this journey is going to be for you as you learn how to utilize the React library to build out web apps. There is a learning curve here. It isn't necessarily easy to pick up and work with React right away. But once you get over the learning curve you'll find that using React makes building web apps easy. 

Lets navigate over to [the docs](https://reactjs.org/) and take a good look at what's provided for us to use as we approach React.",,,,,,,React JS Docs,,,,,,,,1,,,1
track progress using the kanban(Trello) board.,"Kanban boards, such as Trello, are used to visualize the progress of tasks through a series of steps. In development, a kanban board frequently has columns like ""Backlog"", ""In Progress"", and ""Done"". Listed in each of these columns are the tasks that are currently at that state.

Tasks in the backlog column represent everything that still needs to be done.

Tasks in the In Progress column represent everything currently in flight.

Tasks in the Done column represent what's been finished.

Many teams customize the columns and have different definitions to match their team's workflow. For example, tasks that are in a Testing phase, or code that is waiting to be merged via a pull request.

Many development teams use kanban boards to track and manage tasks on a project. You'll use a kanban board during Lambda Labs for the same thing.",,,,,,,,,Getting started with Trello,,,Lambda Labs Kickoff,,,,,0,,,0
attend all team meetings and Labs events,"It is expected of each student to be available to schedule group meetings, and come to meetings prepared to cover the specific topic. Students are also required to attend Labs Events and participate by asking questions, then completing assigned challenges. 

All teams will conduct stand-up meetings in the 8am PST hour as scheduled by the Project Manager. 

As in the workplace students will be expected to arrive on time, prepared, and open to participate in meetings.",,,,,,,,,,,,Lambda Labs Kickoff,,,,,0,,,0
complete assigned tasks,"When working on a project with a team, many organizations have person designated as the Project Manger who has the responsibility of assigning tasks and managing the progress of the project. High functioning teams require each member to perform their role efficiently because their success is intertwined. 

When an individual is assigned a task, it is important that the task be completed in a timely manner. 

When working on a team, it is important to limit the scope of work to the task assigned to avoid conflicts in the code and duplication of effort.

",,,,,,,,,,,,Lambda Labs Kickoff,,,,,0,,,0
contribute to high quality standup meetings,"High quality standup meetings consist of being on time, being prepared, and contributing quality comments to the meeting. ",,,,,,,,,,,,Lambda Labs Kickoff,,,,,0,,,0
use asynchronous communication tools to communicate with your teammates,Remote teams rely on tools such as Slack and Zoom for communications. Students will utilize these tools to keep in contact with their teammates and Lambda School staff.,,,,,,,,,,,,Lambda Labs Kickoff,,,,,0,,,0
follow a consistent branching strategy using git and GitHub,All modern software development efforts make heavy use of source control tools.  Students will experience a leading tool and apply industry recognized best practices.  ,,,,,,,,,,,,Lambda Labs Kickoff,,,,How To Branch.png (https://dl.airtable.com/x6F80XBRpemgbCagI8Az_How%20To%20Branch.png),0,,,0
write custom middleware.,"We can write our own `Custom Middleware` to add functionality needed by our applications that is not included by Express. 

This is a powerful feature that makes it really easy to extend the Express framework without the need to modify it's source code.

We'll see some examples of the two types of custom middleware that we'll call _regular_ middleware and _error handling_ middleware.","Provide examples and use cases for both types of middleware.

Error handling middleware must be placed after all other middleware for it to work.","Writing `custom middleware` is a two step process:

- write a function that will receive three or four arguments.
- add it to the `middleware queue`.

Let's tackle the first part with an example. We'll write middleware that logs information about every request that comes into our server. We'll be displaying the information in the console window to keep things simple.

```js
function logger(req, res, next) {
  console.log(
    `[${new Date().toISOString()}] ${req.method} to ${req.url} from ${req.get(
      'Origin'
    )}`
  );

  next();
}
```

We can see that a middleware function takes **three parameters**, the `request` and `response` objects and a third parameter that is a `function that points to the next middleware` in the queue. By convention we name the third parameter `next`, please stick to that convention in your code.

Any middleware in the queue CAN modify both the request and response objects, but it's NOT required. In this case we are not making changes to either.

Any middleware in the queue CAN stop the request and send a response back to the client. When that happens the rest of the middleware, including the route handlers, will not be executed. We'll see an example of this in the code-along section.

Calling `next()` will signal express that the middleware has finished and it should call the next middleware function. **If next() is not called and a response is not sent back to the client, the request will hang and clients will get a timeout error**, so make sure to always call `next()` or use one of the methods that send a response back like `res.send()` or `res.json()`.

Now let's add our shiny middleware to the queue! Right after `server.use(express.json());` add the following line.

```js
server.use(logger);
```

Hitting any of our endpoints will display some information about the request in the console.

Congratulations, you know how to write custom middleware for Express!","Any middleware in the queue can stop the request and send a response back to the client. When that happens the rest of the middleware, including the route handlers, will not be executed. Let's see this in action by writing our very own authentication middleware, but first a bit of a story (any similarity to an existing story is pure coincidence).

Imagine you're next to a lake where a dangerous creature dwells and it is moving towards you with ill intentions. Luckily, next to you is a sealed door that leads to safety, unfurtunately in order to open it you need to provide the right password. Let's implement the API for that.

Start out by defining a function that shows our current predicament at the console as the application loads.

```js
function atGate(req, res, next) {
  console.log(`At the gate, about to be eaten`);

  next();
}
```

Then add it as the first middleware in the queue.

```js
server.use(atGate);
```

This is what's called global or application wide middleware. It will apply to every endpoint in our server. Accessing any route in our server should display the message on the console.

Now let's add a our authentication middleware that will only let us in if we hit the correct route, picking any other route is futile, so be careful!.

```js
function auth(req, res, next) {
  if (req.url === '/mellon') {
    next();
  } else {
    res.send('You shall not pass!');
  }
}
```

Now let's add a route handler that will lead to safety:

```js
server.get('/mellon', auth, (req, res) => {
  console.log('Gate opening...');
  console.log('Inside and safe');
  res.send('Welcome Traveler!');
});
```

What's new here is that we are adding our middleware as the second parameter and the route handler as the third. Using middleware this way is what we call **local middleware** or route middleware. It just means we are using middleware locally and only applies to the endpoint where it's added.","Write a piece of middleware that responds with the message ""Balance is the key, making things even is the secret to success"" with an HTTP Status Code 403 (Forbidden) when the client makes a request and the value of the seconds in the server clock is an odd value, otherwise, let the request flow through the rest of the middleware queue.

So if a client makes any request and the server clock is at 11:10:11 or 11:10:13 the request is rejected, but at 11:10:12, or 11:10:14 is not.",7aHJz4SJT4Y,http://youtube.com/watch?v=7aHJz4SJT4Y,https://www.youtube.com/embed/7aHJz4SJT4Y,,Middleware explained,express.json,"* is the order of middleware important?
* in which cases do we need the fourth parameter?
* can we stop a request from a middleware function?",Express Middleware,,Building RESTful Web APIs with Express and Node.js,Full Stack Web Development Core,,1,1,1,3
explain how routing works in an express application.,"Routing is one of the main features of Express. Using `routing` we can map incoming requests to the appropriate request handler based on the URL and HTTP Method used.

Routing makes building RESTful Web APIs a breeze. We can have a **single URL per resource** and execute different code based on the HTTP Method/Verb used.

Building Web APIs to perform CRUD (**C**reate, **R**ead, **U**pdate, **D**estroy) operations on resources is also very straight forward because there are HTTP Methods that map directly to each operation.","Provide a high level overview of how routing works, don't go into much detail as we'll see more examples of routing when building our CRUD API.","Let's see an example of basic routing in action.

First, let's have our Express application respond to GET requests on different URLs. Add the following endpoints:

```js
// this request handler executes when making a GET request to /about
server.get('/about', (req, res) => {
  res.status(200).send('<h1>About Us</h1>');
});

// this request handler executes when making a GET request to /contact
server.get('/contact', (req, res) => {
  res.status(200).send('<h1>Contact Form</h1>');
});
```

Two things to note:

- we are using the same HTTP Method on both endpoints, but express will look at the URL and execute the corresponding request handler.
- we can return a string with valid HTTP!

Open a browser and navigate to the `/about` and `/contact` routes. The appropriate route handler will execute.","Now, please follow along as we write endpoints that execute different request handlers on the same URL by changing the HTTP method used.

Let's start by adding the following code after the GET endpoint to `/hobbits`:

```js
// this request handler executes when making a POST request to /hobbits
server.post('/hobbits', (req, res) => {
  res.status(201).json({ url: '/hobbits', operation: 'POST' });
});
```

Note that we return HTTP status code 201 (Created) for successful POST operations.

Next, we write and endpoint that will be executed for PUT requests to the same URL.

```js
// this request handler executes when making a PUT request to /hobbits
server.put('/hobbits', (req, res) => {
  res.status(200).json({ url: '/hobbits', operation: 'PUT' });
});
```

For successful PUT operations we use HTTP Status Code 200 (OK).

Finally, let's write and endpoint to handle DELETE requests.

```js
// this request handler executes when making a DELETE request to /hobbits
server.delete('/hobbits', (req, res) => {
  res.status(204);
});
```

We are returning HTTP Status Code 204 (No Content), but if you are returning any data back to the client, perhaps the removed resource, on successful deletes, change that to be 200 instead.

You may have noticed that we are not reading any data from the request as that is something we'll learn later in the module. Something else we are about to learn is how to use a tool called `Postman` in order to test our POST, PUT and DELETE endpoints.","Your assignment is to add endpoints to handle POST, PUT and DELETE for the `/users` route. Returning a JSON response similar to what we did in the code-along is sufficient.",tLIzjmFxsag,http://youtube.com/watch?v=tLIzjmFxsag,https://www.youtube.com/embed/tLIzjmFxsag,,Basic Routing on Expressjs.com,"Express Routing Guide,Express Request Object API,Express Response Object API","* how does Express routing decide which route handler function to execute?
* what is the correct HTTP Status Code for successful POST operations?
* can we have different route handlers for the same URL?",Server-side Routing,Active,Building RESTful Web APIs with Express and Node.js,Full Stack Web Development Core,,1,1,1,3
"read data from the query string, request body and route parameters.","Most Web APIs require data from clients. This data can come in different ways:

- as route parameters.
- as key/value pairs inside the query string.
- as the request body.

In this module, we'll cover how to read data sent by clients using all of these methods.","This is a long module, it is ok if some of the content bleeds into the next day, we will adjust it as we have more concrete data of how far we can go in one lecture.

This module must come after Postman has been introduced, as it's needed for the demos.

When adding `server.use(express.json());` tell students they'll learn all about it in the `middleware` module.

Make sure to mention that the type for parameters in `req.params` will always be a string. Conversion is needed to parse numbers out of it.

When reading query string parameters, for `?akey=avalue`, `avalue` will be a string, but for `?akey=avalue&akey=anothervalue` the value for `akey` will be an array of strings instead. Students should not assume that the value of a parameter will always be a string. We could use `Array.isArray()` to check the type.","##### Reading and Using Route Parameters

Let's revisit our DELETE endpoint.

```js
server.delete('/hobbits', (req, res) => {
  res.status(204);
});
```

How can the client let the API know which hobbit should be deleted or updated? One way, and they one we'll use, is through `route parameters`. Let's add support to route parameters to our DELETE endpoint.

We define route parameters by adding it to the URL with a colon (`:`) in front of it. Express will add it to the `.params` property that is part of the request object. Let's see it in action:

```js
server.delete('/hobbits/:id', (req, res) => {
  const id = req.params.id;
  // or we could destructure it like so: const { id } = req.params;
  res.status(200).json({
    url: `/hobbits/${id}`,
    opeation: `DELETE for hobbit with id ${id}`,
  });
});
```

This route handler will execute for every DELETE for a URL that begins with `/hobbits/` followed by any value, so DELETE requests to `/hobbits/123` or `/hobbits/frodo` will trigger this request handler. The value passed after `/hobbits/` will end up as the `id` property on `req.params`.

The value for a route parameter will always be `string`, even if the value passed is numeric. When hitting `/hobbits/123` in our example, the type of `req.params.id` will be `string`.

Express routing has support multiple route parameters. For example, defining a route URL that reads `/hobbits/:id/friends/:friendId`, will add properties for `id` and `friendId` to `req.params`.

##### Using the Query String

The query string is another way to use the URL to pass information from clients to the server. It is structured as a set of key/value pairs, where each pair takes the form of `key=value` and pairs are separated by an `&`. To mark the beginning of the query string, we add `?` and the end of the URL followed by the set of key/value pairs.

An example of a query string would be: `https://www.google.com/search?q=lambda&tbo=1`. The query string portion is `?q=lambda&tbo=1` and the key/value pairs are `q=lambda` and `tbo=1`.

Let's add sorting capabilities to our API. We'll provide a way for clients to hit our `/hobbits` and pass the field they want to use to sort the responses and our API will sort the data by that field in ascending order.

Here's the new code for the `GET /hobbits` endpoint:

```js
server.get('/hobbits', (req, res) => {
  // query string parameters get added to req.query
  const sortField = req.query.sortby || 'id';
  const hobbits = [
    {
      id: 1,
      name: 'Samwise Gamgee',
    },
    {
      id: 2,
      name: 'Frodo Baggins',
    },
  ];

  // apply the sorting
  const response = hobbits.sort(
    (a, b) => (a[sortField] < b[sortField] ? -1 : 1)
  );

  res.status(200).json(response);
});
```

Visit `localhost:8000/hobbits?sortby=name` and the list should be sorted by `name`. Visit `localhost:8000/hobbits?sortby=id` and the list should now be sorted by `id`. If no `sortby` parameter is provided, it should default to sorting by `id`.

To read values from the query string, we use the `req.query` object added by Express. There will be a key and a value in the `req.query` object for each key/value pair found in the query string.

The value of the parameter will be of type `array` if more than one value is passed for the same key and `string` when only one value is passed. This means that in the query string `?id=123`, `req.query.id` will be a string, but for `?id=123&id=234` it will be an array.

Another gotcha is that the names of query string parameters are case sensitive, `sortby` and `sortBy` are two different parameters.

The rest of the code sorts the array before send it back to the client.

##### Reading Data from the Request Body

We begin by taking another look at the `POST /hobbits` endpoint. We need to read the hobbit's information to be able to add it to the hobbits array. Let's do that next:

```js
// add this code right after const server = express();
server.use(express.json());

let hobbits = [
  {
    id: 1,
    name: 'Bilbo Baggins',
    age: 111,
  },
  {
    id: 2,
    name: 'Frodo Baggins',
    age: 33,
  },
];
let nextId = 3;

// and modify the post endpoint like so:
server.post('/hobbits', (req, res) => {
  const hobbit = req.body;
  hobbit.id = nextId++;

  hobbits.push(hobbit);

  res.status(201).json(hobbits);
});
```

To make this work with the hobbits array, we first move it out of the get endpoint into the outer scope. Now we have access to it from all route handlers.

Then we define a variable we'll use for manual id generation. When using a database this is not necessary as the database management system generates ids automatically.

To read data from the request body, we need to do two things:

- add the line: `server.use(express.json());` after the express application has been created.
- read the data from the body property that Express adds to the request object. Express takes all the information that the client added to the body and makes it available as a nice JavaScript object.

**Note that we are not validating the information to keep the demo simple, but in a production application we will validate before attempting to save to the database.**

Let's test it using Postman:

- change the method to POST.
- select the `Body` tab underneath the address bar.
- click on the `raw` radio button.
- from the dropdown menu to the right of the `binary` radio button, select `JSON (appplication/json).
- add the following JSON object as the body:

```json
{
  ""name"": ""Samwise Gamgee"",
  ""age"": 30
}
```

Click on `Send` and the API should return the list of hobbits including Sam!.","Please code along as we implement the PUT endpoint and a way for the client to specify the sort direction.

##### Implement Update Functionality

Let's continue to practice reading route parameters and information from the request body. Let's take a look at our existing PUT endpoint:
```js
server.put('/hobbits', (req, res) => {
  res.status(200).json({ url: '/hobbits', opeation: 'PUT' });
});
```

We start by adding support for a route parameter the clients can use to specify the id of the hobbit they intend to update:

```js
server.put('/hobbits/:id', (req, res) => {
  res.status(200).json({ url: '/hobbits', opeation: 'PUT' });
});
```

Next we read the hobbit information from the request body using `req.body` and use it update the existing hobbit.

```js
server.put('/hobbits/:id', (req, res) => {
  const hobbit = hobbits.find(h => h.id == req.params.id);

  if (!hobbit) {
    res.status(404).json({ message: 'Hobbit does not exist' });
  } else {
    // modify the existing hobbit
    Object.assign(hobbit, req.body);

    res.status(200).json(hobbit);
  }
});
```

Concentrate on the code related to reading the `id` from the `req.params` object and reading the hobbit information from `req.body`, the rest of the code will change as this is a simple example using an in-memory array and most production APIs will use a database.","For the following exercises use the provided database helper functions inside `/data/db.js` to work with the users from the database.

Implement a `GET` endpoint that will accept an `id` as a route parameter and return the user corresponding to that `id`. If the user is not found return the correct HTTP Status Code. 

Implement all CRUD operations on users, including get by ID.

Add sorting and pagination support to the GET all endpoint. For pagination the client should supply the API with sorting information, the number of users per page and the page number.",kKDB1TpL9dM,http://youtube.com/watch?v=kKDB1TpL9dM,https://www.youtube.com/embed/kKDB1TpL9dM,,HTTP Primer for Frontend Developers,HTTP Messages on MDN,"- which property of the request object holds the data passed in the query string?
- which property of the request object holds the data passed as route parameters?
- which property of the request object holds the data passed as the request body?
- what is the data type of route parameters?
- can we accept more than one route parameter in an API?",Server-side Routing,,Building RESTful Web APIs with Express and Node.js,Full Stack Web Development Core,,1,1,1,3
select a technical solution appropriate for project requirements.,A key skill utilized by developers is the ability to select an appropriate solution for each problem.  Practice this skill by comparing the skills you have acquired to the tasks needed to build your app.  ,Easy is a dirty word!,,,,,,,,,,,,,,,,0,,,0
pass off resume,Work with Lambda's Career Services team to have them review the resume and provide feedback. ,,,,,,,,,,,,Labs Career Services,,,,,0,,,0
organize front and back end code into logical and manageable structures.,"The start of a project is often chaotic.  Features are implemented rapidly, change often, and first approaches may fail.  It is important to regularly refactor code bases to ensure that they are organized and can easily be maintained and expanded.",,,,,,,,,,,,,,,,,0,,,0
interpret a wireframe to construct a functional MVP,"Most of the time, a developer's work is to interpret a specification produced by a designer and turn it into a functional product.  This requires finesse.  All designs have gaps and necessary changes will not become apparent until after the application can be interacted with.  Developers must build strong working relationships with designers and learn when they should fill in the gaps themselves and when they should ask for clarification.",,,,,,,,,,,,,,,,,0,,,0
revise front and back end code as needed to produce a polished product.,"Functional is only the first step.  To produce a polished product, continuous improvement is needed in both the front and back end code.  The front end must exhibit a polished and well designed experience, while the back end must operate efficiently and only share appropriate data with users.",,,,,,,,,,,,,,,,,0,,,0
prepare and practice for capstone defense.,"Developers are regularly required to publicly speak about their knowledge, skills, and work.  This can be for an interview, a company-wide presentation, or an industry event.  It is important to prepare and practice for these events to appear as a calm and confident expert.",,,,,,,,,,,,,,,,,0,,,0
submit portfolio for capstone defense ,,,,,,,,,,Capstone Defense Portfolio Submission,,,Labs Career Services,,,,,0,,,0
deploy a complete and polished app to production and manage initial user acquisition.,"The launch day is often looked at with anticipation, excitement, and fear.   Real, genuine, human beings using your product is exhilarating.  It is also difficult.  They will discover bugs you had no idea existed, be confused by interfaces you see as simple, and stress the back-end in ways that cannot be done in testing.  There will be decisions to make and hot-fixes to implement.  ",,,,,,,,,,,,Labs Capstone,,Labs VII,,,0,,,0
self-evaluate performance in capstone defense.,"After any important presentation or event, it is important to devote time to self reflection and evaluate what went well - and what did not.  This is a skill that comes with practice and leads to better performance after ever presentation.",,,,,,,,,,,,Labs Capstone,,Labs VII,,,0,,,0
join online kaggle competitions,,,,,,,,,,,,,Project Kaggle Contest,,"Portfolio Projects, Portfolio Projects 1",Machine Learning Core,,0,,,0
download and clean competition dataset from Kaggle,,,,,,,,,,,,,Project Kaggle Contest,,"Portfolio Projects, Portfolio Projects 1",Machine Learning Core,,0,,,0
"select, configure, and train a model to produce competitive results",,,,,,,,,,,,,Project Kaggle Contest,,"Portfolio Projects, Portfolio Projects 1",Machine Learning Core,,0,,,0
submit classification results back to Kaggle contest for scoring,,,,,,,,,,,,,Project Kaggle Contest,,"Portfolio Projects, Portfolio Projects 1",Machine Learning Core,,0,,,0
describe the decision boundary produced by optimizing support vectors,,,,,,,,,,,,,Support Vector Machines,,Artificial Intelligence,Machine Learning Core,,0,,,0
use non-linear kernels in SVM to produce non-linear classification boundaries,,,,,,,,,,,,,Support Vector Machines,,Artificial Intelligence,Machine Learning Core,,0,,,0
access Google TPU computation resources through Google account,,,,,,,,,,,,,Google TPUs,,Cloud AI,Machine Learning Core,,0,,,0
use AWS to configure instances and servers for ML model productization,,,,,,,,,,,,,Amazon AI,,Cloud AI,Machine Learning Core,,0,,,0
use map/reduce functional notation in python code,,,,,,,,,,,,,Map/reduce,,Big Data Tools,Machine Learning Core,,0,,,0
describe the remote architecture that enables rapid lookup via map/reduce,,,,,,,,,,,,,Map/reduce,,Big Data Tools,Machine Learning Core,,0,,,0
create hadoop server filled with >5GB of indexable data,,,,,,,,,,,,,Spark/Hadoop/Hive,,Big Data Tools,Machine Learning Core,,0,,,0
search and index big data via colab ML project,,,,,,,,,,,,,Spark/Hadoop/Hive,,Big Data Tools,Machine Learning Core,,0,,,0
compute backpropagation through hidden layers,,,,,,,,,,,,,Backpropagation,,Neural networks,Machine Learning Core,,0,,,0
create dataflow graphs for convolutional neural nets,,,,,,,,,,,,,TensorFlow,,Cloud AI,Machine Learning Core,,0,,,0
write gpu-parallelized graph dataflows,,,,,,,,,,,,,TensorFlow,,Cloud AI,Machine Learning Core,,0,,,0
identify frequent itemsets and association rules,,,,,,,,,,,,,Association,,Unsupervised Learning,Machine Learning Core,,0,,,0
use matrix factorization to identify user ratings and movie ratings,,,,,,,,,,,,,Association,,Unsupervised Learning,Machine Learning Core,,0,,,0
Debug DOM and JavaScript with Dev Tools,Every programmer should know how to approach debugging their code in the browser.  Taking time to understand what tools you have at your disposal will teach you how to solve problems before resorting to a search engine.  ,,,,,,,,,Chrome DevTools 101: Debugging JavaScript,,,,,,,,0,,,0
"Build a website from scratch using assets, content, and instructions.",Every full stack developer needs to know how to build a user interface from a design file.  You will be challenged to do so this week!,,,,,,,,,,,,,,,,,0,,,0
demonstrate the ability to use basic CRUD commands on the mongo shell,"You're going to be interfacing from time to time with the mongo shell. There really is no way around this and the shell is a tool that we should all get familiar with as we go about learning the ins and outs of MongoDB. Now today, there are some amazing tools out there that allow us to interact with our Mongo instances with programs called Graphical User Interfaces (GUI's). You'll be able to use GUI's to interact with your data. But the idea is that you kind of know what's going on under the hood just a little bit. ",,"Now that we all have Mongo installed and are up and running with the mongo shell we're going to learn a few **BASIC** commands that will help us interact with some persisted data. What we'll be doing here is using the mongo shell to create a place to store some information, create a collection for where we can add our documents (data), and insert some documents into our collection. Then we'll be able to use some mongo shell commands to read our data, updated our data and delete our data.

First things first, we need a mongo server running so we'll start by typing into our command line `mongod`. This should produce a large output that looks a lot like this. 

![Mongo Output](https://ibin.co/448Zx7c344p5.png)

You can ignore the line about the Warning

```
** WARNING: Access control is not enabled for the database.
```

This is only there to let you know that your mongodb server cannot be accessed by the outside world. Now that we have our Mongo server running, we're ready to start using the Mongo Shell to create some data. Remember all of this information will be stored locally on our hard drive at this point. We can virtually create databases that live on our own computers. There will be more later on that we will teach you how to store this information to a remote mongo server elsewhere. 

Now type in the command line in another window, `mongo`. This should pull up a REPL that we can use to interface with some mongo documents. You should see something like this, as well as some activity where your MongoDB Server is running.

![Mongo Shell](https://ibin.co/448chHSbmlsX.png)

This shows us that we're ready to run with Mongo. 

### Show Databases
* The command `show dbs` should print out some default databases that Mongo comes installed with. 
* Run `show dbs` in your _mongo shell_ and see what prints out. You should see something like this.

![Show DBS](https://ibin.co/448dkDpAeVHf.png)

### Use a database
* Using a database is as simple as typing in `use <database-you-want-to-use>`. 
* If you don't have a database that want to use, already on you machine, you can go ahead and create one by using the `use` command.
* **Example**: If I wanted to create a database for dogs, I could type in `use dogs` and mongo will know that I want to create a place to store my dog collections.
* When we type in this command we should see something like `switched to db dogs`.

```
> use dogs
switched to db dogs
>
```

### Insert
* Mongo needs a place to store our documents (JSON Objects). So when we want to start creating some data, we simply need to select what part of the database is going to receive our data.
* The `db.<collection>.insert()` command is designed create a collection (if one is not already created) and insert a document into that collection. 
* So for us, we want to create some doggos. `db.doggos.insertOne({name: 'Dug', species: 'Golden Retriever'})`
* A successful insert should look like this:
![Dug insert](https://ibin.co/448gIW5PszJv.png)

### Read
* Now we want to see what our data looks like in our beautiful new collection.
* `db.doggos.find()` will print all of the documents stored in our `doggos` collection.
* At this point it should look like this.
![doggos shown](https://ibin.co/448gwnCqsUDP.png)

### Update
* Lets update a document in our collection. 
* There are actually a few was we could update a document on a mongoDB collection. This way tends to be very verbose and straightforward.
* Lets say that we wanted to change Dug's name to all caps. We could so something like this.

```js
db.doggos.updateOne({query: {""name"": 'Dug'}, {$set: {""name"": 'DUG'}})
```

* `findAndModify` takes a query as a selection, (find the thing), and some modifiers as it's next `key:value` pair.
* Then you can do a find on your collection to see the updated document. 
* It should all look like this now. 
![Update Dug](https://ibin.co/448gwnCqsUDP.png)

### Delete
* ",,,,,,,Mongo CRUD operations,,,Mongo I,,,,,1,,,1
describe the component life-cycle and demonstrate the ability to use the built in life-cycle methods,,,,,,,,,,,,,,,,,,0,,,0
demonstrate the ability to use defaultProps in a React component,,,,,,,,,,,,,,,,,,0,,,0
demonstrate the the ability to use create-react-app to boilerplate a react application,"When React was first introduced, there was an even steeper learning curve to surmount before being able to even work with the technology. React brought with it some ""reversed technical debt"" (for more about what that phrase means visit [this wiki](https://en.wikipedia.org/wiki/Technical_debt){:target=""_blank""}) where you'd have to learn a whole bunch of new technology to get the benefits of working with React. This caused a lot of what was called `JavaScript Tool Fatigue` (a topic that has an exhaustive amount of Medium articles written to it's regard). Today the process of getting started with React is made much simpler, and it is streamlined thanks to the team at Facebook.",Teach the students to use both types of commands `create-react-app` and `npx create-react-app` to install a react application from the ground up. ,"By now you have been working with projects that were already built using the Create React App (CRA) generator. So you are already familiar with the default architecture that comes from building an application this way. That being said, you have yet to use create react app yourself to build an app from scratch. This objective is all about getting you used to using this tool in whichever way you see fit. 

We can use yarn to generate a new React app with CRA:

```
yarn create react-app my-app
```

and start it up:
```
cd my-app
yarn start
```

(There is also a way to generate your app with `npm` but in Lambda, we're going to continue using `yarn` instead of `npm`. You can find out more about the `npm` command for this in the docs link posted above).

While CRA 2.0 is still new, you may run into some errors when trying to run the above command. If you are able to generate and start your app successfully, skip the following section.

### Potential Errors with CRA 2.0

#### Not using a compatible version of node
This error happens if you are using a version of node that is lower than 8.0. If this is the case, you will see something like this in your terminal:

<img src=""https://tk-assets.lambdaschool.com/f043a836-43f4-4bdc-84fc-d40299f56cd7_ScreenShot2018-10-03at5.06.55PM.png"" alt=""drawing"" width=""800px""/>

To fix this, you need to have the node version manager installed. Follow this [link](https://github.com/creationix/nvm){:target=""_blank""} to install it so that you can run `nvm` commands in your terminal.

Check that it installed correctly with `nvm --version`.

Now you can install a compatible version of node, then use that version with these two commands:

```
nvm install 8.12.0
```
Then, after it installs:
```
nvm use 8.12.0
```

Now try to generate your React app again, cd into the app directory and run `yarn start`

#### Yarn start error

If you have received an error that looks like this after running `yarn start`

<img src=""https://tk-assets.lambdaschool.com/46754c41-22b8-4a1b-a9d4-99b2fae68deb_ScreenShot2018-10-03at5.27.59PM.png"" alt=""drawing"" width=""800px""/>
Then you should follow the steps provided to try and fix the issue. If you want a quick fix, and just move onto writing code this time, you can copy `SKIP_PREFLIGHT_CHECK=true` this line of code now.
- Create an `.env` file in your `newly created` project directory
<img src=""https://tk-assets.lambdaschool.com/dedf38c2-e6f0-4e8d-9ed2-8ff2519c6984_ScreenShot2018-10-03at5.33.49PM.png"" alt=""drawing"" width=""800px""/>

- paste this line of code in that `.env` file `SKIP_PREFLIGHT_CHECK=true`
- save that file and run `yarn start` in your application directory again and you should be good to go!


Now that we know how we can work with the software, lets make sure we all have it up and running. This process varies in time for each individual programming environment. A lot of this will depend on your bandwidth, network connectivity and processing power of your computer. Luckily, you don't have to do this every day, only for every project. ","Let's begin to look at how we can build out a react application. Create React App (CRA) will allow us to do this with ease.

Lets cd into a directory where we want to install our react application. And run `yarn create react-app animals` to create a react application called animals. 

As soon as you run that command you should start to see your project is being installed. Once installed you should see a message that looks like this:

<img src=""https://image.ibb.co/cCuMud/proper_install_cra.png"" alt=""drawing"" width=""800px""/>

As mentioned above, installation times will vary depending on a variety of factors. But now we have a React application installed locally on our machines that we can use. This is how you're going to build out React Applications throughout the remainder of the course. This process is so nice compared to the react of yesteryear. 

Now let's take a look at this project we just built and see what files we have at our disposal. Go ahead and cd into `animals` and take a peek at the file structure/README.md to see what is given to you. 

Your file structure (as of this CRA release) will look like this.

![file-struct](https://image.ibb.co/d3WCHy/CRA_files.png)

You should have a main `index.js` file in the `src`, which is mounting our `App` component to the `root div` found in the `index.html` file which lives in `public`. Notice how we're importing in `App.js` from inside of `index.js`. 

Inside of `src/App.js`, we can see that we're given a class component. This approach is nice because in a typical react app, this main `App.js` component is used to hold onto state and sort of act as the data control center for the rest of our application. Of course, you can build out many other `stateful/class components` but App's main purpose is to be the one single component that we pass to `ReactDOM.render` in order to compose our application. So all other components shall live here. 

Inside of `App.js` let's build out a constructor function and add some state to the component. We're going to render a list of animals. The way we're going to do this is to import an array of animals from a separate file, and set it on our state. For now, your animals array should just be empty. 

![animals-state](https://image.ibb.co/f0TOqJ/state.png)

You will be given an `animalsData.js` file that you can include in your application. This should be stored inside of `src`. We're going to refactor our App.js so that we can import that array of animals and set those animals on the state. If you've saved that data file into your src directory you should be able to just write the following code at the top of your App.js component file. 

`import animals from './animalsData.js;'`

Now in our constructor, we'll set those items on the animals array found in state. After doing all of that, your constructor should look like this with the import statement as well:

![state-animals](https://image.ibb.co/jVZufJ/animals_on_state.png)

So we've been writing a bunch of code, but we haven't tested anything to make sure it works quite yet. Let's go ahead and run `yarn start` to boot up our web developer server so that we can check out our state and see if our data is being set properly. This is a step that you're pretty familiar with at this point. So you should be able to tell if something is wrong pretty quickly, conversely, you should be able to see if it worked. Now that your server is up and running, head to `localhost:3000` to see if you can inspect with the `react-dev-tools` in the browser.

You should have an array with 50 records on it that looks a lot like this: 

![animals-array](https://image.ibb.co/mmaH0J/state_animals.png)

Last thing we'll do is iterate over those animals and create a list of elements based on their 'name' and 'species data. _This_ you know how to do. So I'll let you go for it.

Here is a link to see what our final project should look like:

[![Edit animals](https://codesandbox.io/static/img/play-codesandbox.svg)](https://codesandbox.io/s/y3rw12qy21)","Repeat the above process that we just did but create a react application from scratch called `react-avengers`. 
- This app is to take an array of Avengers stored on a state object inside of `App.js` and display each avenger in a list element on the screen. 
- Change the `Welcome To React` heading to `Avengers: by <your-name>`.
- Once you're finished, go ahead and create a git repository on your own github account and push this app to that repository. 
- Submit your Github Repo link to your Project Manager so they can see that you have demonstrated the ability to use a Create React App to build out something on your own.",N9BxYpUqdDg,http://youtube.com/watch?v=N9BxYpUqdDg,https://www.youtube.com/embed/N9BxYpUqdDg,https://www.youtube.com/embed/N9BxYpUqdDg,Create React App,,,React Tooling,,Intermediate React,Full Stack Web Development Core,,1,1,1,3
use styled-components to add functional styles to their React Components,"So far through the React unit, we have learned how we can write our HTML in JavaScript using JSX. Now, we're going to ask the question that many React devs have asked - why can't we write our CSS in JavaScript as well? The answer... We can! With a library called `Styled Components`, we are going to build reusable components that get passed the styling we want via JavaScript! To go a little deeper into this line of thought, read this great medium article [here](https://medium.com/@_alanbsmith/why-we-use-styled-components-at-decisiv-a8ac6e1507ac).",,"`Styled Components` is a library for writing CSS in our JS files. As mentioned in the article above, the idea of having HTML or CSS written in JS hasn't been a _bad_ idea, it's more that the implementation for either hasn't been done well. React introduced JSX as a better tool for writing HTML in JS, and now we have great libraries to write CSS in JS.

To get started with `styled-components` we run `yarn add styled-components` or `npm install --save styled-components`. And that's it! Now you're ready to roll! We can import it into our js files, and start building components.

Now that I have installed `styled-components` Here is how you can use them. 

I'll simply import the `styled` default object from `styled-components` and then have access to every property on that object. Each property, is a React component that will print out whatever property you reference as a DOM element.

```js
import styled from 'styled-components'
```

```js
// div
const StyledDiv = styled.div``;

// paragraph
const StyledP = styled.p``;

// section
const StyledSection = styled.section``;

// headers h1 - h6
const StyledHeading = styled.h1``;

// a
const StyledA = styled.a``;

// etc.....
```

I think you're starting to get the point. Now you'll notice that I'm using that fancy [template literal](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals) syntax. Thats because each one of these properties that are found on the `styled` object are actually methods... and now in JS we can actually pass in string arguments using string literals 
","[Link to codesandbox from the video to follow along](https://codesandbox.io/s/yqvkxxrmn1) 

### Lets build out div component

To import styled-components, add `import styled from 'styled-components';` to your js file. Then we will use `styled.div` to create a new component. Look at how we set this up, then we'll talk about the funny syntax:

```js
import React from 'react';
import styled from 'styled-components';

const WrapperDiv = styled.div`
    width: 100%;
    height: 100%;
`;

function SomeComponent() {
  return (
    <div className=""wrapper"">
      <h1>Hello From the Home Component</h1>
    </div>
  );
}

export default SomeComponent;
```

We have created a component called `WrapperDiv` that is going to take the place of the `.wrapper` div. We have passed two css properties and values - `width` and `height`. But what is up with the backtick syntax?

From their docs: ""This unusual backtick syntax is a new JavaScript feature called a tagged template literal. You know how you can call functions with parenthesis? (myFunc()) Well, now you can also call functions with backticks!"" 

So we are just invoking a function! And when we invoke this function, we are passing a string with our styles to it. Under the hood, styled-components is going to render a div with a funny looking class name, and apply the styles that we passed to it. Now we can take our new component, and put it into the JSX.

```js
import React from 'react';
import styled from 'styled-components';

const WrapperDiv = styled.div`
    width: 100%;
    height: 100%;
`;

function SomeComponent() {
  return (
    <WrapperDiv>
      <h1>Hello From the Home Component</h1>
    </WrapperDiv>
  );
}

export default SomeComponent;
```

### There's more...

While this is all really cool, it seems like a little too much work if that is all we are gaining from style-components, right? Until we realize that there is so much more we can do! How about passing in props to change the color of buttons?

```js
import React from 'react';
import styled from 'styled-components';

const Button = styled.button`
    padding: 6px 10px;
    margin: 5px;
    border: none;
    border-radius: 3px;
    color: white;

    ${props => (props.type === 'primary' ? `background: #2196f3;` : null)}
    ${props => (props.type === 'success' ? `background: #4caf50;` : null)}
    ${props => (props.type === 'danger' ? `background: #f44336;` : null)}
    ${props => (props.type === 'warning' ? `background: #fdd835;` : null)}
`;

function SomeComponent() {
  return (
    <div>
      <Button type=""primary"">Primary</Button>
      <Button type=""success"">Success</Button>
      <Button type=""danger"">Danger</Button>
      <Button type=""warning"">Warning</Button>
    </div>
  );
}

export default SomeComponent;
```

<img src=""https://tk-assets.lambdaschool.com/768cf7a6-a21d-49ff-9419-fae5b329b1b5_ScreenShot2018-09-11at8.49.13PM.png"" alt=""drawing"" width=""400px""/>

Note that inside the ${} we are running a function that takes in props, and returns the correct background color based on props.type. This has endless possibilities!

So we just created a single, reusable `<Button />` component that will change colors based on what we pass to the `type` prop! But wait... there's more!!! Let's create a ""base"" `Button` component, then create a `TomatoButton` component that extends some extra styles to it (this example is straight out of the docs)!

```js
import React from 'react';
import styled from 'styled-components';


const Button = styled.button`
  color: palevioletred;
  font-size: 1em;
  margin: 1em;
  padding: 0.25em 1em;
  border: 2px solid palevioletred;
  border-radius: 3px;
`;

// A new component based on Button, but with some override styles
const TomatoButton = styled(Button)`
  color: tomato;
  border-color: tomato;
`;

function SomeComponent() {
  return (
  <div>
    <Button>Normal Button</Button>
    <TomatoButton>Tomato Button</TomatoButton>
  </div>
);

export default SomeComponent;
```
<img src=""https://tk-assets.lambdaschool.com/55ce1f76-51e9-436b-bde8-3eb315c919e9_ScreenShot2018-09-11at8.49.26PM.png"" alt=""drawing"" width=""400px""/>

(You may have noticed that we are invoking a function, passing in a component, and it is returning a new component with added functionality... `styled` is an HOC!!!!)

Now we're talkin! With this, and so much more that we can learn from the styled-components docs, we can move styling into our JS, create a lot of dynamic reusable components, and we could even create our own style library, simply and quickly, full of components that can be plugged in anywhere!","Take your Todo APP that you built out last week, and apply the principles you've learned here today to style that app. Make it look nice and pretty! Share your newly polished app with your peers in the #show_it_off channel!",BFKQWaWwaQ0,http://youtube.com/watch?v=BFKQWaWwaQ0,https://www.youtube.com/embed/BFKQWaWwaQ0,https://youtu.be/bIK2NwoK9xk,Why Styled Components,,,CSS in JS,,Intermediate React,Full Stack Web Development Core,,1,1,1,3
use Xcode to create a new project,,,"An Integrated Development Environment, or IDE, is a single app containing all the tools you need to write an app. There are IDEs for all kinds of development, including web development, Android development, embedded development, etc. Xcode itself is provided by Apple and is the IDE used for iOS app development. Even iOS itself is written using Xcode.

As an IDE, Xcode is a large collection of tools used for writing code, testing, debugging, running apps, submitting to the app store, and much more. Because it's a complicated tool, there is a lot to learn, and you shouldn't expect to become an expert in a day. But we'll slowly introduce you to it, and you'll learn more about Xcode as you progress learning iOS development.","Create a new iOS project. Note the various templates Xcode provides for new projects, but understand that we'll usually use the iOS Single View Application template. Build and run the project. This is a good time to get familiar with the simulator.

Open Xcode, then create a new single view iOS project. Understand the important options in the sheets that appear when creating a project (e.g. team, organization identifier, language selection, etc.)",,,,,,,,,Intro to iOS,Active,Intro to iOS,Precourse iOS,,0,,,0
explain what is Lambda School and what is Web Dev 101,,"No need to go into too much detail on Lambda School, as each night we will explain it in a littler more detail. ",,,,,,,,,,,,,,,,0,,,0
use HTML code to create a basic webpage ,One of the core building blocks of web development is the HTML language. HTML is used to put content on a web page: everything from text to images to buttons. We will be learning the basic rules of the HTML language to construct a simple web page. ,,"#### What is HTML?
As already mentioned, HTML (which stands for Hyper Text Markup Language) is one of the languages we use for web development. HTML was created as a language when the first visual web browsers came into existence in the early 90s. It is read by the browser and then used as a blueprint for displaying information on your screen.

HTML is not considered a ""programming language"", but is rather what we call a ""markup language"". This means that it is specifically designed to render data in a graphical form (rather than execute tasks). 

#### What are HTML elements?
HTML is made up of elements. We can think of elements as being boxes of content on our web page. Different types of content will be contained in different boxes. For example, we use certain elements for headers, other elements for images, and still other elements for text. 

We will be focusing on four different display elements today: division elements (divs), headers, paragraphs, and spans. 

#### How do we use CodePen?
We will be writing our HTML code in a sandbox environment called CodePen. CodePen is a great learning tool (as well as a great place to tinker with small chunks of code on the job). We write HTML directly in the HTML section of CodePen and the elements that we create will render in real-time onscreen. This is much faster than having to save our file and reload it in the browser every time we make a change. 

CodePen also allows us to leave out a couple of critical elements: the `html`, `head`, and `body` elements. These are important to understand when we start writing HTML code in our text editors, but for now, we can ignore them, because CodePen handles them automatically. 

#### What are tags?
To create an HTML element, we need to use tags. Each element has a specific tag name such as `div`, `p`, or `span`. These tag names are built into the language and must be written exactly as expected in order for our HTML to render correctly. For example, `paragraph` is not a valid tag name in HTML, but `p` is. We can use online documentation to verify which tag names exist and what elements they are used for.

Once we know our tag name, we can create an opening tag using brackets: `<p>`. These tags must be syntactically precise: an opening bracket + a tag name + a closing bracket. A closing tag looks almost exactly the same, except with a backslash before the tag name. So a closing paragraph tag would look like this: `</p>`. Thus, to create a paragraph, we need only write an opening tag and a closing tag:

```html
<p></p>
```

Of course, a paragraph isn't very interesting without text. The content of an HTML element always goes in between the two tags. So a paragraph containing some content would look like this:

```html
<p>Don't forget to close your tags in HTML!</p>
```

#### So what are divs, headers, paragraphs, and spans exactly?
We will be focusing today on four types of display elements. Now that we understand how to create these elements, let's explore their use cases. 

* `<p>`
  * The p (""paragraph"") element. This element is meant for holding text. By default, it will render text to the screen on a new line.

```html 
  <p>Here is a paragraph!</p>
```

* `<div>`
  * The div element is a generic container. It is used primarily for grouping other HTML elements together. It is invisible by default but can be used to position or style a group of elements. 

```html
<div>
  <p>This paragraph is about grapefruits.</p>
  <p>This paragraph is also about grapefruits! I guess it's related to the paragraph above.</p>
</div>
```

* `<span>`
  * The span element is a generic text container. It does not create a new line like the p element does. This element is invisible by default but can be used for styling words or phrases within a larger body of text.

```html
<p>This paragraph contains a <span>very important phrase</span> that should be styled in some way.</p>
```

* `<h1>-<h6>`
  * These are header tags there are intended to be used as a way to present the subject matter of the page. 1 is the most important and 6 is the least important. By default, 1 will be the largest, 2 will be the next largest, and etc. 

```html
  <h1>Most Important Headline!</h1>
  <h3>Sort of important headline.</h3>
  <h6>Least important headline.</h6>
```

#### How can I inspect an existing web page?
When learning HTML, it can be useful to investigate existing web pages. There is a tool built into every browser called the inspector that allows us to do this. Just right-click any element on a webpage and select ""inspect"" or ""inspect element"", depending on the browser. This will pop up a sidebar that allows you to explore all the HTML on the web page. It can be overwhelming for a new developer, but it is a good way to get a taste of what goes into building a complex, production web page. ",,,,,,,,,,Introduction to Web Development Fundamentals,,Intro to Web Development,Precourse FSW,,1,,,1
use Interface Builder to add controls to a storyboard,,"Open an existing app's storyboard(s) to show students what a real app storyboard looks like. You might show them various screens and the connections between them. There is no need to go deep here, it's just about introducing the idea of IB and storyboards.

Switch back to a new project or empty storyboard. Demonstrate dragging various controls from the object pallete onto a view, so students get an idea of how IB works. Show that objects can be dragged around, resized, etc.

Briefly discuss the Inspector pane on the right. Show the Attributes Inspector tab and how it can be used to configure various properties of a control.","Interface Builder is a part of Xcode that allows us to visually create our application's user interface using drag and drop. It's not completely different from using Keynote or a graphics editor like Photoshop.

The files we edit in Interface Builder are called Storyboards because they allow us to create different screens (aka scenes) for our app, and to set up the flow between them.

We can also add buttons, text labels, sliders, and lots of other kinds of user interface elements to our app's screens in Interface Builder.","Follow the instructor through dragging a button onto the view controller in your project's Main.storyboard. Put it in the center of the view, then add constraints to keep it in the center. Change the button's title to ""Hello"". ",,,,,,,,,Intro to iOS,Active,Intro to iOS,Precourse iOS,,0,,,0
create and connect IBActions,,"Demonstrate creating an IBAction by opening the assistant editor and control-dragging from the button to ViewController.swift. Explain that after doing that, when the app is run, and the button is tapped the code inside that IBAction will be run.","One of the fundamental things that any app needs to do is react to a user's actions. When a user taps a button, the app needs to do something in response. While we can add buttons to our app's screens using Interface Builder, we have to write code in Swift to do something in response to the button being tapped.

While we write the code that actually runs when the button is tapped in Swift, we use Interface Builder to connect the button to that code. In other words, we use Interface Builder to tell the app, ""Hey, when this button is tapped, run _this_ piece of code.""

The piece of code run when a button is tapped is called an `IBAction`, for ""**I**nterface **B**uilder **Action**"". To create one, we can open up our app screen's Swift file using the assistant editor, and drag a connection from our button into it.","Follow the instructor through creating an IBAction for the button in the app. Call the IBAction `hello(_:)` or similar, _not_ `buttonTapped()`. The action should have a single `print(""Hello, World!"")` statement. Run the app in the simulator, tap the button, and see ""Hello, World!"" appear in the debug console.","Change the print statement in your IBAction to print something different. Run the app again, tap the button, and see what happens.",,,,,,,,Intro to iOS,Active,Intro to iOS,Precourse iOS,,0,1,,1
change a property of the view controller's view,,"Introduce the documentation viewer to the students. Emphasize that this should be their first stop when learning about a particular framework, class, or method. Show them the documentation for `UIView`, specifically covering the various properties it has affecting its appearance.

Explain that we want to change the view's background color when the button is tapped. Show them the `backgroundColor` property and its documentation.","In addition to responding to user actions, apps need to be able to update what's being displayed on the screen. We call the things that actually appear on the screen _views_. Views have many properties that can be changed, including background color, border thickness, text (for views that display text), etc. Views can also be moved, hidden, shown, animated, and more. A lot of what you'll be learning as you learn iOS development is how to make the views in your app look, move, and work the way you want them to.",Follow the instructor through implementing a button action that changes the view's color from white to another color. Run the app on the simulator and test it to be sure that it works.,"Add two additional buttons with their own actions. Make it so tapping each button changes the color of the screen to a different color. Run the app and test to make sure it works correctly.

For a complete list of the colors available to you, search the documentation viewer for `UIColor`, or see [here](https://developer.apple.com/documentation/uikit/uicolor).",,,,,,,,Intro to iOS,Active,Intro to iOS,Precourse iOS,,0,1,,1
build and run an app on the device,,"Demonstrate connecting a device, and show it appearing in the destination selector at the top of the Xcode window. If necessary, select the correct (Personal Team) code signing settings. Run an app on the device.","*(Note: Some students may not own an iOS device on which to test. If you don't own an iOS device, consider this objective optional for now.)*

The simulator is a great way to test your apps as you're developing them. But you'll always want to also test your apps on a real device. Xcode allows you to run, test, and debug your apps on a real device just like you can on the simulator. In order to run your app on your device, you first need to connect it to your Mac with a Lightning cable. You may be prompted on both the device and your Mac to allow the devices to trust each other.","This step is optional for now. Students that don't have a device need not do it. 

Follow the instructor through running the app on your device.",,,,,,,,,Intro to iOS,Active,Intro to iOS,Precourse iOS,,0,,,0
use Xcode to create a playground,,"Demonstrate creating a new Swift playground. Demonstrate some very simple Swift code, for example assigning a variable, adding two numbers together, and print statements. Show the right-side results area as well as the bottom output console.","Xcode includes a feature called playgrounds. Playgrounds are simple documents that contain Swift code. What makes playgrounds unique is that when you type Swift code into them, Xcode runs your code immediately and shows you the results. You don't have to compile and run the code in the simulator or on a device, and the time it takes to get feedback to know if your code is working is very short.

Playgrounds are a great way to explore and learn Swift. Even as you gain experience, you'll find that they're a nice way to try out ideas you have, to explore new technologies that you're learning, or even to write simple tools that help you with your work.",Follow the instructor through creating your own playground. Enter some code and ensure that it runs and that you can see the results.,,,,,,,,,Intro to Swift,Active,Intro to iOS,Precourse iOS,,0,,,0
use `print()` to output text to the console,,Demonstrate the print statement by printing various strings to the console. ,"One thing that essentially all programs do is output information for the user. In an iOS app, the output is everything the user sees or hears: text, images, colors, video, even audio. In many simple programs, it's valuable to be able to output simple text to the screen. In Xcode playgrounds, you can make your program output text for the user to read using a `print` statement.

In its simplest form, a print statement looks like this:

```
print(""Text you want to output here"")
```

You start by writing `print`. Immediately after the word `print`, you put the text you want to output in parentheses. In Swift, text, also known as a ""string"", goes in double quotes. When the line above runs, the user will see the following in the output console:

```
Text you want to output here
```",,"Write a print statement that introduces yourself, for example:

```
Hello, my name is Andrew, and I love iOS development.
```",,,,,,,,Intro to Swift,Active,Intro to iOS,Precourse iOS,,0,1,,1
understand and use constants (let) to store values,,"Demonstrate creating constants with various values, including numbers and strings. Show that the compiler will produce an error if you try to change the value of a constant after it is created. Show that you can print the value of a constant by passing it to `print()`.","Every app deals with data or information. There are many types of data including numbers, text, images, audio, video, just to name a few. One of the most fundamental aspects of programming is managing and storing data.

Using a *constant* you can name a particular value. For example, we might have a constant called `age` whose value is a certain person's age in years. We can create a constant using a `let` statement.

```
let age = 42
```

A let statement starts with `let`. Next, you write the name of the constant. In this case, the name of our constant is `age`. Next, you write an equal sign, then the value you want the constant to have, in this case 42.

**A note about naming**: You can name constants anything you like, with a few small restrictions. The biggest one to remember is that constant names can't start with a number (though they can contain a number elsewhere). The names you choose for your constants are important. During your career, you'll spend a lot more time reading code than you will actually typing it. Writing code that is easy for you (and other humans) to read and understand is a vital part of being a good programmer. So choose names that are concise but very clearly convey the purpose of a constant. You should avoid the temptation to abbreviate names except in cases where the abbreviation is common and just as easily understood as the full name (these cases are rare!).

As its name implies, once you've created a constant, its value cannot change. However, its value can be used to make calculations, be outputted to the screen, and much more.","Follow the instructor through creating constants for your first and last names, and your birth year. Use print statements to print each value.",Add constants for your favorite food and favorite color. Print those with a print statement.,,,,,,,,Intro to Swift,Active,Intro to iOS,Precourse iOS,,0,1,,1
understand and use variables (var) to store and change values,,"Demonstrate the difference between `let` and `var`, showing how if you attempt to change a `let` constant, the compiler will produce an error, while changing a `var` succeeds.","If you want to name a value that can change, you use a variable. Unlike a constant, variables can be given new values as the program runs. To create a variable, use a `var` statement:

```
var age = 42
```

The format (syntax) for a variable is the same as it is for a constant, except that you use `var` instead of `let`. The same naming rules apply to variables, too.

Because `age` is a variable now, we can change it on the next line:

```
var age = 42
print(age)
age = 43
print(age)
```

To change the value of a variable, you _assign_ a new value to it. Assignment statements in Swift start with the name of the variable being assigned, then an equals sign, then the new value you want to assign to the variable.","Change your `age` constant to a variable. Then, after printing it, set it to a new value, and print it again.",,,,,,,,,Intro to Swift,Active,Intro to iOS,Precourse iOS,,0,,,0
"understand and use different types of variables and constants, including Int, Float, Bool, etc.",,"Demonstrate adding type annotations to variables and constants. Show how a variable of a certain type, like `Int`, cannot have a non-`Int` value assigned to it.","Constants and variables always have a _type_. The compiler needs to know what type your values are so it can tell whether what you're using them for actually makes sense. For example, it makes sense to add two number values together. But if you tried to add a number to an image, that wouldn't make any sense, and the compiler would complain.

So far, we've only worked with two types: numbers and strings. But Swift includes **many** different types, and you can create your own types, too! We'll learn a lot more about other types and creating your own types later. For now, it's important to know that types exist, and to know about a few of the most common ones you'll see.

#### Number Types

There are actually multiple number types, including `Int`, `UInt`, `Float`, and `Double`. `Int` is short for _integer_ and is a whole number that can be either positive or negative. `UInt` is an _unsigned integer_, and is a whole number but it can only be positive. In other words, it can't have a minus sign. You'll see both types used in Swift, but `Int` is more common, and is the default. `Float` and `Double` are both kinds of _floating point_ numbers. Floating point numbers are numbers with a decimal point like `3.14`. The difference between `Float` and `Double` is their precision, and the maximum value they can store. `Double` is more precise and can store larger numbers than a `Float`. However, it also takes up twice as much memory space as a `Float`. You'll see both types used in Swift, but `Double` is more common, and is the default.

#### Boolean

Another common type is `Bool`, which is short for _boolean_. Boolean values can only be either true or false. We could create a boolean variable like so:

```
var swiftIsCool = true
```

#### Type Inference

Normally, Swift is able to figure out, or _infer_ the type of a value based on context. It's clear that `42` is an integer, or `Int`, not a string. Similarly, `""Hello""` is obviously not a number, it's a string. This feature is called _type inference_ and is one of the things that makes Swift concise and nice to write. Type inference means that usually, when you create a constant or variable, you don't need to tell the compiler what type it is, it will figure it out. 

#### Type Annotations

However, sometimes you do need to be specific and tell the compiler that a value should be a certain type. You do this by including the type in the code you use to create the constant or variable. We call this adding a _type annotation_ to the definition.

Let's say we wanted to make our `age` variable an unsigned integer, or `UInt`. After all, ages can't really be negative. By default, any whole number is assumed to be an integer, so when we created an `age` variable earlier, the compiler inferred that it should be an `Int`.

```
var age: UInt = 42
```

To create a type annotation, add a colon (`:`) after the name, then a space, then the type the constant or variable should be. Here, we're telling the compiler that our age variable should be a `UInt`.",Follow the instructor through adding explicit type annotations to the variables and constants you've already created.,,,,,,,,,Intro to Swift,Active,Intro to iOS,Precourse iOS,,0,,,0
understand when to use var vs let,,Explain a little about when _you_ use var vs let.,"Now that you've learned about constants and variables, you might be asking, ""which one should I use?"". As with so many questions, the answer is ""it depends"". If you have a value that needs to change, you should use a variable. If you have a value that never changes, use a constant. 

You might think that always using variables makes sense, because you can change them if you need to, or leave them the same. In fact, many languages don't have constants, and only use variables. However, this is not a good idea in practice.

In fact, as you read and write more and more Swift you'll notice that variables are actually quite rarely used. As a rule of thumb, you should always make your values constants with `let`. If, and only if, you actually need a value that can change, should you change your value to a variable.

There are several reasons for this rule of thumb. It turns out that making your values constants allows the compiler to make some optimizations and make your programs slightly faster. More importantly, if you know a value **shouldn't** change, and you make it a constant, the compiler is able to make absolutely sure that it **doesn't** change. This helps prevent bugs, and is one of the many things that makes Swift a safe language.",,,,,,,,,,Intro to Swift,Active,Intro to iOS,Precourse iOS,,0,,,0
"use arithmetic operators to add, subtract, multiply, and divide variables",,"Demonstrate the use of all the arithmetic operators. Show how compound assignment works. Demonstrate integer division, and its truncation of the fractional part of the result. Explain that including a decimal point (e.g. `5.0`) in a number literal causes the compiler to infer that it is a `Double`.","If you have numeric values in your program, it seems natural that you'd do math with them! You use _operators_ to combine, change, and check values. Operators in Swift are actually very powerful, and can be used with many types, but we'll start by just learning how to use them with numbers.

There are four basic arithmetic operators: add (`+`), subtract (`-`), multiply (`*`), and divide (`/`). These operators work the way you'd expect. You can use them directly on numbers, or on constants or variables.

```
let answer = 7 * 6
```

```
let score = 3 + 5 + 8
```

```
let birthYear = 1976
let currentYear = 2018
let age = currentYear - birthYear
print(age)
```

You can even use operators to modify a variable:

```
var score = 3
score = score + 7 // Adds 7 to score
```

The second scenario -- where a variable is assigned with a value calculated by adding, subtracting, multiplying, or dividing itself with another value -- is so common that there is a shorthand for it.

```
var score = 3
score += 7
```

`score += 7` here means, ""take the current value of `score`, add 7 to it, then assign the result back to `score`"". You can do the same thing with `-=`, `*=`, and `\=`. This is called _compound assignment_.

#### Division

Remember that `Int` (and `UInt`) values can only store whole numbers. When you divide two `Int`s by each other, the result will also be an `Int`, and will be the result of the division **rounded down** to the nearest whole number.

```
let x = 5
let y = 2
let result = x / y 
print(result) // 2
```

If you're doing division and need fractional values, you should use floating point numbers:

```
let x: Double = 5
let y: Double = 2
let result = x / y
print(result) // 2.5
```

#### Modulo

Dividing `Ints` always results in another `Int`, and throws away the fractional portion of the result. In other words, it does division the way you learned in elementary school where you calculate the answer and a remainder. But what about the remainder? Sometimes the remainder can be useful. Luckily, there's another operator that calculates remainders. It's called the _modulo operator_, and is written with a percent sign (`%`).

```
let x = 5
let y = 2
let remainder = x % y 
print(remainder) // 1
``` 

5 divided by 2 is 2 with a remainder of 1. `5/2` returns a result of `2`, as we discussed earlier. So, `5%2` returns the **remainder** of 5 divided by 2, which is 1.

What do you think `42%12` returns? What about `128%2`?

The modulo operator can be useful for calculating remainders, but it's also useful for finding out if one number is **evenly divisible** by another. For example, any number divisible by 2 will have a remainder of 0 when divided by 2. So, you check to see if `number % 2` is 0 to find out if a number is divisible by 2. We'll learn how to check conditions like that in the next lesson.",Follow the instructor through creating an age constant calculated by subtracting your birth year from the current year.,"Write a program that includes constants for the ages of your immediate family members. Then, calculate their average age and assign it to a new constant `averageAge`. Use `print()` to print `averageAge`.",,,,,,,,Intro to Swift,Active,Intro to iOS,Precourse iOS,,0,1,,1
use comments to make code easier to understand,,Go through a code base you've worked on or an open source codebase with good comments and show students how they make the code easier to follow.,"You should always strive to write code that is clear and easy for humans (including yourself in six months) to understand. Usually, this should mean that the code itself is nicely written, well-formatted, your variables have carefully chosen names, etc. However, sometimes, it's useful to be able to write little _comments_ to explain what a particular part of the code is doing. Comments are notes to you or another future reader of the code, but the compiler ignores them.

There are two ways to create comments in Swift. You can create a comment on the same line as some code by prefixing your comment with two forward slashes (`//`):

```
let birthYear = 1976
let currentYear = 2018
let age = currentYear - birthYear // Calculate current age
print(age)
```

Anything after the slashes will be ignored until the next line break.

If you want to write a comment that spans multiple lines, you can put your comments between `/*` and `*/`:

```
/* This is a longer comment.
It has multiple lines.
Everything in here is ignored by the compiler.
*/
```

You don't need to write comments for every single line of your code, but you should use them whenever you think a piece of code would be easier to understand with some additional commentary. When you're writing comments, avoid simply explaining exactly what the code is doing. That's usually easy enough to understand by reading it. Rather, write comments that explain the why, and the how at a higher level.

```
let z = (x + y) / a // Set z to the sum of x and y divided by a
```

This is a bad comment, because it's already clear that z is the sum of x and y divided by a just by reading the code.

```
let z = (x + y) / a // Calculate average score
```

This is better, because it explains _why_ the calculation is being done.

```
let averageScore = (firstScore + secondScore) / numberOfScores // Calculate average score
```

This code is a little longer, but by naming our variables well, the comment is less necessary.",Follow the instructor through annotating the playground you've just written with comments explaining what the code is for.,Add comments to your average age program to explain what each line is for.,,,,,,,,Intro to Swift,Active,Intro to iOS,Precourse iOS,,0,1,,1
use an if-else statement to choose which code to execute,,Demonstrate various if statement checks using several of the common logical operators. Include examples that use else and else-if clauses.,"When a program is running, it needs to make decisions about what to do based on code that has already run. There are different programming constructs that allow you to write decisions into your code. You check to see if one or more conditions is true, and if so, execute a particular block of code. We call this _control flow_, because it allows you to control how the computer flows through the code you've written.

#### If Statement

The simplest and most common control flow construct is the _if statement_. An if statement allows you to tell the computer to check **if** something is true, and run code if so.

```
let score = 42
if score > 25 {
    print(""You won!"")
}
```

This code checks to make sure `score` is greater than 25, and prints ""You won!"" if it is. If `score` is 25 or lower, the `print` statement would not be executed. Because we've set score to 42, the if statement will succeed, and the `print` statement will be executed.

#### Logical Operators

Here we're checking to see if a value is greater than another value, but there are lots of different conditions you can check. You check a specific condition using operators called _logical operators_. The table below summarizes some of the most common logical operators:

| Operator | Condition                                                   |
|----------|-------------------------------------------------------------|
| ==       | Two values are equal                                        |
| !=       | Two values are not equal                                    |
| >        | The left value is greater than the right value              |
| >=       | The left value is greater than or equal to the right value  |
| <        | The left value is less than the right value                 |
| <=       | The left value is less than or equal to the right value     |

#### Else

We've seen how you can check a condition and execute some code if that condition is true. What if you want to do something else if the condition is not true? You can add an _else clause_ to your if statement to do that.

```
let score = 17
if score > 25 {
    print(""You won!"")
} else {
    print(""Keep trying!"")
}
```

This code will check the score. If it's greater than 25, it will print ""You won!"". If it's less than 25, as it is here, it will instead execute the else clause, and will print ""Keep trying!""

You can also include _else if clauses_.

```
let name = ""Woz""
if name == ""Steve""
    print(""Hi, Steve!"")
} else if name == ""Woz"" {
    print(""Hi, Woz!"")
} else {
    print(""Nice to meet you!"")
}
```

If the first if statement fails because `name` is not `""Steve""`, the next if-else clause will be checked. Since `name` is `""Woz""`, ""Hi, Woz!"" will be printed. If `name` was also not `""Woz""`, the last else clause would get executed.","Decide whether the results of the expressions below are true or false.

```
3 == 3

42 == 76

10 != 10

5 >= 5

63 > 63

359 > 9
```","Write an if statement that checks to see if a variable called `temperature` is 32 degrees or lower. If it is, print ""It's freezing!"". If it's not, print ""It's not freezing"".",,,,,,,,Conditionals and Optionals,Active,Intro to iOS,Precourse iOS,,0,1,,1
"use AND, OR, NOT to combine boolean expressions",,"Demonstrate examples of compound statements using `&&`, `||` and `!`.","Often, you want your program to check several conditions at the same time, not just one. You can combine expressions using the AND, OR, and NOT logical operators.

| Operator     | Condition                                                      |
|--------------|----------------------------------------------------------------|
| &&           | True if the left expression AND the right expression are true  |
| &#124;&#124; | True if the left expression OR the right expression are true   |
| !            | Returns the opposite of the expression following the !         |

Use the NOT operator to invert a result:

```
let isRobot = false
if !isRobot {
  print(""Hello, fellow human."")
}
```

Here, `isRobot` is `false`, but the NOT operator inverts that to `true`, so the if statement succeeds and the print statement is executed.

You can check to see if two (or more) conditions are all true using the AND operator:

```
let isRobot = true
let modelNumber = 2000
if isRobot && modelNumber > 1000 {
  print(""01001000 01101001"")
}
```

The OR statement is also used to combine two or more conditions. Unlike the AND operator, only one of the conditions needs to be true for the print statement to be executed.

```
let isRobot = false
let isProgrammer = true
if isRobot || isProgrammer {
  print(""01001000 01101001"")
}
```

This code will print ""01001000 01101001"" because while `isRobot` is false, `isProgrammer` is true.

You can enclose one or more statements in parenthesis to make sure they're completely evaluated first.

```
if !(x > 5 && x < 10) && x != 0 {
  print(""x is non-zero and not between 5 and 10"")
}
```","Go through the examples below and decide whether the result of the expression is true or false.

```
3 == 3 && 6 > 12

42 < 2 || 3 > 1

let x = 76
x > 27 && x < 42

let x = ""hello""
!(x == ""hello"" || x == ""goodbye"")
```","Rewrite your temperature checking if statement to test for several ranges of temperatures as follows:

| Temperature Range | Output                         |
|-------------------|--------------------------------|
| Less than 0       | You're going to get frostbite! |
| 1 - 32            | It's freezing!                 |
| 33 - 55           | It's chilly!                   |
| 56 - 75           | It's nice.                     |
| 76 - 88           | It's a little warm.            |
| 89 - 120          | It's hot!                      |
| Greater than 120  | Are we on Mercury?             |

Test your code by changing `temperature` to several different values and making sure that the correct output is printed.",,,,,,,,Conditionals and Optionals,Active,Intro to iOS,Precourse iOS,,0,1,,1
use a switch statement to choose which code to execute,,"Switch statements in Swift are quite powerful, with their ability to do pattern matching, including optional unwrapping, their use with enums, and even the ability to implement custom checking for types with `~=`. These more sophisticated uses will be covered in the future. Right now, students should become comfortable with switch statements at their most basic level.

Demonstrate a few examples of simple switch statements.","Sometimes you want to check to see which of several values a variable is equal to. You can do that with a big if-else statment:

```
let numberOfWheels = 2
if numberOfWheels == 1 {
  print(""Unicycle"")
} else if numberOfWheels == 2 {
  print(""Bicycle"")
} else if numberOfWheels == 3 {
  print(""Tricycle"")
} else if numberOfWheels == 4 {
  print(""Quadcycle"")
} else {
  print(""That's a lot of wheels!"")
}
```

This works fine, but it can get unwieldy especially as the number of cases you want to check increases. For situations like this, there is another control flow construct called a _switch statement_. 

```
let numberOfWheels = 2
switch numberOfWheels {
case 1:
  print(""Unicycle"")
case 2:
  print(""Bicycle"")
case 3:
  print(""Tricycle"")
case 4:
  print(""Quadcycle"")
default:
  print(""That's a lot of wheels!"")
```

A switch statement checks the given value, and allows you to write code for each of the possible cases you'd like to handle. There's a special `default` case that executes if none of the other cases match.

One of the cool things about switch statements is that you can match multiple values in a single case.

```
let character = ""z""

switch character {
case ""a"", ""e"", ""i"", ""o"", ""u"" :
    print(""This character is a vowel."")
default: 
    print(""This character is a consonant."")
}
```

Switch statements can even check to see if a number is included in a range.

```
let distance = 27
switch distance {
case 0...9:
    print(""Your destination is close."")
case 10...99:
    print(""Your destination is a medium distance from here."")
case 100...999:
    print(""Your destination is far from here."")
default: 
    print(""Are you sure you want to travel this far?"")
}
```",,Rewrite your temperature checking if statement as a switch statement. It should print the same things for the same temperature ranges. Test your code by changing `temperature` to several different values and making sure that the correct output is printed.,,,,,,,,Conditionals and Optionals,Active,Intro to iOS,Precourse iOS,,0,1,,1
use the ternary operator to choose one of two options ,,Explain and demonstrate the use of the ternary operator in a few simple scenarios. Emphasize that it should be used wisely.,"The _ternary operator_ is like a really compact if-else statement. Often you might do something like:

```
let result: String
if someVar == 42 {
  result = ""Correct""
} else {
  result = ""Incorrect""
}
```

You can rewrite this in a single line using the ternary operator:

```
let result = someVar == 42 ? ""Correct"" : ""Incorrect""
```

The ternary operator is an _expression_ with three parts: a condition, a result to use if the condition is true, and a result to use if the condition is false. You put the condition first, followed by the result to use if the condition is true, then a colon, then the result to use if the condition is false.

When used well, the ternary operator can make your code more compact and easier to read. However, complicated ternary statements can become unwieldy and difficult to parse. As you write code, remember that one of the most important considerations is how easy it will be for someone else to read and understand it later. Shorter code is not always better.",Rewrite some if-else statments using the ternary operator. Examples can be found in Objective 1 of this lesson.,,,,,,,,,Conditionals and Optionals,Active,Intro to iOS,Precourse iOS,,0,,,0
understand and explain the purpose of optionals,,"Explain optionals, the safety they enforce, and demonstrate declaring and unwrapping them. Use metaphors as appropriate.","Swift was designed from the beginning to be a safe language. That is, it helps you write code that is correct and won't crash. Swift's support for _optionals_ is one of the ways it helps.

Optionals are used in Swift to indicate that a variable may or may not contain a value. If a variable is an optional, it may have a value, or it may be _nil_, meaning it has no value at all.

```
let password: String?
```

You make a variable an optional by adding a question mark to the end of its type. Here, `password`'s type is an optional string. If `password` has a value, it will be a String. If it does not have a value, it will be nil.",,,,,,,,,,Conditionals and Optionals,Active,Intro to iOS,Precourse iOS,,0,,,0
use an if let statement to unwrap an optional variable,,"Explain optionals, the safety they enforce, and demonstrate declaring and unwrapping them. Use metaphors as appropriate.","Think of an optional like a box that may or may not be empty. Before you open the box you won't know if it contains something or is empty. With an optional, the process of ""opening the box"" to see if there's a value inside or nothing (nil), is called _unwrapping_. There are a number of ways to unwrap optionals, but the simplest and most common is a special kind of if statement called an _if-let statement_.

```
if let unwrappedPassword = password {
  login(unwrappedPassword)
} else {
  print(""Please enter your password:"")
}
```

An if-let statement checks to see if an optional has a value. If it does, it assigns the value to a new constant you specify **and** evaluates its condition as true. Here, if `password` has a value, that value is assigned to a new constant `unwrappedPassword`, and the `login()` statement runs. Within the if clause where `login()` is called, `unwrappedPassword` is **not** an optional. You are guaranteed that it has a value. If `password` is nil, the if-let statement's condition evaluates to false, and the else clause runs instead, and the ""Please enter your password:"" message is printed.

The entire idea behind optionals is that you are telling the compiler as much as possible about the data your code is going to handle. If a variable is optional, the compiler will require you to unwrap it before you use its value. That way, code can't end up running with unexpected, and unhandled nil values.

On the other hand, if a variable is non-optional, the compiler knows for sure that it will never be nil, and won't require (or even allow) you to unwrap it.","Go through a number of variables below and decide whether or not they should be optionals.

- `firstName`
- `middleName`
- `lastName`
- `favoriteColor`
- `temperature`
- `gasTankLevel`
- `numberOfChildren`

Clearly the answers to these will depend on context. The idea is to get you thinking about how to decide whether a given variable should be optional or not rather than coming up with a ""correct"" answer for each. Understand that there is a distinction between 0 and nil. e.g. `numberOfChildren` should probably not be optional, because a person with no children would have 0, which is a valid, non-nil value.","Think of properties you'd use to describe a business. Write a variable for each property. For each variable, decide whether or not it should be optional. Include a property for `website` and decide whether or not it should be optional.",,,,,,,,Conditionals and Optionals,Active,Intro to iOS,Precourse iOS,,0,1,,1
use `for in x…y` to run a piece of code multiple times,,Show a few examples of for loops using ranges. Show the difference between a range created using `...` and `..<`.,"A lot of tasks in programming require doing the same thing over and over until a certain condition is met. Think about calculating the sum of a list of numbers. You have to keep adding each successive number to your sum until you've finished with all of them.

In code, we use loops to repeat a certain task multiple times. There are two main kinds of loops we use in Swift: _for-in loops_, and _while loops_. A for-in loop loops through a lists of thing, often numbers. For-in loops are also very commonly called simply ""for loops"". A while loop repeats a block of code as long as a certain condition is true, and stops looping when that condition is no longer true.

#### For-In Loops

The simplest for-in loop looks like this:

```
for x in 1...10 {
  print(x)
}
```

Start a for loop with the word `for`, then the variable you want to use for the loop index, then `in`, then the range of numbers you want to loop through, starting with the first value in the range, then `...`, then the last number in the range. Finally, put the code you want to run repeatedly in braces. This will run the given code **for** each number **in** the given range.

This loop will run once for each of the numbers 1 through 10. On each iteration of the loop, the constant `x` will be set to the number for that iteration. So the first time the code in the loop runs, x will be 1. The next time it will be 2, and so on. What do you think this code will print? Try it in a playground and see.

You should see it print the numbers 1 through 10, each on a separate line.

Sometimes you want to repeat a certain block of code a set number of times, but you don't actually need the values in the range. You can skip assigning each value to a named constant by using an underscore (`_`) instead of a name:

```
for _ in 1...100 {
  print(""Are we there yet?"")
}
```

For loops turn out to be very common when programming, and you'll see them a lot more as time goes on. In the future, we'll cover other common ways that for loops can be used.",Follow the instructor through writing a for loop that prints all the numbers from 1 to 100 that are divisible by 3 using an if statement. Rewrite the loop using a where clause.,,,,,,,,,Loops and Functions,Active,Intro to iOS,Precourse iOS,,0,,,0
use a while loop to run a piece of code until a condition is met,,"Show students several examples of while loops, including repeat-while loops.","The other common kind of loop is a while loop. Think of code that keeps track of gas in a self-driving car:

```
while gallonsOfGas > 0 {
  drive()
  gallonsOfGas = checkGasTankLevel()
}
```

This will keep driving until the car runs out of gas.

What do you think will happen if you run this code?

```
var isRaining = true
while isRaining {
  print(""It's raining!"")
}
print(""It stopped raining!"")
```

It will run forever, printing ""It's raining!"" over and over! This is called an _infinite loop_ and can cause your app to hang or freeze. You need to be sure to avoid infinite loops by ensuring that the condition being checked will **eventually** become false.

```
var isRaining = true
while isRaining {
  print(""It's raining!"")
  isRaining = checkRainStatus()
}
print(""It stopped raining!"")
```

There's a variation on a while loop called a _repeat-while loop_. A repeat-while loop looks like this:

```
repeat {
  print(""Hello?"")
} while !hasReceivedResponse
```

The difference between a regular while loop and a repeat-while loop is the order in which they do things. In a regular while loop, first the condition is checked, then the body of the loop is executed (if the condition is true), then the condition is checked again, and so on.

A repeat-while loop switches this order so that first the body of the loop is executed, then the condition is checked, then the body of the loop is run again (if the condition was true).

Repeat-while loops are useful when you want the body of the loop to always execute at least once, regardless of whether the condition is true at the beginning or not.","Follow the instructor through writing a while loop that runs a countdown timer, printing each number until 0 is reached, when it prints ""Done!"".","Write a program that prints all of the numbers from 0 to 100. However, for any number that is evenly divisible by 3, instead of printing the number, print ""Lambda"". For any number divisible by 5, print ""School"". If a number is divisible by both 3 and 5, print ""Lambda School"".",,,,,,,,Loops and Functions,Active,Intro to iOS,Precourse iOS,,0,1,,1
write functions including specifying a return type,,,"As your programs get more complicated, you'll want to make it so you can reuse a single piece of code in multiple places in your program. You copy and paste the code wherever you need it, but this will quickly lead to code that is longer than necessary, hard to follow, hard to maintain and extend, etc.

_Functions_ allow you to give a chunk of code a name, and allow you to use it throughout your program. You've already seen and used a function without knowing it. The `print` statement we've used frequently so far is actually a function. You give it a string, and it puts the string into the console. When you type `print(""Hello"")` we say you're _calling_ the print function with an _argument_ of `""Hello""`.

Functions consist of three main parts:

- Return type
- Name
- Arguments

The return type is the type of value the function _returns_. We'll talk about this in more depth in the next section.

The name is just that, a name for the function. The computer doesn't care what name you give a function, but you should. Your functions should have clear, descriptive names so that when you (or other people) read your code and see the use of a function, it's clear what the function's purpose is.

Arguments are values that you give or _pass_ to a function when you call it. Arguments are also sometimes called _parameters_. For example, the `print` function takes a single argument. That argument is a string that you want the function to output on the console. Some functions don't take any arguments, others take several.

```
func functionName(arguments) {
  // Code that performs the function's task
}
```

To create a function in Swift, you start with the word `func`, short for function. This tells the compiler that what follows is a function definition. Next, you write the name of the function. Then, in parenthesis you write a list of the function's arguments. If the function doesn't have any arguments, you can leave the parentheses empty. Finally, you put braces around the actual code that runs when the function is called.

```
func sayHello() {
  print(""Hello!"")
}
```

This is a function called `sayHello()`. When it's called, it simply prints ""Hello!"" to the console. It takes no arguments.

If a function takes arguments, you provide information about those arguments inside the parentheses.

```
func addTogether(a: Int, b: Int) {
  let sum = a + b
  print(sum)
}
```

Each argument has a name, and a type separated by a colon. You put a comma between each argument.","Write a function that takes a first and last name, and prints a full name. Understand how to use `+` to concatenate strings.",,,,,,,,,Loops and Functions,Active,Intro to iOS,Precourse iOS,,0,,,0
call a function,,,"#### Calling Functions

To call a function, you write its name followed by opening and closing parentheses.

```
sayHello()
```

For a function with arguments, you provide the arguments in your call using their _argument labels_ (i.e. their names) followed by a colon, then the value you're passing, separating arguments with commas.

```
addTogether(a: 3, b: 7)
```

Even though each argument has a name, you still **must** put them in the same order as they appear in the function definition. `addTogether(b: 7, a: 3)` won't work.

#### External vs. Internal Argument Names

```
sayHello(to: String) {
  let string = ""Hello "" + to 
  print(string)
}
```
(The + here _concatenates_ or sticks together ""Hello "" and the argument string passed in, creating a new string.)

When we call this function, we will call it by doing `sayHello(to: ""Steve"")`. This reads quite naturally. However, inside the implementation of the function, using the name `to` for the argument passed in seems strange. Sometimes, you want an argument name to have a different name inside the function than it does outside the function.

```
sayHello(to name: String) {
  let string = ""Hello "" + name
  print(string)
}
```

Here we give the variable a separate internal name, `name`, and external name, `to`. We'll still call the function the same way (e.g. `sayHello(to: ""Steve"")`), but the implementation of the function can refer to its argument with the more natural `name`.

You can also make it so an argument doesn't have an external name at all by using an underscore (`_`) for its external name:

```
addTogether(_ a: Int, _ b: Int) {
  let sum = a + b
  print(sum)
}
```

Now, when we call this, we just do `addTogether(3, 7)`. For some functions, this can be a more natural way to write them. The names `a` and `b` were never significant. It's clear from context that this function takes two numbers as arguments. However you should only omit external names where it makes the function **more** readable and clear.",,,,,,,,,,Loops and Functions,Active,Intro to iOS,Precourse iOS,,0,,,0
write functions that return values,,Demonstrate writing and calling a few functions with return values.,"So far, all the functions we've seen print something. But very often, you'll want functions to _return_ a result to be used in later code. Let's look at our `addTogether()` function again. Instead of printing the result of adding two numbers together, we'll make the function return the result.

```
addTogether(_ a: Int, _b: Int) -> Int {
  let sum = a + b
  return sum
}
```

First, we have to specify the type of value the function returns. Do that by placing `->` then the type (`Int` in this case) after the closing parentheses for the argument list. Now our function takes two `Int` values as arguments, and returns another `Int`.

Inside the body of the function, you use `return` to specify the value to return from this function. We can write this more compactly by putting everything on a single line:

```
addTogether(_ a: Int, _b: Int) -> Int {
  return a + b
}
```

Now, when we call this function we can get and assign the return value to a constant (or variable).

```
let sum = addTogether(3, 5)
print(sum)
```",Follow the instructor through modifying your full name creation function to return the full name instead of printing it.,,,,,,,,,Loops and Functions,Active,Intro to iOS,Precourse iOS,,0,,,0
provide default argument values for a function,,"Explain default values, and walk through an example or two of them.","Sometimes you might want a function's arguments to have default values. That way, when calling the function you **can** provide custom values for each argument, but you don't have to.

```
func greet(name: String, using greetingWord: String = ""Hello"") {
  let greeting = greetingWord + "" "" + name
  print(greeting)
}
```

Here, the second function to the argument is a greeting word. By default, the value of that argument will be ""hello"". You can now leave the argument off when calling the function and the default value will be used automatically:

```
greet(name: ""Steve"") // Hello Steve
```

If you want to use a different greeting word, just include the `greetingWord` argument:

```
greet(name: ""Steve"", using: ""Howdy"") // Howdy Steve
```","Follow the instructor through writing a function that orders food, with a default value of ""Hamburger"" for the food being ordered.","Write a function that takes three arguments, `factor1`, `factor2`, and `limit`. Make it so it prints all the numbers from 0 to `limit`. However, for any number that is evenly divisible by `factor1`, instead of printing the number, print ""Lambda"" instead. For any number divisible by `factor2`, print ""School"". If a number is divisible by both `factor1` and `factor2`, print ""Lambda School"". Give `factor1`, `factor2`, and `limit` reasonable default values (e.g. 3, 5, 100).",,,,,,,,Loops and Functions,Active,Intro to iOS,Precourse iOS,,0,1,,1
use Interface Builder to add controls to a storyboard,,,,,,,,,,,,,UIKit Basics,Active,,,,0,,,0
create and connect IBOutlets,,,,,,,,,,,,,UIKit Basics,Active,,,,0,,,0
create and connect IBActions,,,,,,,,,,,,,UIKit Basics,Active,,,,0,,,0
create static strings using string literal syntax,,Demonstrate a few simple examples of using string literals. Include multiline string literals.,"The simplest way to create a string in Swift is to use a _string literal_. In programming, a _literal_ is a value that you include directly in your code. You've already seen number literals. In `let number = 42`, `42` is a literal. It's not a value calculated from other values while the program is running, it's baked right into the program when you wrote it. String literals are strings that you explicitly type into your code.

In Swift, a string literal is any text surrounded by double quotes (not single quotes).

```
let name = ""Andrew""
```

Here, `""Andrew""` is a string literal. You use string literals to initialize string constants or variables, but you can also use them anywhere a string is required. For example, you can pass string literals into functions that take a string argument.

#### Multi-line string literals.

In Swift, regular string literals need to be all on one line. However, there's a variation of a string literal called a _multiline_ string literal. Multiline string literals allow you to create longer strings that span multiple lines, for example a whole paragraph of text. To create a multiline, start with three double quotes (`""""""`), then on the next line, start your string. Finish it with another three double quotes.

```
let multilineString = """"""
This is a multiline string literal in Swift.
It can cover multiple lines!

You can even have multiple paragraphs.
""""""
```

It's important that the string start on the next line **after** the opening quotes, and that the closing quotes also are on the line after the end of the string.

#### Escape Characters

Strings in Swift can include any valid UTF characters. This includes the normal alphabet, but also letters from languages other than English, Emoji, etc. There are also a few _escape characters_. Escape characters are special codes you use to include a character in a string that you can't type directly. The most common escape character you'll use is `\n`. When you put `\n` in a string literal, the compiler interprets it as a newline character. You can't type a newline character directly into a regular (non-multiline) string literal due to the requirement that it all be on one line.

Here are a list of the escape characters String includes. For more information, see page 

| Escape Character | Meaning                          |
|------------------|----------------------------------|
| \n               | Newline                          |
| \\               | Backslash                        |
| \t               | Tab                              |
| \""               | Double Quote                     |
| \'               | Single Quote                     |
| \0               | NULL                             |
| \u{n}            | Unicode Scalar with code point n |","Write a string literal that when printed will show:

```
The boy cried:

""Wolf!""
```

Do it first with `\n`, then redo it using a multiline string literal.",,,,,,,,,Strings,Active,Intro to iOS,Precourse iOS,,0,,,0
concatenate strings,,Demonstrate concatenating strings.,"_Concatenation_ refers to combining two or more strings together to make a new string. To concatenate strings in Swift, you use the `+` operator.

```
let string1 = ""Hello""
let string2 = ""There""

let greeting = string1 + "" "" + string2
print(greeting) // ""Hello There""
```

There are several other more powerful ways to combine strings, but concatenation using `+` is simple and useful.",,,,,,,,,,Strings,Active,Intro to iOS,Precourse iOS,,0,,,0
loop through all characters in a string,,Show the students looping through characters in a string.,"A string is really just a list of characters in order. If you want to do something with each character in a string, you can use a for in loop to iterate through each character. For example, the code below loops through the characters in a string printing each one on its own line. 

```swift
let string = ""Hello""
for character in string {
  print(character)
}
```

The output is:

```
H
e
l
l
o
```",Follow the instructor through writing a function takes a string and returns the number of letter 'A's in that string using a for in loop.,,,,,,,,,Strings,Active,Intro to iOS,Precourse iOS,,0,,,0
use string interpolation to include variable values in a string,,Show a few examples of string interpolation.,"_String interpolation_ allows you create a string that includes the value of constants or variables. Say you have an integer that represents the number of cows a farmer has. You want to print a string that says ""The farmer has <number> cows!"". String interpolation can be used to create this string.

```
let numberOfCows = 713
let stringToPrint = ""The farmer has \(numberOfCows) cows!""
print(stringToPrint)
```

To insert the value of a variable into a string literal, you surround it with parentheses preceeded by a backslash (`\()`). When the compiler sees this, it knows to take the value of the variable inside the parentheses, turn its value into a string, then insert that string value into the parent string.

String interpolation works for lots of different types, including numbers, booleans, and other strings.","Follow the instructor through writing a function that writes out a mathematical formula for multiplication plain text.

`printFormulaForMultiplying(a: 2, b: 3) // ""2 times 3 equals 6""`",,,,,,,,,Strings,Active,Intro to iOS,Precourse iOS,,0,,,0
create an array of values using array literal syntax,,Declare a few arrays using array literal syntax. Demonstrate explicit type annotation to tell Swift that an array of integer literals should be `[UInt]`.,"So far, you've worked with single variables or constants. Often, you want a way to group objects together. This is where collections come in. Collections are groups of objects. There are a number of different types of collections in Swift, but the most common is an _array_. An array is a list of objects in a certain order. Arrays show up in every app you'll write.

To create an array, we can use _array literal_ syntax. Just like string literals or number literals, array literals allow us to write an array directly into our code. To create an array literal, surround a comma-separated list of values with square brackets (`[]`).

```
let myArray = [1, 2, 3]
```

This creates an array containing three integers, 1, 2, and 3. What do you think the type of `myArray` is? If you option click on it, you'll see that it's a `[Int]`, which is shorthand for ""an array of integers"". This is important. Arrays in Swift are specified to contain a specific **type** of value. You can have an array of strings (`[String]`), an array of floats (`[Float]`), or an array of any other type. Swift's type inference means that usually you don't need to explicitly declare the type of an array, it will be figured out from the values contained in it. However, if you want or need to declare the type, you can do it using the same type annotation syntax you've seen before, where you put a colon then the type after the constant or variable's name.

```
let names: [String] = [""Steve"", ""Bill"", ""Ada"", ""Grace""]
```",Write an array called `favoriteFoods` containing 5 of your favorite foods.,,,,,,,,,Collections,Active,Intro to iOS,Precourse iOS,,0,,,0
access specific items in an array using array subscript syntax,,Demonstrate creating an array and changing elements in it. Show what happens if you try to set a value in a `let` array.,"Once you've got an array, you need to be able to access specific items in it. You can use _subscript syntax_ to access the item at a certain index in the array. To access an item by its index using subscript notation, write the name of the array, followed by the index in square brackets:

```
let names: [String] = [""Steve"", ""Bill"", ""Ada"", ""Grace""]
let name = names[2]
print(name) // ""Ada""
```

Array indices in Swift always start at 0. So the first item in the array is at index 0, the second is at index 1, and so on. Zero-based indexing like this is part of most (but not all!) programming languages, so programmers learn to get good counting from zero. Still it's not what you're used to in every day life, and ""off by one"" errors where a programmer makes a mistake because they don't properly account for arrays starting at zero are common. Something to keep in mind as you're learning!

#### Modifying an Array Using Subscript Notation

You can also use subscript notation to change the item at a specific index in an array. Of course, this only works if your array is a variable, and not a constant.

```
var names = [""Steve"", ""Bill"", ""Ada"", ""Grace""]
print(names) // ""Steve"", ""Bill"", ""Ada"", ""Grace""
names[1] = ""Woz""
print(names) // ""Steve"", ""Woz"", ""Ada"", ""Grace""
```

This code changes the item at index 1 (the second item) in the array to ""Woz"".","Follow the instructor through changing your `favoriteFoods` array to a var, and changing one of the foods in the array.",,,,,,,,,Collections,Active,Intro to iOS,Precourse iOS,,0,,,0
insert items into an array variable,,Demonstrate inserting and appending items to an array.,"You can use subcript notation to change existing items in an array, but you can't use it to insert new items. In other words, you can't use it to change the length of the array. If you want to insert new items into an array without removing items that are already there, you can use the `insert(_: ,at:)` function to insert a new item at a particular index in the array.

```
var array = [""Dog"", ""Cat""]
print(array) // [""Dog"", ""Cat""]
array.insert(""Snake"", at: 1)
print(array) // [""Dog"", ""Snake"", ""Cat""]
```

If you want to add an item to the end of an array, you can call `insert(_:, at:)` passing in an index one beyond the end of the array (e.g. if an array has two elements, `2` is one beyond the end). However, that's common enough, that there's a special `append()` function that adds an item to the end of the array:

```
var array = [""Dog"", ""Cat""]
print(array) // [""Dog"", ""Cat""]
array.append(""Bird"")
print(array) // [""Dog"", ""Cat"", ""Bird""]
```",Write code that adds a new most favorite food (at index 0) to your `favoriteFoods` array.,,,,,,,,,Collections,Active,Intro to iOS,Precourse iOS,,0,,,0
remove items from an array,,Show the students how to remove an item from an array.,"Along with inserting items into an array, you can also remove items from an array. Removing items from an array can be a little more work than adding an item. For technical reasons, you can't just call `remove(item)`, you can only remove items by their index.

```
var array = [""Dog"", ""Cat"", ""Bird"", ""Snake""]
if let birdIndex = array.index(of: ""Bird"") {
  array.remove(at: birdIndex)
}
print(array) // [""Dog"", ""Cat"", ""Snake""]
```

In order to remove an item from the array, we have to know which index it's at. You can get the index of an item using `index(of:)`. This method returns an optional, because you could pass anything into it, and if the array doesn't contain that value, it will return nil. After unwrapping the optional and getting the index, we can pass it into `remove(at:)` to remove that item.

There are some additional methods for easily removing the first and last element in an array.

```
var array = [""Dog"", ""Cat"", ""Bird"", ""Snake""]
array.removeFirst()
print(array) // [""Cat"", ""Bird"", ""Snake""]
array.removeLast()
print(array) // [""Cat"", ""Bird""]
```","Follow the instructor through writing code to remove ""pizza"" from your `favoriteFood` array. Understand that by unwrapping the optional returned by `index(of:)`, this code will safely run even if you don't have ""pizza"" in your array.",,,,,,,,,Collections,Active,Intro to iOS,Precourse iOS,,0,,,0
iterate through an array using a for in loop,,"Demonstrate all three methods of looping, using a simple for in loop, `.enumerated()`, and `for i in 0..<count`.","Just like you can iterate through a string using a for in loop, you can also iterate through the items in an array using a for in loop.

```
let friends = [""Chris"", ""Ken"", ""Justin"", ""Aaron"", ""Anna""]
for friend in friends {
  print(friend)
}
```

Sometimes, as you iterate through an array, you want the index of each item as well. There are a couple of ways to accomplish that. You can use a for in loop to iterate through the numbers that make up the indices for the array:

```
let friends = [""Chris"", ""Ken"", ""Justin"", ""Aaron"", ""Anna""]
for index in 0..<friends.count {
    let friend = friends[index]
    print(""Friend \(index) is \(friend)"")
}
```

The other way to do this is to use the `enumerated()` function:

```
let friends = [""Chris"", ""Ken"", ""Justin"", ""Aaron"", ""Anna""]
for (index, friend) in friends.enumerated() {
    print(""Friend \(index) is \(friend)"")
}
```

Here, you provide **two** variables in the for loop function, surrounded by parentheses. The first variable will be the index of the item being iterated, while the second will have the actual value of the item being iterated. This accomplishes the same thing as the `for index in 0..<array.count` loop above, but it's a little more concise.",,"Write a function that takes an array of strings (`[String]`) along with a `String` and returns an integer indicating the number of times the passed in string appears in the array.

```
let names = [""Steve"", ""Woz"", ""Bill"", ""Steve"", ""Susan"", ""Joanna""]
print(count(of: ""Steve"", in: names)) // 2
print(count(of: ""Paul"", in: names)) // 0
print(count(of: ""Bill"", in: names)) // 1
```",,,,,,,,Collections,Active,Intro to iOS,Precourse iOS,,0,1,,1
create a dictionary using dictionary literal syntax,,Write a few different dictionary literals explaining the types of their keys and values.,"A dictionary stores **pairs** of values. We call these pairs, _key-value pairs_. For example, say we want to store a list of people along with each person's age. A dictionary is perfect for this. We can use each person's name as the **key**, and their age as the **value**.

To create a dictionary in code, use a _dictionary literal_. The syntax for dictionary literals is similar to the syntax for array literals, with an important difference. Instead of a list of single items, you provide a list of key-value pairs, separating each key from its value with a colon (`:`), and each pair with a comma (`,`):

```
let agesByName = [""Woz"" : 67, ""Steve Jobs"" : 63, ""Grace Hopper"" : 112, ""Susan Kare"" : 64]
```

This creates a dictionary of key-value pairs where each key is a `String`, and each value is an `Int`. You can verify this by option-clicking on `agesByName`, and Xcode will tell you that it's a `[String : Int]`, which is shorthand for ""a dictionary with string keys and integer values"".

Just like with arrays and other variable types, you can also explicitly specify the type of a dictionary variable instead of relying on type inference.

```
let animalTypes: [String : String] = [""Cat"" : ""Feline"", ""Lion"" : ""Feline"", ""Dog"" : ""Canine"", ""Frog"" : ""Amphibian""]
```

This is generally only necessary if one of the inferred types isn't what you want, for example you have number keys that you want to be interpreted as `UInt`s instead of plain `Int`s.",Write a dictionary with the names of some of your friends and the state or country they live in.,,,,,,,,,Collections,Active,Intro to iOS,Precourse iOS,,0,,,0
access objects in a dictionary using keys and dictionary subscript syntax,,"Demonstrate dictionary subscript syntax to students, including a discussion of subscript access returning an optional, and the need to unwrap it.","To access **values** in an array, you use subscript notation and provide the key. This is quite similar to the syntax for accessing items in array, except that the value in the subscript will be the same type as the key type for the dictionary, which may be anything, and is not limited to an integer.

```
let animalType = animalTypes[""Cat""]
```

Another big difference between array subscript notation and dictionary subscript notation is that subscripting a dictionary returns an `Optional` value. This is because the compiler can't know ahead of time whether a dictionary includes a value for any key you might pass in. If you try to look up the value for a key that the dictionary doesn't contain, it will return `nil` instead of a value.

```
if let animalType = animalTypes[""Cat""] {
  print(""A cat is a \(animalType)"") // A cat is a feline
} else {
  print(""I'm not sure what type of animal a cat is"")
}
```",Follow the instructor through accessing the state or country a friend lives in using an `if let` statement and subscript syntax.,"Write a function called `emailAddress(for:)` that takes a person's name as a string, and returns their email address as a string. Inside the function, use a dictionary to store a list of people's names and email addresses.",,,,,,,,Collections,Active,Intro to iOS,Precourse iOS,,0,1,,1
insert items into a dictionary using subscript syntax,,"Demonstrate the use of subscript notation to insert new key-value pairs in a dictionary, as well as to modify an existing key-value pair.","If your dictionary is held in a variable (as opposed to a constant), you can add, remove, and modify its key-value pairs. To insert a new item into a dictionary, use subscript notation to assign a new value for the appropriate key:

```
var animalTypes: [String : String] = [""Cat"" : ""Feline"", ""Lion"" : ""Feline"", ""Dog"" : ""Canine"", ""Frog"" : ""Amphibian""]
animalTypes[""Gorilla""] = ""Primate""
```

If you assign a new value to a key that already exists, the exising value is replaced. Dictionaries can't contain multiple values for the same key.

```
var animalTypes: [String : String] = [""Cat"" : ""Feline"", ""Lion"" : ""Feline"", ""Dog"" : ""Canine"", ""Frog"" : ""Amphibian""]
animalTypes[""Cat""] = ""Mammal""
print(animalTypes[""Cat""]) // ""Mammal"" (not ""Feline"" anymore)
```",Add a new friend and state pair to your dictionary.,,,,,,,,,Collections,Active,Intro to iOS,Precourse iOS,,0,,,0
remove items from a dictionary,,Demonstrate removing values from a dictionary using both subscript notation and `removeValue(forKey:)`.,"There are two simple ways to remove values from a dictionary. You can use subscript notation, assigning `nil` for the key you want to remove:

```
var animalTypes: [String : String] = [""Cat"" : ""Feline"", ""Lion"" : ""Feline"", ""Dog"" : ""Canine"", ""Frog"" : ""Amphibian""]
animalTypes[""Lion""] = nil
print(animalTypes) // [""Cat"" : ""Feline"", ""Dog"" : ""Canine"", ""Frog"" : ""Amphibian""]
```

Alternatively, you can call the `removeValue(forKey:)` function:

```
var animalTypes: [String : String] = [""Cat"" : ""Feline"", ""Lion"" : ""Feline"", ""Dog"" : ""Canine"", ""Frog"" : ""Amphibian""]
animalTypes.removeValue(forKey: ""Lion"")
print(animalTypes) // [""Cat"" : ""Feline"", ""Dog"" : ""Canine"", ""Frog"" : ""Amphibian""]
```

One reason to use `removeValue(forKey:)` is that it returns the value that was just removed, which can sometimes be useful.",Remove a friend from your friend:location dictionary using both subscript notation and `removeValue(forKey:)`.,,,,,,,,,Collections,Active,Intro to iOS,Precourse iOS,,0,,,0
understand and explain the difference between a dictionary and an array,,Discuss the material in the lecture section.,"Arrays and dictionaries are both kinds of collections. So how do you know when to use an array or a dictionary? The answer to that question depends on a number of factors, but most simply, you should use an array when you need to store a list of single values in a certain order. You should use a dictionary when you need to store pairs of values associated with each other, and where order **doesn't** matter. Dictionaries don't store their key-value pairs in any particular order.

Beyond that simple rule of thumb, there are some performance implications for working with very large dictionaries or arrays that you're accessing frequently. Arrays and dictionaries both allow you to access individual values very quickly. However, it is can be much faster to insert or remove a value from a large dictionary than to insert or remove an item from an array. Searching for a particular value in an array (using `index(of:)` or `contains()`) can be slow with a very large array. On the other hand, searching for a particular value in a dictionary **if you know its key** is very fast even for huge dictionaries. For the apps you'll write as you're starting out, these performance differences won't matter. But as you continue to learn and grow as an iOS developer, and work on more and more complex apps, understanding the performance implications of the code you write becomes more important.",,,,,,,,,,Collections,Active,Intro to iOS,Precourse iOS,,0,,,0
add a UITableView to their app,,"Demonstrate a couple apps that use UITableView. Show various table view features including scrolling, tapping to view details, swipe to delete, etc.

Show the UITableViewController object in the object library. Drag it into IB, and show some of its attributes/settings.","#### UITableView

`UITableView` is a class provided by iOS (as part of UIKit) that provides a scrolling list of items. Almost every iOS app uses at least one table view. When you see a vertically scrolling list of rows of items, you're seeing a `UITableView`.

`UITableView` is designed to make it as simple as possible to display a scrolling list. Here you'll learn how to display a basic list with as little code as possible. However, `UITableView` also has a lot of very powerful features that make it performant, customizable, and flexible.

`UITableView` is a view in Model View Controller. It's responsible for actually displaying content on the screen, as well as handling user interaction including scrolling, tapping, selecting, swipe to delete, and more.

#### UITableViewController

As you've already learned, a screenful of content is typically handled by an instance of `UIViewController`. You can use a standard `UIViewController` to present a `UITableView`. However, UIKit **also** provides a subclass of `UIViewController` called `UITableViewController`.

`UITableViewController` is specifically designed to present a full-screen `UITableView`. It implements a lot of the things that need to be implemented to make `UITableView` work well, freeing you up from writing all that code. There are times when a `UITableViewController` is perfect, but because it does a lot of things for you, when you need more customization it can sometimes get in the way. In this lesson, we'll use `UITableViewController`, but be aware that as you learn more and want to do more sophisticated things, you may need to do the work to set up a table view in a plain `UIViewController` instead.

`UITableViewController` is available in the Interface Builder object library and you can drag one out into your Storyboard, just like other UI elements you've used.

As with regular `UIViewController`, you'll almost always need to create your own custom subclass of `UITableViewController` so you can write code to customize its behavior, the information it displays, etc.","Create a new app project called Contacts. Follow the instructor through adding a `UITableViewController` to the main storyboard. Create a subclass of `UITableViewController` called `ContactsTableViewController`, and set the table view controller's class in the identity inspector. Delete the existing `ViewController`. Make the table view controller the initial view controller for the storyboard.",,,,,,,,,Table Views,Active,Intro to iOS,Precourse iOS,,0,,,0
implement UITableViewDataSource methods required to populate table view with data,,"Explain to students the data source model. Emphasize the table view asks, data source responds nature of the relationship. We'll cover protocols in more depth later, but feel free to briefly touch on them.","`UITableView` takes care of displaying items in a list and handling user interaction. But you have to tell it what information it should actually display. You do this by implementing a _data source_. The data source is an object that can provide data to the table view. Very often, and in this lesson, the data source will be the view controller that owns the table view. So in this lesson, the data source will be the `UITableViewController` subclass.

The table view will **ask its data source** for the information it is going to display. It's important to understand that it's the table view's responsibility to ask its data source for information, and the data source's responsibility to provide it. There are a number of methods that a table view data source object can implement to provide information, but only two of them are always required. The table view needs to know how many rows it will display, as well as knowing what to display in each row.

#### Number Of Rows

Before it can start displaying anything, a table view needs to know **how many rows** it's going to display. The table view asks its data source for the number of rows by calling the `tableView(_:, numberOfRowsInSection:)` method. Therefore, your data source object must implement this method:

```
override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
  return items.count
}
```

Often, your table view will be displaying items in an array, so this method can just return the `count` of the array.

#### Cell For Each Row

Rows in a `UITableView` are instances of `UITableViewCell` (or a subclass thereof), which is a view class. Right before it's going to display a row on screen (e.g. as the user scrolls), the table view will ask its data source for the cell for that row by calling `tableView(_:, cellForRowAt:)`. To provide each cell, your data source object must implement this method:

```
override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
  let cell = tableView.dequeueReusableCell(withIdentifier: ""CellReuseIdentifier"", for: indexPath)

  cell.textLabel?.text = ""Cell text goes here""

  return cell
}
```

There are a few parts to this method. On the first line, we get an instance of `UITableViewCell` (or a subclass you've set up in Interface Builder) by calling `dequeueReusableCell(withIdentifier:, for:)`. In order to avoid having to create brand new table view cells over and over, which can take time, or to keep a huge number of them in memory, `UITableView` implements a _reuse queue_. When a row gets scrolled offscreen, the table view takes its cell and puts it into a queue to be reused for a different row later. As new rows come on screen, the reuse queue allows your data source to pull an existing cell out of the queue so it can be reused. The table view is also smart enough to create a new cell for you if you ask for one from the reuse queue but it's empty. You don't strictly have to use the reuse queue, but you always should.

The second line sets the text on the cell to `""Cell text goes here""`. Of course, in a real app, you'll set the text on the cell appropriately to display the information displayed by that row. This example keeps things simple, but you can also configure your table view cells to display anything you want to, including multiple items of text, images, buttons, etc. They're views, so you can include any other views inside of them!

Lastly, the `return cell` line returns the newly configured cell to the table view so it can be put on screen.","Follow the instructor through implementing the table view data source methods in `ContactsTableViewController`. Use a simple literal-initialized `contacts` array of strings as the underlying source of the data.

Run your app to ensure that it's working and displaying contacts.",,,,,,,,,Table Views,Active,Intro to iOS,Precourse iOS,,0,,,0
use a segue to show a detail view when a table view cell is tapped,,Explain segues and `prepare(for segue:)` in your own words.,"When you set a segue up in Interface Builder you tell that tapping a button, table view cell, etc. should transition from one view controller to another. All the hard stuff is done for you by the system.

However, there's one thing that you still need to write code for. The system can't know exactly how data should be passed from one view controller to another. Luckily, the system gives you a way to do any necessary preparation work right before the segue actually happens.

To give you a chance to do any setup work on the new view controller before it's shown, the system will call the `prepare(for:)` method on the **source** view controller right before the segue happens.

For example, if someone taps an item in a table view, you'll likely want to pass the corresponding data (e.g. class or struct) for that row to the view controller that's going to be shown. You do that by overriding `prepare(for:)`, getting the destination view controller for the segue, and giving it the data.

```
override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
  if segue.identifier == ""SegueIdentifier"" {
    guard let detailVC = segue.destination as? DetailViewController,
      let indexPath = tableView.indexPathForSelectedRow else { return }

    detailVC.item = items[indexPath.row]
  }
}
```

A view controller can have segues to multiple other view controllers. However, the same `prepare(for:)` method is called whenever **any** segue is triggered. So, in our code, we need some way to tell which segue is being triggered. We do this using a segue's `identifier` property. You set the segue's identifier in Interface Builder. Then, in your `prepare(for:)` method, you can use an if statement (or a switch statement) to figure out which segue is being triggered.

The `destination` property on the `segue` will give you the view controller that is about to be shown. The compiler doesn't know anything about it other than that it's a `UIViewController`, so you have to _cast_ it to the specific subclass of `UIViewController` that you're expecting. You can do this with a conditional cast using `as?` which returns `nil` if the destination view controller isn't the class you specify.

For a segue from a table view cell, you want to know which row was tapped to trigger the segue. There are a number of ways to find this out, but often the easiest is to use `tableView.indexPathForSelectedRow`, since the rows get selected when they're tapped. This property is an optional so you have to unwrap it.

Finally, you can set the destination view controller up in whatever way makes sense. Here, we pass it an `item` for the tapped row, but in other situations you'll do whatever makes sense for your particular application.","Follow the instructor through hooking up the detail view in the contacts app. Give the Show segue an identifier, then implement `prepare(for segue:)`. Test your app to make sure everything works.",,,,,,,,,"Table Views,Delegates and Protocols",Active,"Intro to iOS, iOS Fundamentals I","Precourse iOS, iOS Development Core",,0,,,0
use MongoDB to persist sessions across server restarts,,,,,,,,,,,,,,,,,,0,,,0
implement logout using a sessions based API,In this section we'll see how to implement user logout functionality.,,"Sessions will remain active until they reach the expiration time configured when they were created, but when a user logs out we need to invalidate the session immediately.

We can do this by removing the session from our session store. Each library does it differently.","Add the follwoing code for the logout endpoint:

```js
server.get('/api/logout', (req, res) => {
  if (req.session) {
    req.session.destroy(err => {
      if (err) {
        res.send('error logging out');
      } else {
        res.send('good bye');
      }
    });
  }
});
```",Implement logout using the  [client-sessions](https://www.npmjs.com/package/client-sessions) library instead of `express-session`.,aUerI0MXM1I,http://youtube.com/watch?v=aUerI0MXM1I,https://www.youtube.com/embed/aUerI0MXM1I,,,,,Using Sessions and Cookies,Active,Authentication,Full Stack Web Development Core,,1,1,1,3
"restrict access to resources, allowing access only for authenticated users","Most Web APIs will have endpoints that can only be accessed by authenticated clients. 

In this section we'll see how we can use Express local middleware to implement this functionality.",,"Restricting access to endpoints is a two step process:

- we write middleware to check that there is a _session_ for the client.
- we place that middleware in front of the endpoints we want to restrict.","We'll start by writing a piece of middleware we can use locally to restrict accesst to protected routes.

```js
function protected(req, res, next) {
  if (req.session && req.session.userId) {
    next();
  } else {
    res.status(401).json({ message: 'you shall not pass!!' });
  }
}
```

This middleware verifies that we have a session and that the `userId` is set. We could use `username` or any other value we can use to verify access to a resource.

Then we add that middleware to the endpoints we'd like to protect.

```js
server.get('/api/users', protected, (req, res) => {
  db('users')
    .then(users => res.json(users))
    .catch(err => res.json(err));
});
```

The `/api/users` endpoint will only be accessible when the client is logged in.","Add a piece of global middleware that restricts access to all endpoints, but the `/register` and `/login` endpoints.",0Q3XvKqU8cI,http://youtube.com/watch?v=0Q3XvKqU8cI,https://www.youtube.com/embed/0Q3XvKqU8cI,,,,,Using Sessions and Cookies,Active,Authentication,Full Stack Web Development Core,,1,1,1,3
understand and explain what a protocol is and common scenarios for their use,"A _Protocol_ is a defined set of functions and/or properties needed in order to fulfill a certain task or have a certain functionality. One of the definitions of the word protocol in the dictionary is:

> A code prescribing strict adherence to correct etiquette and precedence (as in diplomatic exchange and in the military services)",,"A protocol in Swift is conceptually similar. Protocols allow you to define a set of functions and/or properties needed in order to fulfill a certain task. 

A simple example of protocols is when we want to set up a table view. We use two functions called `numberOfRowsInSection`, and `cellForRowAt` to tell the table view how it should be set up. These functions are a part of what is called the `UITableViewDataSource` protocol. This is a protocol made by Apple. The ""correct etiquette"" in the situation of setting up a table view would be the functions outlined in the protocol.

We can add our own protocols (we'll look at how to do that later in this module) to fulfill our own requirements in order for something to have the functionality to fulfill a task.",,,-CL-LQvquMc,http://youtube.com/watch?v=-CL-LQvquMc,https://www.youtube.com/embed/-CL-LQvquMc,,,,,"""Table Views, Table View Controllers, and Delegation"",Delegates and Protocols",,iOS Fundamentals I,iOS Development Core,,1,,1,2
"define a custom protocol, and make a class or struct conform to it","As stated before, we can define our own protocols. 

So for example, we are going to make a protocol for buildings. Now, there are many types of buildings (office buildings, houses, grocery stores, etc.), but they all share a few things in common which is where the protocol can come in and make sure that anything that wants to be a building meets all the requirements. ",,"Let's look at some syntax first. This comes from the Swift Language Guide [here](https://docs.swift.org/swift-book/LanguageGuide/Protocols.html).

``` Swift
protocol SomeProtocol {
    // protocol definition goes here
}
```

In order to define a protocol, you simply write `protocol`, followed by the name you want to give the protocol. When naming a protocol, the correct style is to use upper camel case, just like a class or struct. (The first letter should be capitalized). Then, inside of the protocol, you define the properties and methods that you want your protocol to have.

Going back to the `Building` protocol we're going to make, we might decide that we want to know how many floors it has, when it was built, and we'll also add a function that will check to see how many people are currently inside the building. The protocol might look something like this:

``` Swift
protocol Building {
    func numberOfPeopleInside() -> Int

    var numberOfFloors: Int { get }
    var yearBuilt: Int { get }
}
```

Let's pause for a second and talk about **Adoption** and **Conformance** of protocols. _Adoption_ is when either a class, struct, or enum says that it wants to use a protocol. This is done by adding a colon after the name of the definition of the object (if it isn't already there), and writing the name of the protocol you want to adopt. Objects may adopt more than one protocol. If we were going to make a struct called `OfficeBuilding` that we wanted to have adopt the `Building` protocol we made earlier, it would look like this:

``` Swift
class OfficeBuilding: Building {
    // This is the adoption ^

    // More code here in a minute
}
```

_Conformance_ is when your object meets the requirements that the protocol defines. What this means is the compiler is going to actively make sure that the object is able to use the protocol, and it will give you an error if it doesn't meet the requirements needed to use it. So for the `Building` protocol, Xcode would be yelling at us in the last code snippet because our `OfficeBuilding` struct doesn't have either of the properties we've defined in the `Building` protocol. So let's make our `OfficeBuilding` _conform_ to the `Building` protocol:

 ``` Swift
struct OfficeBuilding: Building {

  func numberOfPeopleInside() -> Int {
      // Amazing code here
  }

  var numberOfFloors: Int
  var yearBuilt: Int   
}
```

At this point, our `OfficeBuilding` has no differences than any other building. So let's add some properties that are specific to an office building:

``` Swift
struct OfficeBuilding: Building {

    func numberOfPeopleInside() -> Int {
        // Amazing code here
    }

    var numberOfFloors: Int
    var yearBuilt: Int

    // These are not a part of the protocol because they are relevant to the OfficeBuilding struct, but not every building, like a house for example.
    var numberOfEmployees: Int 
    var hasSnackRoom: Bool
}
```

Now our `OfficeBuilding` is a little more unique but at the time we can be sure that it is a `Building` with all of the properties and methods that are a part of it at the very least. This is useful in many ways. The most straightforward reason is that we can make sure that we have everything that we need in order to achieve some sort of functionality. Also, you may add objects of different types to the same array if the array holds objects that conform to a certain protocol. Like having an array of `Building` objects, but inside are both `OfficeBuildings` and `House` (if we were to make a `House` object) objects because they are both conforming to `Building`. ",,,TLtoRjOAP8k,http://youtube.com/watch?v=TLtoRjOAP8k,https://www.youtube.com/embed/TLtoRjOAP8k,,,,,Delegates and Protocols,,iOS Fundamentals I,iOS Development Core,,1,,1,2
understand and explain the purpose of UITableViewController,`UITableViewController`s are used in so many applications because they allow us to set up a table view very quickly. There are a few things to note that make them unique to normal view controllers.,,"Their root view isn't a `UIView` like a `UIViewController`, but it's a `UITableView` instead. This essentially limits and enforces that nothing can be added behind or on top of the table view, and the table view will take up the whole view. While this is a ""limit"" in a sense, it also provides a couple benefits. It will do a bit of set up for you, namely setting the `delegate` and `dataSource` of its `tableView`, and creating the outlet to the `tableView`.",,,XmmMEO3qWcY,http://youtube.com/watch?v=XmmMEO3qWcY,https://www.youtube.com/embed/XmmMEO3qWcY,,,,,,,,,,1,,1,2
understand and explain the purpose of UITableViewController,,,,,,,,,,,,,,,,,,0,,,0
use a regular UIViewController to display a UITableView,"When we want to use a table view in a normal `UIViewController`, we have to do a bit more in order to make the table view work properly.",,"Normal `UIViewControllers` will sometimes have table views in them. A reason you may want to use a table view in a normal view controller as opposed to using a `UITableViewController` is because the table view does not have to fill the entire view controller. Instead, you could have the table view only be on the top half of the view, while allowing you to add other UI elements like buttons, text fields, etc. to the bottom. 

You may not be familiar with using a table view inside of a normal `UIViewController` instead of a `UITableViewController`. As stated above, table views have a couple delegate protocols. With normal view controllers however, this relationship between the table view and the view controller isn't set up for you automatically. The way we can do this is by telling the table view that the view controller is going to be its delegate and data source. Here's an example:

``` Swift
  override func viewDidLoad() {
        super.viewDidLoad()

        tableView.delegate = self
        tableView.dataSource = self
    }
```

This is generally done in the `viewDidLoad()` of the view controller because it's going to run before almost everything else in that view controller. That way, by the time the table view begins to ask for the amount of cells it needs and what the cells should display, the delegate relationship has been set up and it knows to ask the view controller. Another key thing is that we can't access the table view by saying `tableView` like in the code snippet above unless you make an IBOutlet to the table view first. 

In a `UITableViewController`, the `tableView` outlet and setting the delegate and data source of the table view are done for you, so when you do use a table view in a normal view controller, don't forget to do those steps yourself!",,,hbx-eHVxIz4,http://youtube.com/watch?v=hbx-eHVxIz4,https://www.youtube.com/embed/hbx-eHVxIz4,,,,,Delegates and Protocols,,iOS Fundamentals I,iOS Development Core,,1,,1,2
understand and explain the delegate pattern and why it is used,"Protocols are used all the time in Swift. In fact, you've actually used protocols before during the mini bootcamp, though you might not have realized it. In order to set up a `UITableView`, we use the functions in the `UITableViewDataSource`, which is a protocol. More specifically, it follows what is called the delegate pattern. The _delegate pattern_ allows for a class or struct to give (or delegates) some piece of work to another class or struct. The reason that this occurs is an object may not have the information needed in order to fulfill a task, so it gives it to something that does have that information. This is especially useful when enforcing MVC to keep your code modular and clean.",,"There are two parts to the delegate pattern. The first is the delegator, and the second is the delegate. Let's look at both of these:

- The delegator is the object that gives (or delegates) the work to something else.
- The delegate is the object that receives the work to do.

Let's talk about `UITableViewDataSource` that you should have seen before. As stated above, this protocol follows the delegate pattern. We have the table view that we're trying to set up. The table view is the delegator, while the class that adopts/conforms to `UITableViewDataSource` (which is often a view controller) is the delegate. 

The table view is in need of (at least) two pieces of information; namely how many cells it needs to put in each section, and what information the cells should display. For reasons we will talk more in-depth about later on, the table view doesn't (and shouldn't) have access to that information directly. Instead, it should give (or delegate) the responsibility of getting that information to something that can get that information, like the view controller.

One of the biggest things to remember is that this relationship between the delegate and the delegator doesn't generally come set up automatically. There are a couple exceptions, one of which is when using a `UITableViewController`. 

The **delegator** will have a property called `delegate` (or something similar) whose type is the delegate protocol. So for table views, there are two delegate protocols; `UITableViewDelegate` and `UITableViewDataSource`. This allows for the delegate -which in the case of using table view controllers is the table view controller itself- to tell the delegator who to delegate some responsibility to. Since this is done automatically, let's see how to do this with a non-automatic delegate relationship.",,,ZQhPrrO13kU,http://youtube.com/watch?v=ZQhPrrO13kU,https://www.youtube.com/embed/ZQhPrrO13kU,,,,,Delegates and Protocols,,iOS Fundamentals I,iOS Development Core,,1,,1,2
understand and explain what a Version Control System is and why developers use it,,,"At school when you had to write an essay, or create a document of some kind, you may have done something like this as you worked on it:

- Save a file called ""MyEssay.doc""
- Make some changes, save a copy called ""MyEssay2.doc""
- Make some more changes, make a new file called ""MyEssay_Final.doc""
- Realize you still need to fix some things, make another file called ""MyEssay_Final2.doc""
- And so on

There is definitely a better way than making a copy of a file every time you change something and having to manage all of those copies. That way is called Source Control Management (SCM). _SCM_ tracks changes in a file or folder, then you can tell it to take a ""snapshot"" of those changes to the file, and it will automatically save that snapshot for you if you ever want to go back to it.

Software developers have the most to gain from the existence of SCM. We work on applications, websites, etc. with many different files in them. It would become a great task in and of itself to create a new copy of the file in order to go back to it later just in case we mess something up. With SCM, all that managing is done for us, and it also prevents us from cluttering up folders.

Going back to the ""snapshots"", software development is an ever ongoing process. Sometimes, we make mistakes that end up breaking our application, or we want to see how we used to do something in our code. These snapshots allow us to look at how our code was an hour, a month, or even years ago. 

Another great thing about using SCM is the ability to have multiple people work on the same codebase, at the same time, and then let the SCM system ""merge"" the changes together. We'll talk about merging later in this lesson.

The SCM we will be using is calld Git. Git was created in 2005 by Linus Torvalds (the creator of Linux), and is the most commonly used SCM system among iOS developers. Git has all of the above features, and more. We'll be looking at these features in-depth in this lesson. Git should be installed on your Mac, but if it isn't, you can follow the instructions [here](https://help.github.com/articles/set-up-git/) under the ""Setting up Git"" section.",,,yPB9DY03QFc,http://youtube.com/watch?v=yPB9DY03QFc,https://www.youtube.com/embed/yPB9DY03QFc,,,,,Git for Android Development,,Android Fundamentals I,Android Development Core,,0,,1,1
clone a remote Git repository,,,"Using a service like GitHub allows you to ""publish"" your work and enable others to see, use, and copy that work.

If everyone in this course wanted to work on a single Xcode project at a time, they could access it from GitHub and ""clone"". _Cloning_ means to download a copy of the repository from a remote repository (like on GitHub) that contains all of its files AND its commit history.

**You only need to clone a repository if it doesn't already exist on your machine.**

In GitHub when you go to clone a repository by clicking the green button that says ""Clone or Download"", you will be presented with this:

![](https://user-images.githubusercontent.com/16965587/41869778-5568e12c-7877-11e8-947d-025209d57aa3.png)

Don't be tempted by that ""Download Zip"" button. However the key difference between this and cloning a repository is that the commit history of the repository will not be there, so you are limited to seeing how the project is when you download it.

The way that you clone a project is by navigating in the Terminal to where you would like the repository to go. Copy the URL from the dropdown shown in the screenshot above, and type `git clone ` then paste the link so it becomes `git clone https://github.com/LambdaSchool/notARealRepository.git`. Once you hit enter, it should look like this:

![](https://user-images.githubusercontent.com/16965587/41870077-36433f08-7878-11e8-9f44-05e45f051b17.png)

Once that is done, you have successfully cloned the repository! From there, you can go to the folder in Finder and open the Xcode project, or whatever you cloned. It should be noted that you can use Git for anything, not just Xcode projects.",,,txRu0pWqR_c,http://youtube.com/watch?v=txRu0pWqR_c,https://www.youtube.com/embed/txRu0pWqR_c,,,,,"iOS Development Tools,Git for Android Development",,"iOS Fundamentals I, Android Fundamentals I","iOS Development Core, Android Development Core",,0,,1,1
commit changes to a Git repository and write good commit messages,,,"When we want to have Git track the changes of a folder, like one of our Xcode projects, we create what is called a ""repository"". Anything inside of this repository will be monitored by Git.

The snapshots mentioned earlier are really called ""commits"". A _commit_ is when you want to save the changes to the files in your repository. Each commit will store the changes that have occurred since the last commit. This allows us to save our repository whenever we want in a way that doesn't get cluttered up, but most importantly, we can go see the old versions of the files in our project or even turn back time in a way back to the way our repository was at a specific commit.

Before we look at committing, a useful command to know is `git status` which gives you an overview of your repository at the current time:

![](https://user-images.githubusercontent.com/16965587/41889853-008ce31c-78ca-11e8-8795-bba99b896e84.png)

Depending on where you at in the commit process, `git status` will tell you different things. Above, it is telling us a couple things:
- We're on the branch called ""master"" (we'll talk about branches later in this lesson)
- ""Changes not staged for commit:"", then a list of file(s) in red text. This means we have change(s) to our repository but they aren't going to be included in the commit unless we do a little more work. This indicates that you don't have to commit all the changes you've made, however you generally will want to. The changes that you want to include in the commit are put inside the ""staging area"".

How do we add changes to the staging area? Well luckily, Git actually tells us above. It says ""use `git add <file>...` to update what will be committed"".

So let's add our modified file, and check what `git status` looks like then:

![](https://user-images.githubusercontent.com/16965587/41890879-df8a8746-78ce-11e8-9c2c-b65d3680fca0.png)

Now we see that the file that we added on the first line is now ready to be committed. This is indicated by text color of the file we added is now green.

In this example, the ViewController.swift file changed. All that was changed was a print statement that says ""Hello, World!"".  We're now ready to commit our work to the repo. This moves the changes from the staging area (aka _index_) into the permanent repository storage. To commit, use the `git commit` command:

```
git commit -m ""Print 'Hello, World!' when the app runs""
```",,,0jO9BUQUcsY,http://youtube.com/watch?v=0jO9BUQUcsY,https://www.youtube.com/embed/0jO9BUQUcsY,,,,,"iOS Development Tools,Git for Android Development",,"iOS Fundamentals I, Android Fundamentals I","iOS Development Core, Android Development Core",,0,,1,1
write good commit messages,,,"```
git commit -m ""Print 'Hello, World!' when the app runs""
```

When you create a commit, you provide a message that gets attached to the commit. That's the part in quotes after the `-m` above.

It's very important that you write good commit messages. You should be mindful of the way that you describe what you do, for yourself in the future and for any other people working with you. 

It can be easy to fall in the habit of not making great commit messages for a couple reasons: 

1. People don't want to take the time to think about a good commit message
2. They haven't committed in a long time and have a bunch of changes which further propagates problem 1

Which brings us to another point about committing: **Commit often.** Every time you finish a feature, think about committing. If you forget to commit for a while, your changes pile up in-between commits which lessens the usefulness of Git.",,,,,,,,,,Git for Android Development,,Android Fundamentals I,Android Development Core,,0,,,0
push changes to a remote Git repository,,,"GitHub is a hosting service that you upload your git repositories to. One reason using a service like this is useful is because if something were to happen to your machine that you were using to work on your project, a copy would be stored safely in GitHub. 

The way that we do this is by ""pushing"". _Pushing_ takes the commits in your repository and copies them to a remote repository. The commits exist both on your machine and remotely. Your commits don't get pushed automatically, so let's look at how to do it:

First, we need to make a GitHub repository to push to. (If you do not have a GitHub account, please make one [here](https://github.com/join)) If you aren't familiar with making a repository on GitHub, [this page](https://help.github.com/articles/create-a-repo/) will walk you through the process. However, do not select **""Initialize this repository with a README""** on step 5 of that page for now.

Once you have created the repository, and you didn't initialize the repository with a README, you should see this:

![](https://user-images.githubusercontent.com/16965587/41930682-fe71f300-7938-11e8-970e-d2ea85a12f4f.png)

We've made both a local and remote repository, however they aren't connected yet. To connect them, we're going to use the commands it gives us under the **...or push an existing repository form the command line** section. The first command is specific to your repository because it will contain the URL to your GitHub repository.

![](https://user-images.githubusercontent.com/16965587/41931182-8a10f702-793a-11e8-8273-6722bd9568ca.png)

There are a couple commands here. The first line tells your local repository where to push to. The second is actually pushing your commits to the remote repository.

Again, you should push often. Anytime you have changes that have been committed, and that are ready to share with the rest of your team, push them! This way you can be sure that your project is always backed up.",,,,,,,,,,"iOS Development Tools,Git for Android Development",,"iOS Fundamentals I, Android Fundamentals I","iOS Development Core, Android Development Core",,0,,,0
pull new changes from a remote Git repository,,,"Assuming that you are working on a project with multiple people, there will be times where other people push their code to the repository that you don't have. In order to get these changes you ""pull"". Pulling is relatively easy. Simply type `git pull`. This will take the changes in the remote repository and ""pull"" them into your local one.",,,,,,,,,,Git for Android Development,,Android Fundamentals I,Android Development Core,,0,,,0
create a Git branch,,,"The way that people will work on a project is by working on separate parts of it. For example, you might be working on a sharing feature, while a coworker might be working on a completely different feature. All along the way, you will want to be committing and pushing. The way that two or more people can do this at the same time is by making ""branches"". _Branches_ allow you to branch off from a commit and have your own place to work without stepping on other people's toes, so to speak. 

To make a branch, simply write `git branch branchNameHere`. So let's make a branch for the sharing feature:

![](https://user-images.githubusercontent.com/16965587/41934940-4de8a0d0-7945-11e8-9abd-464ffd87d9ca.png)

After you hit enter, it will look like nothing happened. However, we can check which branches exist by writing `git branch`:

![](https://user-images.githubusercontent.com/16965587/41934996-7f7d1e1e-7945-11e8-9611-889e0984d097.png)

There are a couple things to note here; we have two branches. One called `master`, and one called `sharing`. We just made the `sharing` branch, and the `master` branch is created automatically when you make a git repository. The second thing is that `master` has an asterisk (*) next to it, and it is green which means that `master` is the branch we are working on right now. Any changes and commits we make will be made on the `master` branch.

If we want to work on the `sharing` branch, we need to perform a ""checkout"". The branch that we are currently working on is referred to as the ""HEAD"". To perform a checkout, use `git checkout yourBranchHere`:

![](https://user-images.githubusercontent.com/16965587/41935389-c34575a0-7946-11e8-8e23-ab4c66214171.png)

Once you've switched to your new branch, you're ready to work!",,,,,,,,,,,,,,,0,,,0
merge changes from one Git branch into another,,,"_Merging_ is the act of taking the code you've written and putting it together with the code on another branch. When finishing a feature you will want to give that code to everyone else working on the project, and as everyone continually merges their changes, the project begins to come together. 

It should be noted that there is nothing preventing you from branching and merging those branches in a personal solo project. It is indispensable when working in teams, but it is still useful when working alone.

Let's say we make a commit in the `sharing` branch and finish the feature. We will want to merge that back into the branch that everyone uses. Generally there is a branch called `develop` that fulfills this purpose, and `master` isn't to be touched until your project is at a point where it will be beta tested or 

A potential problem that can arise when merging is when you have changes to a part of a file(s), and the branch you are merging your code into also has changes to that same spot, Git will **try** to merge them together. However sometimes this results in a ""merge conflict"" because Git doesn't know which change you actually want.

We're not going to talk about resolving merge conflicts right now, but be aware that they exist.",,,,,,,,,,,,,,,0,,,0
create a fork on GitHub,,,"When you fork a GitHub repository, you effectively make a carbon copy of someone's repository, including all of its commit history and branches. This allows you to effectively make a branch, but of the entire repository.

A reason you might want to fork a repository is when you don't have write privileges the original repository. The fork will be owned by you, and from there you can work on it as you please. 

Another reason would be to take the repository you fork in an entirely different direction from the original. 

To fork someone's repository, simply click the fork button on the top-left of the screen.",,,ggP3jBpWZwQ,http://youtube.com/watch?v=ggP3jBpWZwQ,https://www.youtube.com/embed/ggP3jBpWZwQ,,,,,"iOS Development Tools,Git for Android Development",,"iOS Fundamentals I, Android Fundamentals I","iOS Development Core, Android Development Core",,0,,1,1
create a pull request on GitHub,,,"Sometimes you will make a fork of a repository you don't have write privileges to. An example of this is Swift itself. The Swift language is (as of December 2015) open-source and publicly available for anyone to look at, fork, change, and do whatever they want with it (in their own forks of it). You can check it out [here](https://github.com/apple/swift) if you're curious. 

Say you add a feature to Swift in your own fork because you think it would benefit anyone using the language. You can make what is called a ""pull request"" which allows the owner of the original repository to see your changes, review them, and if they like the changes, they can choose merge it into the original repository in a very similar way that merging branches works. They could also request that you make some changes before it gets merged.",,,,,,,,,,"iOS Development Tools,Git for Android Development",,"iOS Fundamentals I, Android Fundamentals I","iOS Development Core, Android Development Core",,0,,,0
define custom struct data types,,Demonstrate writing a struct with a couple properties and at least one method.,"The term _struct_ in Swift (and other programming languages) is short for ""structure"". A _struct_ is a value that includes multiple properties, as well as functions that go along with those values.

```
struct Person {
  var name: String
  var age: Int
}
```

This creates a new type called `Person`, which is a struct. It has two variable _properties_, age and name. A property is data that is part of each instance of the struct. The syntax for adding a property to a struct type is the same as for declaring a variable. You can also create a constant, but most of the time, in a struct, you should use variables instead of constants. We'll talk about why that is a little later.

#### Methods

Structs can also include _methods_. A method is a function that is attached to an instance of a type, and that you call on the type. You've already seen methods without knowing what they're called. For example `append()` is a method on `Array`.

```
struct Person {
  var name: String
  var age: Int

  func introduce() {
    print(""My name is \(self.name) and I am \(self.age) years old."")
  }
}
```

Again the syntax for creating a method is the same as for creating the functions you're used to. The most important difference is that methods **must** be inside of the braces for the struct declaration. That's what tells the compiler that the method is part of the struct, instead of just a free-floating function.

Methods get access to all of the properties on a struct, as well as all of its other methods. Inside the implementation of the `introduce()` method, we can access the current instance's `name` and `age` properties using `self.name` and `self.age`. Here `self` means ""the instance of `Person` that `introduce()` is being called on"".

In fact, we don't actually have to use `self.` here. The compiler is smart enough to infer it most of the time. So we can write the print statement in `introduce()` without prefixing `name` and `age` with `self.`.

```
struct Person {
  var name: String
  var age: Int

  func introduce() {
    print(""My name is \(name) and I am \(age) years old."")
  }
}
```","Follow the instructor through writing a struct that represents a song including properties for title, album, artist, and duration. The album property should be optional, since some songs don't appear on an album.",,,,,,,,,Custom Data Types,,Intro to iOS,Precourse iOS,,0,,,0
define custom class data types,,"Demonstrate creating a class, and show how you must create an initializer or you'll get a compiler error.","Swift also includes support for another kind of type called a _class_. Classes and structs are quite similar. They both have properties, and methods. Just like with a struct, a class definition is a blueprint or template for creating instances. And the syntax for instantiating a class is also basically identical to instantiating a struct. However, classes have some important differences from structs that you'll learn about as we continue through this lesson.

```
class Person {
  var name: String
  var age: Int
}
```

This looks exactly like the struct we created above, except that we said `class` at the beginning, instead of `struct`. However, if you try to compile this, you'll get an error because the class doesn't have any initializers. This is one of the first differences between classes and structs. Structs get a synthesized memberwise initializer for free. When you create a class, you always have to define at least one initializer.

```
class Person {
  var name: String
  var age: Int

  init(name: String, age: Int) {
    self.name = name
    self.age = age
  }
}
```",Follow the instructor through changing your `Song` struct to a class.,,,,,,,,,Custom Data Types,,Intro to iOS,Precourse iOS,,0,,,0
create a custom subclass of another class,,Demonstrate creating a superclass and subclass. Instantiate the subclass and show how it inherits properties and methods. Override a method from the superclass and show how that works.,"Classes support another important feature that structs don't. One of the fundamental ideas in Object Oriented Programming (OOP) is that classes can inherit from other classes. If we start with an `Animal ` class:

```
class Animal {
  var species: String
  var numberOfLegs: Int
  var hasTail: Bool

  init(species: String, numberOfLegs: Int, hasTail: Bool = false) {
    self.species = species
    self.numberOfLegs = numberOfLegs
    self.hasTail = hasTail
  }

  func vocalize() {
    print(""I'm a \(species!)"")
  }
}
```

We can create a _subclass_ of `Animal` called `Dog`. Dog will inherit all of `Animal`'s properties, but can add its own additional properties and methods.

```
class Dog {
  var name: String
  var breed: String
  var color: String

  init(name: String, breed: String, color: String) {
    self.breed = breed
    self.color = color

    super.init(species: ""Canis familiaris"", numberOfLegs: 4, hasTail: true)
  }

  override func vocalize() {
    print(""Woof woof!"")
  }
}
```

In our `Dog` initializer, we have to call `super.init()` to make sure all the properties defined in the _superclass_ (`Animal`) get initialized too.

Because a dog has a specific sound, we can _override_ the `vocalize()` method so that it does something different when called on a `Dog` than when called on a plain instance of `Animal`.

We can now create an instance of `Dog`, and it will also have the properties included in `Animal`. When we call its `vocalize()` method, the code we wrote in our subclass gets executed **instead** of the code in the `Animal` superclass, because we've overridden `vocalize()`.

```
let beagle = Dog(name: ""Porthos"", breed: ""Beagle"", color: ""Brown"")
print(beagle.numberOfLegs) // 4
print(beagle.species) // ""Canis familiaris""
print(beagle.breed) // ""Beagle""
beagle.bark() // ""Woof woof!""
```","Follow the instructor through writing a class called `Building` with properties for `numberOfFloors`, `purpose`, `buildingMaterial`. Have them write a subclass called `House` that adds `numberOfBedrooms` and `hasBackyard` properties.",,,,,,,,,Custom Data Types,,Intro to iOS,Precourse iOS,,0,,,0
create custom initializers,,"Demonstrate custom initializers on structs, including using default values.","When you write a struct in Swift, the compiler will (usually) create, or _synthesize_ an initializer for you. This is why we could instantiate a `Person` struct above and pass in a name and age. However, sometimes you want to create a custom initializer. Perhaps you want to control the way something is interpreted, or you want to provide a default value for a certain argument. You can do this by providing your own initializer implementation.

```
struct Vehicle {
  var numberOfWheels: Int
  var numberOfDoors: Int
  var color: String

  init(numberOfWheels: Int, numberOfDoors: Int, color: String = ""Black"") {
    self.numberOfWheels = numberOfWheels
    self.numberOfDoors = numberOfDoors
    self.color = color
  }
}
```

The syntax for creating a custom initializer is very similar to the syntax for creating a function. The main difference is that initializers must always be called `init`, and you **don't** start them with `func`. Inside the initializer, you can do whatever you want to initialize the struct instance being created, but at a minimum, you **must** assign all non-optional properties a value.

Here we've created a custom initializer that takes arguments for each property, but provides a default value of ""Black"" for the `color` argument if the caller doesn't specify it. 

Now, we can instantiate a vehicle using the custom initializer:

```
let car = Vehicle(numberOfWheels: 4, numberOfDoors: 4, color: ""White"")
let motorcycle = Vehicle(numberOfWheels: 2, numberOfDoors: 0)
```

When we instantiate and initialize `motorcycle`, we can leave the `color` argument out, since it has a default value of ""Black"".",Follow the instructor through writing a custom initializer for your song class including a default value of nil for `album` so it can be left out.,,,,,,,,,Custom Data Types,,Intro to iOS,Precourse iOS,,0,,,0
instantiate classes,,"Demonstrate instantiating classes, and include a demonstration of the ability to change properties on `let` contsants, but not changing the instance held in the variable.","After we've provided an initializer for our class, we can instantiate an instance of it using the same syntax that we used for structs:

```
let friend = Person(name: ""Ellie"", age: 30)
```

If you try changing a property of a class constant created using `let`, you'll notice something that may surprise you.

```
let friend = Person(name: ""Ellie"", age: 30)
friend.age = 31
print(friend.age) // 31
```

It works fine! The reasons for this are somewhat complicated, but for now, it's valuable to commit this to memory. **Unlike structs**, classes are mutable even when they're held in a `let` constant. On the other hand, you still can't assign a completely new instance of a class to a `let` constant. So `let` means that the specific instance of the class that the variable holds stays constant, but the properties of that instance can be changed.

```
let bestFriend = Person(name: ""Matt"", age: 34)
bestFriend = Person(name: ""Ben"", age: 33) // Error!
```","Create an instance of `Song` using `let`, then change the artist to something else.","1. Create a struct called `Bottle`. Give it `volume` and `waterLevel` properties. 
2. Create a let constant called `bottle1` assign a new instance of `Bottle` to it by calling `Bottle`'s initializer.
3. Use a print statement to print the `waterLevel` in `bottle1`.
4. Create a variable called `bottle2` and assign `bottle1` to it.
5. Use a print statement to print the `waterLevel` in `bottle2`.
6. Change the `waterLevel` in `bottle2` to something else.
7. Use a print statement to print the `waterLevel` in `bottle1` again.

What happened? Was it what you expected? Did the water level in `bottle1` change after you changed the `waterLevel` in `bottle2`?

Now, change `Bottle` to a class, and implement an initializer for it. Run your program again. Did the behavior change? Did the water level in `bottle1` change after you changed the `waterLevel` in `bottle2`?",,,,,,,,Custom Data Types,,Intro to iOS,Precourse iOS,,0,1,,1
understand and explain the differences between structs and classes,,,,,,,,,,,,,Custom Data Types,,Intro to iOS,Precourse iOS,,0,,,0
understand and explain the purpose of the MVC design pattern,"In iOS development, we use archetectural design patterns in order to structure our code in a way that promotes easy scalability and reusability. The most commonly used design pattern in iOS development is called MVC. _MVC_ stands for ""Model-View-Controller"". Each part of MVC has a specific job that helps keep our code clean while being scalable and reusable:","Do a high-level overview of MVC with the students so they can understand why it is used, and what purpose it serves.
","1. _Models_ represent a set of data in the application. Let's say we want to create an app that has a user profile. We might need to save a username, email, and age for each user. Managing these four properties separately would be a pain, and grouping the properties together in something like a dictionary isn't much better. Instead, we can make a class or struct with all the properties that represent a user profile. **Models don't do anything else besides represent the data in our app.**
2. _Views_ represent what the user will see on the screen, such as buttons, table views, etc. **The only job of the view is to show the information provided to it, and to receive user input.**
3. _Controllers_ manage the flow of our data in an application. It's the job of controllers to pass information between models and views. Controllers are separated into two specific sub-controllers:
  - View Controllers: You should already be familiar with view controllers. Take table view controllers as an example: a table view doesn't know what information to be displayed in its cells, but in the table view controller subclass, we give it that information by implementing the `numberOfRowsInSection` and `cellForRowAt` functions. This is an example of passing data from a view controller to a view.
  - Model Controllers: The job of a model controller is to handle any interaction with your model objects.

This is meant to be a very general overview of MVC, and we will go into more depth with each part of it during this lesson.","Think of and share analogies for the MVC system. For example, in a restaurant:

Model: Ingredients
Controller: Cooks, etc. 
View: Menus and servers",Draw your own diagram of the MVC triangle.,SwUniGjtXGo,http://youtube.com/watch?v=SwUniGjtXGo,https://www.youtube.com/embed/SwUniGjtXGo,,,Model View Controller Guide,,View Controllers and the Model-View-Controller Design Pattern,,,,,1,1,1,3
understand and explain the purpose of the model layer in MVC,"Let's take a closer look at the model part of MVC. As stated before, we use model objects to represent real-life data in our application. This makes it easy for us to keep related information together.","Make sure that students have a clear understanding of Models. Explain that we're going to make a model object that represents a classmate. Show the demo app to the students again and ask them what properties they think it will need. 
","We'll take the earlier example of a user profile and see how we would create a model object for it in code.

``` Swift
struct UserProfile {

    let username: String
    let email: String
    var age: Int
}
```

Note: The `UserProfile` object could be a class as well, we would just have to add an initializer since classes don't synthesize one for you behind the scenes.

That's it for a simple model object. Generally, there is little else you will need to add to one. It really is simply a representation of data. Models are ""dumb"" in the sense that they can't do much themselves, which is where model controllers come in.","Guide students through writing model objects for a few different items, e.g.: car, animal, book.","Create the Classmate.swift file, and a `Classmate` class, then try to fill it out on your own. Your instructor will go over it with you afterwards.",Ocemf9BJPlU,http://youtube.com/watch?v=Ocemf9BJPlU,https://www.youtube.com/embed/Ocemf9BJPlU,,,,,View Controllers and the Model-View-Controller Design Pattern,,,,,1,1,1,3
understand and explain the purpose of the controller layer in MVC,"Earlier we learned that controllers manage the flow of data, and are separated into two different kinds of controllers. You should already be familiar with view controllers and their responsibilities. We're going to focus on model controllers right now.","Review the purpose of model controllers in MVC. Also review CRUD. Make sure the students know CRUD is just a starting point, and as their projects increase in complexity, more things could be added to their model controller than a single function for each part of CRUD. Explain that since this is their first model controller, we're going to keep it simple by only having a create and update function.","A Model Controller's job is to handle interactions between your model objects and the rest of your application. Generally you will have one model controller for every model object in your application. E.g. The `UserProfile` object above would have a corresponding model controller class. We would call it `UserProfileController`.

We use an acronym called ""CRUD"" to describe the most basic and most common interactions with a model object that a m
odel controller handles. CRUD stands for ""Create, Read, Update, Delete"". In just about any application, you will want to have functions that will perform a few if not all parts of CRUD. This doesn't mean that model controllers are limited to those four things. Really if you want to interact with models in any way, it should go through the model controller.

It should be noted as well that there are times when you will want multiple CRUD functions like two Update functions, etc. Don't worry about that for now, but just know that you aren't limited to making just one function for each part of CRUD.

If a user fills out their information on a profile creation screen then taps a save button, they assume that the application will take that data and save it. The job of the model controller is to receive that information that the view gives it and create a new instance of the `UserProfile` object. This is an example of a ""Create"" function in CRUD. Let's see what this function would look like in code:

``` Swift
class UserProfileController {

    // Create

    func createUserProfileWith(username: String, email: String, age: Int) {

        let profile = UserProfile(username: username, email: email, age: age)
    }
}
```

Now even though we create a new instance of `UserProfile` this isn't very useful, and if you were to paste that code in a Playground, it would actually give you a warning saying that the profile constant isn't used at all. This brings us to the next part of CRUD called ""Read"". 

Read means that we need something that the rest of the application will be able to ""read"" or access the `UserProfile` objects that we have in our app. Generally, this is simply an array that will hold a bunch of `UserProfile` objects. So let's add that to the `UserProfileController`

``` Swift
class UserProfileController {

    // Create

    func createUserProfileWith(username: String, email: String, age: Int) {

        let profile = UserProfile(username: username, email: email, age: age)
    }

    // Read

    var userProfiles: [UserProfile] = []
}
```

So now, we have a place that can store our `UserProfile` objects, and we can access them whenever we need to. Let's change the create function so that it will add the `UserProfile` it creates to that array:

``` Swift
class UserProfileController {

    // Create

    func createUserProfileWith(username: String, email: String, age: Int) {

        let profile = UserProfile(username: username, email: email, age: age)

        userProfiles.append(profile)
    }

    // Read

    var userProfiles: [UserProfile] = []
}
```

Now our Create function will actually be useful to us. This way when the user wants to save their information, the `createUserProfileWith` function will bundle up the individual properties (username, email, age) into an instance of `UserProfile`, then place it in the `userProfiles` array so that we can access it later.

""Update"" in CRUD is very similar. We would just give the model controller an instance of a `UserProfile` we want to update, and the information we want to update like a new age when a user has a birthday.

If we wanted to make a ""delete"" function, we would simply find the profile in the `userProfiles` function and remove it. 

This is a lot to take in, so don't worry if you don't completely understand it. The good thing about learning MVC is that we will use it in every project so you will have plenty of practice to let it soak in.","Create the `ClassmateController` file and class together, and try to make a Create and Update function, as well as an array of classmates that will serve as the Read part of CRUD. Your instructor will go over this with you afterwards.",,vOLWojDv-Kc,http://youtube.com/watch?v=vOLWojDv-Kc,https://www.youtube.com/embed/vOLWojDv-Kc,,,,,View Controllers and the Model-View-Controller Design Pattern,,,,,1,,1,2
understand and explain the purpose of the view layer in MVC,"Views are the UI elements that the user sees on the screen. The job of views are simply to show information to the user, and relay back to us when the user interacts with the UI in any way. ","Explain that at this point, the Model side of MVC is essentially done and ready to be wired up to the views in order for user interaction to actually do something.
","As an example of the views relaying user interaction, when the user fills out their information on the screen then taps the save button, that button will tell us that it was tapped, allowing us to do something at that time. If we are using storyboards the way the button will alert us is through an `@IBAction` we create. 

We can also give views information to display, as you've seen before. Table views are an example of this. We could have a profile view controller where the user can go to see their `UserProfile` information. The view controller would have `@IBOutlets` that give us access to the different views in the view controller. This allows us to take the `UserProfile` information and pass it to the views. ","Create the `UITableViewController` subclass, and fill out the `numberOfRowsInSection` and `cellForRowAt` `UITableViewDataSource` methods. Create the `UIViewController` subclass together in order to use the (prepare(for segue: ...).",,m5OwqKLni7Q,http://youtube.com/watch?v=m5OwqKLni7Q,https://www.youtube.com/embed/m5OwqKLni7Q,,,,,View Controllers and the Model-View-Controller Design Pattern,,,,,1,,1,2
implement common layouts using UIStackView,"With the release of iOS 9, Apple introduced a new feature to UIKit called `UIStackView`. _UIStackView_ is an other way we can create the UI of our apps. It is built ""on top"" of Auto Layout, and it manages constraining its subviews (any UI element you put inside of it) in a linear fashion for you. What this means is that instead of having to constrain every single view in your storyboard scene, you can let stack views do the majority of the work for you. ",,"Stack views have a few key properties that you will want to become familiar with:

- Axis: Whether the stack view's subviews should be arranged vertically or horizontally
- Distribution: How you want the stack view to distribute space to its subviews (see `UIStackViewDistribution` in the documentation)
- Alignment: How the subviews should be laid out perpendicular to the axis. (see `UIStackViewAlignment` in the documentation)
- Spacing: The amount of space in-between each subview in the stack view

What's more is you can put stack views inside of stack views. Now this may sound confusing at first but the potential advantages of being able to do this are huge, both in terms of time saved and being able to easily modify your layout at a later date.

Stack views can be daunting and confusing to start with and often times they don't seem to behave the way you want them to, but with practice they will become a very valuable and useful resource for you.",,,2heCR-YiEwA,http://youtube.com/watch?v=2heCR-YiEwA,https://www.youtube.com/embed/2heCR-YiEwA,,,,,Auto Layout,,iOS Fundamentals I,iOS Development Core,,1,,1,2
implement common layouts using constraints in Interface Builder,"To recap a bit of what you learned in the intro course, Xcode is a powerful tool to help us create every part of our app. It isn't just a code editor. We can also create the user interface of our app using Interface Builder. _Interface Builder_ allows us to design and create a user interface without writing any code. We access Interface Builder through Storyboard files. Every Xcode project comes with a `Main.storyboard` file to start with, which is where we will be making our app's UI most of the time. 

- **NOTE**: There is also a `LaunchScreen.storyboard` file also in every new Xcode project. However, it is used specifically for customizing the launch screen that briefly appears every time your app is launched.",,"You may have noticed before that simply placing something like a button on a storyboard scene doesn't mean it will stay where you place it. That's where `NSLayoutConstraints` come in. _NSLayoutConstraint_ allows us to create a responsive and adaptable user interface by creating relationships between two UI elements. For example, we could tell a button to always be right under a text field. That's a very simple example, but essentially we just create a list of requirements that we are ""constraining"" the views to follow. 

Refer to [this page](https://developer.apple.com/library/content/documentation/UserExperience/Conceptual/AutolayoutPG/AnatomyofaConstraint.html). This will help you understand the ""anatomy"" of a constraint. Read until you get to the section called ""Sample Equations"". Everything above that will help you better understand how these relationships between UI elements are created. 

For this objective, we will be going over how to make constraints in the storyboard. Again in Apple's Auto Layout Guide, there is another great page [here](https://developer.apple.com/library/content/documentation/UserExperience/Conceptual/AutolayoutPG/WorkingwithConstraintsinInterfaceBuidler.html#//apple_ref/doc/uid/TP40010853-CH10-SW1) that will help familiarize you with making constraints in storyboard files using Interface Builder.",,,KdwwK96C7PY,http://youtube.com/watch?v=KdwwK96C7PY,https://www.youtube.com/embed/KdwwK96C7PY,,,,,Auto Layout,,iOS Fundamentals I,iOS Development Core,,1,,1,2
implement common layouts using the NSLayoutConstraint anchor API,"At this point, you should have a basic understanding of how `NSLayoutConstraint`s work, at least conceptually. Constraints can be made both using Interface Builder as we've alerady talked about, but we can also make them directly in our code and forego using storyboards altogether.",,"There are various reasons you might want to do create your layout programmatically. One is that working in a team of developers on the same storyboard can get messy and cause merge conflicts very easily, so some people decide to just make their UI in code rather than having to deal with the potential problems that can arise with storyboards. That isn't to say that storyboards and Interface Builder are bad though, and there are ways to get around these potential merge conflicts, like creating multiple storyboards. Most people tend to use storyboards, but it's also valuable to know how to make and constraint your views programmatically.

There are a couple ways we can go about creating constraints in code. The first option is to directly initialize `NSLayoutConstraint`s using their initializer. However, it's likely one of the longest initializers you've ever seen and it can get somewhat tedious if you have many views to constrain. For example, this is the initializer:

``` Swift
let constraint = NSLayoutConstraint(item: Any, 
                                    attribute: NSLayoutAttribute, 
                                    relatedBy: NSLayoutRelation, 
                                    toItem: Any?, 
                                    attribute: NSLayoutAttribute, 
                                    multiplier: CGFloat, 
                                    constant: CGFloat)
```

If we break this initializer down into its individual parameters and remember the ""Anatomy of A Constraint"" page from the first objective's lecture ([here](https://developer.apple.com/library/content/documentation/UserExperience/Conceptual/AutolayoutPG/AnatomyofaConstraint.html)), it shouldn't look too daunting. Its parameters are as follows:

1. `item`: An item that you want to constrain
2. `attribute`: Then what attribute you want to constrain (for example, the top, leading, or trailing edge, etc.)
3. `relatedBy`: The type of relationship you want this item to have to the item you will constrain it to (equal, greater than or equal, or less than or equal)
4. `toItem`: A second item that the first item will be constrained to
5. `attribute`: The second item's attribute to be constrainted
6. `multiplier`: The value of the second attribute will be multiplied by this number (for example if you wanted item 1's height to be half of item 2's height, the multiplier would be 0.5 or 1/2.
7. `constant`: A value to be added to or subtracted from the attribute's value.

It should be clarified that there is nothing wrong with writing your constraints this way. For most cases however, we can use a new API introduced in iOS 9 called `NSLayoutAnchor`. _NSLayoutAnchor_ allows us to create `NSLayoutConstraints` in a more concise fashion. From the documentation entry of `NSLayoutAnchor`, Apple gives us an example of some constraints being created by calling the `NSLayoutConstraint` initializer mentioned above, then making the same constraints using `NSLayoutAnchor` methods:

``` Swift
// Creating constraints using NSLayoutConstraint
NSLayoutConstraint(item: subview,
                   attribute: .leading,
                   relatedBy: .equal,
                   toItem: view,
                   attribute: .leadingMargin,
                   multiplier: 1.0,
                   constant: 0.0).isActive = true

NSLayoutConstraint(item: subview,
                   attribute: .trailing,
                   relatedBy: .equal,
                   toItem: view,
                   attribute: .trailingMargin,
                   multiplier: 1.0,
                   constant: 0.0).isActive = true


// Creating the same constraints using Layout Anchors
let margins = view.layoutMarginsGuide

subview.leadingAnchor.constraint(equalTo: margins.leadingAnchor).isActive = true

subview.trailingAnchor.constraint(equalTo: margins.trailingAnchor).isActive = true
```

The process for creating constraints using anchors is fairly straightforward. If we look at the first anchor constraint made in the example above where it says `subview.leadingAnchor...`, the subview is the item to be constrained. The leading anchor (which could be thought of as the leading edge) is the attribute of the item we wish to constrain. Then using the `.constraint(equalTo: ...)` method, the view's margins are passed in, and we want to use its leading anchor for its attribute. If we wish, this `constraint(equalTo: ...)` function can also include a second parameter which is a constant so the constraint can have a constant if needed just like using the `NSLayoutConstraint` initializer. 

To be clear, using the `NSLayoutAnchor` API methods results in the same thing as initializing `NSLayoutConstraints` directly, meaning they both create instances of `NSLayoutConstraints`.",,,,,,,,,,,,,,,1,,,1
implement a UI that scales from the smallest iPhone to the largest iPad,"A challenge that you will run into is creating a layout that will work well on every device. This means we need to account for the differences in screen sizes, aspect ratios, etc.",,"In a workplace situation, you probably aren't going to be the person to design an app's layout, however you will be the person who has to take that design and implement it. It's completely possible to lay out an app that scales well on every device with any of the three methods (or a combination of them) talked about in this module. 

When creating a constraint using the pin menu, we choose numbers to be the amount of space between one item and another, the height, width, etc. These numbers represent points. Points are different than pixels. In a nutshell what this means for you is that 100 points on an iPhone 8, and 100 points on an iPad Pro are very different:

![](https://user-images.githubusercontent.com/16965587/43013633-c77d9c2e-8c06-11e8-9a30-986dab1f334c.png)

100 points on an iPhone 8 is about a fourth of the width of the screen, while on an iPad Pro, it's about a tenth of the width of the screen.

As a rule, when setting a height and/or width of a UI element, it's almost always preferred to create a proportional constraint instead of giving a direct point. This allows you to say ""I want this button's width to always be a fouth of the width of my screen"", so if the device is an iPhone 5, it will be about 80 points, while on an iPad Pro, that same button would be about 500 points. This makes it so the layout will be consistent between device sizes.

![](https://user-images.githubusercontent.com/16965587/43013635-c79bfa66-8c06-11e8-968e-75eee281bf81.png)

There are a few other ways to help you implement a scalable layout, and we'll talk about them later in this course.",,,,,,,,,,,,,,,1,,,1
use UINavigationController to display data hierarchically ,"One of the most common forms of navigation in an iOS app is called ""Master-Detail"". This means there is some sort of master list of information that is displayed to the user, which is usually achieved by using a table view or a collection view, and to see details about something in that list, you must navigate to a more detailed view.",,"Even if you've never heard of the master-detail pattern, you have surely used it before. For example, the iOS Contacts app shows a list of the contacts on your phone. If you want to see more information about the contact than their name however, you tap on the cell in the master list and it will bring you into a more detailed view that shows more information about that specific contact. 

The way we can implement this navigation between these two views is by using a few things. The first is a navigation controller. Navigation controllers (`UINavigationController`) create and manage what is called a ""navigation stack"". When you navigate from a master view to a detail view, the detail view is placed on top of the master view in a stack. More views could be placed on top of the detail view to create a larger stack. 

Using navigation controllers allows for us to navigate (hence the name) between our view controllers much easier. They will automatically create the back button you see at the top-left of the screen when you go into a detail view that easily lets the user go back to the previous view.

To use a navigation controller, you have to ""embed"" a view controller in the stack view. So if we embed the master list of contacts in a navigation controller, it becomes the ""root view controller"", which simply means it's the first view controller in the navigation stack. If you try this out in a storyboard, you will notice it will add a gray bar at the top of the view controller. This is called a navigation bar (`UINavigationBar`). Navigation bars give the user a ""physical"" representation of the navigation stack that they can interact with, while the navigation controller manages the navigation stack in the background based on how the user interacts with the navigation bar.

To add a navigation controller in a storyboard, there are two methods:

- The first is to select the ""Navigation Controller"" from the object library and drag it onto the canvas. It will expand into two view controller scenes. The first is a navigation controller, and the second will be a table view controllers. It will look like this:

![](https://user-images.githubusercontent.com/16965587/41450908-84445f7e-7027-11e8-9610-d5cc79e00a1b.png)

- Sometimes you will want a navigation controller but won't want the table view controller that comes along with it and instead want to use a normal view controller, or collection view controller, etc. What you can do in that case is select a view controller scene by selecting the yellow circle on a scene, then selecting Editor -> Embed In -> Navigation Controller in the menu like so:

![](https://user-images.githubusercontent.com/16965587/41451018-1765caf4-7028-11e8-9153-3eb09d13c78a.png)",,,22kQ861PLgI,http://youtube.com/watch?v=22kQ861PLgI,https://www.youtube.com/embed/22kQ861PLgI,,,,,"Navigation Controller and View Controller Containment,First iOS App: Navigation Controller",,Introduction to iOS Programming,iOS Development Core,,1,,1,2
implement a segue between a table view cell and a detail view controller,"The second thing needed in order to create use the master-detail, or any navigation pattern for that matter is called a ""segue"" (pronounced ""seg-way""). Segues create a link between two view controllers that let you navigate from one to the other. The view controller the segue starts from is the ""source"" view controller, and the view controller the segue goes to is the ""destination"" view controller.",,"Segues are like a one way plane ticket to somewhere. You can fly to the destination, but you can't come back. For this reason, navigation controllers are especially helpful because they will automatically give the user a way to go back to the view they came from without us having to write any extra code. 

Segues are represented by the arrows in-between view controllers. The way that you create a segue from one view controller to another is by holding the control key, clicking from a UI element that users can interact with such as a button or a table view cell and dragging to the view controller you wish to segue to. It will pull up a contextual menu that will ask what kind of segue you want to create:

![](https://user-images.githubusercontent.com/16965587/41451314-8942006a-7029-11e8-998f-ae7daf0da258.gif)

From that contextual menu, you will have noticed that quite a few options came up. The first section of options are different kinds of segues we can use. The two that you need to worry about right now are:

- ""Show"" style segues will add the view controller to the navigation stack. These are easily the most common segue style.
- ""Present Modally"" will present the new view controller outside of the navigation stack completely, and it will always present it coming from the bottom of the screen and sliding upwards.

Show segues will make the destination view controller have a push (slide in from the right to the left) animation **unless** the source view controller is not a part of a navigation stack, in which case they will be presented in the same way as a Present Modally style segue.",,,,,,,,,,Navigation Controller and View Controller Containment,,,,,1,,,1
use the UINavigationItem API to customize navigation bar,"If we want to add UI elements to a navigation bar, we can't actually add them directly. Instead we use navigation items. ",,"Navigation items (`UINavigationItem`) allow us to customize what is displayed on a navigation bar. For example, we can give it a title that describes what the view controller is, like ""Contact List"" or ""Edit Contact"". We can also add buttons to the navigation item, which will then place them on the navigation bar for us.

It should be noted that you can set up navigation controllers, segues, and navigation items both in Interface Builder or programmatically.",,,02hKpJYcNNE,http://youtube.com/watch?v=02hKpJYcNNE,https://www.youtube.com/embed/02hKpJYcNNE,,,,,Navigation Controller and View Controller Containment,,,,,1,,1,2
use storyboard references to separate UI into multiple storyboards,"Storyboards can become a bit of a double-edged sword at times. There are a couple reasons for this. First, if you have too many scenes in your storyboard, it can take a long time to open the storyboard file. Second, when working in a team, if you both need to use the storyboard, it can lead to merge conflicts very easily. Storyboard merge conflicts are not fun to deal with, because behind the scenes, they're really just XML files. ",,"Apple has come up with a solution to both of these problems called storyboard references. _Storyboard References_ allow you to create links between multiple storyboard files. This way, you can keep your storyboard files small, and also allowing multiple people to be working on storyboards because they're now separate files.

There are a few different ways people will use multiple storyboards and storyboard references. You can either group view controller scenes of a similar nature in a storyboard, or you can make one storyboard for each view controller scene. 

In order to create a storyboard reference, you will need more than one storyboard file (excluding the LaunchScreen.storyboard). Let's say we have the Main.storyboard that comes with the project, and we make another storyboard called ""UserProfile"" (You can make new storyboard files by going to File -> New -> File... and selecting Storyboard). This storyboard will only hold the view controller scenes related to the user profile feature, thus allowing another developer to work on that feature while you work on the Main.storyboard without the potential for a merge conflict. As always you will get the added benefit of having your storyboards load faster.

Find the Storyboard Reference object in the object library and drag it onto the canvas. In the attributs inspector, you must choose the storyboard you wish to reference. In this case, we'll choose UserProfile:

![](https://user-images.githubusercontent.com/16965587/42102785-4311bffc-7b84-11e8-9ace-6ab38899e00b.png)

One that is selected, the storyboard reference on the canvas should then say UserProfile. The storyboard reference acts as a placeholder for the other storyboard so that you are able to make segues to it, and interact with it like you normally would. By default, the storyboard reference will go to whatever its initial view controller scene is.

A nice trick is to double click the storyboard reference and it will take you to its storyboard.",,,9www2E6ot1M,http://youtube.com/watch?v=9www2E6ot1M,https://www.youtube.com/embed/9www2E6ot1M,,,,,Navigation Controller and View Controller Containment,,,,,1,,1,2
use view controller containment and embed segues to embed child view controllers,"View controller containment is when one view controller places another view controller inside of it. We've actually used this before, though you might not be aware of it. This is exactly how navigation controllers work. On the storyboard, the navigation controller doesn't have anything inside of it besides the navigation bar, but when we run the app, its first view controller is what shows up on the screen.",,"We can use view controller containment on normal view controllers as well. This is especially useful to prevent our view controllers from becoming hundreds and hundreds of lines long. It can easily become a bit unwieldy and hard to keep organized. With view controller containment, we can break this up into separate view controllers with their own logic, but to the user, there would be no difference. For example, if we had a view controller that for the user profile that looked like this:

![](https://user-images.githubusercontent.com/16965587/42843002-173df732-89cc-11e8-8427-6437488e97a9.png)

It has multiple table views that will display different information than the other, and a few views that will display some profile information. it can get a little messy because both table views would be calling the same `UITableViewDelegate` and `UItableViewDataSource` methods but need different logic to make each work. While it's completely possible to do it, your code may end up being messier than it could be.

For example, we could use container views to separate each table view into its own view controller. All you need to do is search for ""Container View"" in the storyboard's object library and drag it out onto a scene. Once you drop it on the scene, you'll see that it'll have a segue to a new view controller scene that is the same size as the container view. This is view controller containment. We have a view that holds a view controller inside of it. 

At this point, you could add a table view to the view controller that comes with the container view. Just like with any other view controller scene, you will need to create a Cocoa Touch Subclass file for it. If you wanted to use a `UITableViewController` instead of a normal `UIViewController` in your container view, simply delete the view controller it came with, and make a new segue from the container view to the table view controller and choose ""embed"". If the view controller shrinks to the size of the container view, you have set up the container view correctly. Replacing the table views on the original view controller with container views should look like this:

![](https://user-images.githubusercontent.com/16965587/42843432-572806a2-89cd-11e8-9804-966d7cacda96.png)

Container views are a very helpful thing to know about. They aren't necessary always, but being aware of when you could clean up your project to make your own life or the life of the people you work with easier by using them will serve you well. Also, this should help you understand built in parts of iOS like navigation controllers and tab bar controllers work a bit more.",,,4iSON3B85zw,http://youtube.com/watch?v=4iSON3B85zw,https://www.youtube.com/embed/4iSON3B85zw,,,,,Navigation Controller and View Controller Containment,,,,,1,,1,2
understand and explain the role of model objects and model controllers in MVC,"When writing an application, it's important for us to write it in a way that is both clean and easy to read while also allowing us to add new features without making the rest of our app break. Over the years, developers have come up with different ""Architectural Patterns"" that help us accomplish this goal. ",,"The most common architectural pattern in iOS development is called MVC. MVC stands for ""Model-View-Controller"". Its purpose is to help you modularize your app into small parts that are reusable and are somewhat independent of other parts. What that means is that if you want to add or remove something from your app, it will take minimal effort for you to do. 

The M in MVC is ""Model"". _Model_ represents the data behind your app. If we take the notes app as an example, the information being displayed to the user is a note that they have created that is comprised of perhaps a few different properties like the text of the note, and probably a `Date` object so the app knows when it was last edited and is able to order all of the notes chronologically. The model **is not** concerned with how it is displayed (we'll get to that in a bit), but its job is simply to hold the data in our app in an easy to use manner. If we were to look at the example of the note in code, it would look something like this:

```swift
class Note {

    var text: String
    var timestamp: Date

    init(text: String, timestamp: Date) {
        self.text = text
        self.timestamp = timestamp
    }
}
```

In an app, there is going to be a lot of information being passed around. Models mitigate the pain of passing every single property around individually, and instead give us a nice container to put our properties inside of, and just have to carry the container. Think of it as either choosing to carry a bunch of ingredients to a recipe on your own, or just putting them all in a box in order to carry them a lot easier.

As stated before, models are the information behind the app, but that's all they are. They can do very little on their own. Going back to the ingredient analogy, they're just ingredients of a recipe. Ingredients can't really make themselves into a dish on their own. That's where Model Controllers come in.

""Model Controllers"", which belong to the ""Controller"" part of MVC are in charge of handling interactions with the models. There is an acronym used for the most basic, common interactions with our model objects called ""CRUD"" which stands for ""Create, Read, Update, Delete"". This means model objects shouldn't even be created or deleted on their own, and it's the job of the model controller to do so. Your thought process should be, ""If I need to interact with a model object in some way, I should look in the model controller.""",,,,,,,,,,Basic Persistence,,iOS Fundamentals II,iOS Development Core,,1,,,1
make a class or struct conform to Codable,"We will be implementing a form of persistence. _Persistence_ is the ability to save information either to the device's onboard storage, or to a server somewhere. This allows us to keep the user's data around between launches of the app. The first part in implementing persistence in this lesson is using a protocol called `Codable`.",,"_Codable_ is a protocol that once adopted on our model objects allows them to be converted into a representation in a different form, and then turned back into its original form. Codable is actually two protocols combined. One is `Encodable` which is the part that will turn the model object into a different form, and `Decodable` which turns it back into its original form (your model object) 

When we encode our model, all of the properties and values of the model stay the same, but they're put inside of a different container. Again if we think about putting the properties of our model in a box, the box is one way to represent our model. Another way of representing our model with the exact same things in it would be to put the ingredients in a plastic bag instead. The container has changed, but the things inside of it are the same regardless of whether they're in a box or a plastic bag.

The reason we might want to do this is because our model objects are something that **we** have created and defined. It is its own unique class (or struct), and the various forms of persistence do not automatically know how to save it to either a file or on a server somewhere. That's where Codable comes in. It is able to put the values of our model objects into a different container that **is** in the correct format to be saved locally or remotely.

`Decodable` on the other hand will take your model that has been encoded to a different format and turn it back into your model object. The reason this is useful is because while we need to encode our model to a different format in order to save it somewhere, the format that it gets turned into isn't near as nice to interact with in code. So once we fetch the encoded versions of our model objects, we want to decode them to turn them back into instances of our model.

Codable is very powerful and customizable. However, for simple implementations like the one we will use in this lesson, we don't have to customize it at all. The only thing that we have to do is have our model object adopt Codable, and it will do the rest. Now this may seem like magic, and it may be a bit hard to understand because we don't really do anything else. but we go more in-depth with Codable in later units.",,,,,,,Encoding and Decoding Custom Types,,,Basic Persistence,,iOS Fundamentals II,iOS Development Core,,1,,,1
use FileManager to find system directories (e.g. documents directory),"We need a place to store the data that we want to have stick around between launches of the app. As stated in the previous lecture, we can either choose to save it locally on the device, or remotely on a server. For both local and remote persistence, we have many options as to how we accomplish it. In this project however, we are going to save the data to a file on the device. ",,"Each application in iOS has its own ""documents"" directory, just like the documents directory on your computer. Behind the scenes of Finder (or any way to navigate through your computers files), the way that files know what folder they belong to is by having a URL attached to them. URLs aren't just used for websites. A URL for a file on your computer might look like this: `/Users/spencercurtis/Downloads/IMG_1688.jpg`. As you can see, it looks very similar to a web URL that you are probably more familiar with, but instead of pointing to a website, it points to a resource on my computer (in this case, a photo).

We are going to save the user's data to a file in that directory. Now unlike your computer, iOS devices don't have a graphical user interface to navigate through the file system like Finder. What this means is that we must do just a little bit of navigation to get access to the app's document directory URL. The way we do that is through the `FileManager` class. _FileManager_ provides access to the device's file system and can also be used to make changes to it. It should be noted however that in iOS apps you will only have access to your app's files, not any other app's, nor the files of iOS itself.
",,,,,,,"About the iOS File System,Locating Items in the Standard Directories",,,Basic Persistence,,iOS Fundamentals II,iOS Development Core,,1,,,1
use PropertyListEncoder to save Codable objects to a file,"`Codable` allows our model objects to be converted into a format that will allow us to save them either locally or remotely. `FileManager` allows us to access the device's file system which lets us get the application's documents directory, which is where we want to persist the user's data. We've talked about what we want to save (our model objects), and where to save it (the documents directory), however we need to know how to take our model objects and convert them to a different format in order to be saved like we talked about previously. The way that this happens is by using an `Encoder`. As of now, there are two kinds of `Encoder`s. The one we will be using for this lesson is called `PropertyListEncoder`.",,"A `PropertyListEncoder` will convert our model objects and put their values into a property list format, or ""plist"". We've actually been using plists a little bit already. Each Xcode project has a file called ""Info.plist"", so that will give you a decent visual idea of how the model objects will be saved. Property lists are essentially dictionaries. They are just a collection of key-value pairs.

When we use a `PropertyListEncoder` to encode our model objects into a property list, it will only allow us to do so if our models adopt and conform to `Codable` (or at the least `Encodable`). This is because while our model objects have the values to be put in the property list, we never defined the keys that they should be saved under. But Codable behind the scenes will make keys for each property in our model object for us. Again, this may seem like magic, but really it just takes the name of each property and assigns that to be the key. 

Once encoded, our model object(s) will be in the format of a property list, however in code, its type will be `Data`, just as any file type that we are used to using daily (.jpeg, .gif, .mp4, .mov, etc.) would be.

Later on in the course when we go over more advanced Codable, we will show you how to define your own keys (and why you would want to do that) as opposed to Codable doing it for you.
",,,,,,,About Property Lists,,,Basic Persistence,,iOS Fundamentals II,iOS Development Core,,1,,,1
"understand and explain what concurrency is, and reasons why it is used",Concurrency allows your app to do two or more things at the same time. Thus taking advantage of the multiple cores in your device.,,"Think about if you and a group of your friends were participating in a relay race. When the race begins, the first person runs and passes the baton to the next teammate and this continues until every teammate has ran. If each person represents a process that has to run in our code, only one runs at a time. Only after the process finishes running, then the next one can run. This is what we would call “Serial Execution” 

The opposite of this is “Concurrent Execution” which means multiple processes run at the same time. This would be like if every team member were allowed to start the race at the same time.",,,DfvCBMmRdVg,http://youtube.com/watch?v=DfvCBMmRdVg,https://www.youtube.com/embed/DfvCBMmRdVg,,Concurrency Programming Guide,,,Intro to GCD and Closures,,iOS Networking Basics,iOS Development Core,,1,,1,2
use GCD APIs to dispatch work to another queue,Concurrent programming is a very tricky thing to get right and to make sure works well on any device. ,"Explain that in GCD, queues are the fundamental unit of concurrency. Review the difference between serial and concurrent queues and asynchronous and synchronous dispatch. Emphasize that asynchronous vs. synchronous dispatch is very different from concurrent vs. serial.","Grand Central Dispatch is Apple’s way of helping programmers write good, safe concurrent code that will work well with any device with any amount of cores. It is an intermediary between our code and the operating system in order to make our code run efficiently both from a concurrency standpoint, as well as efficiently and responsibly using system resources. From Apple’s tutorial page on GCD [here](https://apple.github.io/swift-corelibs-libdispatch/tutorial/), it states ""Programming with GCD means leaving behind the details about threads and focusing on the essential work that needs to be done.”","Walk through writing the following code:

```

let queue1 = DispatchQueue(label: ""queue1"")
let queue2 = DispatchQueue(label: ""queue2"")

queue1.sync {

  print(""Starting work on queue 1"")

  queue2.async {
    print(""Starting work on queue 2"")
    sleep(1)
    print(""Finished work on queue 2"")
  }

  print(""Finished work on queue 1"")
}

print(""Done"")
```

Talk about the expected output. Explain why the order of the printed statements in the output is not the same order as the print statements appear in code.

Emphasize that this code is making use of **three** queues (main queue, `queue1`, `queue2`).","Look the following code. Without running it first, can you predict the output of this code?

```
import UIKit
import PlaygroundSupport

PlaygroundPage.current.needsIndefiniteExecution = true

let queue1 = DispatchQueue(label: ""queue1"")
let queue2 = DispatchQueue(label: ""queue2"")

queue1.sync {

  print(""Starting work on queue 1"")

  queue1.sync {
    print(""Starting more work on queue 1"")
    sleep(1)
    print(""Finished mored work on queue 1"")
  }

  print(""Finished work on queue 1"")
}

print(""Done"")
```

After writing down your prediction, compile and run the code in a playground. Does the output match what you expected? If not, can you explain why the output looks the way it does?",U7VcfjPlG1U,http://youtube.com/watch?v=U7VcfjPlG1U,https://www.youtube.com/embed/U7VcfjPlG1U,,,,,Intro to GCD and Closures,,iOS Networking Basics,iOS Development Core,,1,1,1,3
understand and explain the role of the main queue in iOS apps,"When we use Grand Central Dispatch, we interact with threads through things called “Dispatch Queues”, or just “Queues” for short. For now, you can think of queues being the same as a thread. They just are a line of processes that are waiting to be executed. ","The main point of this objective is just to emphasize ""never use UIKit off the main queue"".

Secondarily, you should explain and demonstrate the Main Thread API Checker diagnostic feature of Xcode.","In an app, there can be many queues. Every app has a special queue called the “Main Queue”. Its job is to display the user interface to the user. Whenever the user interface needs to be updated, for example after fetching some data, we need to update the UI on the main queue. If we forget to do this on the main queue, the UI will take significantly longer to update than it should, and will lead to a poor user experience. Luckily, Xcode is really good at telling us when we need to put something on the main queue.

Another thing to be aware of when using the main queue is that if we want to execute some code that will take a decently long amount of time, we generally want to execute it on a different queue than the main queue. If we fail to do this, it can lock up the main queue, and the UI will act frozen to the user.","Create a small app together. It should have a single button and a label. The action for the button should just be:

```
DispatchQueue.global().async {
  self.label.text = ""Hello from the background!""      
}
```","Run an app that you're written earlier, perhaps one of your project apps, with the main thread API checker turned on, and ensure that it doesn't flag any issues.",TeKvq5hHiQk,http://youtube.com/watch?v=TeKvq5hHiQk,https://www.youtube.com/embed/TeKvq5hHiQk,,,,,Intro to GCD and Closures,,iOS Networking Basics,iOS Development Core,,1,1,1,3
use Dispatch.(a)sync to move work back to the main queue,,,,,,,,,,,,,,,,,,0,,,0
understand and use Swift’s closure syntax,"The syntax for closures is as follows: start or ""open"" the closure by writing `{`, and end or ""close"" it by writing `}`. Anything in-between the brackets are ""inside"" the scope of the closure. Closures may also return something if you want. ",,"Here are a few examples:

```Swift
let closure: () -> () = {
    print(""This is a closure"")
}
```

The type of this closure is `() -> ()`, which is to say it is a closure that returns nothing but itself. If we wanted to return that string instead of print it, it would look like this:

``` Swift 
let returnClosure: () -> String = {
    return ""This is a closure""
}
```

In both of these examples, in order to run the code inside of the closures, you must call it just like you would a function:

``` Swift
let returnClosure: () -> String = {
    return ""This is a closure""
}

returnClosure() // Will return the string.
```

Closures, just like functions can have parameters: 

``` Swift
let closureWithParameters = { (string: String) in
    print(string)
}

closureWithParameters(""Foo"")
```

They can include a return type as well:

``` Swift
let closureWithParametersAndReturnType = { (string: String) -> String in
    return string
}

closureWithParametersAndReturnType(""Bar"")
```

There is also a way to access your parameters in shorthand. This is the same closure as the previous example except with shorthand paramter names:

```
let closureWithParametersAndReturnType: (String) -> String = {
    return $0
}
```

The `$0` is the shorthand for referring to the string parameter. If we had two parameters, the first parameter would be `$0`, the second would be `$1`, and it would continue on if we added more parameters to the closure.

---

Obviously, you've seen how closures look in functions. If we wanted to return a string using a function it would look like this:

``` Swift
func returnString() -> String {
    return ""This is a closure in a function!""
}
```

We do not usually use closures as variables or constants, but it's helpful for you to know they exist because we will be using closures more often from now on, especially with networking.
","Walk students through several examples of creating closures as well as functions that take a closure as an argument. Cover trailing closure syntax, shorthand argument names, and implicit returns.","Write a closure that takes two arguments: a `String` called `string`, and an `Int` called `repeatCount. It should return a `String` consisting of the `string` argument repeated `repeatCount` times.

For example:

```
repeat(""Hello"", 3) // ""HelloHelloHello""
```",briLE9Gg2_o,http://youtube.com/watch?v=briLE9Gg2_o,https://www.youtube.com/embed/briLE9Gg2_o,,,,,Intro to GCD and Closures,,iOS Networking Basics,iOS Development Core,,1,1,1,3
understand and explain what a closure is and common scenarios for their use,"Closures are a fundamental part of Swift, are used everywhere, and you've already been using them, perhaps without knowing.",Explain closures using metaphors if appropriate. ,"_Closures_ are chunks of code that you can use and reuse. They can be assigned to variables, stored in properties, passed into and returned from functions, and executed. 

Closures are most commonly used:

- As a parameter in Higher-Order Functions including map, filter, reduce, and sort.
- In many other functions, often with the parameter name `completion`.

A closure is sometimes called an _anonymous function_, which just means a function that doesn't have a name. They behave vary similarly to functions, in that a closures are pieces of reusable code, and can take arguments and return values. In fact, in Swift, functions themselves **are** closures. So, while closures are often called anonymous functions, it might be more correct to say that functions are ""_named closures_"".

One of the most common uses for closures is to provide a chunk of code to be executed after a long-running background operation completes. For example, a network request can take a long time, especially on a slow internet connection. Therefore it's done in the background, so your app's UI will continue to be responsive while the networking system is waiting for data to come back from a remote server. When the data does come back, you need to be able to do something with it. You provide a closure to the network request API so that it can execute your code after the network request succeeds (or fails!). In your closure, you can use the newly-obtained data to do whatever makes sense in your application -- update the UI, save it to disk, alert the user, etc.","Show students a few APIs that take closures, including URLSession, and the UIView and UIViewController animation methods that take completion closures.","Can you think of a scenario where a completion closure, to be called when some work has finished, is useful?",0KTu0d_4Rbs,http://youtube.com/watch?v=0KTu0d_4Rbs,https://www.youtube.com/embed/0KTu0d_4Rbs,,Closures - The Swift Programming Language,,,Intro to GCD and Closures,,iOS Networking Basics,iOS Development Core,,1,1,1,3
describe the difference between a closure and a function,,,,,,,,,,,,,,,,,,0,,,0
"use sort, filter, map, compactMap, and reduce","When working with collections, we get free access to a few higher-order functions that are built right into Swift that can make some common problems easy to solve. A _higher-order function_ is a function that either takes in a closure as a parameter, or returns a closure. This ties in to what we just talked about with closures because in order for these functions to work, we will give it a closure that will tell the function how to perform various tasks. ","Explain that higher order functions are functions take and/or return another function.

Talk through the documentation for sort, filter, map, compactMap, and reduce and explain some common scenarios for their use.","### Sorted

The `sorted` function does exactly what you would expect it to. This function takes in two parameters that will let you determine how you want the array to be sorted, and returns the array to you.

Let's say we have an array of `Int`s that we want to have sorted from greatest to least: 

``` Swift
let unsortedInts = [20, 129, 30, 62, 16, 93, 95, 45]
```

Let's use the `sorted` method to put them in the right order:

![](https://user-images.githubusercontent.com/16965587/41679601-f7c49abe-748b-11e8-832f-8803091bd837.png)

You'll notice that Xcode will give you a few options for the method. If we choose the `sorted()` that doesn't take in any parameters, the array will be sorted in ascending order (which would sort the array from least to greatest). If we want to do anything other than that, we need to choose the `sorted(by: )` version so that we can give it a closure that will define how we want it to be sorted:

![](https://user-images.githubusercontent.com/16965587/41679765-7e94ce7e-748c-11e8-8549-94b56939313d.png)

Once you have the closure parameter highlighted like it is above, simply hit the return key and the closure will autofill itself. Then we just have to give the parameters names like here where the names are `first` and `second`:


``` Swift
let sortedInts = unsortedInts.sorted { (first, second) -> Bool in
    // Note: The compiler may yell at you because we haven't done anything in the closure yet.
}
```

Or if we wish to use the shorthand parameter names, we can delete those parameter names, the return type and the `in` keyword like so:

``` Swift
let sortedInts = unsortedInts.sorted {
    // Note: The compiler may yell at you because we haven't done anything in the closure yet.
}
```

Now that we are a bit more comfortable with the syntax, let's look at how to fill out the `sorted(by: )` method. And that really depends on what you want to do. For us, it is fairly simple. We just want the numbers to be ordered from greatest to least (descending order). 

The way this function works is that it will loop through your array, and place the first `Int` in the first parameter, the second `Int` in the second parameter, compare them, then do the same for the second and third numbers, the third and fourth numbers, and so on until it has compared the entired array, and will place the values in the correct order. That may seem complicated, but let's look at it in code (using the shorthand syntax:

``` Swift
let sortedInts = unsortedInts.sorted {
    return $0 > $1
}
```

That's all we need, and the `sorted(by: )` function will take care of the rest. We can actually make this shorter and more concise by using an even simpler form of shorthand:

```Swift
let sortedInts = unsortedInts.sorted(by: { $0 > $1 })
```

And again, even shorter:

`let sortedInts2 = unsortedInts.sorted(by: >)`

Note that you don't always have to use the most short and concise form of this or any function. The most important thing is that your code is clean and easy to read. If something makes more sense to you by writing it out a longer way, please do so. You shouldn't at all be concerned with the way your code looks at this point.

If you feel comfortable with `sorted` and how closures work within it, you should be just fine with the rest of the higher-order functions because they work in a similar fashion.

### Filter

The `filter` function will let you take the values of an array, give it a criteria that has to be met, and only give you back the values from the array that meet the criteria. Maybe we only care about the even numbers in the array. What we will do is return `true` if the number is even signaling to the function to keep that number, or return `false` if the number is odd and the function will not include that number in the new, filtered array to be returned.

You may use the filter function in any of its forms to produce the same result as shown here:

``` Swift
// Example 1
let evenNumbers = numbers.filter { (number) -> Bool in
    if number % 2 == 0 {
        return true
    } else {
        return false
    }
}

// Example 2
let evenNumbers2 = numbers.filter {
    if $0 % 2 == 0 {
        return true
    } else {
        return false
    }
}

// Example 3
let evenNumbers3 = numbers.filter({ $0 % 2 == 0 })
```

All 3 examples do the same thing, though they are syntactically different.

None of these functions are solely for use with arrays of numbers. We could filter out almost any collection of objects that conform to the `Comparable` protocol. For example, we could filter out the strings that start with the letter `A`:

``` Swift
let filteredCountries = countries.filter({ $0.first == ""A"" }) 
// Returns [""Argentina"", ""Aruba""]
```

### Map

The `map` function is a higher-order function that lets you perform a closure on each item in a sequence (like an array), and it will return an array of values. It essentially works the same way as a for-in loop, however you must return something in each iteration of the `map` closure.

Let's say we want to go through and uppercase every string in an array. Here is an example to see how we could do the same thing with either a for-in loop or `map`:

``` Swift
// String array to uppercase
let strings = [""Foo"", ""Bar"", ""Baz""]


// For-in loop

var uppercasedStrings: [String] = []

for string in strings {

    let uppercasedString = string.uppercased()

    uppercasedStrings.append(uppercasedString)
}

```

You can't return an array inside of the for-in loop, so we have to make a variable outside of the loop that the uppercased strings get put into. Now compare that with the way that map works:

``` Swift
// Full map
var uppercasedStrings1 = strings.map { (string) -> String in
    return string.uppercased()
}

// Shorthand map
var uppercasedStrings2 = strings.map {
    return $0.uppercased()
}

// Shorter shorthand map
var uppercasedStrings3 = strings.map({ $0.uppercased() })
```

Because in each iteration of the closure, we are returning a string, there is no need to make an external variable to store all of the uppercased strings as we iterate through them. 

Again, use the form of `map` that makes sense for the situation. If it's a closure with many lines of code needed to run, you should probably stick to the way the full map or shorthand map examples above are. The shorter shorthand form is great for very simple operations.

An important thing to note is that we can return any type we want when using `map`. Just because the array we `map` through is an array of strings, does not mean we need to return an array of strings. We could return the amount of characters in each string for example:

``` Swift
var stringCounts = strings.map({ $0.count })

print(stringCounts) // Will print [3, 3, 3]
```

### CompactMap

The `compactMap` function is another commonly used higher-order function. It works the same as `map`, however it will also remove any `nil` values from the array as well. If we wanted to perform the same uppercased operation to every string in the array of strings, however with the array having some nil values in there, it would effectively ignore those nil values and only return the strings:

``` Swift
let strings = [""Foo"", nil, ""Bar"", ""Baz"", nil]


// Full compactMap
var uppercasedStrings1 = strings.map { (string) -> String in
    return string.uppercased()
}

// Shorthand compactMap
var uppercasedStrings2 = strings.compactMap {
    return $0.uppercased()
}

// Shorter shorthand compactMap
var uppercasedStrings3 = strings.map({ $0.uppercased() })
```

This is especially useful to maintain clean code because you do not have to worry about unwrapping any optional values before returning them or appending them to an array, etc.

### Reduce

Reduce is used in order to combine an array of items into a single value. It takes in two arguments. The first is the `initialResult` which is meant to be the starting value upon which the items in the array will be added onto. The `nextPartialResult` is a closure with two parameters. The first, called `Result` when represents the combined items at any point (remember that all these higher-order functions will run their closures multiple times like a for-in loop would), while the second parameter is the item that is going to be combined next. Here is an example in a few different forms:

``` Swift
let numbers = [12, 50, 38, 62, 42]

numbers.reduce(0) { (total, nextInt) -> Int in
    return total + nextInt
}

numbers.reduce(0) {
    return $0 + $1
}

numbers.reduce(0, { $0 + $1 })

numbers.reduce(0, +)
```

It should be noted that while in this example, we are simply adding these Ints together, we can also subtract, divide, multiply, or do any other calculation necessary before we add it to the total.","Try out examples of the common higher order functions in Swift: sort, filter, map, compactMap, reduce.","Write your own version of filter called `myFilter()`. It should take an array of strings and a ""filter"" closure, and should return an array of strings. The returned array should be the passed-in array minus the items filtered by the filter closure.",B1E_1Pgf67s,http://youtube.com/watch?v=B1E_1Pgf67s,https://www.youtube.com/embed/B1E_1Pgf67s,,,,,Intro to GCD and Closures,,iOS Networking Basics,iOS Development Core,,1,1,1,3
use documentation to understand how to use a REST API,A _REST API_ is a web resource that is structured and written in a standardized way that allows for interoperability and communication between the API and devices regardless of operating system.,"You should walk through the introduction of the documentation, until about the section titled ""Encodings"". Explain that we will be using the ""people"" endpoint to search for characters from the Star Wars universe. Using the ""search"" query parameter will allow for fuzzy searching of people. (https://swapi.co/documentation#search)

Explain that we will create a model object that represents a person. Tell them that they can take any or all of the properties of a person from the JSON, but for simplicity's sake, we're just going to use three properties of a person. In order for us to be able to convert the JSON we will get back from the API to an instance of our `Person` model object, we must make the model object conform to  `Codable` (or at least `Decodable` since we're never going to encode our model objects)","We can make different requests to an API depending on how we want to interact with it. For example, we can ask the API for some information, or maybe we want to give some data to be put onto the API. The different ways in which we interact with an API are called _HTTP Methods_. The most common HTTP Methods are GET, PUT, POST, and DELETE. We're only going to use GET for today's lesson, however. Read [this article](https://restful.io/an-introduction-to-api-s-cee90581ca1b) for more conceptual knowledge of REST APIs. This will help you understand the things we're going to send to the API and the things it will give back to us when we dive into the project.

GET is used when we don't want to **give** the API any information, but we want it to **get** some information from it, hence the name ""GET"".

APIs often have documentation written for it that allows developers know the best practices for interaction with the API. REST has no official standard on how it should be structured, thus many APIs are slightly different. It's crucial to always read the API's documentation if available.","Go to this example endpoint using the search parameter ([here](https://swapi.co/api/people/?search=darth)). We will look at what JSON is and how to parse it in order to get the information on characters we search for from the API.

After that, we will create a `Person` struct with properties for the person's name, gender, and birthdate. Make sure that the struct conforms to either `Codable` or `Decodable`.",,ai7iDoI6Muo,http://youtube.com/watch?v=ai7iDoI6Muo,https://www.youtube.com/embed/ai7iDoI6Muo,,,,,REST Basics and Enums,,iOS Networking Basics,iOS Development Core,,1,,1,2
use URLSession to make a GET request to a URL,"The `URLSession` class is very large class that can do many things relating to interacting with network resources. For today's project, and for most interactions with REST APIs, we will be using `URLSessionDataTask`s. Take the time to read the documentation for it. You may also want to look at the overview of `URLSessionTask` in the documentation to gain a better understanding of URLSessionTasks in general (of which `URLSessionDataTask` is a subclass), such as `resume()`. ","Create the `PersonController` with the students. Create a function called `func searchForPeopleWith(searchTerm: String, completion: @escaping () -> Void)`. Review closures with the students, if necessary. Begin to write the body of the function, creating a request URL from the `baseURL`, a `URLQueryItem` using the searchTerm function parameter.","A _URL_ is sort of like a special string with a specific format that identifies the location of some resource, whether locally in a device's filesystem, or remotely on a server. URLs have a few different parts that they are made up of:

- Note: You will hear the term _Base URL_. This is a URL from which the API for the website or database begins. For example, the website openweathermap.org can be accessed through a web browser and viewed as a normal website. However if we wanted to use URLSession to pull the information behind the website such as the forecasts, we would have to use the websites API endpoint as our base URL. Most API URLs are either made by adding a component to the URL like this: openweathermap.org/api, or sometimes you will see them with the ""api"" as a subdomain like this: api.themoviedb.org. We call this the base URL because any information we want to access will be accessed by adding either components, query parameters, and often times both of those to the base URL.  

Often times, APIs will have required query parameters that have to be included in the URL. _URLQueryItem_ objects represent a single key-value query parameter. The specific keys for query items are generally found in an API's documentation under either ""query paramters"", or just ""parameters"".

_URLComponents_ allow us to easily create URLs in the correct format to be made into requests. We create `URLComponents` using a `URL` object that points to the resource we want to access. Once created, we can give the `URLComponents` one or more `URLQueryItem`s that we want it to add to our URL. Then we can get the formatted url combining our `URL` and the `URLQueryItem`(s) from the `URLComponents` to be made into a request.

_URLRequest_ objects are ultimately the thing that we send to an API. In it is our `URL` telling the API where we want to access data, along with the HTTP Method we wish to use at that URL. There are other features that we will use in other projects such as sending data to APIs, but that is all you need to know about URLRequests for now.

Feel free to research these more in-depth using the documentation.
","We will create a `PersonController` together. It should have a `baseURL` property, an array of Person objects to be used as the data source for the table view.",,9vBCLfdR-dk,http://youtube.com/watch?v=9vBCLfdR-dk,https://www.youtube.com/embed/9vBCLfdR-dk,,,,,REST Basics and Enums,,iOS Networking Basics,iOS Development Core,,1,,1,2
implement a URLSessionDataTask completion closure,`URLSessionDataTask`s are ultimately the thing that takes our request to the URL that we specify. ,"Continue writing the function with them by calling `URLSession.shared.dataTask(with: URLRequest, completion: ...)` Make sure that they understand how the completion closure of this `dataTask(with: ...)` function works, as well as when it will be called.","Once the we perform the data task, it will come back to us and call its `completion` closure which returns us `Data?` a `URLResponse?`, and an `Error?`.

  - The data returned is some information that the API gives us. If we are performing a GET request, this data will have the information we requested from the API. We will get data back even if we are performing a different HTTP method such as PUT. This is because the API will give us some information relevant to whether the request was successful or not and will sometimes tell us how to fix a problem we might be encountering. This data is optional, meaning that we could get no data back at all, in which case there is likely something wrong with our code such as a bad URL, or something is wrong with the API itself.

  - The most common use for the `URLResponse` returned is to get the status code (such as 200, 404, etc.) of the request.

  - The error returned is optional, so there won't always be an error, however if there is, it will give you an error message from the API telling you what went wrong.

Inside of this closure, the main goal is usually to take the data returned and turn it into instance(s) of your model object or some other data type like `UIImage`. ","Try to do basic error handling on the optional error that gets returned in the completion closure of the `dataTask(with: ...)` function. Also, make sure the data returned isn't nil.",,_hc7J0TX4o4,http://youtube.com/watch?v=_hc7J0TX4o4,https://www.youtube.com/embed/_hc7J0TX4o4,,,,,REST Basics and Enums,,iOS Networking Basics,iOS Development Core,,1,,1,2
use JSONDecoder() to convert JSON data returned by an API into model objects,"When using REST APIs, the data that gets returned to us is in JSON format. Similarly to property lists (plists), JSON is made up of key-value pairs. Like we've said in the past, working with key-value pairs such as in the form of a dictionary is not an efficient way of handling your data. Instead, we should convert the data into something more developer-friendly like instances of a model object. The way we can do that is using `Codable`.
","Review Codable with the students, which they should have some experience with from the previous Unit. Note that the key for the birthYear property is in snake_case in the API. You may either go back to the Person model and add a CodingKeys enum to fix this, or use `JSONDecoder`'s `keyDecodingStrategy` called `.convertFromSnakeCase` to ensure the data gets decoded correctly.","We've used `Codable` in the past to turn our model objects into a plist, and save that to the phone's hard drive and vice-versa. In order to do that, we used `PropertyListEncoder` and `PropertyListDecoder`. There is another kind of encoder and decoder called `JSONEncoder` and `JSONDecoder`. We will use these when we are getting data from a REST API in order to turn it into our model objects, and vice-versa when we want to send information to the API. 

Luckily, there is very little difference between the property list and JSON encoder/decoder, so if you remember how to use the plist encoder/decoder, you essentially know how to use JSON encoder/decoder. We've already done a lot of the work by making our model objects adopt and conform to Codable. When encoding for example, instead of turning the model objects into a plist, it will simply put it in the format of JSON. Alternatively, it will let us take some JSON data that we receive from the API and encode it directly into instance(s) of our model object.",Implement the JSONDecoder together. Finish the function by setting the value of your array of `Person` objects to the decoded data returned from the data task ,,RDpGtqmPi9o,http://youtube.com/watch?v=RDpGtqmPi9o,https://www.youtube.com/embed/RDpGtqmPi9o,,,,,REST Basics and Enums,,iOS Networking Basics,iOS Development Core,,1,,1,2
define custom enum types,"Enums are first-class types like Structs and Classes, and have a lot of functionality that the other two have. In this example, we're going to look at what makes enums unique. Enums introduce the concept of ""cases"". These are the ""special values"" stated previously. Cases represent a value that isn't going to change. ",,"Say we want to print something based on the direction you're going:

``` Swift
var direction: String = ""East""

switch direction {
case ""North"":
    print(""Let's go to the North Pole!"")
case ""East"":
    print(""The sun rises this way."")
case ""South"":
    print(""Watch out for penguins"")
case ""West"":
    print(""Where the skies are blue"")
default:
    break
}
```

This is great, but there are a few things to consider such as misspelling the string, having to write a `default` statement. If you misspell the string, nothing is going to get printed because it'll run the `default` statement which is to just break out of the switch statement. 

If instead we wanted to write an enum for this, it would look like this: 


``` Swift
enum CompassPoint {
    case north
    case east
    case south
    case west
}
```

Let's break this down:
  - We define the enum by using the `enum` keyword, then giving it a name using upper camelCase, just like you would other types.
  - We use the `case` keyword to create a case for each cardinal direction of the compass.

Let's look at this same switch statement using our enum:

``` Swift
var direction: CompassPoint = .east

switch direction {
case .north:
    print(""Let's go to the North Pole!"")
case .east:
    print(""The sun rises this way."")
case .south:
    print(""Watch out for penguins"")
case .west:
    print(""Where the skies are blue"")
}
```

We gain the safety of only being able to select cases for the `CompassPoint` enum when we switch on it. You may also have noticed that we don't have to write a `default` statement. This is because we're handling every case in the enum, thus making it exhaustive. It should be noted that if we didn't handle each case, then we would still have to write a `default` statement. This is more of a cherry on top, not a main reason to use an enum. 

#### Raw Values

Enum cases can have what are called ""raw values"". Raw values are are an assigned value to the case that allow you to attach a value of some type to each case. If we try print to print a case like `.east`:

``` Swift
var compassPoint = CompassPoint.east
print(compassPoint) // prints ""east""
```

It will simply print the name of the case. If we wanted to attach another value to each case. As a very simple example, maybe we want to attach a raw value that has the uppercased version of the case:

``` Swift
enum CompassPoint: String {
    case north = ""North""
    case east = ""East""
    case south = ""South""
    case west = ""West""
}
```

After naming the enum, adding a colon, then writing a type will define what you want your raw value's type to be. If you're familiar with C enums, they work similarly, but we aren't limited to integer raw values.

Accessing the raw value is simple as accessing the case's `rawValue` property:

``` Swift
var compassPoint = CompassPoint.east
print(compassPoint.rawValue) // prints ""East""
```

If your enum has raw values like CompassPoint now does, you will be able to call an initializer to create instances of the enum with a raw value: 

``` Swift
let east = CompassPoint(rawValue: ""East"")
```

As you can pass in a raw value that doesn't actually exist in the enum, the initialize is failable, which means it could be unsuccessful in initializing the enum. It will return an optional instance of your enum, so it would be `CompassPoint?` in this situation.",,,egeafP8KRCo,http://youtube.com/watch?v=egeafP8KRCo,https://www.youtube.com/embed/egeafP8KRCo,,,,,REST Basics and Enums,,iOS Networking Basics,iOS Development Core,,1,,1,2
understand and explain common use cases for enums,"At its most base form, an enumeration (enum for short) allows you to take some values as well as states that are related and group them together.",,"An example in the Swift Programming Language Guide [here](https://docs.swift.org/swift-book/LanguageGuide/Enumerations.html) is the points on a compass (north, east, south, west). 

Maybe in our application, we need to know what direction we are going. We make a function that does that based on a `String` that is passed in to the function. A potential problem you can run into is that we'd be using ""magic strings"" to check the direction. As stated in past modules, we want to avoid them when at all possible. In order to clean this up, you could make a special value in the enum. These values allow you to store each direction, check them, and do whatever you want with them, **plus** you will get all of the luxuries such as autocomplete, Xcode throwing errors if you misspell the case somehow, and a few more that we will look at later on.",,,YIbvCbvrqmk,http://youtube.com/watch?v=YIbvCbvrqmk,https://www.youtube.com/embed/YIbvCbvrqmk,,,,,REST Basics and Enums,,iOS Networking Basics,iOS Development Core,,1,,1,2
use URLSession to send a PUT request to create or modify data on a REST endpoint,"As far as the actual implementation of sending a request to an API, the overall concept is similar to using a GET request with `URLSessionDataTask`s. We'll start with PUT.",,"When calling the `dataTask(with: ...` method on an instance of `URLSession`, you are presented with the option to choose to pass in a `URL` or a `URLRequest` parameter. The `URL` parameter option is a convenience method that will just create a `URLRequest` for you with the request's `httpMethod` property set to ""GET"". As you may assume, you can only use this for GET requests. So if we want to PUT some data instead, we need to create our own instance of `URLRequest` and do a bit more setup before passing it to the data task. `URLRequest` objects are what dictate where to go to, what HTTP method should be performed there, and it also carries any data to that resource if you are using a method like PUT or POST.

First, we make a request:

``` Swift
// This request URL represents a ""complete"" URL that points to the place we want to put the data
let requestURL = URL(string: ""exampleApi.io/path/to/resource"")!

// This represents the information we want to PUT to the API at the requestURL.
let dictionaryToPUT: [String: String] = [""foo"": ""bar""]

var urlRequest = URLRequest(url: requestURL)
```

We can then tell the request that it should PUT at its url by doing this:
```
// continuing from the last code snippet

urlRequest.httpMethod = ""PUT""
```

The `httpMethod` property wants you to give it a string for the HTTP method it should perform. This string should be all uppercased.

At this point, the request is ready to be sent to the API... however we haven't given it any information to actually try to PUT to the API. In order to send information through the request, we need to turn the information we want to send into `Data`, specifically in JSON format. As the data types we use in Swift are specific to Swift, an API doesn't know how to interact with them. That's where encoders come in. Just like when you used `PropertyListEncoder` to take the information in your app and turn it into a plist to be saved to a file, we will use `JSONEncoder` to turn our information into JSON data which can then be sent to the API. We attach the data to the `URLRequest` using its `httpBody` property. Adding from the other code snippets:

```
do {

    let jsonEncoder = JSONEncoder()

    let jsonData = try jsonEncoder.encode(dictionaryToPUT)

    urlRequest.httpBody = jsonData
} catch {
    // Fantastic error handling here
}
```

You can then pass the `URLRequest` to the `URLSession`'s `dataTask(with: URLRequest, ...)` method.",,,-Z0M59obaBk,http://youtube.com/watch?v=-Z0M59obaBk,https://www.youtube.com/embed/-Z0M59obaBk,,,,,PUT/POST,,iOS Networking Basics,iOS Development Core,,1,,1,2
use URLSession to send a POST request to create data on a REST endpoint,"As far as POSTing goes, the process is almost the same as PUTting. Of course, you need to make sure that you change the `URLRequest`s `httpMethod` to `""POST""`. Also, it's key to be aware that POST is not always interchangable with PUT. As stated in the first objective, a POST request will add on its own identifiers to the URL that you give it. This actually happens on the API's side, so we have no control over that. ",,,,,sl47fcFf6iY,http://youtube.com/watch?v=sl47fcFf6iY,https://www.youtube.com/embed/sl47fcFf6iY,,,,,PUT/POST,,iOS Networking Basics,iOS Development Core,,0,,1,1
understand and explain the difference between PUT and POST,"REST provides two ways of giving data to an API; namely, the PUT and POST methods. It's vitally important to understand the differences between the two.",,"Going back to what we learned about REST a few lessons ago, when we interact with a REST API, we need to tell is what kind of action we want to perform at the URL we give it. These are called HTTP Methods. 

Up until now, we've only been using the GET method. But GET is only used to pull information from the API. Now though, we want the API to store our information. 

There could be a variety of reasons why you want to give information to an API. A common reason is that we want to store our information somewhere outside of our device so that we can access it from other devices, or as a means of ensuring that our data is stored securely should anything happen to our device.

In order to understand the differences between PUT and POST methods, you should be familiar with a term called ""Idempotence"". _Idempotence_ means that the result of a request that is idempotent is the same regardless of if it was executed once or any other number of times. For example, 

``` Swift
var myNumber = 10

myNumber = 11
myNumber = 11
myNumber = 11
myNumber = 11
myNumber = 11

// myNumber will always be 11, so the = operator is idempotent 
```

An example of something that **isn't** idempotent would be:
``` Swift
var myNumber = 10

myNumber += 1
myNumber += 1
myNumber += 1
myNumber += 1
myNumber += 1

// MyNumber would be 15 at this point, thus the += operator is not idempotent
```

So, what does this mean in terms of REST? That's where PUT and POST differ. PUT **is idempotent**, while POST **is not**.

If you are going to create something new on the API, you can use either method. However, there are a few differences. Let's say we want to put a dictionary that looks like this `[""foo"": ""bar""]` at the endpoint `/some/resource/here`. We could PUT it there 3 times, and it would look like this:

![](https://user-images.githubusercontent.com/16965587/43816483-47b5edbc-9a92-11e8-80d4-72f458e0cf0f.png)

However, if we were to do the same thing (making the request three times) but using POST as our method, it would end up looking like this:

![](https://user-images.githubusercontent.com/16965587/43816485-47e62d2e-9a92-11e8-9c4b-2c888aec7ef8.png)

What happened here is the API saw that we are POSTing data. It says, ""Oh, this is new information, I'd better make a unique place to store it!"" This results in the API creating a unique identifier like ""-LClUbSItH39OGCUPGoJ"" and adding it onto the URL **THEN** puts the dictionary at that newly created unique URL. (sidenote: the identifier won't always look like that. That's just how Firebase formats their unique idenfiers) 

This isn't generally a bad thing, but you will want to follow the API's documentation's direction. To reiterate, REST is a style, not a rigid standard. People will write their APIs following different REST styles, which is why it is **always** important to adhere to the API's documentation.

PUT on the other hand will make it so the API will place the information we give it right where we tell it to. (See the first screenshot) This also generally isn't a bad thing but it can also lead to you wiping all of the data at a specific endpoint if you're not careful, though with an actual API that we haven't made ourselves through Firebase like we will for this project it usually isn't an issue. 

The bottom line is that for creating resources, PUT or POST **can** be used. As stated above, every API is different. For updating existing resources, POST should not be used while PUT **should** be used because it is idempotent.
",,,0IGYr_pFtps,http://youtube.com/watch?v=0IGYr_pFtps,https://www.youtube.com/embed/0IGYr_pFtps,,,,,PUT/POST,,iOS Networking Basics,iOS Development Core,,1,,1,2
use NSPredicate to fetch objects matching specific criteria,"`NSFetchRequest` is the class you use to retrieve objects from Core Data. You've already seen how to use it to do simple fetches. For this objective, you'll learn how to use `NSPredicate` in conjunction with fetch requests to narrow down the set of objects returned.","Explain how `NSPredicate` can be used to narrow down the results returned by a fetch request. You might explain that `NSPredicate` is used by Core Data, but isn't specific to Core Data. It's a general-purpose predicate class in Foundation. Go through the documentation for NSPredicate. Give some examples predicates you could create.","You've learned how to use `NSFetchRequest` to fetch managed objects from a Core Data store. By default, a fetch request for a particular entity will return all the objects of that entity type. Often, you'll want to fetch only those objects meeting certain criteria. Returning to an earlier example, if you had `Person` objects with an `age` attribute, and you wanted to fetch only adults, you could create a fetch request that specified that you only want those objects whose age attribute is greater than or equal to 18.

To specify certain criteria that objects must meet to be fetched, you use a _predicate_. A predicate is an instance of `NSPredicate`. When you create an `NSPredicate`, you specify a test that each object must pass in order to be included in the fetch request's results array.

```
let adultsPredicate = NSPredicate(format: ""age >= %@"", 18)
```

This creates a predicate where the ""test"" is, ""is this object's age property greater than or equal to 18?"". 

When you initialize an `NSPredicate`, you provide a format string and a list of values to be substituted into the format string. In the format string, `%@` will be substitued with the corresponding value in the list of values after the string. This is a form of string interpolation inherited from Objective-C (as NSPredicate is in fact an Objective-C class). If there is more than one `%@` in the format string, each `%@` will be replaced by a value based on the order of the values in the list. For example:

```
let youngAdultsPredicate = NSPredicate(format: ""age >= %@ AND age < %@"", 18, 50)
```

Here, the first `%@` gets replaced with `18`, while the second gets replaced with `50`, resulting in a predicate that matches anyone 18 or older and younger than 50.

`NSPredicate` has its own syntax for format strings, and it's very powerful. Apple has [documentation](https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/Predicates/Articles/pSyntax.html) that explains the format string syntax in detail.

After you've created a predicate, to use it when fetching, simply assign it to the fetch request's `predicate` property:

```
let fetchRequest: NSFetchRequest<Person> = Person.fetchRequest()
let adultsPredicate = NSPredicate(format: ""age >= %@"", 18)
fetchRequest.predicate = adultsPredicate

let managedObjectContext = container.viewContext
do {
  let adults = try managedObjectContext.fetch(fetchRequest)
  print(adults)
} catch {
  NSLog(""Error fetching adults: \(error)"")
}
```","Returning to our building management app, write a fetch request that only returns buildings with at least 3 floors.","In your project with `Person` objects, write a fetch request that only matches people whose firstName begins with the letter 'J'.",,,,,NSHipster - NSPredicate,,,"""Core Data II - Migration, Fetching, and Predicates""",,Core Data,iOS Development Core,,1,1,,2
use NSFetchedResultsController to create a table view populated with Core Data objects,"Most iOS apps use at least one table view. Usually, table views are used to allow the user to view, create, edit, and delete model objects. The controller's responsibility is to coordinate between the table view and the underlying model data (often via a model controller object). When the data being displayed in a table view is managed by Core Data, you can use a _fetched results controller_ to perform most of the hard work required to keep a table view (or collection view) in sync with the underlying Core Data managed objects.",Explain why you might want to use NSFetchedResultsController. Explain the steps needed to use a fetched results controller.,"Fetched results controllers are instances of `NSFetchedResultsController`. Think of an `NSFetchedResultsController` as a generic, system-provided controller class that lets you avoid writing a lot of tricky and uninteresting code that you'd otherwise have to write.

You give `NSFetchedResultsController` a managed object context and a fetch request, and it will monitor the context for changes to any objects that are included by the fetch request, including the creation of new objects, deletion of objects, or modification of existing objects. When a change happens, it will inform its delegate that the change occurred. Most often, the delegate is your table view data source (e.g. a table view controller). Your table view data source can respond to changes reported by the fetched results controller by informing the table view of these changes. When changes are made to Core Data, by the user or otherwise, **your** code doesn't need to do anything special to coordinate updating the table view, because changes will be communicated back to it through the fetched results controller.

#### Sectioning

If you have data that you want to display in multiple table view sections based on the value of a specific property, you normally have to write code to split the data up into sections, keep it up to date as data changes, etc. `NSFetchedResultsController` can also do sectioning for you. You give it a property you want it to use to split items up into sections. For example, for `Car` objects, you could give it ""make"" to have a section for each car manufacturer.

#### Using NSFetchedResultsController

To use `NSFetchedResultsController`, you first need to create one. You give it a fetch request with sort descriptors, a managed object context, an optional key path to use to separate objects into sections, and an optional name to use for caching its data.

```
let fetchRequest: NSFetchRequest<Task> = Task.fetchRequest()
fetchRequest.sortDescriptors = [NSSortDescriptor(key: ""name"", ascending: true)]
let moc = CoreDataStack.shared.mainContext
let frc = NSFetchedResultsController(fetchRequest: fetchRequest, managedObjectContext: moc, sectionNameKeyPath: ""priority"", cacheName: nil)
frc.delegate = self
```

After you've created it, you have to tell it to start operating by calling the `performFetch()` method:

```
try! frc.performFetch()
```

In order to respond to changes reported by the fetched results controller, you must implement the methods in the `NSFetchedResultsControllerDelegate` protocol. In a table view data source, your implementation of these methods will often be exactly the following:

```
func controllerWillChangeContent(_ controller: NSFetchedResultsController<NSFetchRequestResult>) {
  tableView.beginUpdates()
}

func controllerDidChangeContent(_ controller: NSFetchedResultsController<NSFetchRequestResult>) {
  tableView.endUpdates()
}
```
These two methods are called before the fetched results controller starts reporting changes, and after it has finished reporting changes. Because the fetched results controller can report multiple changes in a single run, including ""move"" changes which actually consist of an insert _and_ a delete, you need to tell the table view to batch up any changes you pass along to it while the FRC is still reporting them.

```
func controller(_ controller: NSFetchedResultsController<NSFetchRequestResult>,
                didChange sectionInfo: NSFetchedResultsSectionInfo,
                atSectionIndex sectionIndex: Int,
                for type: NSFetchedResultsChangeType) {
  switch type {
  case .insert:
    tableView.insertSections(IndexSet(integer: sectionIndex), with: .automatic)
  case .delete:
    tableView.deleteSections(IndexSet(integer: sectionIndex), with: .automatic)
  default:
    break
  }
}
```

If you've configured a `sectionNameKeyPath` thereby enabling section separation, the fetched results controller will call this method to report that a section has been inserted (because it has gotten its first object) or deleted (because the last object in it has been removed). In response to the fetched results controller reporting this to your class, you pass along the change to the table view by telling it to insert or delete the corresponding section.

```
func controller(_ controller: NSFetchedResultsController<NSFetchRequestResult>,
                didChange anObject: Any,
                at indexPath: IndexPath?,
                for type: NSFetchedResultsChangeType,
                newIndexPath: IndexPath?) {
  switch type {
  case .insert:
    guard let newIndexPath = newIndexPath else { return }
    tableView.insertRows(at: [newIndexPath], with: .automatic)
  case .update:
    guard let indexPath = indexPath else { return }
    tableView.reloadRows(at: [indexPath], with: .automatic)
  case .move:
    guard let oldIndexPath = indexPath,
      let newIndexPath = newIndexPath else { return }
    tableView.deleteRows(at: [oldIndexPath], with: .automatic)
    tableView.insertRows(at: [newIndexPath], with: .automatic)
  case .delete:
    guard let indexPath = indexPath else { return }
    tableView.deleteRows(at: [indexPath], with: .automatic)
  }
}
```

This method is called by `NSFetchedResultsController` on its delegate any time _any_ change to the managed objects covered by its fetch request occurs. Your code should pass along information about the change to the table view so that it updates to display the new information. An inefficient but working version of this method could just simply call `tableView.reloadData()`. By making more fine grained changes to the table view as above, you get somewhat better performance, and more importantly, the table view can animate changes.

Finally, you need to write your `UITableViewDataSource` methods to pull data from the fetched results controller:

```
override func numberOfSections(in tableView: UITableView) -> Int {
  return fetchedResultsController.sections?.count ?? 1
}

override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
  return fetchedResultsController.sections?[section].numberOfObjects ?? 0
}

override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
  let cell = tableView.dequeueReusableCell(withIdentifier: ""reuseIdentifier"", for: indexPath)

  let object = fetchedResultsController.object(at: indexPath)
  cell.textLabel?.text = object.name

  return cell
}

override func tableView(_ tableView: UITableView, titleForHeaderInSection section: Int) -> String? {
  guard let sectionInfo = fetchedResultsController.sections?[section] else { return nil }
  return sectionInfo.name.capitalized
}
```

It is important to always use `NSFetchedResultsController`'s `sections` property and `object(at:)` method to get the underlying model objects you use to provide data to your table view. That way, you always provide data that is in sync with and driven by the fetched results controller.",Write a very simple example app that uses NSFRC to drive its table view data source. It need not use section info.,Expand the project you built with the instructor to split data out into sections.,,,,,,,,"""Core Data II - Migration, Fetching, and Predicates""",,Core Data,iOS Development Core,,1,1,,2
understand and explain common scenarios where using multiple managed object contexts is appropriate,"So far, we've used Core Data with a single managed object context -- the one provided by `NSPersistentContainer` via its `viewContext` property. However, a Core Data stack can use multiple managed object contexts. For this objective you'll learn why you might want to use multiple managed object contexts.","Explain various scenarios where multiple MOCs can be useful. Very briefly explain that in general a managed object context can only be used on the main queue or a background queue, but not both. We'll cover this in more detail later in this lesson.","There a number of common scenarios where multiple managed object contexts can be useful. The main managed object context provided by `viewContext` can only be used on the main queue (more on this later). Therefore, any changes to objects in it must be run on the main queue. If you're doing something relatively complicated and long-running with Core Data objects, you don't want to do it on the main queue, because it can cause your app to become unresponsive.

Instead, you can do that work on a ""background context"", which is a managed object context associated with a background context. You can make any changes necessary -- creating new objects, modifying objects, or deleting objects -- on the background context, then when you save those changes, they can be merged into the main context.

The most common scenario where you might do this is when fetching data from the network that you then sync with a locally-persisted Core Data store. You can do all the work of reconciling the data from the network with the existing data in your Core Data store on a separate context in the background, and only when you're done propagate all those changes into the main view context. The process of merging or propagating changes from the background context to the main context is relatively fast.

For very large Core Data data sets, the actual process of saving to the persistent store may be somewhat slow, because writing to disk is much slower than writing to RAM. Some developers will use a background context to actually save changes to disk so that a slow save doesn't cause a stall in the UI.

Another clever use for multiple MOCs is to use a new MOC as a ""scratchpad"". Say for example that you have a long form that a user fills in. You want to continuously capture data the user enters, validate it, support undo/redo, etc. Core Data makes all of this easy. However, at the end of the process, the user may or may not want to actually save the data they've entered. Maybe you provide a Cancel button and a Save button. If they click the Save button, you can easily save the data, but what if they click the Cancel button? If you're using a single MOC, you have a problem, because if you've continuously added the data they've entered to the context as they've entered it, you have no straightforward way of backing out those changes. On the other hand, if instead you create a separate scratch context when the form is first displayed, and create data in **that context**, if they tap Cancel, you can simply discard that context without saving it, and none of the changes made in it will end up in the main context or the persistent store.",,Think of and write down two scenarios in an app where you think an additional managed object context would be useful. Can you think of a scenario where you'd want **three** or more MOCs?,,,,,,,,Core Data IV - Multiple Contexts and Concurrency,,Core Data,iOS Development Core,,1,1,,2
implement the shared persistent store coordinator multiple MOC stack,"There are a number of different ways to create a Core Data stack with multiple managed object contexts. In this objective, you'll learn about how to create multiple managed object contexts with a shared persistent store coordinator.",,"Multiple managed object contexts can share a persistent store coordinator. To create this kind of setup, you create two (or more) instances of `NSManagedObjectContext` and set both of their `persistentStoreCoordinator` properties to the same instance of `NSPersistentStoreCoordinator`:

```
let model = NSManagedObjectModel.mergedModel(from: [Bundle.main])!
let psc = NSPersistentStoreCoordinator(managedObjectModel: model)
try! psc.addPersistentStore(ofType: NSSQLiteStoreType,
                            configurationName: nil,
                            at: storeURL,
                            options: nil)

let context1 = NSManagedObjectContext()
context1.persistentStoreCoordinator = psc

let context2 = NSManagedObjectContext()
context2.persistentStoreCoordinator = psc
```

In this scenario, both managed object contexts will pull data from the same persistent store, but work being done in one context will not prevent work from being done in the other.

#### Merging Changes

When you have multiple managed object contexts sharing a persistent store coordinator, changes made to objects in one context are *not* automatically propagated to the other context. You must instead _merge changes_ from one context to another. You can do this by registering for the `NSManagedObjectContextDidSave` notification posted by each context when a save occurs. Then, in your notification observer method, call the `mergeChanges()` method on the appropriate context(s) (ie. the one that changes need to be merged *into*):

```
let nc = NotificationCenter.default
let notification = NSNotification.Name.NSManagedObjectContextDidSave
nc.addObserver(self, selector: #selector(context1DidSave(_:)), name: notification, object: context1)
nc.addObserver(self, selector: #selector(context2DidSave(_:)), name: notification, object: context2)

func context1DidSave(_ notification: Notification) {
	context2.mergeChanges(fromContextDidSave: notification)
}

func context2DidSave(_ notification: Notification) {
	context1.mergeChanges(fromContextDidSave: notification)
}
```

#### NSPersistentContainer

`NSPersistentContainer` has support for multiple contexts and internally uses the shared persistent store coordinator pattern, while handling merging for you. We'll cover this in more detail in a later objective.",,,,,,,,,,Core Data IV - Multiple Contexts and Concurrency,,Core Data,iOS Development Core,,1,,,1
use multiple MOCs with a parent/child relationship,,,,,,,,,,,,,Core Data IV - Multiple Contexts and Concurrency,,Core Data,iOS Development Core,,0,,,0
use NSPersistentContainer’s support for creating new background contexts,,,,,,,,,,,,,Core Data IV - Multiple Contexts and Concurrency,,Core Data,iOS Development Core,,0,,,0
correctly use Core Data’s API for concurrency,,,,,,,,,,,,,Core Data IV - Multiple Contexts and Concurrency,,Core Data,iOS Development Core,,0,,,0
create and connect IBOutlets,,,"Buttons and other controls are easy to add in Interface Builder. You can just drag and drop them into your view on the canvas. While many of the control's attributes can be modified easily with the attributes inspector, there are some things you need access to your code for. To make these kinds of changes, we need to create a connection between our button in the storyboard and our code. That's what outlets are for.

An `IBOutlet`, or ""Interface Builder Outlet"", is nothing more than a variable in our code with a modifier added to the place where we declare the variable to exist. This special modifier signals to XCode that the variable is special and connects to a control or view inside the storyboard.",Follow the instructor through creating an `IBOutlet` for the button in the app. Call the outlet `helloWorldButton` or similar.,"In the `viewDidLoad` function of your code, change the color of your button's text. Try to find a property of the button (using `.[some property name]`, typing the dot after the button's variable name will present a list of possible options) that will let you change the color of the button's text.",,,,,,,,Intro to iOS,,Intro to iOS,Precourse iOS,,0,1,,1
produce and send a JSON Web Token (JWT),In this section we'll use JSON Web Tokens to handle authentication in a Web API,,"
In this section we'll use JSON Web Tokens to handle authentication.

To produce and verify the token we'll use the `jsonwebtoken` npm module.","Let's produce and send a token on successful login.

- add `jsonwebtoken` to the project and require it into `auth-router.js`.
- change the `/login` endpoint inside the `auth-router.js` to produce and send the token.

```js
// ./auth/auth-router.js

const jwt = require('jsonwebtoken'); // installed this library

router.post('/login', (req, res) => {
  let { username, password } = req.body;

  Users.findBy({ username })
    .first()
    .then(user => {
      if (user && bcrypt.compareSync(password, user.password)) {
        const token = generateToken(user); // new line

        // the server needs to return the token to the client
        // this doesn't happen automatically like it happens with cookies
        res.status(200).json({
          message: `Welcome ${user.username}!, have a token...`,
          token, // attach the token as part of the response
        });
      } else {
        res.status(401).json({ message: 'Invalid Credentials' });
      }
    })
    .catch(error => {
      res.status(500).json(error);
    });
});

function generateToken(user) {
  const payload = {
    subject: user.id, // sub in payload is what the token is about
    username: user.username,
    // ...otherData
  };

  const options = {
    expiresIn: '1d', // show other available options in the library's documentation
  };

  // extract the secret away so it can be required and used where needed
  return jwt.sign(payload, secrets.jwtSecret, options); // this method is synchronous
}
```

- add the `./config/secrets.js` file to hold the `jwtSecret`

```js
// the secrets will be safely stored in an environment variable, these are placeholders for development
module.exports = {
  jwtSecret: process.env.JWT_SECRET || 'add a third table for many to many',
};
```

require _secrets.js_ into _auth-router.js_: `const secrets = require('../config/secrets.js');`

- login with the student/hired user and show the token
- review the steps taken one more time.

We have a server that can produce and send JWTs on successful login.",,,,,,,,,Using JSON Web Tokens (JWT),,Authentication,Full Stack Web Development Core,,1,,,1
Check if an array contains a certain value,,,"If you just want to know if an array contains a value, you can use the `contains()` function. It returns a `Bool` that is true if the array contains the passed in value, false otherwise.

```
let friends = [""Chris"", ""Ken"", ""Justin"", ""Aaron"", ""Anna""]
if friends.contains(""Aaron"") {
  print(""I should catch up with Aaron"")
}
```",,,,,,,,,,Collections,,Intro to iOS,Precourse iOS,,0,,,0
instantiate structs,,"Demonstrate instantiating a struct to students. Show how using let makes it immutable, while var makes it mutable.","When you create a definition for a struct, you're creating a template or blueprint for values of that type. To actually create an _instance_ of your struct type, you have to _instantiate_ it. Think of the definition of the struct (`struct House { /* properties and methods */ }`) as a blueprint for building a house, instantiation as the process of building the house based on the blueprint, and instances as the resulting actual physical houses.

To create an instance of a struct you've created, you call its _initializer_. We'll talk about creating your own custom initializers later in the lesson, but know that structs come with an initializer that takes an argument for each property.

```
let friend = Person(name: ""Ellie"", age: 30)
```

This instantiates a `Person` struct whose `name` property will be ""Ellie"" and whose `age` property will be `30` and assigns it to the `friend` variable. Because we've used `let` to create the variable, it's _immutable_, or in other words unchangeable. We can't change its properties later.

```	
let friend = Person(name: ""Ellie"", age: 30)
friend.age = 31 // Error!
```

Just as with numbers, strings, and arrays, if we want to create a struct with properties we can change, we have to create its variable with `var`.

```	
var friend = Person(name: ""Ellie"", age: 30)
friend.age = 31
```",Instantiate your Song struct. Explore using var and let.,,,,,,,,,Custom Data Types,,Intro to iOS,Precourse iOS,,0,,,0
write code that demonstrates Python basics,This objective is designed to introduce students to how Python implements concepts and ideas they already know from previous languages.,"Project for this is to implement everything in the repo except the adventure game

For the lecture, demonstrate how you learn a language. Demonstrate features of Python and how to look them up.

Stuff in here: https://github.com/LambdaSchool/CS-Wiki/wiki/Javascript-Python-cheatsheet

Have the students post cool stuff they find out about the language to slack as they find it.","For some of you, this might be the second programming language that you've learned. It will be about half as hard as your first language. (And your third will be about half as hard again.)

Techniques for learning new languages:

* Look for similarities with languages you know
* Find a tutorial
* Skim the library documentation to see what functionality you have at your disposal
* Write ""toy programs"" to explore specific language features","Let's learn some of the common language features that you already know.

We will write programs that:

* Output to the console
* Read input from the console
* Declare variables
* Declare and use functions
* Declare and use classes, and instantiate objects",Use the techniques you've learned to write a variety of toy programs that exercise Python language features.,KtYGuqq_irU,http://youtube.com/watch?v=KtYGuqq_irU,https://www.youtube.com/embed/KtYGuqq_irU,,Python to JS cheatsheet,,,Introduction to Python I,,Intro to Python/OOP,"Computer Science, DS - Computer Science",,1,1,1,3
apply basic Python knowledge to a more complex project,"Now that you've learned the basics, it time to put them to use for a more complex project. implementing a text adventure game.",This is the adv project. Minimum is to get n/s/w/e going.,"Building a fun, useful application is just a matter of putting together the building blocks you already know how to use! You or your team will usually start with a set of requirements given to you by a client. Your job is then to turn their wants and needs into specific features that you can implement using various loops, control structures, or other constructs.

For example, the video above walks-through how to create a simple rock, paper, scissors application. To do so, we start by thinking about the rules and requirements of the game and outlining what we need to implement. There are many different design paradigms that are used when designing software (including object-oriented design, which you'll be learning more about soon), but in one way or another, they are all different ways of breaking down a larger project into more manageable tasks.

When writing the code, it's a good idea to save and test often, to make debugging easier. If you run into errors, use the messages and line numbers you get to help pinpoint the problem. With some patience and perseverance, you can create whatever you set your mind to!",,Implement a basic text adventure game with classes for rooms and the player and a simple parser that reads user input and performs actions,f3YAP5NsRYI,http://youtube.com/watch?v=f3YAP5NsRYI,https://www.youtube.com/embed/f3YAP5NsRYI,,,,,Introduction to Python I,,Intro to Python/OOP,"Computer Science, DS - Computer Science",,1,1,1,3
create a project in Android Studio,,Be sure to give students a solid foundation of the terminology and a understanding of what an IDE does for developers. They should understand that an Android App is much more than just the code they write and that the IDE will help them manage that. Be sure they are prepared to test their apps on a variety of devices and work to plant in them an interest in exploring the activity templates to see how they work and how they differ.,"Android Studio is a type of application called an IDE. An IDE, Integrated Development Environment, is a single application that is made up of all of the tools required to write a program or app. IDEs will usually include  at least the following components, a Code Editor, Build Automation Tools, a Debugger and additional quality of life features. IDEs are usually specialized so they can provide the tools for a specific coding environment. Android Studio is designed to build Android apps, you wouldn't usually use it to write a Java applet or a web server. Xcode is designed to build iOS and macOS apps. There are other IDEs that are designed to work with other specific languages or platforms.

Android Studio is provided by Google for free and is built upon Jetbrains' intellij platform. To see the variety of IDEs out there, you can go to jetbrains product page here https://www.jetbrains.com/products.html. Android studio will help us download and manage Android libraries, build empty android apps, manage all the complicated requirements of those apps, and compile and run apps on android virtual devices as well as on physical android devices.","Demonstrate creating a new Android project. Explain the various templates Android Studio provides for new activities, and then explain that we'll usually use the empty activity template. Build an Android Virtual Device and configure Physical devices if they have them. Build and run the project.

Walk students through opening Android Studio, then creating a new project with an empty activity. Explain to them the important options in the forms that appear when creating a project (e.g. team, organization identifier, language selection, etc.)",,,,,,,,,Intro to Android,,Intro to Android,Precourse Android,,0,,,0
prepare a virtual testing environment,,This objective will introduce the students to the AVD manager. They should understand that this is a great tool for testing their apps but in no way can it replace testing on physical hardware.,Android virtual devices are a great tool for quickly testing apps on a variety of types of emulated hardware. They allow developers without a lot of physical devices to get a reasonable feel to how their apps will perform on different devices.,"Walk with the students through the process of building an AVD. Explain the various options and why we are choosing what we are choosing now. Explain that at minimum, the developer should test on devices running the target version of android and the minimum version.",Have the students build another AVD on their own.,,,,,,,,Intro to Android,,Intro to Android,Precourse Android,,0,1,,1
prepare a physical testing environment,,This objective will teach the students how to enable developer mode on physical devices and how to allow debugging on those devices.,"Virtual devices allow developers to test a variety of device and screen types, however, there is no replacing testing on physical devices. Especially ones that people are actually using.

Virtual devices have limitations that physical devices don't, however, they require developers to have many physical devices on hand to test with.","Show students the process of enabling developer mode on their physical devices using the virtual device you just created. Point out a few of the other options available in developer mode and then enable USB debugging. Be sure to tell the students how to do this on earlier versions of android and how to find out which version their device is running.
Then walk through the process with them, by starting with how to see which version they're running.",,,,,,,,,Intro to Android,,Intro to Android,Precourse Android,,0,,,0
edit the user interface using XML,,"Describe to the students what a UI component is and how we interact with it. Show them the very basics of the Layout Editor's WYSIWYG tool as well as how to create a component with the required 
Give the students a frame of reference for what they are doing at each stage of this process. This is also our opportunity to build a foundation of good programming principles. Be sure to emphasize and discuss with the students the importance of good, descriptive naming as well as following a standard naming and formatting convention","A user interface component has an XML side and a Java side, we need to build both and then connect them in order to manipulate them with our code and show them on the screen. This is best done with the ID which the developer defines when they create the component in the xml.
In the Java side, we create a data member of the same type as the component. We then use the ID to find the component on the XML side and assign it to out data member container. Now, when we manipulate our data member, we will see the results on our user interface.",Work with the students to add a button to the user interface. Then attach a data member to it.,Have the students add an id to the text view and add another data member for it.,,,,,,,,Intro to Android,,Intro to Android,Precourse Android,,0,1,,1
understand and explain the way Android allows applications to respond to user interaction,,Go over the basics of a Listener. The students don't have much context for it so avoid unnecessary details.,"When a user interacts with an interface component, it sends a message to the app that acts as a starting pistol to anything you have assigned to listen for that specific message

After creating a data member for the UI component, we attach a listener to it to listen for the event message that we have assigned to it
When that message is received, the listener executes the code that we have written for it",Attach a listener to the button that we created.,,,,,,,,,Intro to Android,,Intro to Android,Precourse Android,,0,,,0
use debugging and logging tools to find and correct bugs,,"Again, avoid going into too many details on these. This is supposed to be a brief introduction to logging and the debugger. ","Sometimes our code doesn't run as expected. Code always does what you tell it to but it may not always do what you expect it to. For this reason, IDEs have many tools to allow us to check the status of our apps even when the UI hasn't been updated yet.

Today, we'll touch a bit on logging and debugging.","Add a log line to the listener to log when the click event occurs. Execute and show that line to the students. Also make sure they understand that this doesn't interfere with the normal execution of the application.
Then add a break point to that line to pause execution on that log line. Show the students what the debugger looks like and what the major buttons do. Show them that the log line hasn't appeared yet. Resume execution and show that the log line is now there. Remove the break point.",,,,,,,,,Intro to Android,,Intro to Android,Precourse Android,,0,,,0
make code changes that drive the application user interface,,"We aren't limited in what we can do here. The simplest thing to do would be to change the text in the text view but be creative and demo more options to the students.
When the students go to change something in the UI, spend a minute showing them the list of options that are given by the intelli-sense. Encourage them to play with these to see what they do.","The User Interface is how we communicate with the user and how they communicate back.
Much thought goes into the design of the user interface some people spend their entire careers designing them.
We’ll be touching on principles of design here and there throughout the course and much of what we’ll do is manipulate and react to what happens on the user interface.
Now that we have the infrastructure in place, we can make changes in our user interface.",Add code to the listener to change something about the text view. Run through it a couple times and change different things each time.,Have the students make the button the color of the background instead.,,,,,,,,Intro to Android,,Intro to Android,Precourse Android,,0,1,,1
write code in a simple interactive coding environment,,Very short and basic objective. ,"We'll be using repl.it for the pure Java code in this Sprint. To use it, navigate to repl.it in your browser, then select Java from the dropdown menu. This will create a new repl and allow you to start writing code immediately. When you are ready to execute your code, click run at the top. If you want to save your code across sessions, create a free account.",Walk through creating a repl. Show the students where to create an account and the URL for their repl.,,,,,,,,,Intro to Java,,Intro to Android,Precourse Android,,0,,,0
annotate source code to allow others to better understand it,,"Fortunately, this is a small topic. Just be sure to highlight the differences between line comments, block comments and javadoc comments.","Comments are tools that allow developers to add information about what their code does and why. This is very helpful as another developer or even 'future you', may have a hard time interpreting even code that 'present you' thinks is straightforward.
There are three types of comments, line comments, block comments and javadoc comments. Line comments only apply to a single line. Block comments apply to everything between the block symbols. Javadoc comments are specially formatted comments that can be used by tools to generate documentation, these are placed before method and classes and also at the top of files. They provide standardized '@' tags to define different characteristics of the method or class and are generally the best way to clearly document what each of these things do.",Use single line and comment blocks to describe and disable code. Add a Javadoc comment to a method.,,,,,,,,,Intro to Java,,Intro to Android,Precourse Android,,0,,,0
explain what Express is and its core features.,"Express is a web application framework that sits on top of the Node.js web server (http server module). It's like React, for your backend.

Expresss sits on top of the raw `http` server module provided by `Node.js` and adds extra functionality, like routing and middleware support, and a simpler API.",,"Node's built in `http` module provides a powerful way to build web application and services, but requires a lot of code for common tasks like sending an `html` page to the browser.

Introducing `Express`, a light and unopinionated framework that **sits on top of Node.js** and makes it easier to create web applications and services. Sending an `html` file or an image is now a one liner with the `sendFile` helper method provided by `Express`.

Ultimately, `Express` is **just a Node.js module** like any other module.

What can we do with Express?

- build web applications.
- serve _Single Page Applications_ (SPAs).
- build RESTful web services that work with JSON.
- serve static content, like html files, images, audio files, PDFs, and more.
- power real time applications using techologies like `Web Sockets` or `WebRTC`.

Some of the benefits of using Express are:

- simple, unopinionated
- extensible.
- light weight.
- compatible with [`connect middleware`](https://www.npmjs.com/package/connect). This means we can tap into an extenive collection of modules written for `connect`.
- all packaged into a very clean, intuitive and easy to use API.
- writing web applications can be verbose, hence the need for a library to abstract away common tasks.

Some of the drawbacks of Express are:

- being simple and unopinionated means it's not a one stop solution. It does very little out of the box compared to frameworks like `Rails` or `django`.
- we need to make more decisions due to the flexibility and control it provides.

##### Main Features of Express

###### Middleware

Functions that get the request and response objects and can operate on them and either return the response or call the next middleware in the pipeline. Examples are logging or security.

Express' middleware stack is basically an array of functions.

Middleware CAN change the request or response, but doesn't have to.

###### Routing

A way to select which request handler function is executed based on the URL visited and the HTTP method used. Provides a way to break an application into smaller parts based on the route.

###### Routers for Application Modularity

Applications can be broken up into `routers`. We could have a router to serve our SPA and a router for our API. Each router can have it's own middleware and routing.

###### Convenience Helpers

Express adds many helpers that provide out of the box functionality to make writing web applications and api servers easier.

A lot of those helpers are extension methods added to the request and reponse objects.

Examples [from the Api Reference](https://expressjs.com/en/4x/api.html): `response.redirect()`, `response.status()`, `response.send()`, `request.ip`.

###### Views

Views provide a way to dynamically render HTML on the server and even generate it using other languages.","Let's write our first server using `Express`.

- create a new file called `server.js` to host our server code.
- type `npm init -y` to generate a `package.json`.
- install the `express` npm module using: `yarn add express` or `npm i express`.
- inside `server.js` add the following code:

```js
const express = require('express'); // import the express package

const server = express(); // creates the server

// handle requests to the root of the api, the / route
server.get('/', (req, res) => {
  res.send('Hello from Express');
});

// watch for connections on port 5000
server.listen(5000, () =>
  console.log('Server running on http://localhost:5000')
);
```

Run the server by typing: `node server.js` and visit `http://localhost:5000` in the browser.

To stop the server type `ctrl + c` at the terminal window.","On your own: Write a paragraph about what Express is and explain what it is used for in Modern Web Application Development

Submit your paragraph to your Project Manager.",pxRHZ2WI8tc,http://youtube.com/watch?v=pxRHZ2WI8tc,https://www.youtube.com/embed/pxRHZ2WI8tc,,Express Website,,"- which Node.js module is wrapped by Express?
- what feature of Express can execute code based on the http method and url of the request?
- what feature of Express can be used to extend it's functionality?",Introduction to Node.js and Express,,Building RESTful Web APIs with Express and Node.js,Full Stack Web Development Core,,1,1,1,3
output text for applications without a graphical user interface,, I've laid this out so that the students have a surface level understanding of each of the components of the println and setText calls. I want them to start thinking of the components of what they are doing rather than the unit as a whole.,"Java and Android both give us great standard libraries that we can use to perform a variety of tasks. The first one we'll look at is writing text that the user can see.
Java can be run with or without a dedicated user interface. Android always uses a user interface, this is what the user sees when they launch the app. When running without a user interface, the output must be sent to the console, this is what we do in apps like repl.",Walk through each part of the calls to write to system out and update text of a text view in command line java and android respectively. Then perform each task.,Append text to text view rather than replace it.,,,,,,,,Intro to Java,,Intro to Android,Precourse Android,,0,1,,1
embed a view controller in UINavigationController,,Demonstrate apps that use a navigation controller. Show the back button.,"#### UINavigationController

There's a really common user interface flow that you've probably seen in iOS apps you've used. You have a list of items, and when you tap on one, a new screen slides in from the right containing detail for that item. You might even be able to tap again to go another step to the right. In the top left corner of the screen will be a back button with the name of the previous screen, and you can tap it to go back.

This super common user interface is provided by a class called `UINavigationController`. `UINavigationController` lets you manage a _stack_ of view controllers. You can navigate to a new view controller by _pushing_ it onto the stack, and you can go back to a previous view controller by _popping_ it off the stack. This is programming jargon for the exact scenario you've seen, and the navigation controller does all the hard work for you, including putting the back button on screen when appropriate, and even setting its title correctly.

You can set up a stack of view controllers in a navigation controller directly in a storyboard. You can even say for example ""when a cell in this table is tapped, show this view controller"". First though, you must _embed_ the _root view controller_ (that is, the one you see when you go all the way back) into a navigation controller. There are a couple ways to do this, but the easiest is to select the root view controller, then choose Editor->Embed In->Navigation Controller in the menubar.

#### Segues

Once you've got your root view controller in a navigation controller, you can add additional view controllers to your navigation flow. To do that, you use a _segue_ (pronounced seg-way). A segue is used in a storyboard to set up a relationship between two view controllers. There are several different kinds of segues corresponding to different kinds of relationships view controllers can have with each other. The segue that we'll use in this lesson is called a _Show Segue_. It's called that, because it allows one view controller to **show** another, especially when they're both in a navigation controller.

To create a segue in Interface Builder, control-drag (or right-click -drag) from the item that you want to trigger the segue (table view row, button, a view controller itself, etc.) to the view controller to be shown. You'll see a list of possible segues to create, and can select the one you want.","Follow the instructor through embedding the `ContactsTableViewController` into a navigation controller in `Main.storyboard`. Add a detail view controller with a ""Name:"" static label and another label to be updated with the contact's name. Create a `UIViewController` subclass called `DetailViewController` and set the class of the detail view controller in the storyboard. Create a Show segue from the contacts table view cell to the detail view controller. Don't set a segue identifier (yet).",,,,,,,,,Table Views,,Intro to iOS,Precourse iOS,,0,,,0
understand and explain the role of primitive data types,,I outlined a lot of the reasons why people would run into issues with these data types. I also want to make sure the students understand how much or how little data they're using when they declare these and when it is appropriate to use them all.,"When you want to use a variable when programming, you first have to declare it. When you do this, you give the variable a name and tell the operating system how much memory to set aside for the variable, and how to interpret that memory. The OS will then tell you the address of that memory. After that, you can use the variable's name to access the memory at that location.
The way we tell the system how much memory to allocate is by giving it a data type. The data type determines how much memory is allocated and also how it is interpreted.","Review the primitive data types tutorial in the slides, then declare, assign and access different variables and values. Use primitive type's reference version to assign the min and max value of various types. Point out the difference between the spelling of these types to transition to the next objective.",,,,,,,,,Intro to Java,,Intro to Android,Precourse Android,,0,,,0
explain the difference between primitive data types and reference data types,,The goal with this objective is simply that the students understand that java is an Object Oriented language and that anything that is not a primitive data type is an Object and what that means at a basic level.,"Java is what is called an Object Oriented Language, this means that in addition to primitive data types, Java also has reference data types, or Objects. Objects are a combination of data and functionality. When we create data members for UI components, we are declaring and using objects as reference types. Objects are built form classes which we will cover in detail in a later module. ",,,,,,,,,,Intro to Java,,Intro to Android,Precourse Android,,0,,,0
understand and apply core operators in code,,"As this sprint is directed at students with little to no programming experience, it is a good opportunity to separate the mathematical symbols from the programming symbols especially with the assignment operator and the comparator later on.","All data in computers is just a bunch of numbers. At their lowest level, all computer operations are simply manipulating and comparing those numbers. The power comes with the fact that they do it billions of times per second. We use operators similar to ones used in basic arithmetic with a few additional ones.
The big difference you need to beat into your heads now is that ""="" is not ""equals"" it is now ""assigned the value of"". This operator will be the cause of many of your early bugs. The assignment operator is used to store the value on the right side at the memory location of the variable on the left. The comparator, '==' is used to compare two values and tell us if they match or not.","Assign values to data members, add and divide them and print the result, print a series of increment and decrement results.",,,,,,,,,Intro to Java,,Intro to Android,Precourse Android,,0,,,0
explain the basics of the REST architectural style.,"**RE**presentational **S**tate **T**ransfer or `REST` is set of principles, introduced in 1999 by Roy Fielding, that define a way to design distributed software. The [original document introducing REST can be read here](https://www.ics.uci.edu/~fielding/pubs/dissertation/rest_arch_style.htm).

In this module we'll take a high level look at the key principles of `REST`.",,"`REST` is a generally agreed-upon set of principles and constraints. They are **recommendations, not a standard**.

When designing a RESTful Web API, keep the following principles in mind:

- everything is a **resource**.
- each resource is accessible via a **unique URI**.
- resources can have multiple **representations**.
- communication is done over a **stateless** protocol (HTTP).
- management of resources is done via **HTTP methods**.

We will see that applying the `REST` architecture to our APIs, we can make then scalable and easier to maintain and extend.","REST APIs have six constraints:

- **client-server** architecture.
- **stateless** architecture: each request should stand on it's own, and order should not matter. No shared state.
- **cacheable**: improves network performance.
  - GET, PUT, DELETE should be _idempotent_ (same command executed multiple times, the state of resources on the server is exactly the same, much like pure functions)
  - POST is not _idempotent_.
  - caching is a way to store and retrieve data so that future requests can be fulfilled faster without re-perfoming expensive calculations or operations.
- **layered system**: component A (a client) might or might not communicate directly with component B (the server). There may be other layers between them like logging, caching, DNS servers, load balancers, authentication, etc.
- **code on demand**
  - the API returns the resource and code to act on it.
  - the Client only needs to know how to execute the code.
  - makes the API more flexible, upgradable and extendible.
  - most web application, send JavaScript code along with the data.
- **uniform interfaces**
  - each resource should be accesible through a single url. Not a hard requirement, but recommended.
  - we should be able to manage the resources through these _representations_ (the URL).
  - every interaction with the resource should happen through the URL identifier we gave to it.
  - self descriptive messages.
  - **HATEOAS** (**H**yepermedia **A**s **T**he **E**ngine **O**f **A**pplication **S**tate). Much like a _choose your own adventure book_, the pages are not read in order. You start at page 1 and based on the information available the reader (client) chooses the action to take and that will take them to a different page. A good example of a hypermedia API is [the GitHub API](https://api.github.com).","Write a short paragraph explaining what we mean by REST in the context of web API design.

Submit your paragraph to your Project Manager.",dgkQxWnUjKE,http://youtube.com/watch?v=dgkQxWnUjKE,https://www.youtube.com/embed/dgkQxWnUjKE,,,,"- what does the acronym REST stand for?
- mention three _constraints_ from the REST principles.
- how do we manage the _resources_ on a RESTful API?",Server-side Routing,Active,Building RESTful Web APIs with Express and Node.js,Full Stack Web Development Core,,1,1,1,3
create an API that can respond to GET requests.,"Now that most of the basic theory is out of the way, we'll move into building our first API (**A**pplication **P**rogramming **I**nterface).

What is an API you ask? [This article defines it and plain english](https://medium.freecodecamp.org/what-is-an-api-in-english-please-b880a3214a82), but in this context an API is _server software that publishes a set of **endpoints** that clients can use to manage **resources**_.","Show how to build an API that returns a string message using express, then have the students follow along as you build a diferent endpoint that returns a JSON object.

Challenge students to use the data helpers (inside `/data/db.js`) to build an endpoint that returns an array of all the users stored in the provided database.","In this overview we're walking you through the steps necessary to build a really simple Web API that returns the string ""Hello World"" on every GET request that comes into the root route (""/""). You don't need to code along, just read through it, you will start writing code in the next section.

To make things easier, we'll use an existing repository as the base for our API. Later in the week, as we learn more about `Node.js` and `Express`, we'll create an API from scratch.

To build our first API we will:

- clone the [node-express-mini repository](https://github.com/LambdaSchool/node-express-mini) to a folder in our computer.
- **CD into the folder**.
- use `yarn` or `npm install` to download all dependencies.
- add a file called `index.js` at the root of the folder, next to the `package.json` file.
- open the `index.js` file we just created using our favorite code editor and add the following:

```js
// require the express npm module, needs to be added to the project using ""yarn add"" or ""npm install""
const express = require('express');

// creates an express application using the express module
const server = express();

// configures our server to execute a function for every GET request to ""/""
// the second argument passed to the .get() method is the ""Route Handler Function""
// the route handler function will run on every GET request to ""/""
server.get('/', (req, res) => {
  // express will pass the request and response objects to this function
  // the .send() on the response object can be used to send a response to the client
  res.send('Hello World');
});

// once the server is fully configured we can have it ""listen"" for connections on a particular ""port""
// the callback function passed as the second argument will run once when the server starts
server.listen(8000, () => console.log('API running on port 8000'));
```
- make sure to save our changes to `index.js`.

We are using the `express` npm module in our code, so we need to add it as a dependency to our project. To do this:

- open a terminal/console/command prompt window and navigate to the root of our project.
- type `yarn add express` or `npm i express`. This will add express to our `package.json` file.

Now we're ready to test our API! In the terminal, still at the root of our project:

- type: `yarn server` or `npm server` to run our API. The message _""Api running on port 8000""_ should appear on the terminal.
- open a web browser and navigate to http://localhost:8000.

There we have it, our first API!

There is a lot going on in those few lines of code (only 6 lines if we remove the comments and white space). We will cover every piece of it in detail over the following days, but here is a quick rundown of the most important concepts.

First we use `require()` to **import** the `express module` and make it available to our application. This is similar to the `import` keyword we have used before. The line `const express = require('express');` is equivalent to `import express from 'express';` if we were using ES2015 syntax.

The following line is the one that creates our `Express` application. The return of calling `express()` is an instance of an Express application that we can use to configure our **server** and, eventually, start ""listening"" and responding to requests. Notice we used the word _server_, not _API_, an `Express` application is generic, meaning it can be used to serve static content (html, css, audio, video, pdfs and more), dynamically generated web pages, build real-time communications servers and more. We will be using it to accept requests from clients and respond with data in JSON format.

An `Express` application publishes a set of methods we can use to configure it. We are using the `.get()` method to set up a **route handler** function that will be executed on every `GET` request to the URL specified as the first parameter, in this case the root of the site (represented by a `/`). There are also methods to handle the `POST`, `PUT` and `DELETE` HTTP verbs.

The first two **arguments passed by express to a route handler function** are: an object that represents the `request` and another object that represents the `response`. Express augments those objects with a set of useful properties and methods. Our example uses the `.send()` method of the response object to **specify the data sent to the client as the response body**. You can call the first two arguments anything you want, but it is very common to see them called `req` and `res`, we at Lambda call them `the homies` as they always hang out together.

That's all the configuring we need to do for this first example, we'll see other ways of configuring our server as we go forward.

After the server is configured, it's time to _turn it on_. We use the `.listen()` method to have the express server monitor a `port` on the computer for any incoming connections and respond to those we have configured. Our server will only send a response to `GET` requests made to the `/` route on port `8000`.

That's it for our first Web API, now it's time for you to follow along as we add a new **endpoint** to our server that returns `JSON` data!","Let's try returning JSON instead of just a simple string.

Please follow the steps outlined on the Overview, but, to save time, copy and paste the content of `index.js` instead of typing it. Then run your API and use a browser to make sure it works.

Now follow along as we code a new _endpoint_ that returns an array of movie characters in JSON format.

The firs step is to define a new _route handler_ to respond to `GET` requests to `/hobbits`.

```js
server.get('/hobbits', (req, res) => {
  // route handler code here
});
```

Next, we define the data that our endpoint will return inside the newly defined route handler function.

```js
const hobbits = [
  {
    id: 1,
    name: 'Samwise Gamgee',
  },
  {
    id: 2,
    name: 'Frodo Baggins',
  },
];
```

Now we can return the hobbits array. We could use `.send(hobbits)` like we did for the string on the `/` endpoint, but this time we'll learn about two other useful methods we find in the response object.

```js
res.status(200).json(hobbits);
```

We should provide as much useful information as possible to the clients using our API. One such piece of information is the `HTTP status code` that reflects the outcome of the operation the client is trying to perform. In this case the client is trying to get a list of a particular `resource`, a list of `hobbits`. Sending back a `200 OK` status code communicates to the client making the request that the operation was successful.

We will see other status codes as we continue to build new _endpoints_ during this week, but you can see a list by following [this link to the documentation about HTTP Response Codes on the Mozilla Developer Network site](https://developer.mozilla.org/en-US/docs/Web/HTTP/Status).

The `.status()` method of the response object can be used to send any valid `HTTP status code`.

We are also chaining the `.json()` method of the response object to clearly communicate to both the client making the request, but most importantly, to the next developer working with this code, that the we intend to send the data in `JSON format`.

The complete code for `index.js` should now look like so:

```js
const express = require('express');

const server = express();

server.get('/', (req, res) => {
  res.send('Hello World');
});

server.get('/hobbits', (req, res) => {
  const hobbits = [
    {
      id: 1,
      name: 'Samwise Gamgee',
    },
    {
      id: 2,
      name: 'Frodo Baggins',
    },
  ];

  res.status(200).json(hobbits);
});

server.listen(8000, () => console.log('API running on port 8000'));
```

Now we can visit `http://localhost:8000/hobbits` in our browser and we should get back our JSON array.

If you are using the Google Chrome browser, [this extension](https://chrome.google.com/webstore/detail/jsonview/chklaanhfefbnpoihckbnefhakgolnmc) will format the JSON data in a more readable fashion.

Congratulations! You just built an API that can return data in JSON format.","Write an endpoint that returns a list of users stored in a database. The data must be returned in `JSON` format.

Production APIs return data coming from some kind of data store or external source, not from an in memory array like we have done so far.

Your job is to create a new `/users` endpoint that returns the list of users contained in the provided database. To get the list of users, **require** the `/data/db.js` file into `index.js` and use it's `.find()` method to get the data. The `.find()` method returns a promise, so make sure to send the response after that promise has resolved and, in case of failure, return a status code of 500 and an error message back to the client.

Good luck!",iNtm78tLjuo,http://youtube.com/watch?v=iNtm78tLjuo,https://www.youtube.com/embed/iNtm78tLjuo,,"Hello World Example on Express Docs,""What is an API? In English, please""","Express Response Object API,Express Request Object API,Express Routing Guide","* when building API endpoints, which parts of the HTTP specifications do we need to keep in mind?
* in our context, what do we mean by API?
* which HTTP status code range is used to convey successful responses? which for server errors? client errors? redirection?",Introduction to Node.js and Express,Active,Building RESTful Web APIs with Express and Node.js,Full Stack Web Development Core,,1,1,1,3
convert a pseudo classically instantiated program into class syntax,"Now that you have had some experience writing constructor functions to create new objects that inherit from each other, it's time to convert those pseudo classically instantiated programs into class syntax.",,"Now that we have had plenty of practice with pseudo-classical inheritance. We'll take the time to convert our beautiful little `Person` Constructor.

Some key notes on teaching Classes

*The `object` that gets returned from our class will have it's attributes assigned to it, and returned out of the `constructor()` function.
* All methods attached to the class body will be stored on the `Objects` prototype in a special way. There is a bit more magic here than just `Object.create(Foo.prototype);` and `Class.call(this, attrs);` But now that we know this, we can accept that the class keyword does this gloriously for us.
* The 'extends' keyword is used to `extend` a parent object. A clue to find out if a class is a `sub-class` is to look for extends.
* Finally, IF you're going to use extends, `super()` needs to be called from within the constructor function. This is to pass any new attributes back up to the constructor of the parent object.

Examples found below as we refactor our code from the previous Objective

```js
function Person(attributes) {
  this.age = attributes.age;
  this.name = attributes.name;
  this.homeTown = attributes.homeTown;
}

Person.prototype.speak = function () {
  return `Hello, my name is ${this.name}`;
};
```

```js
class Person {
  constructor(attributes) {
    this.age = attributes.age;
    this.name = attributes.name;
    this.homeTown = attributes.homeTown;
  }
  speak() {
    return `Hello, my name is ${this.name}`;
  }
}
```

Concepts to go over.

* Speak is now assigned to the object's prototype. (Pop open the console and show this off after you instanciate an object.)
* This is a single class, meaning it is not `extending` a parent class. We'll get to `extends` in a min.
* Point out how clean the code now looks! Instead of having to reference the objects prototype over and over to create methods on it, you can simply add them to the class body. This is how we use classes today.. point out here that they'll get plenty of time to use this when they get to React. React uses classes all the time.

Now, where this comes in handy is when we have children objects that will be sub-classes of their parents. We accomplished this in the previous module with `Child`

```js
function Child(childAttrs) {
  Person.call(this, childAttrs); // this is the special sauce
  this.isChild = childAttrs.isChild; // this will be a special attribute to Child
}

Child.prototype.checkIfChild = function() {
  if(this.isChild) {
    console.log(`${this.speak} and I am a child object`);
  }
};
```

This function above can now be represented as this:

```js
class Child extends Parent {
  constructor(childAttrs) {
    super(childAttrs);
    this.isChild = childAttrs.isChild;
  }
  checkIfChild() {
    if(this.isChild) {
    console.log(`${this.speak} and I am a child object`);
  }
}
```

Now make your fred and pebble's objects and see what they look like! Be ready to be blown away!

```js
const fred = new Person({
  age: 35,
  name: 'Fred',
  homeTown: 'Bedrock'
});

const pebbles = new Child({
  age: 3,
  name: 'Pebbles',
  homeTown: 'Bedrock',
});
```
","For this assignment we're going to be converting your Fruit constructors so that they can leverage the power of the class keyword.

Following along [here](https://codepen.io/lambdaschool/pen/QJdOJa) with the recorded video above will help us all understand this stuff a lot more.","Convert constructor functions into class syntax using `class`, `extends`, and `super()`. [https://codepen.io/lambdaschool/pen/pOKxme](Follow this link for the challenge.)",gnDkLbeof60,http://youtube.com/watch?v=gnDkLbeof60,https://www.youtube.com/embed/gnDkLbeof60,,,,,JavaScript IV,,JavaScript Fundamentals,Full Stack Web Development Core,,1,1,1,3
create and follow basic flowcharts,,This is an introduction to flowcharts as development tools. We don't go much further into it at the moment. We want to give students a tool to lay out the logic in their apps.,"Flowcharts are great tools to plan out the logic of your apps. They allow you to visualize the flow and design of your app and better communicate it with others.
In software flowcharts, we use different symbols to represent different types of steps. Execution begins and ends at a rounded rectangle and follow along arrows. A statement is represented by a rectangle, a decision by a diamond and a subprocess by another type of rectangle.",Review a few flowchart examples.,,,,,,,,,Conditionals and Loops,,Intro to Android,Precourse Android,,0,,,0
use relational operators to compare values,,Don't worry about spending too much time in demos on this. We'll be spending more time on these in the conditionals and boolean sections.,"Relational operators are used to compare two values and return the result as a boolean value. Many of these operators are reminiscent of their mathematical counterparts. Be sure to pay extra close attention to the comparator operator. When this is used improperly, it can lead to difficult to find bugs.",Review operators. Then write code to demonstrate the differences between operators.,Write a line of code that prints True if the provided grade is high enough to pass the class (you determine what grade that will be).,,,,,,,,Conditionals and Loops,,Intro to Android,Precourse Android,,0,1,,1
use if and else statements to control the flow of code,,This is the largest objective in this module. Take time to review previous objectives while exploring this one with the students.,"If statements are the most common logic controllers in programming, they are used to control the path of execution in your code. They execute a block of code if the result of the provided boolean expression is true. Adding an else statement will allow code to be executed when the expression is false.
These can be chained into a series of if, else if, else, statements to allow for even more code combinations.","Write if, else block in repl.it and Android.",Write code in Android or repl.it to print out which grade a student received.,,,,,,,,Conditionals and Loops,,Intro to Android,Precourse Android,,0,1,,1
use Boolean operators to combine Boolean expressions,,This is where we start testing their logic skills. Demo how different combinations of boolean expressions can result in different results in the truth tables.,Sometimes we need something a little more complex than a single boolean expression. Boolean operators allow us to combine multiple boolean expressions for different results.,"Show a combination of multiple boolean expressions with and, or and not in if statements. Then combine a couple of those into something a bit more complex.",,,,,,,,,Conditionals and Loops,,Intro to Android,Precourse Android,,0,,,0
use ternary operators to choose one of two options,,"When demoing this objective, be sure to be clear which of the two results is from the true outcome.","Many times, an if-else statement will only affect one value, in these cases, a ternary operator can be used to simplify that expression into a single line.",Write simple if-else statements and convert them into ternary operations.,,,,,,,,,Conditionals and Loops,,Intro to Android,Precourse Android,,0,,,0
use a while loop to run code until a condition is met,,,"Another common tool to control execution is a loop. Loops allow us to perform tasks multiple times, this is especially useful when working with multiple pieces of similar data.
The while loop will perform a task until the provided expression is false, checking before each iteration of the loop. The do while loop will do the same thing as a while loop, but it will check after each iteration. The do while loop ensures that the block of code in the loop will be performed at least one time.","Use while and do while loops to count to 10. Then perform a task for a result and check that result with the do while loop, searching for a specific result.",,,,,,,,,Conditionals and Loops,,Intro to Android,Precourse Android,,0,,,0
use a for loop to perform a task a specific number of times,,Be sure to point out to students when it would be advantageous to use a for loop and when to use a while or do while loop.,"Many times, we want to use a loop to perform a task a set number of times. This is where a for loop comes in handy. It is designed, to check for the number of times executed rather than some specific state.",Count to 10 with a for loop.,,,,,,,,,Conditionals and Loops,,Intro to Android,Precourse Android,,0,,,0
describe and use semantic HTML tags to markup content,Being able to provide meaning to your content is exactly what semantic HTML aims to do.  By having well-formed and semantic HTML we are building a solid foundation for our applications and websites to grow.,"Normal flow of the discussion:

HTML Standards, why use them?

HTML 5 Semantics and why they matter
- Showcase semantic tags with meaning by using https://gsnedders.html5.org/outliner/
- I usually like to show code without semantic tags and code with it.
- Discuss that divs are not bad, just presentational in their nature
- Semantic tags are good for human and computer consumption.
","## HTML Standards

To understand the use of HTML we first need to understand why we even have it in the first place. When the Internet was in its infancy, there were many organizations writing their own markup for their own communication. Company X would use specific tags that made logical sense to them while Company Y would write their own unique tags. 

As the Internet expanded to impact more people across many organizations and countries, a unification of meaning was needed. That unification is what we call the World Wide Web Consortium (W3C). The W3C was formed in 1994 to create international standards for the World Wide Web. We use the ever-changing W3C standards today. You can find the official standards of the W3C here: [https://www.w3.org/standards/](https://www.w3.org/standards/)

**If we didn’t have standards for the web we would end up with thousands of lines of markup to describe the same thing.** In fact, because browsers can render matching XML tags, we could experience this ourselves. Let’s look at an example:  
```html  
<lambdaSchool>My custom Lambda tag!</lambdaSchool>  
```
The `<lambdaSchool>` tag renders correctly in the browser! We can even style our newly created tag:
```css
lambdaSchool {
  color: red;
}
```
This is a small example of why we need standards when writing HTML. If we could write custom tags for everything we would be in a state of constant confusion across development teams and organizations.

## Semantic HTML5

The W3C uses the word `recommended` to describe the most up to date web standards. The current recommended standard for HTML markup is HTML5. HTML5 comes with more meaningful tags to better describe our code. We use the word `semantic` to describe tags with meaning.

Some examples of semantic tags include:    
```html
<h1>
<p>
<section>
<nav>
<header>
<footer>
```
Notice that you can quickly figure out what each tag listed should be described in HTML. The fact that you can read the tag and know more about its meaning instantly is a direct example of why we say it’s semantic HTML.

Compare the semantic tags above with this list of non-semantic tags below:
```html
<div class=”main-content”></div>
<div class=”nav”></div>
<span class=”orange”></span>
<div class=”footer”></div>
```

**Note, that while you can get information from the class names, you are at the mercy of the original developer’s naming convention, spelling, and meaning.** 

At this point, we can clearly see the advantage of semantic markup for web developers. The clarity and meaning should be found right in the tags. There is another large advantage in writing semantically correct code: computer algorithms consuming your code.

Search engines are algorithms looking for meaning. If your code is a lot of divs without meaning, you could lose out on valuable search engine optimization ranking. Knowing that both humans and machines prefer semantic code, we should get some practice writing it and knowing when to use it.

## `<div>` Tags Aren’t Bad

In the example above we shed a bit of bad light on using divs with classes but the reality is that often you need a div to get the job done. When do we use div tags? Whenever we don’t need to describe meaning. Using a div to create space, add structure or style elements is just fine. The concept of using markup like this is called presentational HTML.

Presentational HTML does not convey meaning. It is used to achieve something the designer or client wanted but perhaps doesn’t contain meaning. An example of this would be:
```html
<section>
  <div>
    <p>Half the content here should go here.</p>
  </div>
  <div>
    <p>The other half here should go here.</p>
  </div>
</section>
```
Notice how we can use the `<section>` tag to wrap the content but we could split the content into two halves using divs. Semantically we are still using `<section>` and at the same time, we are using presentational `<div>` tags to split the content in half. We could then use CSS on our divs to split the content without hurting the semantic structure.","## Semantic HTML Tutorial

Be sure to follow along with the code examples presented here!

Semantic HTML is all about providing meaning to our content.  Let's look at some content and think about how we could add meaning to it.  Study the content below:

```html
<!-- Main heading -->
Lambda School

<!-- Navigation -->
Tracks
About
Blog
Apply Now

<!-- Secondary heading -->
A Revolutionary New School
That Invests in You

<!-- Site content -->
Lambda School is a 30 week, immersive program that gives you the tools and training you need to launch your new career—from the comfort of your own home.
```

### Step 1: Main Heading

When someone is searching for Lambda School, they are most likely going to type ""Lambda School"" into the search bar.  

We need our content to be marked up so that search engines can successfully find Lambda School.  To do this we can wrap our heading (or title) in a `<h1>` tag.

```html
<h1>Lambda School</h1>
```

The `<h1>` tag is providing meaning to the search engine by informing any indexing tools that we want ""Lambda School"" to be most important.

We are also telling the next developer that ""Lambda School"" is the most important content on the page.

Let's keep marking up our code by looking at the navigation content.

### Step 2: Header

```html
<h1>Lambda School</h1>

<!-- Navigation -->
Tracks
About
Blog
Apply Now
```

At this point, we will want to define a header (upper portion) for our document.  We can use the `<header>` tag to wrap both the main heading (or title) and navigation items like this:

```html
<header>
  <h1>Lambda School</h1>

  <!-- Navigation -->
  Tracks
  About
  Blog
  Apply Now
</header>
```

Now that we have our header in place, let's finish marking the navigation items up using the `<nav>` tag with nested `<a>` elements:

```html
<header>
  <h1>Lambda School</h1>
  <nav>
    <a href=""#"">Tracks</a>
    <a href=""#"">About</a>
    <a href=""#"">Blog</a>
    <a href=""#"">Apply Now</a>
  </nav>
</header>
```
By using the `<nav>` tag we are making it clear what the intent of that block of code is.  The nested `<a>` tags don't currently link anywhere so we can put the `#` symbol in the `href` value to refresh the page for now.

### Step 3: Secondary Heading and Site Content Section

Now that we have our main heading and navigation in place, we can look at the secondary heading and site content.  Before we markup the code, take a look at the content and think: ""How should I organize this?""

```html
<!-- Secondary heading -->
A Revolutionary New School
That Invests in You

<!-- Site content -->
Lambda School is a 30 week, immersive program that gives you the tools and training you need to launch your new career—from the comfort of your own home.
```

The secondary heading and site content go together.  We could use a `<section>` tag to organize both the secondary heading and site content together.  

We can also markup the secondary heading with a `<h2>` and the site content could be a paragraph or `<p>` tag.

```html
<section>
  <!-- Secondary heading -->
  <h2>A Revolutionary New School
  That Invests in You</h2>

  <!-- Site content -->
  <p>Lambda School is a 30 week, immersive program that gives you the tools and training you need to launch your new career—from the comfort of your own home.</p>
</section>
```

HTML has multiple heading tags.  When we use them depends on what order we want the content to be understood by search engines.  

Using `<h2>` after `<h1>` tells the search engines that the secondary heading isn't as important as the main heading.  

Congratulations, you have marked up some content with semantic HTML, go complete the challenge below to push yourself further!

_Note: Semantic HTML concepts go deeper into search engine optimization (SEO) which are out of scope for this lesson.  You should google more information on SEO to become familiar with its uses but don't focus too much on it right now.","Follow the instructions found [here](https://codepen.io/lambdaschool/pen/wxgdeO?editors=1000) to complete a challenge on your own. Submit your fork of this Codepen to your PM once you are finished.

",mJkb00lk6rk,http://youtube.com/watch?v=mJkb00lk6rk,https://www.youtube.com/embed/mJkb00lk6rk,,Interneting Is Hard: Semantic HTML,Semantic HTML Tags,,"User Interface I,HTML",,"Introduction to User Interface and Git, Web for UX: Intro to HTML and CSS, Intro to HTML & CSS","Full Stack Web Development Core, UX Web and Labs Prep Unit, UX Design Core",,1,1,1,3
write and call simple methods,,,"Methods are specialized blocks of code that can be reused multiple times from multiple places in code. The allow for code specialization or the separation of concerns. This is where a block of code has a single, specific task that it performs multiple times. This makes code easier to understand as it can be broken down into component parts.",Write a method that performs a simple task.,,,,,,,,,Methods,,Intro to Android,Precourse Android,,0,,,0
demonstrate the use of CSS selectors to style markup,"Now that we understand markup better, we need to style it. Knowing the differences between universal selectors, elements, IDs, classes, and when to use them is key to building amazing user interfaces.","Usual order of topics to cover in the guided demo:
* Specificity
    * Universal selector
    * Element selectors
    * Class selectors
    * IDs
    * Embedded styles
    * Inline styles
    * !important
* Multiple classes and how to use them
* Pseudo selectors","## CSS Selectors  

In order to access an HTML tag for styling we use selectors in CSS. Selectors come with different specificity weights that can be used to layer on many styles. The weight of a selector has a major impact on how we build our apps and web pages. Lets look at a few of the major selectors used in everyday development:  

### Universal Selector  `*`

There are occasions you would want to select every element on a web page. The universal selector sometimes called the wild card or star selector does exactly that.  

**Specificity Weight:** Less specific than any selector.  

#### CSS Syntax example:  

```css  
* {
  color: red;  
}  
```  

### Element Selectors  `<h1></h1>`

When styling elements we are basically telling the browser: ""I want every single tag I specify to follow my styles."" This is more specific than the universal selector.  

**Specificity Weight:** More specific than universal less than everything else.  

#### HTML Syntax example:  
```html  
<h1>I'm a h1 element</h1>  
```  
#### CSS Syntax example:  
```css  
h1 {  
  color: blue;  
}  
```  

### Class Selector  `.class`

Class selectors begin to introduce a heavier specificity compared to element or universal selectors. Classes allow us to select individual elements by placing a special attribute in our HTML. We can use the same class over and over again on many elements. This behavior is extremely powerful and allows designers and developers to be more efficient.  

**Specificity Weight:** More than universal and element, less than ID, inline, and important.  

#### HTML Syntax example:  
```html  
<h1 class=""example-class"">I'm a class</h1>  
<h1 class=""example-class"">I'm a duplicate class</h1> 
<div class=""another-class"">New class selector</div> 
```  
#### CSS Syntax example:  
```css  
.example-class {  
  color: green;  
  font-size: 16rem;  
  text-align: center;  
}  
```  

### Multiple Classes  
Classes are unique in that we can have multiple classes in the same HTML attribute. This allows for layers of class specificity weight that we can control by using sibling selectors. The example below demonstrates what this could look like.  

**Specificity Weight:** Same overall weight as a single class but lowest class on the page wins.  

#### HTML Syntax example:  
```html  
<h1 class=""a b c d"">I have 4 classes!</h1>  
```  
#### CSS Syntax example:  
```css  
.a {  
  color: green;  
}  
```

### Pseudo-Classes  

Pseudo-classes are used when you may not have a set amount of elements but still want to specifically style them. 

For example: You are given a list of items in a store's inventory. That list of items grows and shrinks everyday with purchases and new items. 

Now lets imagine that the last item in the inventory needs to update to a new color to signify the end of the inventory. 

Without pseudo classes we couldn't achieve that result. We could use something like ```li:last-child``` to always select the last child in an unordered list to achieve our goal with the inventory.  

**Specificity Weight:**

Same specificity weight as classes.
More specific than: universal and element.  
Less specific than: ID, inline styles, and important.  

#### HTML Syntax example:  
```html  
<h1 class=""normal"">Normal class here</h1>  
<h1 class=""normal"">Normal class here</h1>  
<h1 class=""normal"">Psudo class found here!</h1>  
```  
#### CSS Syntax example:  
```css  
h1:last-child {  
  color: orange;  
}  
```  

### ID Selectors

IDs are only allowed to be used once per HTML page. The use of IDs should be for very specific reasons that can't be accomplished using a class. Be mindful of where you use IDs as their specificity weight is heaver than most selectors.  

#### Specificity Weight:  
- More than universal, element, pseudo-classes, and classes.  
- Less than inline styles, and important.  

#### HTML Syntax example:  
```html  
<h1 id=""example-id"">I have an ID</h1>  
```  
#### CSS Syntax example:  
```css  
#example-id {  
  color: gold;  
}  
```

### Specificity Heavy Weights  
The following items go beyond selector specificity and are in a heavy weight category. Using these items can cause issues in your code if you aren't completely familiar with them. Be aware of them and avoid their use for everyday styling. Of course they have a place in the CSS ecosystem, but be mindful of using them.  

####  3 Different Style Integrations  

You can introduce CSS styles into your HTML using 3 different approaches.  

1. Inline styles  
2. Embedded style tag in the HTML page  
3. Externally linked CSS file  

The standards on what is the best approach change with the flow of new technology but for now, we will say that external style sheets are the way to code. Why? Because both the inline styles and the style tag are more specific and we want to control all our style specificity in one place as we learn. In the future you may have cases where knowledge of all 3 come into play. It is recommended to know how all 3 work.  


#### Inline Styles  
Inline styles utilize the ```style``` attribute baked into every HTML element. This can be very useful with JavaScript libraries but is to be avoided outside of that. Inline styles overwrite everything but !important.  

#### Specificity Weight:  
- More than universal, element, pseudo-classes, classes, IDs  
- Less than !important  

#### HTML Syntax example:  
```html  
<h1 style=""color: red"">Inline Styled Heading</h1>  
```  

### Embedded Style Tag  
Inline styles were too cumbersome for early developers so a style tag was introduced to the spec. The style tag houses everything that an external style sheet does but instead has it in the actual page. There are some big advantages in having a style tag embedded on the page.  

- You won't have an extra HTTP request going out to find your externally linked style pages  
- You know exactly what is on that page and don't have to look in external files to find them  
- External style sheets are deemed as content blocking by some search engines and you could lose search engine optimization rank because of this  

However, embedded style tags are tightly coupled to the page and not very reusable. External style sheets are also overwritten by any embedded style tags with duplicate selectors. It's wise to choose one approach and stick with it as you learn. For our time here at Lambda, we will be focusing on external style sheets.  

#### Specificity Weight:  
- More than duplicate universal, element, pseudo-classes, classes, IDs  
- Less than inline styles, !important  

#### HTML Syntax example:  
```html  
<style>  
 h1 {  
  color: red;  
 }  
</style>  
```  

### External Styles  
Externally loaded styles require a link tag to point to the source path of the CSS file.  

External CSS style sheets have some advantages over both inline and embedded styles.  

- 100% CSS only files are easier to identify and update  
- Specificity is controlled in one place and not tampered with by inline or style tags  
- Separation of style and structure allows for clearer approaches for smaller projects  

#### Specificity Weight:  
- Less than inline styles and embedded styles, and !important  

#### HTML Syntax example:  
```html  
<link rel=""stylesheet"" href=""css/index.css"">  
```  

### !important, The Most Specific of Them All  
Last but certainly not least, we have the ```!important``` rule. When you place ```!important``` at the end of a style property you are basically declaring ""This style property now has the most specificity!"" Using ```!important``` will override any previous styles for that given property no matter what. The only exception is the use of another ```!important``` rule with higher specificity weight.  

#### Specificity Weight:  
- **Heavier than everything else**  
- Less than another !important rule with a higher specificity  

#### HTML Syntax example:  
```html  
<!-- This is the most specific you can get -->  
<h1 style=""color: red !important"">Don't Do This<h1>  
```  

**Try to avoid using ```!important``` unless you must use it**. The only need I could imagine is if a 3rd party UI library was overwriting your styles and you needed to overwrite theirs. That's pretty much it. If you ever think ""I should use !important here."" Think about the cascade instead and try to find another way.  

","## Selectors Tutorial

Let's get some practice writing out CSS selectors by using this HTML as a starting point:

```html
<div class=""container""> 
  <header>
    <h1 class=""main-heading"">Lambda School</h1>
    <nav>
      <a href=""#"">Tracks</a>
      <a href=""#"">About</a>
      <a href=""#"">Blog</a>
      <a id=""apply"" href=""#"">Apply Now</a>
    </nav>
  </header>
</div>
```

### Universal Selector

If we wanted to style everything in our HTML to have a `font-size` of `16px`, we could use the universal selector `*` like this:

```css
* {
  font-size: 16px;
}
```

### Element Selector

Let's use an element selector to remove `text-decoration` from all our `a` tags:

```css
a {
  text-decoration: none;
}
```

### Class Selector

Class selectors allow us to target one element or many.  Classes in CSS are the go-to for many apps and websites.

Notice that we have `a` tags on multiple elements.  We can use our classes to differentiate the styles between the heading and navigation items.

Style the heading to have a `font-size` of `24px` with a `color` of `crimson`;

```css
.main-heading {
  font-size: 24px;
  color: crimson;
}
```

Let's style all our `.nav-item` classes to look like buttons, review the code below:

```css
.nav-item {
  padding: 5px 20px;
  background: lightgray;
  border: 1px solid gray;
  margin: 10px 10px;
  border-radius: 5px;
  display: inline-block;
  color: black;
}
```

_Note: We will be discussing what some of the above CSS properties are in another module._

### ID Selector

We have an `ID` on the `Apply Now` link.  We can use the `ID` to add a specific style helping us call out the button even more:

```css
#apply {
  background: #125172;
  color: white;
}
```

The `ID` overwrote our `class` styles for `background` and `color`.  We are using everything else from our classes, this is related to the cascade which you will learn more about soon.

This tutorial covered many selectors but we are still missing a few, go check out the challenge below and explore what we are missing!","## Selector Challenge:  
Explore this [code](https://codepen.io/lambdaschool/pen/VxMbwv) and see how each unique selector works and overwrites each other.  ",71Re0ld_ES0,http://youtube.com/watch?v=71Re0ld_ES0,https://www.youtube.com/embed/71Re0ld_ES0,,,,,"User Interface I,CSS",,"Introduction to User Interface and Git, Web for UX: Intro to HTML and CSS, Intro to HTML & CSS","Full Stack Web Development Core, UX Web and Labs Prep Unit, UX Design Core",,1,1,1,3
return a value from a method,,,"Many times, we'll want to do something with the result from a method. This is where the return statement comes in. When we declare a method, we also declare what kind of data it will return. This can be void or any data type. In the code, we use the return keyword to indicate what will be passed back to the calling method.",Adapt the previous method to return a value rather than print one.,,,,,,,,,Methods,,Intro to Android,Precourse Android,,0,,,0
write methods that accept and use parameters,,,"In addition to returning values, methods often accept parameters. This is done by adding the parameters to the method signature when it is declared and then passing those parameters in when the method is called.",Create methods that manipulate data with parameters and return a value.,,,,,,,,,Methods,,Intro to Android,Precourse Android,,0,,,0
learn to overload methods so that they be declared with many parameter combinations,,,"A method's signature must be unique, but a method's name does not necessarily have to be. This is what is called overloading a method.
Overloaded methods should always perform the same task, they can, however, accept different quantities and types of parameters.
This is done many times in the Java and Android libraries. Take println, we have called it with Strings, Integers, and boolean values, but always use the same name. This is because the method is overloaded to be able to take those parameters.","Write a method that performs a simple task, then overload it and print which one is called when it is executed.",,,,,,,,,Methods,,Intro to Android,Precourse Android,,0,,,0
accept input from the user without a graphical user interface,,,"User input is handled differently in console apps vs GUI apps like Android apps. However, we will use the same tools when performing other tasks in Android.
In console environments, we handle user input using a Scanner object. When we create the scanner object, we pass it the stream we want it to scan, in this case that will be System.in. When we want to retreive data from the user, we use ""next"" and ""nextInt"" methods to get a String or int respectively. The app will then wait for the user to type text and press the enter key. We then store and use that variable as normal.",,,,,,,,,,Methods,,Intro to Android,Precourse Android,,0,,,0
quickly describe how many videos per week should be recorded and submitted in order to hit Level 4 curriculum goal,,,,,,,,,,,,,Preclass Video Production I,,Video Production,Instructor Training,,0,,,0
understand an explain the difference between classes and objects,,,"Java is an Object Oriented Programming language. That means that, in addition to primitive data types, we have access to object data types. Objects are built from definitions in Classes. We write our code in classes and then use them to build objects.
There is only one copy of a class but that can be used to create any number of objects. This is what happens when the ""new"" keyword is used.
Once they are instantiated, Objects can have variables and methods associated with them these are called data members and member methods. We'll look at examples of a Java class and an Android class and dig into their details.","Look at examples of Java and Android classes. The System class, https://docs.oracle.com/javase/7/docs/api/java/lang/System.html, and the TextView class https://developer.android.com/reference/android/widget/TextView are good examples to review.",,,,,,,,,Class Basics,,Intro to Android,Precourse Android,,0,,,0
"understand, define and use constructors",,,"A class constructor is a method that is used to create an object of that class. These methods can, and most often are, overloaded so that an object can be constructed using different combinations of initial parameters.
The constructor's job is to instantiate all data members, construct any composite objects and connect to any required resources. Once a constructor has finished, everything needs to be prepared so that any of the other public methods can be called.","Write a class to hold X, Y coordinates. Create constructors that take all or no parameters.",Write constructors that take an X or Y value and set the default for the other.,,,,,,,,Class Basics,,Intro to Android,Precourse Android,,0,1,,1
understand what magic numbers are and NEVER use them,,,"Magic Numbers is the name for numbers in code that aren't attached to a variable. This is a NO-NO. Magic numbers make it difficult to understand code. It also makes it more difficult to adjust values like timeout periods and URLs and be sure you've updated all instances of them.
Well designed Android apps will include a ""Constants"" class. This will include all the static variables that would need to be accessed from multiple locations in the app. Constants that will only be needed in one class, or that are strongly associated with a single class should be in that class unless it makes sense to put it in the constants class.",Build a constants class with a few constant members and access them from another class (plane size for our X and Y coordinates).,Create default values for our X and Y and use those constants in your constructors.,,,,,,,,Class Basics,,Intro to Android,Precourse Android,,0,1,,1
understand and know when to make members private or public,,,"All members in Java have an access level. The most common are public and private. Access levels control what code can access which members. For example, if you were to write a library that allowed users to communicate with your website, you could create a private data member that managed how frequently any app could communicate with your server.
Private members are much more useful than that though. Sometimes we don't need access to certain methods in a class when we're outside of that class. Making it private would hide that class so that it wasn't mistakenly used or suggested.
All data members that aren't constants should be private. This prevents unintentional manipulation of values. Member methods should be private unless they have a reason to be accessed from outside of the class.",Try to access private methods of a class.,Assign access levels to all members of your coordinate class.,,,,,,,,Class Basics,,Intro to Android,Precourse Android,,0,1,,1
understand and apply the concepts of object-oriented design using Python,"In software, objects are used to model ideas and items that you find in everyday life. Objects are characterized by attributes that can be represented using variables and behaviors represented using methods. ",,"Classes are the top level organizational structure in OOP. They are the ""blueprints"" for the different objects that will exist within our program.  

For example, if a developer writes a `Player` class, they can then use this blueprint to create many different copies of `Player` objects throughout a program. 

Classes contain:
* **Fields** - also known as _attributes_ or _properties_. They hold _state information_ about a specific instance of an object. Examples might include `name`, `size`, or `image`.

* **Methods** - functions that belong to a specific class. They represent the _behaviors_ this object should have. If we continue to think about the Player class, it might have methods such as `move()` or `jump()`.

* **Constructors** - special methods, defined with `__init()__` in Python, that are used to instantiate an object of this class. 

* **`self`** - keyword used to refer to class-level variables and methods. These have scope across the entire class. Variables may also be declared normally and will have scope limited to the block of code they are declared within.","We will work on extending an existing class and writing additional classes by:
* Defining appropriate variables
* Defining functions to represent desired object behaviors","Use your knowledge of Python and object-oriented design principles to continue adding to your text adventure game. Add an additional class that can be used to model Item objects and modify the Room and Player classes so that these objects contain their own list of Items. As your classes grow, define functions for specific behaviors as needed.",124f0YBJgro,http://youtube.com/watch?v=124f0YBJgro,https://www.youtube.com/embed/124f0YBJgro,,,,,Introduction to Python II,,Intro to Python/OOP,"Computer Science, DS - Computer Science",,1,1,1,3
demonstrate an understanding of inheritance through appropriate method overriding and use of super(),***Inheritance relationships*** can be defined between classes in situations where more specific child classes extend the functionality of more general parent classes. These hierarchies help us write well-organized code and can allow for code re-use.,,"Perhaps the most important concept in OOP, a class may inherit from another class. This gives the child class all of the variables and methods found in the parent class, or classes, automatically. Child classes can also override parent methods to define alternate or additional behaviors. ***Inheritance*** is also sometimes described as an _""is-a""_ relationship.","We will practice the following while implementing inheritance: 
* **Method overriding** - used if a child class needs to function slightly differently than objects of the parent class. **Method overriding** is done  by giving the child class a method with the same name as one found in the parent. This method will then be called in lieu of the one defined in the parent class. 

* `super()` - a keyword that can be used to reference methods or constructors from the parent class. It is often used when overriding methods.","Utilize inheritance relationships when creating specific items, like treasure or light sources, based on the Item parent class.",tKSCUSGiwMg,http://youtube.com/watch?v=tKSCUSGiwMg,https://www.youtube.com/embed/tKSCUSGiwMg,,Class Inheritance,,,Introduction to Python II,,Intro to Python/OOP,"Computer Science, DS - Computer Science",,1,1,1,3
use Pygame libraries to draw and move objects on the screen,Pygame allows students to gain additional experience using existing libraries within their projects while experimenting with GUIs and basic physics. ,,"A popular set of modules that can be used to create games or other interactive applications, Pygame, lets you add graphics, play sound,  detect input, and implement many other features in Python programs. We will be using it to design different types of 2D objects. Prior knowledge of OOP class design will be used to organize attributes and behaviors for different objects into appropriate classes.","We will be designing several classes, changing different attributes such as:
* (x, y) position
* directional velocity
* size
* RGB color

Additionally, we will define behaviors such as:
* draw()
* update()
","Extend the provided starter code to draw a variety of colorful, moving objects on the screen, using Pygame.",,,,,,,,,,,,,1,1,,2
know what a layout is and how to use it,,,,,,,,,,,,,Activity Layouts,,Intro to Android,Precourse Android,,0,,,0
understand the difference between views and view groups,,,,,,,,,,,,,Activity Layouts,,Intro to Android,Precourse Android,,0,,,0
use views and view groups to arrange a layout,,,,,,,,,,,,,Activity Layouts,,Intro to Android,Precourse Android,,0,,,0
understand what the Android Manifest is and how to manage activities in it,,,,,,moQscMxbYMA,http://youtube.com/watch?v=moQscMxbYMA,https://www.youtube.com/embed/moQscMxbYMA,,,,,Activity Lifecycle,,Android Fundamentals I,Android Development Core,,0,,1,1
understand what an array is and create one as a data member,,,,,,,,,,,,,Collections,,Intro to Android,Precourse Android,,0,,,0
access and manipulate data in an array,,,,,,,,,,,,,Collections,,Intro to Android,Precourse Android,,0,,,0
iterate through and array with a loop,,,,,,,,,,,,,Collections,,Intro to Android,Precourse Android,,0,,,0
understand the difference between arrays and lists,,,,,,,,,,,,,Collections,,Intro to Android,Precourse Android,,0,,,0
create a list and manipulate data inside of it.,,,,,,,,,,,,,Collections,,Intro to Android,Precourse Android,,0,,,0
understand the role and use of strings,,,,,,,,,,,,,Strings,,Intro to Android,Precourse Android,,0,,,0
understand the use of and reasons behind String Resource Files,,,,,,,,,,,,,Strings,,Intro to Android,Precourse Android,,0,,,0
use string methods to manipulate String text,,,,,,,,,,,,,Strings,,Intro to Android,Precourse Android,,0,,,0
understand the benefits and drawbacks of StringBuilder,,,,,,,,,,,,,Strings,,Intro to Android,Precourse Android,,0,,,0
use interpolation to format strings,,,,,,,,,,,,,Strings,,Intro to Android,Precourse Android,,0,,,0
define what runtime complexity is and enumerate the main big O runtime classifications,"Students should walk away with a conceptual understanding of the following Big O classifications:
 - O(c)
 - O(log n)
 - O(n)
 - O(n log n)
 - O(n^c)
 - O(c^n)

Students should also be able to rank these classifications, i.e., know the ordering in terms of 'best' to 'worst'. They should also ideally be able to spot and identify examples of these classifications when looking at simple code snippets.","Talk about why Big O is important, i.e., how it's useful for developers to have an understanding of these concepts. Talk at a high level about the different classifications, with example code snippets. 

Some very helpful resources for this are http://bigocheatsheet.com/ and https://www.interviewcake.com/article/python/big-o-notation-time-and-space-complexity?course=dsa, which has awesome code snippet examples to show the students.","Go over each of the main big O runtime classes, explaining what each means intuitively, as well as presenting examples of each category. ",We'll look at some code snippets that exhibit each of the runtime classes we discuss.,"Classify the runtimes of each of the following functions:

1.
```
def foo(n):
  sq_root = int(math.sqrt(n))
  for i in range(0, sq_root):
    print(i)
```

2.
```
def bar(x):
  sum = 0
  for i in range(0, 1463):
    i += sum
    for j in range(0, x):
      for k in range(x, x + 15):
        sum += 1
```

3.
```
def baz(array):
  print(array[1])
  midpoint = len(array) // 2
  for i in range(0, midpoint):
    print(array[i])
  for _ in range(1000):
    print('hi')
```",rEx9E_Oq8xg,http://youtube.com/watch?v=rEx9E_Oq8xg,https://www.youtube.com/embed/rEx9E_Oq8xg,,,What's the fastest way to alphabetize your bookshelf?,,Sorting,Active,Algorithms,"Computer Science, DS - Computer Science",,1,1,1,3
understand what an Activity is and how Android works with them,,,,,,yD2OQtnM_wA,http://youtube.com/watch?v=yD2OQtnM_wA,https://www.youtube.com/embed/yD2OQtnM_wA,,,,,Activity Lifecycle,,Android Fundamentals I,Android Development Core,,0,,1,1
,,,,,,,,,,,,,,,,,,0,,,0
understand the different stages of the activity lifecycle,,,,,,wwWHQDz8ikM,http://youtube.com/watch?v=wwWHQDz8ikM,https://www.youtube.com/embed/wwWHQDz8ikM,,,,,Activity Lifecycle,,Android Fundamentals I,Android Development Core,,0,,1,1
understand what Intents are,,,,,,PCKdvEYlvAY,http://youtube.com/watch?v=PCKdvEYlvAY,https://www.youtube.com/embed/PCKdvEYlvAY,,,,,Intents,,Android Fundamentals I,Android Development Core,,0,,1,1
understand the difference between Explicit and Implicit Intents,,,,,,3FlDhPasazg,http://youtube.com/watch?v=3FlDhPasazg,https://www.youtube.com/embed/3FlDhPasazg,,,,,Intents,,Android Fundamentals I,Android Development Core,,0,,1,1
,,,,,,,,,,,,,,,,,,0,,,0
build an intent to launch another activity,,,,,,4xQ_wcBTO8c,http://youtube.com/watch?v=4xQ_wcBTO8c,https://www.youtube.com/embed/4xQ_wcBTO8c,,,,,Intents,,Android Fundamentals I,Android Development Core,,0,,1,1
understand and explain how intent filters are used,,,,,,sxJ2g9mQW1M,http://youtube.com/watch?v=sxJ2g9mQW1M,https://www.youtube.com/embed/sxJ2g9mQW1M,,,,,Intents,,Android Fundamentals I,Android Development Core,,0,,1,1
understand what a Pending Intent is and when they are used,,,,,,m3eIm0ewcT4,http://youtube.com/watch?v=m3eIm0ewcT4,https://www.youtube.com/embed/m3eIm0ewcT4,,,,,Intents,,Android Fundamentals I,Android Development Core,,0,,1,1
understand how to resolve an Intent,,,,,,uQRsrovk4uc,http://youtube.com/watch?v=uQRsrovk4uc,https://www.youtube.com/embed/uQRsrovk4uc,,,,,Intents,,Android Fundamentals I,Android Development Core,,0,,1,1
understand what the MVC design pattern is,,,,,,,,,,,,,,,,,,0,,,0
understand what the MVVM design pattern is,,,,,,,,,,,,,Android Model View ViewModel Architecture,,Data Persistence,Android Development Core,,0,,,0
understand how to implement MVVM in Android and why it is important,,,,,,,,,,,,,Android Model View ViewModel Architecture,,Data Persistence,Android Development Core,,0,,,0
understand the anatomy of a notification,,,,,,,,,,,,,Notifications,,Android Fundamentals II,Android Development Core,,0,,,0
add content to a notification,,,,,,,,,,,,,Notifications,,Android Fundamentals II,Android Development Core,,0,,,0
add user interaction to a notification,,,,,,,,,,,,,Notifications,,Android Fundamentals II,Android Development Core,,0,,,0
build a notification with an importance level,,,,,,,,,,,,,Notifications,,Android Fundamentals II,Android Development Core,,0,,,0
understand what key-value paired data is,,,,,,lPg-9wYCwO8,http://youtube.com/watch?v=lPg-9wYCwO8,https://www.youtube.com/embed/lPg-9wYCwO8,,,,,Shared Preferences,,Android Fundamentals II,Android Development Core,,0,,1,1
understand the difference between getPreferences and getSharedPreferences,,,,,,Fx0-zijpRQE,http://youtube.com/watch?v=Fx0-zijpRQE,https://www.youtube.com/embed/Fx0-zijpRQE,,,,,Shared Preferences,,Android Fundamentals II,Android Development Core,,0,,1,1
understand how to write to shared preferences,,,,,,OvfZkqI0h_Y,http://youtube.com/watch?v=OvfZkqI0h_Y,https://www.youtube.com/embed/OvfZkqI0h_Y,,,,,Shared Preferences,,Android Fundamentals II,Android Development Core,,0,,1,1
understand how to read from shared preferences,,,,,,pQKRB7rxt-I,http://youtube.com/watch?v=pQKRB7rxt-I,https://www.youtube.com/embed/pQKRB7rxt-I,,,,,Shared Preferences,,Android Fundamentals II,Android Development Core,,0,,1,1
understand and explain when shared preferences are beneficial over other storage solutions,,,,,,MsYUkjEIT8w,http://youtube.com/watch?v=MsYUkjEIT8w,https://www.youtube.com/embed/MsYUkjEIT8w,,,,,Shared Preferences,,Android Fundamentals II,Android Development Core,,0,,1,1
describe props and state and how data flows in a react application,"The way that data flows throughout a React app is crucial to understand when it comes to developing programs built in React. In traditional applications you can have data flowing in multiple directions. In React, when we pass our data around it's passed around using State and Props. The direction in which data flows is top to bottom. So it is crucial to understand this pattern as it is the way that React was built, so there is a little bit of ""Buy-in"" here. ",,"The React Team built a system into React to manage `state` data. We're going to be learning all about `State` in coming days, but it's good to talk about it early on during our React Learning. State is the data that our components will have access to. And when we pass that state around, we call it props. 

You'll often here the term `State to Props` described in Medium articles about the subject. If a component holds it's own state, and needs to give that state data to another component, we pass that state around as Props.

#### So what are Props then?
Because we're focusing on Props and not state at this point in time, we'll describe what Props are, and how we use them. In the following topics, we'll learn all about how to pass props around and use those props to build out reusable components.

Props stands for properties. When we give a component some 'attribute-looking' data on our JSX, we're essentially telling React to build us out an object that we can consume as a parameter inside of a Functional Component.

Props are immutable (or Read only) meaning we cannot mutate props in any fashion. We simple receive them in our components and use them to display data to the user. Remember the idea here is to build out User Interfaces. How do we interface with our users, and Props are that data that we pass around that our users will interact with.

Take the following example:

```js
const MyComponentsWithProps = props => {
    return <h1>Hello, my name is {props.name}</h1>;
};
```

When we use the component above, we'll pass it some props so that we can print our name using that component. At this point in time, this isn't the most fancy component ever, but it demonstrates a point that we will exhaust at length in coming lessons, `Reusability`. I can now use this component in multiple instances:

```js
<MyComponentsWithProps name=""Fred"" />
```
should display `Hello, my name is Fred`. And we can use it in other instances.

```js
<MyComponentsWithProps name=""Barney"" />
<MyComponentsWithProps name=""Bam-bam"" />
<MyComponentsWithProps name=""Bety"" />
<MyComponentsWithProps name=""Wilma"" />
<MyComponentsWithProps name=""Pebbles"" />
```

All of these components will display their name prop respectively. Each will have their own object created through the react ecosystem as we pass props `DOWN` to them that will look like this.
 
```js
props = {
    name: 'Fred'
};
```

This pattern, passing props ""DOWN"" to a component is how I want you to start thinking about how data flows in a react application. `Downward, from State to Props`. A good way to visualize this would be the following.


<img src=""https://tk-assets.lambdaschool.com/97aea518-80ef-4957-891e-f394eac9507b_ScreenShot2018-11-02at9.55.59AM.png"" width=""750px""/>","Now we're going to take what we know about `props` and use them to create a component with some unique data. Our data that we want to be able to print out to the screen is going to be a profile for the infamous `Bart Simpson`.

Be sure to open up a `html` document and add in the proper dependancies. You can use a previous one or find the CDN's from [this link](https://reactjs.org/docs/add-react-to-a-website.html#step-2-add-the-script-tags) and the babel standalone CDN [here](https://reactjs.org/docs/add-react-to-a-website.html#quickly-try-jsx) 

```js
const BartProfile = {
  name: ""Bartholomew Jo-Jo Simpson"",
  identity: ""The troublemaker of the Simpson family."",
  age: ""10 (2 years and 38 days older than Lisa)"",
  family: ['Homer', 'Marge', 'Lisa', 'Maggie', 'Abe', 'Jacqueline', 'Patty', 'Selma', 'Herb'],
  catchphrases: ['Aye Carumba!', 'Eat my shorts', ""I didn't do it!""],  
  best_friend: 'Milhouse Van Houten',
}
```

We can pass this entire profile down as a single object to a Bart component that we're going to build. So we'll set up our Component to rely on the props that we're going to pass to it. We'll send down the `BartProfile` object as a prop called `bart`, so that is the property on the `props` object that we'll have to reference here to gain access to all of the data that we want. (Don't worry about the arrays for now, those will be a stretch problem to figure out if you're curious).

```js
const BartComponent = props => {
  return (
    <div>
      <h3>Name: {props.bart.name}</h3>
      <p> age: {props.bart.age}</p>
      <p>Identity: {props.bart.identity}</p>
      <p>Best Friend: {props.bart.best_friend}</p>
    </div>
  );
}
```

And now to make this component work, all we have to do is mount it up with the correct prop `bart`:

```js
<BartComponent bart={BartProfile} />
```
And now we're done!

** Stretch ** [Read up on this portion of the react docs](https://reactjs.org/docs/lists-and-keys.html) and figure out how to render out all of Bart's `catch phrases` and family members in a `ul` where each member and phrase are `<li />`.","Build out a component called `<MeComponent />` that will depend on Props being passed down to it. Those fields on the Props object will be descriptors about who you are as a person. Render out `your name`, `age`, `location`, `favoriteBook`, `favoriteBand`.

`Stretch Goal` - Pass an array of your `favorite bands` as strings. Render out this array of strings using a `map` function returning a div of each band name rendered out to the screen.",cUKNDPm0SH8,http://youtube.com/watch?v=cUKNDPm0SH8,https://www.youtube.com/embed/cUKNDPm0SH8,,State and props,,,Functional Components II,,React,Full Stack Web Development Core,,1,1,1,3
understand what a Thread is,,,,,,,,,,,,,Threading Basics,,Android Networking,Android Development Core,,0,,,0
understand and explain what race conditions are,,,,,,,,,,,,,Threading Basics,,Android Networking,Android Development Core,,0,,,0
understand and use locks,,,,,,,,,,,,,,,,,,0,,,0
understand what a deadlock is and how to avoid it,,,,,,,,,,,,,,,,,,0,,,0
understand how to use AsyncTask to manage a thread,,,,,,,,,,,,,Threading Basics,,Android Networking,Android Development Core,,0,,,0
understand and know when to use run on UI thread,,,,,,,,,,,,,Threading Basics,,Android Networking,Android Development Core,,0,,,0
understand what to do in each stage of the lifecycle,,,,,,kucrMBJqZ8A,http://youtube.com/watch?v=kucrMBJqZ8A,https://www.youtube.com/embed/kucrMBJqZ8A,,,,,Activity Lifecycle,,Android Fundamentals I,Android Development Core,,0,,1,1
understand what makes a REST API,,,,,,,,,,,,,"""REST API Basics, GET Requests and JSON""",,Android Networking,Android Development Core,,0,,,0
understand how to interpret api documentation,,,,,,,,,,,,,"""REST API Basics, GET Requests and JSON""",,Android Networking,Android Development Core,,0,,,0
understand how to make a GET request,,,,,,,,,,,,,"""REST API Basics, GET Requests and JSON""",,Android Networking,Android Development Core,,0,,,0
understand how to interpret and work with JSON data,,,,,,,,,,,,,"""REST API Basics, GET Requests and JSON""",,Android Networking,Android Development Core,,0,,,0
understand and explain the difference between the different HTTP requests,,,,,,,,,,,,,HTTP Requests,,Android Networking,Android Development Core,,0,,,0
create PUT requests to update data at a REST endpoint,,,,,,,,,,,,,HTTP Requests,,Android Networking,Android Development Core,,0,,,0
create POST requests to send a request with a body,,,,,,,,,,,,,HTTP Requests,,Android Networking,Android Development Core,,0,,,0
describe the rules of the `setState` function and demonstrate two ways to properly use it,"You will encounter this intricate function called `setState` when diving into React. It's funny how much stigma comes with this function. People have [attached some negative conotation with this function](https://blog.cloudboost.io/3-reasons-why-i-stopped-using-react-setstate-ab73fc67a42e) for one reason or another. But for me I believe that learning to just understand how it works, and how to properly utilize it, will make you a better UI developer. ",,"
Working with a component's state is largely the battle when it comes to understanding how to work with React in general. State is sort of the life-force of a component. All of our components within our React Applications will be driven by what state they have access to. When this state changes, so too will our view get updated.

We're going to learn all about a function called `setState` which is the mechanism that is built into React for updating a component's state object. We never want to update a state object directly, instead everything we do to change our state object will go through the `setState` function.

`setState` is a function that behaves a little bit differently than one might think. The first thing to note about `setState` is that:

#### `setState` can be async.

There is a lot going on under the hood than might have originally expected. There is a step between when we call `setState` in which our component changes are `diffed` through a process called `reconciliation`.

Lets say we have a user that types in an input field. Lets draw out the process of what 'might' be happening between the user typing and React actually changing the state.

<div class=""mermaid"">

graph LR
    A(Input Component) --User types in input field  --> B(setState invoked)
    B -- Reconciliation -->  C(""Input Component re-renders"")

</div>

You can see that we don't immediately get the invocation and re-rendering that we may have thought we would. It's not synchronous this happens in a process.

If we had a component that was to be updated based on a change to an event handler, we'd go through `setState`. Lets try an experiment.

```js
handleSomeChange = e => {
  console.log('State 1', this.state);
  this.setState({ someItem: e.target.value });
  console.log('State 2', this.state);
};
```

This function handler is reading the state before and after the call to `setState`. In this experiment, both the console statements would be the same when we would expect them to be different.

One of the core concepts of the `setState` function is that it batches changes to state, meaning `updating` the component's state doesn't always happen right away, because there may be more changes to state that need to happen within one `setState` call.

If we need access to those state changes right away for some reason (Maybe you want to send the guaranteed copy of state off to a web server) we can give a callback function as an argument to `setState` which will receive the `previous copy`, and given `props` as it's parameters.

```js
this.setState((prevState, props) => {
  return {
    someItem: e.target.value
  };
});
```

This would also come in handy if we were to try and change some items based on new props coming down. For example if we wanted to append some fixed value to our `state` string we could add it directly into the object where we're returning. Remember that what we return from within this object will be the new shallow merge of the state object.

**A note on Reconciliation**

> The reconciliation process is the way React updates the DOM, by making changes to the component based on the change in state. When the request to setState() is triggered, React creates a new tree containing the reactive elements in the component (along with the updated state). This tree is used to figure out how the Search component’s UI should change in response to the state change by comparing it with the elements of the previous tree.

#### setState will batch multiple calls

If I had some state that I was expecting to be changed by multiple calls to the `setState` function, it wouldn't behave the way that I may have initially intended it to.

For example lets say I have a counter who's value I'll hold on state, that counter can be updated by a click handler function that will increase the count by 1. So normally, we just increase the count on state and call it a day in a single function. But what if I wanted to increase the count by 3 if I were to score a three pointer in basketball for example.

```js
counterByThree = () => {
  this.setState({ count: this.state.count + 1 });
  this.setState({ count: this.state.count + 1 });
  this.setState({ count: this.state.count + 1 });
};
```

There are a few problems here. Well we're not going invoke 3 calls to `setState` here the way we thought we would. React will simply ignore a couple of the calls by using this process called `batching`. This will result in only the last call to `setState` actually taking place.

The other problem is that we're trying to read from the `current state` by referencing `this.state.count` **DON'T DO THIS** We have functional `setState` (the ability to pass a callback function to our `setState` function) for a reason. USE a callback.

```js
counterByThree = () => {
  this.setState(prevState => ({ count: prevState.count + 1 })),
    this.setState(prevState => ({ count: prevState.count + 1 })),
    this.setState(prevState => ({ count: prevState.count + 1 }));
};
```

This way solves both of our problems. We have controlled the batching of these calls to `setState` by returning a `Queue` of calls in this fashion. We are also reading from the `previous copy` of state rather than the current copy. This is important when learning more about `setState`.

Consider [this fun application](https://codesandbox.io/s/m5v63nnrjx) from the video. Play around with it as you get more involved in learning about `setState`.a","Lets build out an application that can render a list of data to the screen, then when we push a new item into that list we'll have it update the state and reflect the new changes ",Read [this medium post](https://medium.freecodecamp.org/functional-setstate-is-the-future-of-react-374f30401b6b) and reflect on the examples and learnings we just went through. ,V-V8K59Wl-Q,http://youtube.com/watch?v=V-V8K59Wl-Q,https://www.youtube.com/embed/V-V8K59Wl-Q,,SetState,,,Class Components II,,React,Full Stack Web Development Core,,1,1,1,3
"understand and explain the difference between internal storage, external storage, and cache",,,,,,,,,,,,,File Storage,,Data Persistence,Android Development Core,,0,,,0
get a File object from the three different storage locations,,,,,,,,,,,,,File Storage,,Data Persistence,Android Development Core,,0,,,0
read from a File object,,,,,,,,,,,,,File Storage,,Data Persistence,Android Development Core,,0,,,0
store an object as a JSON file,,,,,,,,,,,,,File Storage,,Data Persistence,Android Development Core,,0,,,0
store and access objects using serialization,,,,,,,,,,,,,File Storage,,Data Persistence,Android Development Core,,0,,,0
write to a File object,,,,,,,,,,,,,File Storage,,Data Persistence,Android Development Core,,0,,,0
manage cache files,,,,,,,,,,,,,,,,,,0,,,0
use SQLite Studio to Manage Database Schemas,"Databases store data inside tables. We will use SQLite Studio to add tables to an existing SQLite Database

Along the way we'll learn about data types, indexes and constraints.",,"A `table` in a relational database is a collection of `records`, that we can also call `rows` where each row has one or more `fields`, also known as `columns`. A `row` has the unit of data for a particular resource. In a table that stores _products_ data, each row will correspond to one _product_ and will have columns that store the information we need to store about each product like it's id, name, price and more.

Here is an example of how such a table could be represented in a spreadsheet like fashion:

| id  | name                 | purchase_price | sale_price | category_id |
| :-: | -------------------- | -------------: | ---------: | ----------: |
|  1  | Pencil #2 Box of 100 |           2.50 |       3.19 |          12 |
|  2  | Paper 20# Ream       |          12.99 |      17.99 |          12 |

The table above has two `rows` of 5 `columns` each or two `records` of 5 `fields`.

When defining the structure of our tables we delve into the realm of data modeling, something we'll discuss later in the week. For now we'll concentrate on understanding the core concepts that come into play when designing tables.

When modeling and creating database tables we must:

- define a primary key. A `primary key (PK)` uniquely identifies each record in the table. There may be more than one John Smith and a _clients_ table, but each of then can be distinctly identified by their `primary key`.
- choose a `data type` for each column. This includes the type of data (string, date, number, currency) that will be stored and the size (length in cases like strings).
- define any constraints for the columns. Some examples are valid ranges for a number or a date, that the field must be unique. Other constraints will be discussed when we cover relationships in the data modeling module.","Most RDBMS will be running as server software that is accessible over the network. These servers tend to be very complex. There are career paths dedicated to installing, configuring and managing database management systems.

To reduce that complexity we picked SQLite, a self-contained relational database engine that runs in process without the need for a separate server installation. It is file-based, meaning that deploying it is as simple as copying the database file and installing a SQLite driver for your system.

We also selected a free Graphical User Interface tool called SQLite Studio that makes it really ease to create SQLite databases, create database objects like tables and execute SQL commands.

Follow along as we use SQLite Studio to create a database and add the following tables:

Zoos Table should have the following columns:

- `id`: primary key, auto increments.
- `name`: required, unique, alphanumeric (text).
- `created_at`: integer, should automatically default to the current date and time.

Bears Table should have the following columns:

- `id`: primary key, integer, autoincrements.
- `zoo_id`: an integer that relates this table to the zoos table. Enforce data integrity.
- `species`: unique, alphanumeric up to 80 characters long.
- `latin_name`: alphanumeric up to 80 characters long.
- `created_at`: integer, should automatically default to the current date and time.

Note that RDBMS from different vendors will support other data types, like char, varchar, date, datetime, etc. Research and use the correct datatype used by your RDBMS.","Use SQLite Studio to create an SQLite database and add a 'users' table with the following schema:

- `id`: primary key, integer, automincrements.
- `name`: alphanumeric (text)
- `created_at`: integer, should automatically default to the current date and time.",xk9MyWhmXGM,http://youtube.com/watch?v=xk9MyWhmXGM,https://www.youtube.com/embed/xk9MyWhmXGM,,SQLite Official Site,SQLite Data Types,"- where is the data stored inside a relational database?
- what is used to uniquely identify each record in a table?
- a table is a collection of?
- and each of those is a collection of?",Introduction to Relational Databases and SQL,Active,Adding Data Persistence to Web APIs,Full Stack Web Development Core,,1,1,1,3
define an SQL Schema,,,,,,,,,,,,,SQL Database,,Data Persistence,Android Development Core,,0,,,0
retrieve data from the database,,,,,,,,,,,,,SQL Database,,Data Persistence,Android Development Core,,0,,,0
add data to the database,,,,,,,,,,,,,SQL Database,,Data Persistence,Android Development Core,,0,,,0
retrieve filtered data from the database,,,,,,,,,,,,,SQL Database,,Data Persistence,Android Development Core,,0,,,0
use storyboard references to separate UI into multiple storyboards,"Storyboards can become a bit of a double-edged sword at times. There are a couple reasons for this. First, if you have too many scenes in your storyboard, it can take a long time to open the storyboard file. Second, when working in a team, if you both need to use the storyboard, it can lead to merge conflicts very easily. Storyboard merge conflicts are not fun to deal with, because behind the scenes, they're really just XML files. 

Apple has come up with a solution to both of these problems called storyboard references. _Storyboard References_ allow you to create links between multiple storyboard files. This way, you can keep your storyboard files small, and also allowing multiple people to be working on storyboards because they're now separate files.",,"There are a few different ways people will use multiple storyboards and storyboard references. You can either group view controller scenes of a similar nature in a storyboard, or you can make one storyboard for each view controller scene. 

In order to create a storyboard reference, you will need more than one storyboard file (excluding the LaunchScreen.storyboard). Let's say we have the Main.storyboard that comes with the project, and we make another storyboard called ""UserProfile"" (You can make new storyboard files by going to File -> New -> File... and selecting Storyboard). This storyboard will only hold the view controller scenes related to the user profile feature, thus allowing another developer to work on that feature while you work on the Main.storyboard without the potential for a merge conflict. As always you will get the added benefit of having your storyboards load faster.

Find the Storyboard Reference object in the object library and drag it onto the canvas. In the attributs inspector, you must choose the storyboard you wish to reference. In this case, we'll choose UserProfile:

![](https://user-images.githubusercontent.com/16965587/42102785-4311bffc-7b84-11e8-9ace-6ab38899e00b.png)

Once that is selected, the storyboard reference on the canvas should then say UserProfile. The storyboard reference acts as a placeholder for the other storyboard so that you are able to make segues to it, and interact with it like you normally would. By default, the storyboard reference will go to whatever its initial view controller scene is.

A nice trick is to double click the storyboard reference and it will take you to its storyboard.",,,9www2E6ot1M,http://youtube.com/watch?v=9www2E6ot1M,https://www.youtube.com/embed/9www2E6ot1M,,,,,View Controller Containment and UITabBarController,,iOS Fundamentals II,iOS Development Core,,1,,1,2
use view controller containment and embed segues to embed child view controllers,"View controller containment is when one view controller places another view controller inside of it. We've actually used this before, though you might not be aware of it. This is exactly how navigation controllers work. On the storyboard, the navigation controller doesn't have anything inside of it besides the navigation bar, but when we run the app, its first view controller is what shows up on the screen.",,"We can use view controller containment on normal view controllers as well. This is especially useful to prevent our view controllers from becoming hundreds and hundreds of lines long. It can easily become a bit unwieldy and hard to keep organized. With view controller containment, we can break this up into separate view controllers with their own logic, but to the user, there would be no difference. For example, if we had a view controller that for the user profile that looked like this:

![](https://user-images.githubusercontent.com/16965587/42843002-173df732-89cc-11e8-8427-6437488e97a9.png)



It has multiple table views that will display different information than the other, and a few views that will display some profile information. it can get a little messy because both table views would be calling the same `UITableViewDelegate` and `UItableViewDataSource` methods but need different logic to make each work. While it's completely possible to do it, your code may end up being messier than it could be.

For example, we could use container views to separate each table view into its own view controller. All you need to do is search for ""Container View"" in the storyboard's object library and drag it out onto a scene. Once you drop it on the scene, you'll see that it'll have a segue to a new view controller scene that is the same size as the container view. This is view controller containment. We have a view that holds a view controller inside of it. 

At this point, you could add a table view to the view controller that comes with the container view. Just like with any other view controller scene, you will need to create a Cocoa Touch Subclass file for it. If you wanted to use a `UITableViewController` instead of a normal `UIViewController` in your container view, simply delete the view controller it came with, and make a new segue from the container view to the table view controller and choose ""embed"". If the view controller shrinks to the size of the container view, you have set up the container view correctly. Replacing the table views on the original view controller with container views should look like this:

![](https://user-images.githubusercontent.com/16965587/42843432-572806a2-89cd-11e8-9804-966d7cacda96.png)

Container views are a very helpful thing to know about. They aren't necessary always, but being aware of when you could clean up your project to make your own life or the life of the people you work with easier by using them will serve you well. Also, this should help you understand built in parts of iOS like navigation controllers and tab bar controllers work a bit more.",,,4iSON3B85zw,http://youtube.com/watch?v=4iSON3B85zw,https://www.youtube.com/embed/4iSON3B85zw,,,,,View Controller Containment and UITabBarController,,iOS Fundamentals II,iOS Development Core,,1,,1,2
use UITabBarController to allow user to switch between multiple view controllers,"Like navigation controllers, tab bars are something that has been in iOS since its beginning. Tab bars run along the bottom of the screen and feature between buttons or ""tabs"" that allow the user to navigate to different parts of the application. ",This objective's introduction is not complete. I seem to have lost the rest of it. Will find or rewrite the missing parts. -@Spencer Curtis ,"Apple's iOS Human Interface Guidelines page on [Tab Bars](https://developer.apple.com/design/human-interface-guidelines/ios/bars/tab-bars/) gives some great advice on when to use tab bars. It says, ""In general, use a tab bar to organize information at the app level. A tab bar is a good way to flatten your information hierarchy and provide access to several peer information categories or modes at once."" What this means is that if your app has features or sections that don't necessarily need go together, such as a profile view, and a search view, they are good candidates to have their own respective tabs. This eliminates the need for your users to be navigating through a very large navigation stack to search, then go to a profile, etc.",,,6RviVO19eAc,http://youtube.com/watch?v=6RviVO19eAc,https://www.youtube.com/embed/6RviVO19eAc,,,,,View Controller Containment and UITabBarController,,iOS Fundamentals II,iOS Development Core,,1,,1,2
use UINavigationController to display data hierarchically ,"One of the most common forms of navigation in an iOS app is called ""Master-Detail"". This means there is some sort of master list of information that is displayed to the user, which is usually achieved by using a table view or a collection view, and to see details about something in that list, you must navigate to a more detailed view.

Even if you've never heard of the master-detail pattern, you have surely used it before. For example, the iOS Contacts app shows a list of the contacts on your phone. If you want to see more information about the contact than their name however, you tap on the cell in the master list and it will bring you into a more detailed view that shows more information about that specific contact. ","Begin the lesson by showing the students the finished version of the project on the simulator, and explain what the app should do. Start with the Main.storyboard and show the students how to drag out a navigation controller from the object library, and embed a view controller that is already in the canvas in a navigation controller","The way we can implement this navigation between these two views is by using a few things. The first is a navigation controller. Navigation controllers (`UINavigationController`) create and manage what is called a ""navigation stack"". When you navigate from a master view to a detail view, the detail view is placed on top of the master view in a stack. More views could be placed on top of the detail view to create a larger stack. 

Using navigation controllers allows for us to navigate (hence the name) between our view controllers much easier. They will automatically create the back button you see at the top-left of the screen when you go into a detail view that easily lets the user go back to the previous view.

To use a navigation controller, you have to ""embed"" a view controller in the stack view. So if we embed the master list of contacts in a navigation controller, it becomes the ""root view controller"", which simply means it's the first view controller in the navigation stack. If you try this out in a storyboard, you will notice it will add a gray bar at the top of the view controller. This is called a navigation bar (`UINavigationBar`). Navigation bars give the user a ""physical"" representation of the navigation stack that they can interact with, while the navigation controller manages the navigation stack in the background based on how the user interacts with the navigation bar.

To add a navigation controller in a storyboard, there are two methods:

- The first is to select the ""Navigation Controller"" from the object library and drag it onto the canvas. It will expand into two view controller scenes. The first is a navigation controller, and the second will be a table view controllers. It will look like this:

![](https://user-images.githubusercontent.com/16965587/41450908-84445f7e-7027-11e8-9610-d5cc79e00a1b.png)

- Sometimes you will want a navigation controller but won't want the table view controller that comes along with it and instead want to use a normal view controller, or collection view controller, etc. What you can do in that case is select a view controller scene by selecting the yellow circle on a scene, then selecting Editor -> Embed In -> Navigation Controller in the menu like so:

![](https://user-images.githubusercontent.com/16965587/41451018-1765caf4-7028-11e8-9153-3eb09d13c78a.png)","Add a `UINavigationController` to the storyboard and note that it ""comes with"" a `UITableViewController`.

Add a `UITableViewController` to the storyboard then manually embed it in a navigation controller using the Editor->Embed In menu.

Lastly, add both a `UINavigationController` and a `UITableViewController` to the storyboard separately, then connect them using a relationship segue.","Clear your storyboard and using any method, add a `UITableViewController` scene embedded in a navigation controller.",eLyzEFX_vYE,http://youtube.com/watch?v=eLyzEFX_vYE,https://www.youtube.com/embed/eLyzEFX_vYE,,,UINavigationController Documentation,,,,,,,1,1,1,3
implement a segue between a table view cell and a detail view controller,"The second thing needed in order to create use the master-detail, or any navigation pattern for that matter is called a ""segue"" (pronounced ""seg-way""). Segues create a link between two view controllers that let you navigate from one to the other. The view controller the segue starts from is the ""source"" view controller, and the view controller the segue goes to is the ""destination"" view controller.

Segues are like a one way plane ticket to somewhere. You can fly to the destination, but you can't come back. For this reason, navigation controllers are especially helpful because they will automatically give the user a way to go back to the view they came from without us having to write any extra code.",Drag out a `UIViewController` scene from the object library and ask the students how we can navigate from the table view controller to the new view controller scene.,"Segues are represented by the arrows in-between view controllers. The way that you create a segue from one view controller to another is by holding the control key, clicking from a UI element that users can interact with such as a button or a table view cell and dragging to the view controller you wish to segue to. It will pull up a contextual menu that will ask what kind of segue you want to create:

![](https://user-images.githubusercontent.com/16965587/41451314-8942006a-7029-11e8-998f-ae7daf0da258.gif)

From that contextual menu, you will have noticed that quite a few options came up. The first section of options are different kinds of segues we can use. The two that you need to worry about right now are:

- ""Show"" style segues will add the view controller to the navigation stack. These are easily the most common segue style.
- ""Present Modally"" will present the new view controller outside of the navigation stack completely, and it will always present it coming from the bottom of the screen and sliding upwards.

Show segues will make the destination view controller have a push (slide in from the right to the left) animation **unless** the source view controller is not a part of a navigation stack, in which case they will be presented in the same way as a Present Modally style segue.","Drag out a `UIViewController` scene, and make a segue to this new view controller from the prototype cell in the table view. This will allow us to segue to the detail view by tapping on a cell.","Close your project, and create a new one (File->New Project). Open the storyboard and add a second view controller, then create a segue between the two. Give the segue an identifier.",lTR7AY-M5Cs,http://youtube.com/watch?v=lTR7AY-M5Cs,https://www.youtube.com/embed/lTR7AY-M5Cs,,,,,First iOS App: Navigation Controller,Active,Introduction to iOS Programming,iOS Development Core,,1,1,1,3
use the UINavigationItem API to customize navigation bar,"If we want to add UI elements to a navigation bar, we can't actually add them directly. Instead we use navigation items.","Explain that we still need to add one segue to get to the detail view controller if we want to make a new student instead of viewing an existing one. Without this second segue, we would have no way to create a brand new classmate. Explain how `UIBarButtonItem` objects differ from `UIButton`, and that we can't add a normal `UIButton` to the navigation item.","Navigation items (`UINavigationItem`) allow us to customize what is displayed on a navigation bar. For example, we can give it a title that describes what the view controller is, like ""Contact List"" or ""Edit Contact"". We can also add buttons to the navigation item, which will then place them on the navigation bar for us.

It should be noted that you can set up navigation controllers, segues, and navigation items both in Interface Builder or programmatically.","Add a `UIBarButtonItem` to the navigation item on the table view controller scene, then create a show segue from it to the detail view controller scene. Give both segues identifiers.",Try adding additional bar button items to the navigation bar.,02hKpJYcNNE,http://youtube.com/watch?v=02hKpJYcNNE,https://www.youtube.com/embed/02hKpJYcNNE,,,,,,Active,,,,1,1,1,3
use drawable resources in code,,,,,,,,,,,,,"""Drawables, Themes, and Resource Files""",,Android Fundamentals II,Android Development Core,,0,,,0
prep artwork for Android,,,,,,,,,,,,,"""Drawables, Themes, and Resource Files""",,Android Fundamentals II,Android Development Core,,0,,,0
work with Android Themes,,,,,,,,,,,,,"""Drawables, Themes, and Resource Files""",,Android Fundamentals II,Android Development Core,,0,,,0
create Custom Themes,,,,,,,,,,,,,"""Drawables, Themes, and Resource Files""",,Android Fundamentals II,Android Development Core,,0,,,0
allow users to select themes,,,,,,,,,,,,,"""Drawables, Themes, and Resource Files""",,Android Fundamentals II,Android Development Core,,0,,,0
use Android resource files,,,,,,,,,,,,,"""Drawables, Themes, and Resource Files""",,Android Fundamentals II,Android Development Core,,0,,,0
"can request user permission to access private information (camera, microphone, photos, notifications, etc.)",,"Talk through the documentation for a couple of permissions APIs.
","iOS is built to ensure that users have control over how their information is accessed and used, and how apps can use potentially intrusive features. Before being allowed to access potentially sensitive information, or do something intrusive, apps are required to get permission from the user.

There are a number of capabilities that require such permission before being used, including access to photos and videos, the microphone, location data, contacts, health data, and more. Apps are also required to ask for permission to send notifications.

iOS provides APIs that apps can use to prompt the user for permission to access these capabilities. The specific methods used to ask for permission are different for each capability and associated API, but they all have a similar form.

Let's use the photos access API as an example:

```
PHPhotoLibrary.requestAuthorization { (status) in
  guard status == .authorized else {
    NSLog(""User did not authorize access to the photo library"");
    return
  }
  self.presentImagePickerController()
}
```

First, we call `requestAuthorization()`. It takes a closure that will be called after the user has either granted or denied permission to access the photos library. The closure is given a `status` that indicates whether access was granted (`.authorized`), explicitly denied (`.denied`), or was not able to be granted for example because of parental restrictions (`.restricted`).","Build an app that has a single button and an image view. It allows the user to tap the button, which authorizes photos access, then if granted, allows the user to select a photo to put in the image view. If access is not granted, it logs an error.","Use the documentation and/or a search engine to find the authorization APIs for the microphone, location data, and contacts.",,,,,"Requesting Permission - App Architecture - iOS Human Interface Guidelines,Asking Permission to Use Notifications",,,User Permission Model and Local Notifications,,,,,0,1,,1
describe the rules of the `setState` method,,,,,,,,,,,,,,,,,,0,,,0
create a custom UITableViewCell,"Table views have subviews called cells which are `UITableViewCell`s. If we think of a table view like a list, cells would be each individual item on that list.

Apple has given us four pre-made styles of `UITableViewCell`s for us to use. This is great because for simple table views, one of the four styles will suit our needs perfectly. This allows us to very quickly get a table view up and running. However they are limited, so if we want our cells to look anything different than one of those four styles, we need to create a custom cell. ",,"Cells are just views at their core, so we can add whatever subviews we want to them. For example, we could add buttons, sliders, switches, etc. When we do this however, we're creating a cell that's unique to our app, which means we need to do a little more work in order for your app to know how to interact with the cell. For example, if we add a button to the custom cell, we need a way to tell the cell what to do when the user taps that button. That's where custom cell files come in. 

Just like when we make a subclass of `UIViewController` or `UITableViewController` using File -> New -> File... -> Cocoa Touch Subclass, we can choose the subclass to be of `UITableViewCell`. Once we do this, we are able to go to the storyboard, select our custom cell and in the Identity Inspector, set its custom class to be the class from the custom cell file that we just made. We can then add outlets and actions to the UI elements in the cell, allowing us to tell the cell what to do when buttons are tapped, switches are flipped, etc. ",,,vxsuwQU8nd4,http://youtube.com/watch?v=vxsuwQU8nd4,https://www.youtube.com/embed/vxsuwQU8nd4,,,,,Delegates and Protocols,,iOS Fundamentals I,iOS Development Core,,1,,1,2
describe how DMA works and why it is useful,"When the CPU is busy number crunching, the last thing it wants to do is deal with getting lots of data from a peripheral, like a hard disk, and storing it in memory.

_Direct Memory Access_ allows peripherals to store information in RAM without the CPU's assistance, and then notifies the CPU when the information is ready.","This is more of a description of how DMA works at a high level than anything else.

The important bit is that the peripheral stores data in memory with the help of another piece of hardware, the DMA controller. When the transfer is complete, the controller raises an interrupt on the CPU to let it know the work is done.","In order to keep processing speed up, we invented DMA to deal with the dirty work of moving information from slow peripherals into RAM.

Not all devices use DMA. Devices that have low data transfer requirements (e.g. keyboards) might directly notify the CPU that a key is ready via an interrupt. Keypresses happen rarely from a CPU-perspective, and the amount of data that needs to be processed is low.

Other devices, like hard drives and SSDs, need to transfer large blocks of data relatively frequently. Servicing all that data a byte at a time through the CPU would be prohibitively costly.","In a typical scenario, a program will make a request to a peripheral such as an SSD along the lines of ""Please load the contents of block 234569.""

The CPU will then continue executing instructions as the peripheral goes to work retrieving the data. Once it does, it communicates with the _DMA Controller_ to organize the sending of the data from the peripheral directly into RAM.

One the transfer is complete and RAM is populated with the result, the DMA Controller raises an interrupt to the CPU to notify it that the results are available. The CPU services the interrupt and the program can then retrieve the data from RAM.",Make a list of different types of peripherals and say if they are likely or unlikely to use DMA.,,,,,,,,,,,,,1,1,,2
,,,,,,,,,,,,,,,,,,0,,,0
describe the CPU stack and how it's useful,"Most CPUs have a built-in stack that's useful for keeping temporary data, making subroutine calls, and handling interrupts. We'll learn how the stack operates.","This ties into the PUSH/POP instructions directly, and the CALL/RET INT/IRET instructions indirectly.

Start with how the stack works, and then progress to the  LS-8 emulation.

This precourse material tries to remain LS-8 agnostic, but isn't entirely.","Since the number of registers is limited on a CPU, the stack is a useful place to store data temporarily. We'll examine a sample scenario where this is the case.","The stack is a data structure so useful that CPU designers typically include it in their instruction sets.

Common uses are:

* Temporarily storing values if you need to free registers for other uses.
* Saving registers so they can be restored after a function call or interrupt handler.
* Allocating space for local variables in a subroutine call.

The minimalist stack consists of just a few things:

* An array for storing values (a chunk of RAM).
* A pointer to the top element of the stack (known as the _stack pointer_ or commonly `SP`.
* `PUSH` and `POP` instructions.
* Usually there's no specific instruction for peeking at the value at the top of the stack. A standard memory access instruction such as `LD` is used for that purpose, if necessary.

In many architectures, the stack begins at a high address in RAM and _grows downward_. That is, the `SP` is _decremented_ when additional items are pushed on the stack. If it helps, imagine that gravity is reversed and your stack is growing down from the ceiling as you push onto it.

To `PUSH` a value in a register onto the stack:

* Decrement `SP`.
* Store the value in the register into RAM at the address stored in `SP`.

To `POP` a value from the stack into a register:

* Retrieve the value from RAM at the address stored in `SP`, and store that value in the register.
* Increment `SP`.

","* What happens if you `PUSH` too many items on the stack?
* What happens if you `POP` from an empty stack?
* How can you detect if the stack is empty?
* What information must be saved on the stack when the CPU is servicing an interrupt? Why?",vAy5rXxUwoc,http://youtube.com/watch?v=vAy5rXxUwoc,https://www.youtube.com/embed/vAy5rXxUwoc,,,,,Computer Architecture II,,Computer Architecture,Computer Science,,1,1,1,3
understand how to create a custom layout for lists,,,,,,5LzjUgT064o,http://youtube.com/watch?v=5LzjUgT064o,https://www.youtube.com/embed/5LzjUgT064o,,,,,Showing Lists,,Android Fundamentals II,Android Development Core,,0,,1,1
understand what a list adapter does,,,,,,TldYRkWThyY,http://youtube.com/watch?v=TldYRkWThyY,https://www.youtube.com/embed/TldYRkWThyY,,,,,Showing Lists,,Android Fundamentals II,Android Development Core,,0,,1,1
build a list adapter class to work with their custom list layout,,,,,,-kYwTgiBsFg,http://youtube.com/watch?v=-kYwTgiBsFg,https://www.youtube.com/embed/-kYwTgiBsFg,,,,,Showing Lists,,Android Fundamentals II,Android Development Core,,0,,1,1
attach an adapter to an element in the GUI,,,,,,lHaPJx9KB3s,http://youtube.com/watch?v=lHaPJx9KB3s,https://www.youtube.com/embed/lHaPJx9KB3s,,,,,Showing Lists,,Android Fundamentals II,Android Development Core,,0,,1,1
understand and explain what a content provided is and the benefits of using one,,,,,,,,,,,,,,,,,,0,,,0
remove data from the database,,,,,,,,,,,,,SQL Database,,Data Persistence,Android Development Core,,0,,,0
understand and explain the meaning and importance of CRUD-L,,,,,,,,,,,,,SQL Database,,Data Persistence,Android Development Core,,0,,,0
access a system content provider,,,,,,,,,,,,,,,,,,0,,,0
build a private content provider to wrap all data repositories,,,,,,,,,,,,,,,,,,0,,,0
understand and explain the role of each component in the Core Data Stack,"Core Data is Apple's framework for data persistence. It helps you save data to disk and retrieve it later. But Core Data goes far beyond simple persistence. It does object graph management, handling many of the most complicated aspects of creating, maintaining, saving, and loading even very large and complex data sets.

Core Data is a big framework, with many components and features. In this lesson, you'll learn about its fundamentals, including how to create, modify, delete, and save Core Data objects.",Explain each of the components of the Core Data stack using analogies where appropriate to explain their purpose.,"#### Core Data Stack

Before we dive into using Core Data, let's talk about the overall structure of Core Data. There are four components of Core Data that you need to understand to use it:

- Persistent Store
- Managed Object Model
- Managed Object Context
- Persistent Store Coordinator

We call the combination of these four components, a Core Data _stack_. Each of these parts has a specific role, and they work together to provide the functionality you need to create, manipulate, delete, save, and load Core Data model objects.

#### Persistent Store

A _persistent store_ is a file on disk that stores Core Data data. In code, you use a class called `NSPersistentStore` to work with persistent stores. In MVC terms, the persistent store is the model layer. It turns out that Core Data does most of the work of handling persistent stores for you, and you rarely have to work with persistent store objects/files directly. 

#### Managed Object Model

Core Data needs to know the format of your data. What kinds of records are you storing? What properties do they have? How are different records related to each other? You tell Core Data this information by creating a _Core Data Model_. We'll learn how to create a model later on in this lesson.

When your application runs, Core Data uses the model you created to know how your data was saved, how it should be loaded, etc. The class used to represent Core Data models is `NSManagedObjectModel`. It's a vital part of the Core Data stack, but it's also something that you generally create during development, and don't manipulate directly in your code.

#### Managed Object Context

The _managed object context_ is the part of the Core Data stack that you'll use the most in your code. Managed object contexts are instances of `NSManagedObjectContext`. In many ways, the context is your interface to the rest of the stack. Think of a managed object context as a box that contains a bunch of Core Data model objects (aka _managed objects_. Any time you create a managed object, it **must** live inside of a managed object context.

You create managed objects in a managed object context, but you also use it to fetch, save, and delete objects. It is the context's responsibility to load objects from the persistent store (via the persistent store coordinator), maintain relationships between objects, create new objects, delete existing objects, manage undo/redo support, and more.

#### Persistent Store Coordinator

The _persistent store coordinator_ is an object that takes care of coordinating between the persistent store(s) and managed object context(s). It is essentially a controller object, but instead of coordinating between a view and a model, it coordinates between a managed object context and a model. Persistent store coordinators are instances of `NSPersistentStoreCoordinator`.",Guide students through drawing their own diagram of the Core Data Stack.,Split students into small groups and ask them to think of and discuss an analogy for a managed object context.,e3AjvXGowdQ,http://youtube.com/watch?v=e3AjvXGowdQ,https://www.youtube.com/embed/e3AjvXGowdQ,,,,,Core Data I - Basics,,Core Data,iOS Development Core,,1,1,1,3
use Xcode to create and edit Core Data model files,Part of the Core Data stack is the model. The model tells Core Data the format of your particular data. This objective covers creating Core Data models using Xcode.,"Show the Core Data model editor, including major parts of its UI. Create a Department entity, and an Employee entity with appropriate attributes and relationships.","Xcode allows you to create Core Data models as files using a graphical editor. While it is possible to create a model entirely programmatically, it's more common to use Xcode's model editor tool.

As we learned earlier, a Core Data model contains information about the format, aka _schema_. A Core Data model contains _entities_, their _attributes_, and their _relationships_. This terminology mirrors words we use in object oriented programming, as well as traditional relational database design. The table below shows the word for each concept in these domains. (If you don't have any relational database experience, ignore that column.)

| OOP                   | Core Data    | Database        |
|-----------------------|--------------|-----------------|
| Class                 | Entity       | Table           |
| Value Property        | Attribute    | Field or Column |
| Relationship Property | Relationship | Foreign Key     |

#### Code Generation

Core Data entities, along with their attributes and relationships are defined in the model editor. In your running app, Core Data objects are always instances of `NSManagedObject` or a subclass thereof. Normally, for each entity, you'll have a corresponding subclass of `NSManagedObject` that has properties corresponding to the attributes defined in the model, along with initializer, and any methods you'd like to write on your model objects.

By default, Xcode will automatically create these subclasses for you when you build your project. They won't show up as files in your project itself since they get created during compilation. However, you can view them by command clicking on a Core Data entity/class name in a source code file.

If you choose, you can manually create your own `NSManagedObject` subclasses, instead of having Xcode do it automatically, but in this lesson we'll use the default automatic code generation.Show the Core Data model editor, including major parts of its UI. Create a Department entity, and an Employee entity with appropriate attributes and relationships.","Create a model for a building management app including Building, Floor, and Room entities with appropriate attributes and relationships.",Create a new model in Xcode. Add an entity representing a person. It should have attributes for name and age with the appropriate types.,iU8__XKK8G0,http://youtube.com/watch?v=iU8__XKK8G0,https://www.youtube.com/embed/iU8__XKK8G0,,,,,Core Data I - Basics,,Core Data,iOS Development Core,,1,1,1,3
use NSPersistentContainer to set up the Core Data stack in an app,"NSPersistentContainer is a class that encapsulates and handles the details of creating and maintaining a Core Data ""stack"" for you. It reduces the amount of code you need to write to use Core Data.","Explain that NSPersistentStore takes care of creating the Core Data stack for you. Explain that many aspects of its behavior can be customized, but by default it does all the work for you, relying on naming conventions to tie everything together.

You might briefly touch on its support for multiple MOCs and the reasoning behind the name `viewContext`, but this will be covered in more detail in a later lesson.","Typically you'll create the Core Data stack and load existing data when your app launches. The code to create a basic Core Data stack is not terribly complicated, but it can be tedious to write, and is basically identical in every app you might write. Uninterested code that needs to be written just to get set up and running is called _boilerplate code_. 

For a long time, many iOS developers would keep a source code file with Core Data stack creation boilerplate so they could copy it into their project when they were going to use Core Data. Luckily, a few years ago, Apple introduced a new solution for this, called `NSPersistentContainer`. 

`NSPersistentContainer` is a single, relatively simple class that takes care of creating a Core Data stack for you. It makes it so that you can set up and use Core Data in your code with a minimum amount of boilerplate. It also implements some common Core Data functionality for you, making life easier.

To create an `NSPersistentContainer`, initialize it with a name:

```
let container = NSPersistentContainer(name: ""YourModelName"")
```

The value passed to name is used to find the managed object model, so make sure it's the same as the name of your managed object file. (It is possible to customize this, but requires more code.)

Next, you need to tell the container to load any existing persistent stores.

```
container.loadPersistentStores { (storeDescription, error) in
  if let error = error {
    NSLog(""Error loading persistent stores: \(error)"")
    return
  }
}
```

It's safe for this code to run on application launch. The first time the app is run, when this method is called, the container will **create** a persistent store. On subsequent launches, it will load the existing one.

Finally, to access the managed object context, which you'll need to create, delete, fetch, and save managed objects, use the container's `viewContext` property:

```
let moc = container.viewContext
// Use moc here
```",Create a file called `CoreDataStack.swift` containing a lazily loaded `NSPersistentContainer` property. Add a computed properties for `mainContext` that returns the container's view context.,Add your newly created CoreDataStack file to your Person project.,bh1xvZqA_CM,http://youtube.com/watch?v=bh1xvZqA_CM,https://www.youtube.com/embed/bh1xvZqA_CM,,,,,Core Data I - Basics,,Core Data,iOS Development Core,,1,1,1,3
initialize and create Core Data managed objects,Creating Core Data managed objects is a little different than initializing a standard class or struct. This objective explains how to create new instances of Core Data managed objects.,Explain how Core Data objects require a managed object context for initialization. Demonstrate adding an extension that takes values for attributes.,"Core Data objects are always instances of a subclass of `NSManagedObject`. As discussed earlier, Xcode will automatically create these subclasses for you. So how do you use them?

#### Initializing Managed Objects

`NSManagedObject` provides an `init(context:)` initializer that takes an `NSManagedObjectContext` within which to create the new object. When you create a new Core Data object, you always have to provide the context you'll be creating it in.

```
let moc = container.viewContext
let car = Car(context: moc)
car.make = ""Toyota""
car.model = ""Corolla""
car.year = 1981
```

Notice that this initializer doesn't take any values for properties on the class. That's because it's defined on `NSManagedObject` itself, not your (usually Xcode-generated) subclass of `NSManagedObject`, and therefore it doesn't ""know about"" the specific properties/attributes you added in your model.

You can create your own convenience initializer(s) on your subclass. Because Xcode usually creates the subclass itself for, you should create your initializer(s) in an extension.

```
// Car+Convenience.swift

extension Car {
  convenience init(make: String, model: String, year: Int, context: NSManagedObjectContext) {
    self.init(context: context)

    self.make = make
    self.model = model
    self.year = year
  }
}
```

Now you can create a car object with make, model, and year supplied at initialization time:

```
let moc = container.viewContext
let car = Car(make: ""Toyota"", model: ""Corolla"", year: 1981, context: moc)
```","Add convenience initializers to the Building, Floor, and Room classes. In the building management app's view controller's `viewDidLoad()` create a building with two floors, each with two or three rooms.","Create an extension on `Person` that adds a convenience initializer. The convienience initializer should include arguments for `name`, `age`, and `context`.

In your people app's main view controller's `viewDidLoad()`, create an instance of `Person` using the convenience initializer.",9jIAJ4nMba0,http://youtube.com/watch?v=9jIAJ4nMba0,https://www.youtube.com/embed/9jIAJ4nMba0,,,,,Core Data I - Basics,,Core Data,iOS Development Core,,1,1,1,3
delete managed objects,"In addition to creating managed objects, you can of course delete them. This objective explains how to delete Core Data objects.",Explain how deletion works. Show the documentation for the `NSManagedObjectContext.delete()` method.,"To delete an object, you pass it into the `delete()` method on the managed object context **it belongs to**.

```
if let moc = person.managedObjectContext {
  moc.delete(person)
}
```

Deleting an object removes it from the managed object context, but it **does not** remove it from the persistent store **until the context is saved**. In other words, just like any other change (creation, modification, etc.) to managed objects, the context keeps track of deletion, but doesn't actually commit it until you save.",Add a `delete()` action that fetches then deletes a single building.,"In `viewDidLoad()`, after fetching, delete all the `Person` objects returned from the fetch. Then save the context. Restart the app and verify that the deletion was saved.",2sRyt437nPE,http://youtube.com/watch?v=2sRyt437nPE,https://www.youtube.com/embed/2sRyt437nPE,,,,,Core Data I - Basics,,Core Data,iOS Development Core,,1,1,1,3
save data to disk using the managed object context,"Core Data wouldn't be a persistence framework without the ability to save data to disk! In this objective, you'll learn how to save Core Data objects to disk so they can be loaded again the next time your app is run.","Explain saving, and emphasize that errors can occur and need to be handled.","As you create, change, and even delete managed objects, the managed object keeps track of the changes you've made. To save the current data to the persistent store, you use the `save()` method on `NSManagedObjectContext`:

```
let moc = container.viewContext
do {
  try moc.save()
} catch {
  NSLog(""Error saving managed object context: \(error)"")
}
```

`save()` is an error throwing method, and it **can** fail, so make sure you wrap it in a do-catch block and handle errors when thrown.","In the building management app's view controller's `viewDidLoad()` create a building with two floors, each with two or three rooms. Save the managed object context (in a do-catch block). Restart the app and observe that the fetch returns floors created on the last run.","After creating one or more people in `viewDidLoad()`, save the context. Quit the app, comment out the person creation code, and build and run it again. Note that the people saved during the last run are returned when the fetch request is executed.",8BBMYgwxnmY,http://youtube.com/watch?v=8BBMYgwxnmY,https://www.youtube.com/embed/8BBMYgwxnmY,,,,,Core Data I - Basics,,Core Data,iOS Development Core,,1,1,1,3
fetch objects using NSFetchRequest,"The managed object context is your way of accessing existing managed objects, whether they were just created, or exist in the persistent store having been loaded from a previous run of the app. This objective teaches how to load objects from a Core Data store.","Explain fetching using a metaphor like, a fetch request is like an order form of sorts. You hand it to the managed object context, it looks for the objects on the order form, either in itself, or if necessary by going to the persistent store coordinator/persistent store, then returns them to you.","The managed object context is your way of accessing existing managed objects, whether they were just created, or exist in the persistent store having been loaded from a previous run of the app.

You _fetch_ (ie. get) managed objects from a managed object context using a _fetch request_. A fetch request is an object that includes information about exactly which objects you want to fetch. You can ask for all objects of a certain entity/class, or you can narrow down the results to only those objects that meet some criteria. For example, if you had `Person` objects with an `age` attribute, and you wanted to fetch only adults, you could create a fetch request that specified that you only want those objects whose age attribute is greater than or equal to 18.

There are a couple ways to create a fetch request, but the easiest is to use the class method provided on `NSManagedObject` subclasses by Xcode's codegen:

```
let fetchRequest: NSFetchRequest<Person> = Person.fetchRequest()
```

By default, a newly created fetch request will be configured to fetch **all** objects of the type used to create it. We will cover narrowing down the list of results in a later lesson.

After you've created a fetch request, you need to execute it to get the array of objects you want:

```
let managedObjectContext = container.viewContext
do {
  let people = try managedObjectContext.fetch(fetchRequest)
  print(people)
} catch {
  NSLog(""Error fetching people: \(error)"")
}
```

As with many Core Data APIs, the `fetch()` method can throw an error, so you must use it with `try` in a do-catch block, and handle potential errors.",Write code to create and execute a fetch request for floors.,Create a fetch request in `viewDidLoad()` after add buildings with floors. Fetch all the `Person` objects in the context. Print the fetched people to the console.,pwQR3jUCwUg,http://youtube.com/watch?v=pwQR3jUCwUg,https://www.youtube.com/embed/pwQR3jUCwUg,,,,,Core Data I - Basics,,Core Data,iOS Development Core,,1,1,1,3
describe what Waterfall methodology is and outline the pros and cons of waterfall development,,,,,,,,,,,,,,,,,,0,,,0
describe what Agile methodology is and outline the pros and cons of agile development,,,,,,,,,,,,,"Delivering a Single Page Application,Delivering an Android Application",,"Build Week: Front End , Build Week: Android","Full Stack Web Development Core, Android Development Core",,0,,,0
describe what the Scrum framework is and outline the pros and cons of scrum development,,,,,,,,,,,,,,,,,,0,,,0
understand and explain what role a cursor plays,,,,,,,,,,,,,,,,,,0,,,0
customize the appearance of UIButton,"It's important to familiarize yourself with the things available to you that let you customize UI elements. Since many UI elements we use are subclasses of `UIView`, they all share a few common ways to be customized.",," Let's look at some of examples:

`.backgroundColor` - You've likely used this before. Setting this property will change the UI element's background color to the UIColor that you set.

`.alpha` - a CGFloat value from 0.0 to 1.0. 0.0 is completely transparent, while 1.0 is fully visible. All UI elements by default have an alpha of 1.0. If you're familiar with opacity in things like Photoshop, alpha is the same thing.

`.tintColor` - What this value does depends on the type of UIView subclass.

They also have a property called `layer`. Again if you're familiar with programs such as Photoshop, they essentially work the same. Layers manage the the content on the view, and you don't have to worry about them too much right now. However, layers also have a few properties that help us further customize our views.

`.layer.borderWidth` - A CGFloat property. Sets the width of the view's border. 
`.layer.borderColor` - A CGColor property. Sets the color of the border. Note that we've never used CGColors before. You can pass in a UIColor then call .cgColor on it and it will be converted to a CGColor. E.g. someView.layer.borderColor = UIColor.black.cgColor

`.layer.cornerRadius` - A CGFloat property. Setting the cornerRadius will round the corners of the view. The higher the number, the greater the rounded corners the be.

There are more methods that we can use to customize our views, but these are by far the most commonly used ones. Methods also exist that are more specific to each UI element. Let's talk about customizing `UIButton`s.

`UIButton`s can show a title on them, as well as show images both behind and next to the title.

`.setTitle()` - You're also likely used this before. It simply sets the title string on the button. This is the same as setting a button's text in the storyboard.

`.setTitleColor()` - Takes in a UIColor (as well as a UIControl.State). This will set the title text's color to the color you pass in.

`.setImage()` - Takes in a UIImage (as well as a UIControl.State). This will put an image next to the button's title text.

`.setBackgroundImage` - Takes in a UIImage (as well as a UIControl.State). This will put an image BEHIND the button's title text.

Experiment with a new Xcode project to see how changing all of these properties manipulates a button in different ways.",,,nPsdryrsST0,http://youtube.com/watch?v=nPsdryrsST0,https://www.youtube.com/embed/nPsdryrsST0,,,,,UIAppearance and Custom Fonts,,iOS User Interface,iOS Development Core,,1,,1,2
use UIView’s support for simple system animations,"UIKit enables you to performs a specified system-provided animation on one or more views, along with optional parallel animations that you define.

Certain UIKit methods have built in support for animation. You've actually already seen this in the form of the `animation:` argument supplied to some of `UITableView`'s methods for inserting, deleting, and moving rows. 

There are also a couple methods on UIView that allow you to trigger built in system animations. In this objective, you'll use these.
",,"```
override func touchesEnded(_ touches: Set<UITouch>, with event: UIEvent?) {
        UIView.perform(.delete, on: [self], options: [],
                       animations: nil,
                       completion: { _ in self.removeFromSuperview() })
}
```

This code allows you to dismiss a view by tapping it. It uses the `.delete` system animation (which is, in fact, the only system animation on iOS). To test this, you'll need a way to add views.","Create a new xib file: File > New > View and name it View.xib. In the attributes inspector, change its size to Freeform (from Inferred). In the Size inspector, set its size to 200 x 150 points. Drop in a label. Add an emoji (I used woman technologist). Center the label and make the font very big (96). Use the Identity inspector to set the view to `TappableView`.

Go to ViewController.swift and build the following functions:

```
    func cleanup() {
        for subview in view.subviews {
            guard !(subview is UIToolbar) else { continue }
            subview.removeFromSuperview()
        }
    }

    func newView() -> TappableView {
        cleanup() // remove any existing views

        guard let tapView = Bundle.main.loadNibNamed(""View"", owner: self, options: [:])?.last as? TappableView
            else { fatalError(""Could not load nib"") }
        tapView.center = view.center

        // Stylize however you like
        tapView.layer.cornerRadius = 12
        tapView.layer.borderWidth = 1

        view.addSubview(tapView)
        return tapView
    }
```

Rename the first item in the toolbar to ""New"". Control-drag to the ViewController class, and name it ""performNew(_ sender:)"". Implement this method:

```
@IBAction func performNew(_ sender: Any) {
    cleanup()
    view.addSubview(newView())
}
```

### Demonstration

Test with tapping. You should create a new view that you then remove by tapping. Point out the system delete animation and slow it down to demonstrate.",,,,,,,,,Animation I - View Animations,,iOS User Interface,iOS Development Core,,1,,,1
subclass UIControl to create a custom control,"Customizing the appearance of a system control can usually be accomplished using the various methods and properties provided by UIKit. Things like background colors, text colors, rounding, borders, etc. can all be changed. However, if you need to implement a control that displays data in a unique way, and/or enables unique interaction with the user, you will often need to implement your own subclass of `UIControl`. In this objective, you'll learn how to subclass UIControl to create custom UI elements.",,"Controls are view objects designed to support direct user interaction. iOS controls include buttons, text fields, switches, steppers, and more. These types provide target-action feedback that is automatically built out from Interface Builder. IB offers drag-to-connect functionality that hooks into `UIControl` subclasses by associating actions with targets.

When you create a custom control by subclassing `UIControl`, you inherit all of these features. Your control can be connected through IB and its event vocabulary is pre-established by a set of `UIControlEvents` constants. The only feature you don't automatically inherit is the pretty IB display that _looks_ like your control. (Yes, there are ways around this, but the effort of adding a custom IB presentation for your `UIControl` subclass isn't usually worth the effort involved.)

Subclassing the type means you're responsible for implementing all the features normally associated with a control. These can be a little ugly but they aren't usually hard or complicated. The features you need to establish are:

* **view layout** to present a custom and inviting interactive element to users. View layout is normally handled in initializer setup.
* **touch interaction** to allow users to use touches to change the state of your control or to trigger an event. (Technically, you can also do text edits, but these are rarely used in custom controls.) Touch interaction is provided by a set of four pre-defined methods that track a touch through its life-cycle.
* **user feedback**, providing interactive updates from your control so the user knows that their touches are effective and being handled. User feedback is normally handled in these same four methods.","* Create a new single view application with a Nav Controller and a View Controller as its root.  The VC exists solely as to act as a backdrop for your new control and to provide a target for its actions.

* Create a new type called `ColorControl`, subclassed from `UIControl`. Add a single property called `value` of `UIColor` type.

* Add a new view and set its class to `ColorControl`. Center it, set its aspect to 1:1 (to support  a circle), enable `clipsToBounds`.

* As a control, you can now drag to set up `valueDidChange`. Edit valueDidChange to set the navigation bar's tint color to the control's color value.

* Create a `colorControl` outlet, so you can customize the control in `viewDidLoad`. There, set up the corner radius, border width, and border color. 

* Finish in the ViewController by adding a `viewWillAppear` calback that calls `setNeedsDisplay` on the control.

There's a tiny bit of High School algebra used but beyond that the `ColorControl` class is all about the touch cycle. First, deal with the algebra. Just bring in Color.swift but you don't have to explain anything beyond the fact that it takes a unit vector and produces a color from it. The length of the vector sets the saturation. The angle sets the hue.",,bZOnYUCpIn0,http://youtube.com/watch?v=bZOnYUCpIn0,https://www.youtube.com/embed/bZOnYUCpIn0,,,,,iOS Custom Controls,,iOS User Interface,iOS Development Core,,1,,1,2
understand and explain common reasons to use XIBs instead of Storyboards,,,,,,,,,,,,,XIBs,,,,,0,,,0
create custom transition animations using the view controller transition animation API,,,,,,,,,,,,,Animation II - View Controller Transitions,,iOS User Interface,iOS Development Core,,0,,,0
create interactive transition animations,,,,,,,,,,,,,Animation II - View Controller Transitions,,iOS User Interface,iOS Development Core,,0,,,0
use CoreGraphics to do custom drawing,"Core Graphics is an iOS API for doing low-level graphics drawing in your apps. Think of Core Graphics as being like a paint program for your code. You can create shapes (paths), fill them, make things overlap using layers, transform (ie. scale) things, add shadows, draw text, and more.

If your control needs to have a completely custom appearance that can't be done using static images, you can use Core Graphics to do draw anything you can imagine to the screen.",,Core Graphics,"Welcome to `draw(_ rect:)` and 1988. Let's see how experts do this. In this example, you demonstrate how to draw tiny blobs of color (and there are a _lot_ of them, but fortunately iOS devices are fast).

In this case, you fetch all the points in the view (even though clipping omits about a 1/3rd of the points you draw, and you can possibly enhance performance here but `¯\_(ツ)_/¯`). Each iteration finds the color at that point using the same `Color` static method as the one that converts a touch point to color. 

You then draw using `drawPoint`, which is all the Core Graphics most people ever need: create a Bez path, set a color, fill it. Whee. There's even a rect adjustment method (`offsetBy`)!",,yofs5x-pUZI,http://youtube.com/watch?v=yofs5x-pUZI,https://www.youtube.com/embed/yofs5x-pUZI,,,,,iOS Custom Controls,,iOS User Interface,iOS Development Core,,1,,1,2
implement custom touch handling by overriding the touch handling methods,"If your control does something beyond simple tap-to-activate (like a button), or swipe to scroll (like a scroll view), you may need to implement custom touch tracking code. You can make your control react to a user's touch in very sophisticated ways, often with relatively little code. In this objective, you'll learn about the touch lifecycle and how to override `UIControl`'s touch tracking methods.",,"The touch lifecycle is really simple. A user touches the screen, then drags, and lifts their finger. In very rare cases, an incoming phone call or other event may interrupt and cancel the touch before a user finishes and lifts the finger.

These touch events are defined as part of `NSResponder`. You implement:

- func beginTracking(_ touch: UITouch, with event: UIEvent?) -> Bool
- func continueTracking(_ touch: UITouch, with event: UIEvent?) -> Bool
- func endTracking(_ touch: UITouch?, with event: UIEvent?)
- func cancelTracking(with event: UIEvent?)

At any time during these methods, you can send an action to the control's targets by issuing a `sendAction(for:)` method. There may be many type instances subscribed but it's most common that there's only one. The kinds of actions you send are: 

- touchDown // on all touch downs
- touchDownRepeat // on multiple touchdowns (tap count > 1)
- touchDragInside
- touchDragOutside
- touchDragEnter
- touchDragExit
- touchUpInside
- touchUpOutside
- touchCancel 
- valueChanged // sliders, etc.
- primaryActionTriggered // semantic action, for buttons, etc.

These are self-explanatory. See the guided code sample for the use of the most basic value ones. (Primary action is normally implemented in `endTracking`.)","* Mock up all four tracking methods. Mention that it's important to add `endTracking` because touches do get cancelled by system events.

* Build up `updateColor`. You grab the touch point, create a unit vector offset, and then use `Color` to find the hue and saturation at the point. When you change a value, you send actions for that change. Mention that there are so many possible values here that you won't check for a no-change but in normal production, you would want to see if the value changed before hitting `send`Actions`.

* Return to the tracking methods and explain where you track color (in begin, continue, and end) and the events you propogate. Fill out the code according to the example. It's straight forward.

Compile and run the app. It will be fully working, even before you add a custom presentation.",,,,,,Implementing Gestures and Touches in iOS 7,,,iOS Custom Controls,,iOS User Interface,iOS Development Core,,1,,,1
understand and explain the target action pattern,"Target-action is one of several communication patterns commonly used in iOS development. A communication pattern supports encapsulation and separation of powers. It permits you to design and implement re-usable and orthogonal features without tight code-coupling. The best designs are also thread-safe and thread-aware. In this objective, you'll learn about some common patterns used to communicate between objects in an iOS app.",,"There are many communications patterns available for iOS devs but they broadly fall into one of four categories:

**Listener pattern** This pattern allows types to listen for asynchronous notifications (also called ""events""). Notifications are dispatched by the application or by the operating system. An listener type (commonly called an ""observer"") _subscribes_ to a notification, specifying what kinds of events to listen for. 

  Any information associated with that event is sent as part of the notification, typically as a key-value dictionary. Subscribing types implement handlers that respond when a notification is detected. A type can subscribe narrowly to a single notification or to entire groups of notifications. (*Do not confuse this developer-facing feature with user-facing local and push notifications.*)

  The list of notifications is entirely sourced from API documentation. Some notifications use custom constants, which can be checked at compile-time, for example `thermalStateDidChangeNotification` or `frameDidChangeNotification`. 

  The oldest stringity notifications do not supply pre-defined constants, for example the arbitrary and stateless BSD notifications used for interprocess communication. (See `man notify_post` for more info.)

**Target-action**  Target-action uses user-customizable callbacks. The originating type publishes a list of event types (for example, that a value has changed or that an interaction ends with a touch outside the view). A subscriber implements an action to respond to that event. The kinds of events produced are normally known and can be checked at compile-time.

This is the default pattern used by Interface Builder. You create an `IBAction` by dragging from a control to a type. IB automatically adds the target and sets up the callback (via `addTarget(_:action:for:)`) on your behalf.

This pattern isn't as well developed as more modern patterns: 

* There's no consistency among types as to how each selector is named, implemented, or placed in a file. 
* When using IB, by necessity, the control's story spans over multiple files (the storyboard or NIB and the target type's implementation). 
* Each target must be specified separately, so there's no way to have the compiler check for a set of common members. 
* If you forget to add a callback for value-change events, you won't find this out until runtime testing. 
* Even if you add callbacks, if you don't set things up properly in IB, your callback doesn't get called.

On the plus side, target-action was used for ages. It gets the job done. It's a bit better than pure event notifications.

**Delegation pattern** Delegation allows types to communicate using a pre-established type-to-type protocol of method calls. Conforming types implement these calls, ensuring that they can be updated when information changes. 

The communication pathways are established when a type is designed. The requirements for that communication are known by any client that uses those types. 

Modern delegation patterns use protocols. Protocols support compile-time checks for proper delegate implementation. Conforming types incorporate both mandatory and optional callback methods in their implementation, allowing them to respond to state updates that originate in the information-providing source type. 

You see modern delegation in types like `UITableViewDelegate` and `UITextFieldDelegate`. You commonly set a `delegate` instance to respond to updates. That delegate must conform to the approriate protocol. (A related delegation style is a `dataSource`. Instead of _pushing_ events, a data source _polls_ for source data to power itself. It's still a delegation-pattern communication mechanism. It's just another way to use this protocol-based interaction.)

**Handlers pattern** Passing a handler represents the most recent communication mechanism in iOS. They replace method selectors and callbacks in what would otherwise be a listener, target-action, or delegation pattern. Instead, you pass a closure, which captures state from your calling type and lets you execute your tasks in that context. This enables your code to talk about results using all the features of your client type without exposing any of those details.

Handlers are most commonly used instead of a callback when a task completes (typically a ""completion handler""). They also enable you to respond to notifications (a notification handler), to respond to mid-task updates (a value changed handler), to monitor state change events (a value observer handler), and more.",,,u8nxTUp9L3A,http://youtube.com/watch?v=u8nxTUp9L3A,https://www.youtube.com/embed/u8nxTUp9L3A,,,,,iOS Custom Controls,,iOS User Interface,iOS Development Core,,1,,1,2
use UIAppearance to customize the appearance of system controls,"When theming an application, you will often want to set the appearance of every instance of a UI element to be the same. The `UIAppearance` proxy allows you to easily do that. ",,"For example, if you want to make every bar button item in your app to be the same color to have a consistent theme, you could manually set the tint color of every single bar button item individually. The larger your app becomes, the more work you'll do and you'll have to constantly be making sure you set set the tint color. `UIAppearance` takes away a lot of that effort. We're able to essentially say, ""when a new bar button item is added, set its tint color to [color here] for me."" The best part is that it would take one line of code to do this and have it be applied to every bar button item:

``` Swift
UIBarButtonItem.appearance().tintColor = UIColor.cyan
```

To use `UIAppearance`, you call the class method `appearance()`, then you're able to access the properties of the class as if you were using an actual instance of it. So now, every single bar button item's tint color would by cyan colored. For whatever reason, if you want to change a single bar button item's tint color to something else, you can do so just as you would in its appropriate view controller. Note that you would have to this programmatically as `UIAppearance` will override the tint color (and any other properties) that you set in the storyboard.

It should be noted that `UIAppearance` can be finnicky in the sense that when calling `.appearance()`, some of the appearance properties that you can set won't show up in the autocomplete list. A good thing to do is look at the documentation to make sure a property exists, write it out anyway, and try to build the project. If it builds, then you're good.",,,m9jwnd40vJc,http://youtube.com/watch?v=m9jwnd40vJc,https://www.youtube.com/embed/m9jwnd40vJc,,,,,UIAppearance and Custom Fonts,,iOS User Interface,iOS Development Core,,1,,1,2
use UIAppearance’s whenContainedInInstancesOf() API to customize controls in specific view hierarchies,"`UIAppearance` used to be an all-or-nothing API. You either styled every instance of a UI element or you just didn't use `UIAppearance` at all. As of iOS 9, a new method was added to `UIAppearance`, which is the appearance(whenContainedInInstancesOf() method. This allows `UIAppearance` to be a bit more flexible by only styling UI elements when they're contained in specific views or view controllers that you specify.",,,,,ZCjpwVaBUl8,http://youtube.com/watch?v=ZCjpwVaBUl8,https://www.youtube.com/embed/ZCjpwVaBUl8,,,,,UIAppearance and Custom Fonts,,iOS User Interface,iOS Development Core,,0,,1,1
create a UIViewController with an associated XIB and load it,,,,,,,,,,,,,XIBs,,,,,0,,,0
implement an application using XIBs exclusively,,,,,,,,,,,,,XIBs,,,,,0,,,0
create an Objective-C class,"Objective-C is primarily an object oriented programming language (as its name, implies!). As such, it uses classes extensively. You're already used to creating classes in Swift. Classes in Objective-C are the same thing conceptually, but the syntax you use to create them is different. In this objective, you'll learn how to create a class in Objective-C.",,"A class definition in Objective-C consists of two parts. An `@interface` block in the header (.h) file for the class, and an `@implementation` block in the corresponding implementation (.m) file.

You _declare_ the class's name, superclass, methods, and properties in the header file. You _define_, or implement the classes methods in the implementation file.

#### Interface

An interface declaration looks like this:

```
@interface LSIPerson : NSObject

- (void)sayHello; // This is a method

@property NSString *name; // This is a string property
@property int age; // This is an integer property

@end
```

The first line of an `@interface` block begins with `@interface`, then the name of the class you're creating, a colon, then the class's superclass. Unlike in Swift, in Objective-C, your custom classes will **always** have a superclass. If you're not subclassing a more specific class, you'll subclass `NSObject`, which is the base class for (very nearly) all other ObjC classes.

>(**A note about prefixes**: It's common for class names in Objective-C to begin with a three-letter prefix. The prefix should be something unique to you. For example, it could be your initials, letters derived from your company name, or something specific to the app or framework you're developing. Note that two-letter prefixes are reserved for use by Apple (e.g. `NS`, `UI`, etc.). Objective-C doesn't have support for namespaces the way Swift does, so prefixing your class names prevents them from colliding with classes defined in frameworks that your code links with.)

Following the `@interface` line, you declare the methods and properties the class has. Note that _declare_ means to tell the compiler that the methods exist, but the actual **implementation** of those methods, ie. the code that runs when they are called, goes in the implementation (.m) file.

#### Implementation

The interface block declares a class and its methods. To actually implement or _define_ the class, you must also provide an `@implementation` block:

```
@implementation LSIPerson

- (void)sayHello 
{
    NSLog(""Hello!"");
}

@end
```

Start an implementation block with `@implementation`, and end it with `@end`. After `@implementation`, you put the name of the class whose implementation you're writing. You **do not** include it superclass again.

Inside the implementation block, define (ie. implement) any methods the class has. To define a method, start with the exact same syntax as a method declaration (minus the semicolon on the end which is optional here). Then, place the code for the method in braces just like you would in Swift. In this example, the `sayHello` method simply prints the string `""Hello!""` to the console (note that there is no `print()` in ObjC, and `NSLog` is the standard way to print).

You do not need to define properties in the implementation block, the declaration in the interface block is all you need unless you want to customize property accessor behavior, which we'll cover in a later lesson.

If the class has internal/private properties, they can be implemented in the implementation block without a corresponding declaration in the interface block. You'll learn more about how access control (public vs. private) works in ObjC, includig how to make private properties in a later lesson.",,,,,,,,,,Intro to Objective C,,Objective-C Part 1,iOS Development Core,,1,,,1
use class extensions to add private properties to a class,,,,,,,,,,,,,"""Properties, Categories, and Extensions""",,Objective-C Part 1,iOS Development Core,,0,,,0
"explain the difference between an object and a primitive, along with common examples of each","Unlike in Swift, Objective-C fundamentally differentiates between two groups of data types. There are _primitive_ types, and _object_ types.",,"#### Primitives

Some of the data types you've likely already used are called primitives. Examples include: `int` (integers), `float` (floating-point or decimal numbers), `double` (larger floating-point numbers), and `BOOL` (a boolean value, i.e. true or false, but in Obj-C encoded as `YES` or `NO`). Primitives are the simplest elements available in Objective-C. They have a defined size in memory, so that an `int` created in one part of the program is the same size as another `int` created elsewhere. Consequently, these primitive data types have limits on the size of the value they can store. For `int`, that means a number between about -2 billion to +2 billion. Larger (or smaller if negative) numbers will not “fit” in an integer variable. The other primitive types have similar constraints to the size of their values. The `BOOL` type can only ever equal `YES` or `NO`, which are stand-ins for true and false. The computer actually stores these values as `1` for `YES` and `0` for `NO`. So technically, `BOOL` is actually just a special kind of integer that has a range between [0-1].

These primitive types do not generally require a `*` character when they are declared. In addition, they cannot be set to `nil` like object types can. The values possible for a given primitive are constrained by their type, i.e. `YES` or `NO` for booleans, whole numbers for integers, etc.

#### Objects

Other data types, things like: `NSString`, `NSNumber`, `NSArray`, or `NSDictionary` are called _object_ types.

This means they are more complicated than a primitive and frequently take up more space in memory. The simplest way to differentiate primitives and objects is to look for/use a `*` when declaring an object variable, and to leave it out when declaring a primitive. The fundamental difference with object types compared to primitives are that object types are stored in computer memory as a _pointer_. See the section below for an introduction to pointers.",-,-,,,,,,,,"""Primitives, NSNumber, and Mutability""",,Objective-C Part 1,iOS Development Core,,1,1,,2
implement custom property accessors in Objective-C,"Simple properties in Objective-C don't require any code beyond the `@property` declaration. If you want customized behavior when a property is accessed, you can create your own accessor methods. This is analogous to `get/set` and `willSet/didSet` in Swift. In this objective, you'll learn how to implement custom property accessors in Objective-C.",,"When you create an `@property` in an Objective-C class, you're actually doing two things:

1. _Declaring_ two accessor methods, a getter, and a setter.
2. Asking the compiler to implement (or _synthesize_) these accessor methods for you.

```
@interface Person: NSObject

@property NSString *name;

@end
```

Here, the property declaration is equivalent to declaring two methods:

```
- (NSString *)name;
- (void)setName:(NSString *)name;
```

In ObjC, by convention, a property _getter_ should always have the same name as the property itself, take no arguments, and return a value with the same type as the property. A property _setter_ should be named the same as the property itself with `set` in front (and a capital first letter of the property name). It should take a single argument with the same type as the property, and return `void`.

By default, the compiler will create the implementation of these two methods for you. However, sometimes you may want to customize the behavior of the accessor methods. You can do so by implementing either or both accessor methods yourself. If the compiler will see that you've implemented an accessor method yourself, it will just skip creating that one for you.

For example, imagine we want our `Person` class to file paperwork if their name is changed. In Swift we might do this with a `didSet`:

```
class Person {
    var name: String {
        didSet {
            fileNameChangePaperwork()
        }
    }
}
```

Objective-C doesn't have a `didSet` feature. Instead, we'll implement our own setter and call the `fileNameChangePaperwork` method in it:

```
@implementation Person

- (void)setName:(NSString *)name
{
    _name = name;
    [self fileNameChangePaperwork];
}

@end
```

First, we set the underlying instance variable (aka. backing storage) for the property. By convention, instance variables have the same name as the property with an underscore (`_`) in front. After the set the underlying property storage, we can call `-fileNameChangePaperwork`.

#### Implementing Both Accessors

There is one gotcha here. If you implement *both* the getter and the setter for a particular property, the compiler assumes that you don't need an instance variable for that property. In that case, you have to either explicitly define an instance variable, or else use an `@synthesize` statement to tell the compiler ""no, I really do want an instance variable"". I favor the latter approach.

```
@implementation Person

@synthesize name = _name; // We really do want a _name instance variable!

- (NSString *)name
{
    NSLog(""Someone asked my name!"");
    return _name;
}

- (void)setName:(NSString *)name
{
    _name = name;
    [self fileNameChangePaperwork];
}

@end
```","Create a person class with separate `firstName` and `lastName` properties. Create a ""computed"" `name` property. Implement custom a custom getter for name that returns the concatenation of first and last name.","On the `Person` class created together, implement a custom setter that splits the name apart into first and last name.",,,,,,,,"""Properties, Categories, and Extensions""",,Objective-C Part 1,iOS Development Core,,1,1,,2
understand and explain the difference between header (.h) and implementation (.m) files,"Objective-C, like other C-family languages, uses two kinds of files: header files and implementation files. In this objective, you'll learn about the difference between these two kinds of files, and what information goes in each kind of file.",,"In Objective-C, Header files have the file extension `.h`, while implementation files have the extension `.m`. If you're creating a class called `LSIPerson`, you'll have two files: `LSIPerson.h`, and `LSIPerson.m` (Xcode creates both files for you when you do File->New->Cocoa Touch Class). The interface block for a class goes in its header (`.h`) file, while the implementation block always goes in the implementation (`.m`) file.

For a Swift programmer, the obvious question is: why? In Swift, there's only a single kind of file, a `.swift` file, and any types, methods, etc. are visible to code in any other file (assuming they're not private). The compiler is able to process each file to understand the API defined there, then make that accessible to code in all other files in the project. However, this is actually a pretty computation intensive process. Computers are fast now, so it's not a big deal, but nearly 50 years ago when C was created, they were much slower, and performing such a process every time you compiled your code wouldn't have been feasible. Enter header files. In C, and by extension Objective-C (and C++), each code file is fundamentally compiled independently without knowing about the others.s",,,,,,,,,,Intro to Objective C,,Objective-C Part 1,iOS Development Core,,1,,,1
declare and define Objective-C Methods,"Coming from a Swift background, the syntax for method declarations in Objective-C undoubtedly looks strange to you. In this objective, you'll learn about the syntax for declaring and defining Objective-C methods.",,"Let's start with a method that takes two numbers, adds them together and returns the result. In Swift, the method's declaration might look like:

```
func add(number: Int to number: Int) -> Int
```

The equivalent Objective-C method would be:

```
- (int)addNumber:(int)a toNumber:(int)b;
```

Let's break break it down piece by piece.

1. The first character is either a `-` or a `+`. A `-` means the method is an _instance method_, which is the most common. A `+` means the method is a _class method_ (also called a _static method_ in Swift). Instance methods are called on an **instance** of a class. Class methods are called on **the class itself**.
2. Next is the return type for the method, enclosed in parenthesis. In the first example above, `sayHello` doesn't return anything, so its return type is `void`. Unlike in Swift, if an Objective-C method doesn't return anything, you must still explicitly list its return type as `void`. In this example, the method returns the result of adding two `int`s, so the return type is `int`.
3. Next comes the first part of the method's name. If the method takes one or more arguments, the first part of the name ends with a colon (`:`). If the method takes zero arguments, there is no colon, and skip to number 7.
4. After the colon, the type of the argument is enclosed in parentheses.
5. Then, the **internal name** of the argument. 
6. If there is more than one argument, there is a space followed by the next part of the name. This is analogous to the **external** name of the argument in Swift. It is also part of the method name itself. Go to number 4 and repeat until all arguments have been specified.
7. Method **declarations** always end with a semicolon (`;`).

#### Method Definitions

To define a method in the implementation block for a class, you repeat the declaration, then put the actual implementation of the method in braces:

```
- (int)addNumber:(int)a toNumber:(int)b
{
  return a + b;
}
```

(Note that the semicolon at the end of the method declaration line is optional here, and is left off by most ObjC programmers.)

In Objective-C, all statements must end with a semicolon, unlike Swift where they're optional and almost always omitted. Be ready to forget it a lot as you're starting out!",,,,,,,,,,Intro to Objective C,,Objective-C Part 1,iOS Development Core,,1,,,1
explain and use Objective-C syntax to send messages / call methods,"Now that you've learned how to create ObjC classes and methods, you need to know how to call methods! In this objective, you'll learn the syntax for calling methods (more correctly termed ""sending messages"") in Objective-C.",,"When programmers experienced using other languages, especially those in the C family (which includes Swift) first look at Objective-C, they're reaction is often, ""What's with all the brackets?!"". Objective-C's syntax makes heavy use of square brackets (`[` and `]`). It's basically unique in this regard, as in almost all other languages, brackets are really only used for arrays.

>Objective-C's brackets are like a warm hug
>- Daniel Steinberg (paraphrased)

Don't be scared off by the brackets in Objective-C. With a little time, they'll be just as familiar to you as Swift's parentheses and dots.

#### Bracket Syntax Details

Objective-C's syntax for calling methods uses brackets as follows:

```
[receiver method];
```

This is exactly equivalent to the following Swift:

```
receiver.method()
```

Start the method call with an opening bracket, followed by the object you're calling the method on (aka the _receiver_), then a space, then the method name, then a closing bracket. Finally, end the line with a semicolon.

If you have a method that takes arguments, you call it like so:

```
int result = [calculator addNumber:42 toNumber:100];
NSLog(""%i"", result); // 142
```

In Swift, this would be:

```
let result = calculator.add(number: 42, to: 100)
print(result) // 142
```

You can chain method calls together by nesting brackets:

```
[[employee managerForProject:project] emailWithMessage:string];
```

In Swift:

```
employee.manager(for: project).email(message: string)
```

The method calls are evaluated ""inside out"", starting with the innermost one, which is `[employee managerForProject:project]` here. The result of that call is the receiver for the `emailWithMessage:` call.

#### Properties

Properties can be accessed two different ways, using standard method call syntax with brackets, or using dot-notation. Both syntaxes produce the **exact same** result after compilation. We'll cover dot-notation later, but for now, use standard method syntax for properties:

```
Person *person = [[Person alloc] init];
[person setName:@""Ada""];
[person setAge:36];

NSLog(""%@ is %i years old"", [person name], [person age]);
```

To **set** the value of a property, call the setter, which is always the property's name prefixed with `set`, in camelCase. To **get** the value of a property, call the getter, which is always the same as the property's name itself. 

>**Note:** in Objective-C, it is incorrect to prefix property getters with `get`. It is also incorrect to prefix other methods (e.g. network fetching methods) with `get`. By convention, Objective-C methods prefixed with `get` behave a specific, uncommon way (ie. they pass their result back by reference). If you use them in violation of this convention, you'll come across as an inexperienced ObjC programmer.

#### Brief Aside about ""Calling Methods""

We commonly say ""calling methods"", but in Objective-C, it's actually more correct to say ""sending messages"". In Objective-C, you don't (usually) directly call methods on an object. Rather, you send a message to an object, and *usually* (but not always!) the object handles the message by calling a method with the same name as the message. I've used these two phrases interchangeably, but keep in mind that Objective-C is in fact a message-sending language (like Smalltalk), and bracket syntax is technically for sending messages.",,,,,,,,,,Intro to Objective C,,Objective-C Part 1,iOS Development Core,,1,,,1
implement an initializer in Objective-C,"Just like in Swift, Objective-C classes have initializers. By default, classes have a plain initializer that takes no arguments. You can create your own initializers to customize the initialization process, take arguments, etc. In this objective, you'll learn how to implement initializers in Objective-C.",,"Conceptually, initializers in Objective-C do the same thing as in Swift. They're run when an object is first created, and do whatever needs to be done to set the new instance up, including: initializing properties, registering for notifications, etc.

However, there are some important differences between ObjC and Swift when it comes to the specific details of creating initializers.

In Objective-C, initializers are ""just"" methods. You use the exact same syntax to declare/define them as you do any other method. The only difference is that they should always begin with the word `init`. (In Swift, initializers are also methods, but they get declared with a special syntax that omits the `func`, and includes some additional rules. They can also be marked with `required`, and `convenience`.)

```
@implementation MyClass

- (instancetype)init
{
  self = [super init];
  if (self != nil) {
    // Do initialization here
  }
  return self;
}

@end
```

There are several things here that probably catch your eye as a Swift programmer. First of all, `init` is an **instance method**. It is called on the new instance of the class so that it can initialize itself. In Swift, you call an initializer on the type, so at least conceptually, initializers feel like class/static functions (this isn't actually true, but Swift hides those details from you). In Objective-C, initializers are **always** instances methods, and therefore begin with a `-`.

The next thing that is different is that the initializer returns a value (of type `instancetype`, which we'll cover in a moment). In Swift, initializers aren't declared to return a value, even though they implicitly do (ie. `let foo = Foo()` assigns the value returned by `Foo.init` to a variable `foo`). In Objective-C, initializers explicitly return a value. Specifically, they return the new object instance that was just initialized, which is `self` in the body of the initializer.

So what is `instancetype`? We'll skip some of the details for now, but know that `instancetype` means ""the type that this initializer was called on"". So, if you call `init` on `MyClass`, you get a `MyClass` instance back. If you had a subclass of `MyClass` called `MySubClass`, and called `init` on it, it would return an instance of `MySubClass`. This is normal behavior, but `instancetype` makes that explicit to the compiler. For now, don't worry too much about this, just remember that your initializers should always return an `instancetype`.

Inside the body of the initializer, the first thing we do is `self = [super init];`. What is this all about? The call to `[super init]` is so that the superclass's initializer also gets run. In Objective-C, objects are always subclasses of `NSObject` if not some other class, so they always need to call the superclass initializer. In Swift you do this using `super.init()`. 

Why do we assign the result of `[super init]` to `self`? This is another thing you don't need to worry **too** much about right now, but in short, it's because an initializer is allowed to return a different instance than the one it was called on. If the superclass does this, we need to use the instance it **actually** returned for self instead of the one we started with. In practice, this isn't common, but you should still get used to this convention when writing your initializers.

Next, we check to see if `self != nil` and only run the initialization code (initializing properties, etc.) if `self` is indeed not `nil`. In Objective-C, initializers are always ""failable"" in the sense that they may return nil. If the superclass's initializer returns nil for some reason, `self` will now be nil, and we should try to continue with initialization.

Finally we return `self`. This is implicit in Swift, but you must be explicit in Objective-C. After all, initializers are ""just"" methods in ObjC.

#### Initializers with Arguments

What about initializers that take arguments and/or initialize properties?

```
@interface Person: NSObject

- (instancetype)initWithName:(NSString *)name age:(int)age;

@property NSString *name;
@property int age;

@end

@implementation Person

- (instancetype)initWithName:(NSString *)name age:(int)age
{
  self = [super init];
  if (self) {
    _name = name;
    _age = age;
  }
  return self;
}

@end
```

We create an initializer that takes arguments for our `name` and `age` properties. By convention, initializers begin with `initWith`.  This isn't mandatory, but it will improve the way your Objective-C initializers look when bridged into Swift, and in any case, you should follow convention.

The body of the initializer is the same as we saw before except that we initialize the corresponding properties with the values passed in to the initializer. Note that we initialize the properties by prefixing their names with an underscore (`_`). We'll cover the reason for this, and what it actually means in a future lesson. For now, just remember that you do it this way in an initializer.
","Write a class called called `Vehicle`. It should have properties for make, model, and color, and number of wheels. Write an initializer that takes values for all four and initializes the corresponding properties.","Write a subclass of `Vehicle` called `Car`. It should have its own initializer that takes values for make, model, and color, but **not** number of wheels. Number of wheels should always be initialized to `4`. Car's initializer must correctly call the superclass initializer.",,,,,,,,Intro to Objective C,,Objective-C Part 1,iOS Development Core,,1,1,,2
use categories to add methods to an existing class,,,,,,,,,,,,,"""Properties, Categories, and Extensions""",,Objective-C Part 1,iOS Development Core,,0,,,0
understand and explain the difference between categories and class extensions,,,,,,,,,,,,,"""Properties, Categories, and Extensions""",,Objective-C Part 1,iOS Development Core,,0,,,0
understand and briefly explain the concept of pointers,"You may have been wondering why so many of your variables require a `*` character in their declaration. The reason is because the variables we declare like that are actually called a _pointer_ to an object. Primitives are addressed directly and therefore do not need an asterisk when declared. But, what does it mean to be a pointer?",,"To understand pointers we must first have a basic understanding of how computers think about and store information. Memory, or a computer's RAM (random access memory), are those sticks with chips on them you may have seen inside your computer or even replaced at some point with higher capacity versions. This provides the computer with the ability to ""remember"" information short term. Think about it like the difference between your own short- and long-term memory. The long-term version for a computer would be its hard drive.

Each location in memory has an address, and every block of memory is a fixed size. This allows the computer to create an index of where different pieces of data are stored. Let's use an example so we can visualize how the computer will store a piece of data that spans multiple blocks.

Assume we have declared an `NSString` variable and initialized it with an actual string:

```
NSString *lambda = ""Lambda School"";
```

For purposes of this example, let's imagine each memory block can store a single character of our string.

The full string is too large to fit in a single memory block, since it is multiple characters in length, so the computer will need to span the string across multiple blocks.

![Graphic showing how the variable is stored in memory](https://raw.githubusercontent.com/jcgohlke/lambda-resources/master/airtable-images/objc/pointer-graphic.png)

Step 1. The computer will find a set of blocks to store the information, in this case our string.

Step 2. The address value (`5176`) of the starting block is then stored in another free block of memory. The computer simply finds a free spot somewhere else in its memory banks.

Step 3. The address of that block (`8962`) is represented in the variable we created in our code (`lambda`).

As you can see by the steps above, our variable `lambda` does not in fact contain the string we initialized directly, but instead _points_ to the location in memory where we've stored the actual string. The process of following our arrows from variable to data is called _dereferencing_ the pointer.

Let's say we want to use our string by printing it to the console.

```
NSLog(lambda);
```

We've got to _dereference_ the pointer, so we need to follow the process the computer used above to store the data, but in reverse:

* The variable `lambda` in the `NSLog` statement takes us to memory block `8962`. The value stored in that block is another memory address (`5176`).

* We take the address `5176` and follow it to that spot in memory, where our actual string begins. The entire string is retrieved and that allows us to use it in whatever code we've written.

This process is very similar to how you might find a book at a library.

To retrieve a book, you could simply walk through every aisle looking for the title you wish to read, but that would be incredibly time consuming and inefficient. Instead, you could first look up the location of the book in the library's computer. Once found online, you'd receive a catalog number, something like `PZ4.K42On`. This number will help you find the aisle, row, and shelf where the book is located. The process of examining the catalog number and comparing it to the aisle markers is _dereferencing_ the catalog number to retrieve your book.",-,-,,,,,,,,"""Primitives, NSNumber, and Mutability""",,Objective-C Part 1,iOS Development Core,,1,1,,2
use NSNumber to convert between primitive numbers and objects,"`NSNumber` is an interesting class. It allows for storage of numeric data, but in a full fledged object rather than a primitive.",,"Take for example the number `6`. It is an integer and can easily be stored in an `int` primitive variable. Something like:

```
int aNumber = 6;
```

The problem comes in when you want to store that number in a collection, like an array. If you were to take our original variable at the top and try to add it to an array, you'd get a compiler error:

```
int aNumber = 6;
NSArray *brokenArray = @[aNumber];
```

The above code doesn't work because `aNumber` is a primitive, and they are not allowed inside a collection.

Let's say we have an array that stores class homework submissions for each of the days of the sprint. And let's say that on each day we had the following values: 10, 12, 11, 12, 9. Since we cannot store those values as primitive integers in an `NSArray`, we'll use `NSNumber` instead.

```
NSNumber *monday = [NSNumber numberWithInt:10];
NSNumber *tuesday = [NSNumber numberWithInt:12];
NSNumber *wednesday = @11;
NSNumber *thursday = @12;
NSNumber *friday = [NSNumber numberWithInt:9];

NSArray *hwSubmissions = @[monday, tuesday, wednesday, thursday, friday];
```

You'll notice we've initialized some of these number objects a little differently than others. That's simply to show that you can take a shortcut when creating an `NSNumber`. The `@value` syntax is called in this case an _`NSNumber` literal_. It is equivalent to the compiler of the more formal initializer we used for the other days. We used a similar technique to initialize the array with the `@[]` syntax (called an _array literal_). These things are generally known as _syntactic sugars_, which just means they are shorter alternatives to writing out the more formal syntax. Language developers will often add these sugars to make the code either easier to write, read, or both. Feel free to use the shorter or longer forms in your code.

 Now that we have an array of numbers, what happens when we want to use them in some form of arithmetic? We'd have to convert them back to their primitive form. Let's write a short algorithm to sum all the submissions for the week:

 ```
 int totalSubmissions = 0;
 for (NSNumber *dailySubmissions in hwSubmissions) {
     totalSubmissions += [dailySubmissions intValue];
 }
 ```

 Let's break down what's happening here.

 1. An accumulator value is created in `totalSubmissions` so we can build up a total. It's initialized to `0` to start.
 2. A `for-in` loop is used to iterate over each daily total in the array. Notice the data type of the value pulled from the array is `NSNumber`.
 3. We're using the `+=` syntax to add an item to the accumulated total. It is equivalent to `sum = sum + [other value]`.
 4. To convert the `NSNumber` back to a primitive, we can use one of several methods that take the value and turn it into the appropriate primitive. There are also: `boolValue`, `doubleValue`, `floatValue`, etc. See [Apple's Developer documentation](https://developer.apple.com/documentation/foundation/nsnumber?language=objc) on `NSNumber` for a complete list.",,"Try creating a few `NSNumber` objects and adding them to a collection, either an array or a dictionary. Then pull them from the collection and convert them to various primitive types and print the values to see how they are represented.",,,,,,,,"""Primitives, NSNumber, and Mutability""",,Objective-C Part 1,iOS Development Core,,1,1,,2
use property attributes for access (readonly vs. readwrite),,,,,,,,,,,,,"""Properties, Categories, and Extensions""",,Objective-C Part 1,iOS Development Core,,0,,,0
use class property attributes,,,,,,,,,,,,,"""Properties, Categories, and Extensions""",,Objective-C Part 1,iOS Development Core,,0,,,0
use a bridging header to expose Objective-C to Swift,"When you use both Swift and Objective-C in the same project, you have to use a bridging header to expose your Objective-C code to Swift. In this objective, you'll learn how to do that.",,"When you first add Objective-C to a Swift project or vice versa, you'll be asked if you want to create a bridging header. You can do this manually later, but generally you should let Xcode create one.

An _Objective-C Bridging Header_ is a header file in your project. It is implicitly imported into your Swift code and allows you to expose your Objective-C classes and code to your Swift code.

An Objective-C bridging header gives you a place to import Objective-C headers for classes that you want to use in your Swift code. Any Swift code in your project will automatically ""import"" the bridging header. You do need to remember to manually place import statements for any headers that you want to expose to Swift. Xcode won't do it for you.",,,,,,,,,,Swift and ObjC Interoperability,,Objective-C Part 2,iOS Development Core,,1,,,1
understand and explain Key Value Coding and common scenarios where it is useful,,,,,,,,,,,,,KVO/KVC,,Objective-C Part 2,iOS Development Core,,0,,,0
understand and explain Objective-C’s reference counting system,"Objective-C (and Swift!) both use a system called reference counting for memory management. In this objective, you'll learn how reference counting works.",,"Because computer have a limited amount of memory (RAM), it's important that memory that is no longer being used is freed up so it can be reused for something else. If you forget to do this, you have what's called a memory leak. If you ""leak"" enough memory, eventually the computer runs out of memory and your program crashes, or if you're on iOS the system kills it.

In C, whenever you allocate memory for something, you're responsible for manually freeing it when you're done using it.

```
char *string = malloc(15);
readFromFile(string, file);

// Later when done with string
free(string);
```

Very early versions of Objective-C required something similar:

```
Object *object = [Object new];

// Later when you're done with object
[object free];
```

#### Reference Counting

Manually keeping track of when memory is no longer being used and freeing (aka deallocating) it is complex and error-prone, and doing it wrong can have serious consequences including memory leaks and crashes. At some point, Objective-C was enhanced to use _reference counting_. Reference counting is a memory management system that makes it much easier to keep track of whether or not a given object is being used, and to free up its memory when it is no longer needed. The original reference counting implementation, often called _Manual Reference Counting_ or MRC, still required the programmer to do things right, but it was much less of a burden.

So how does reference counting work? Under reference counting, each object effectively has a property called its _reference count_ (aka _retain count_). This property is **simply an integer**. Additionally there are two methods on each object: `-retain` and `-release`.

`-retain` simply increments the reference count by 1. `-release` simply decrements the reference count by 1.

As long as the reference count is greater than zero, meaning one or more other objects or pieces of code are using it and need it to stick around, it will not be deallocated. If the reference count hits zero, the object is deallocated.

If a piece of code (a function, method, or another object) is using an object, it takes ownership of it by _retain_ing it. This increments the reference count. When the same code no longer needs the object, it calls `release`, which decrements the reference count. If and when the reference count reaches zero, that means that no part of the program needs the object anymore, and so it is deallocated.

With reference code, you might write code that looks like this:

```
Object *object = [self somethingThatReturnsAnObject];
[object retain]; // Keep the object alive


// Later when you're done with object
[object release];

// Still later when all other code using object have released it, object is freed
```

This is a big improvement, as it allows you to build much more complicated systems and coordinate properly managing the the lifetime of objects and their underlying memory allocations by coordinating through the reference count. ",,,,,,,,,,Memory Management,,Objective-C Part 2,iOS Development Core,,1,,,1
import a Swift module header to use Swift code from Objective-C,"An Objective-C bridging header allows you to expose your Objective-C code to Swift. What about using your Swift code in Objective-C. To do that, you use a _Swift module header_ which works a little differently from its Objective-C counterpart.",,"To use Swift code from Objective-C, you need to import the Swift module header in Objective-C file where you use Swift code by doing:

```
#import ""YourAppName-Swift.h""
```

The name of this header is `YourAppName-Swift.h`. If your app's name has spaces in it, replace them with underscores. For an app called ""My Cool App"", you'd do `#import ""My_Cool_App-Swift.h""`.

The Swift module header is created for you by Xcode, and is automatically regenerated whenever you build your project. You can view it by command clicking on it in a `#import ""YourAppName-Swift.h""` statement. It's an Objective-C header that includes `@interface`s for any public, Objective-C compatible Swift code in your project, along with declarations of enums, constants, etc. that can be bridged into Objective-C.",,,,,,,,,,Swift and ObjC Interoperability,,Objective-C Part 2,iOS Development Core,,1,,,1
annotate Objective-C class interfaces for nullability,"Traditionally, Objective-C did not have the concept of optionals the way Swift does. However, with the release of Swift, Apple made enhancements to Objective-C to improve bridging between Objective-C and Swift. One of those improvements was support for nullability annotations, which allow you to control whether method arguments and return types show up as optionals or non-optionals when bridged into Swift. In this objective, you'll learn how to write Objective-C code that uses nullability annotations to improve bridging into Swift.",,"In traditional Objective-C, any object reference (variable, property, method argument, return value, etc.) can be nil. You might say that all variables are optionals, though an Objective-C programmer would use that terminology unless they were familiar with Swift. For the most part, Objective-C handles nil values gracefully, without crashing, and Objective-C programmers have learned to be defensive where nil values can be a problem. Also, many values will in fact never be nil at runtime, even though the compiler doesn't know that. Still, unexpected nil values in Objective-C are the source of bugs, and for that reason, Swift takes a much stricter approach. 

In Swift, in order for a value to be able to be nil, its type must be an optional. Because the compiler knows if a value is optional or not, it can require you to do _something_ to handle possible nil values via unwrapping, whether that's using an `if let`, `guard let`, optional chaining, or other constructs.

An issue arises when Objective-C code, where any value can potentially be nil, but not all will be, is bridged into Swift. In the absence of additional information, the Swift compiler basically has two choices: be extra safe and import everything as an optional, or assume the programmer knows what they're doing and import everything as an implicitly unwrapped optionals. Both approaches have downsides. Importing everything as an optional requires the programmer to use optional unwrapping everywhere an Objective-C API is used, even if in reality the value being handled will not be nil in practice. Implicitly unwrapped optionals cause crashes if a nil value has occurred and the programmer hasn't decided to safely unwrap the value, despite no enforcement from the compiler requiring them to do so.

Enter _nullability annotations_. Not too long after Swift was released, Apple enhanced Objective-C with support for nullability annotations. Nullability annotations are sort of like optionals for Objective-C. They're not as deeply ingrained into the language and compiler as optionals in Swift, but they serve a similar purpose. They allow you, as a programmer, to inform the compiler whether a given value can ever be nil (aka null). This provides some additional safety when writing Objective-C, but the main reason for knowability annotations but the main reason for nullability annotations is to make it so that Objective-C APIs that are imported into Swift are nicer. If the value will never be nil at runtime, you can specify that, and it will be imported into swift as a non-optional. If a value may be nil, you can specify that and it will be imported as an optional. 

#### How To

How does this all work? Imagine we have our familiar `Person` class written in Objective-C:

```
@interface LSIPerson: NSObject

- (instancetype)initWithFirstName:(NSString *)firstName lastName:(NSString *)lastName employer:(NSString *)employer;

@property (nonatomic, copy) NSString *firstName;
@property (nonatomic, copy) NSString *lastName;

@property (nonatomic, copy) NSString *employer;

@end
```

It might be that we enforce `firstName` being non-nil, but make both `lastName` and `employer` optional. However, with the code as we've written it, it will bridge into Swift as:

```
class LSIPerson : NSObject {

    public init!(firstName: String!, lastName: String!, employer: String!)

    var firstName: String!
    var lastName: String!

    var employer: String!
}
```

All those exclamation points!

We can improve this, but using nullability annotations to mark return values, argument types, and property types as either `nullable` (optional) or `nonnull` (non-optional):

```
@interface LSIPerson: NSObject

- (nonnull instancetype)initWithFirstName:(nonnull NSString *)firstName lastName:(nullable NSString *)lastName employer:(nullable NSString *)employer;

@property (nonatomic, copy, nonnull) NSString *firstName;
@property (nonatomic, copy, nullable) NSString *lastName;

@property (nonatomic, copy, nullable) NSString *employer;
```

This gets imported into Swift as:

```
class LSIPerson : NSObject {

    public init(firstName: String, lastName: String?, employer: String?)

    var firstName: String
    var lastName: String?

    var employer: String?
}
```

That looks better!

It turns out that if you look at enough Objective-C, you find that _most_ values are implicitly non-optional. That is, most values will never actually be nil at runtime because of the way the code is written. It's a bit annoying to have to annotate every single return type, argument type, and @property for nullability when most of them will be nonnull. Thankfully, there's a shortcut for that. You can use the `NS_ASSUME_NONNULL_BEGIN` and `NS_ASSUME_NONNULL_END` macros to tell the compiler to assume that a value is `nonnull` unless you've specified otherwise. Wrap any code where you want this assumption to be active in those macros:

```
NS_ASSUME_NONNULL_BEGIN

@interface LSIPerson: NSObject

- (instancetype)initWithFirstName:(NSString *)firstName lastName:(nullable NSString *)lastName employer:(nullable NSString *)employer;

@property (nonatomic, copy) NSString *firstName;
@property (nonatomic, copy, nullable) NSString *lastName;

@property (nonatomic, copy, nullable) NSString *employer;

@end

NS_ASSUME_NONNULL_END
```

Here, you notice that the return type for the initializer, along with the types for `firstName` don't have nullability annotations. Those are assumed to be `nonnull` because they're inside `NS_ASSUME_NONNULL_BEGIN/END` tags. As of Xcode 10, the default Objective-C file template includes these for you. Just be careful that you don't forget to mark things as `nullable` if they can in fact be nil at runtime. The compiler will warn you in many cases if you make a mistake, but not all of them.

#### Process

Say you're working on a large, existing Objective-C codebase, and you're going to start adding Swift to it. This is a *very* common scenario for companies that have started adopting Swift over the past few years, since nearly all of them start with a large codebase written in Objective-C that they can't rewrite or convert to Swift all at once. How you should you figure out whether or not a given value in an Objective-C interface should be `nullable` or `nonnull`? The real answer is to read the code until you understand it, and use nullability annotations to describe the code's **actual behavior**, rather than what you think it should be. Don't assume that nil for a given value doesn't make sense and mark it `nonnull`. Instead, audit the code and verify that it **will never be nil in fact** before marking it nonnull.",,,,,,,,,,Swift and ObjC Interoperability,,Objective-C Part 2,iOS Development Core,,1,,,1
annotate Objective-C class interfaces with lightweight generics,"In early versions of Swift, one rough edge with Objective-C bridging was that Objective-C collections such as `NSArray`, `NSDictionary`, and `NSSet`, got bridged into Swift as `[Any]`, `[Any : Any]`, and `Set<Any>`, necessitating a lot of casting when dealing with Objective-C APIs that return collections. Objective-C now includes support for lightweight generics, which allow you to specify the type of objects contained by Objective-C collections, and thereby control how they're bridged into Swift. Lightweight generics are also nice even for pure Objective-C projects. In this objective, you'll learn how to use lightweight generics to improve bridging of Objective-C into Swift.",,"Much like nullability annotations, lightweight generics are a feature that was added to Objective-C primarily to improve bridging into Swift. You can and should annotate your code with lightweight generics so that collection types get bridged into Swift with an associated contained type.

The syntax for generics in Objective-C is very similar to the fundamental syntax for generics Swift. For example, to declare an `NSArray` of `NSString`s, you do the following:

```
NSArray<NSString *> *strings = @[@""Hello"", @""World""]; // [String] in Swift
```

Similarly, for dictionaries and sets:

```
NSDictionary<NSString *, NSNumber *> *dictWithStringKeysAndNumberValues = @{@""Hello"" : @5, @""Programmer"" : @10}; // [String : Any] in Swift
NSDictionary<NSStirng *, id> *dictWithStringKeysAndAnyValues = @{@""font"" : font, @""size"" : @12}; // [String : Any] in Swift

NSSet<LSIPerson *> *people = [NSSet setWithObjects: steve, woz, ron, nil]; // Set<LSIPerson> in Swift
```

#### Creating Your Own Generic Types

Most of the built in collection types in Objective-C support lightweight generics. If you're creating your own class that would benefit from being generic, you can do that too. However, there's one caveat: generics types must be object types. You can't make a `DataStructure` that stores any type value whether primitive or object.

Let's say we want to create a `TreeNode` class and make it generic in Objective-C:

```
@interface LSITreeNode<Value> : NSObject

- (instancetype)initWithValue:(Value)value;

- (void)addChildNode:(LSITreeNode<Value> *)child;

@property (nonatomic, strong) Value value;
@property (nonatomic, strong, readonly) NSSet<LSITreeNode<Value> *> *children;

@end
```

This bridge into Swift as a generic class, so we can initialize it like so:

```
let node = LSITreeNode<NSString>(value: ""foo"")
```

You might notice that we *can't* use `String` as the type here. That's because `String` is a struct, and Objective-C only knows about classes. You can bridge an `NSArray` of `Int`s, or whatever, but that's because the compiler has special knowledge of the common built-in collection types. Unfortunately, there are still some rough edges around Objective-C <-> Swift bridging.
",,,,,,,,,,Swift and ObjC Interoperability,,Objective-C Part 2,iOS Development Core,,1,,,1
call Objective-C methods from Swift,"Swift has always had great support for interoperability with Objective-C. Such support was a necessity because Apple's system frameworks, including UIKit, Foundation, Core Data, etc. were and continue to be written in Objective-C. In order for Swift to be a viable language for app development, it needed to be able instantiate Objective-C classes, call Objective-C methods, etc. This support goes beyond allowing you to use system API, and can also be used to mix Swift and Objective-C in the same project. In this objective, you'll learn how your code's Objective-C methods get bridged into Swift, how to call them, and how you can customize the specific bridging behavior for individual classes and methods.",,,,,,,,,,,,Swift and ObjC Interoperability,,Objective-C Part 2,iOS Development Core,,0,,,0
call Swift methods from Objective-C,"Just like Swift can use Objective-C code, Objective-C can use Swift code. In this objective, you'll learn how to write Swift code that can be bridged into Objective-C, and how to instantiate Swift classes, call Swift methods, and more, from Objective-C.",,,,,,,,,,,,Swift and ObjC Interoperability,,Objective-C Part 2,iOS Development Core,,0,,,0
understand and explain what is required for a class/property to be Key Value Coding compliant,,,,,,,,,,,,,KVO/KVC,,Objective-C Part 2,iOS Development Core,,0,,,0
use Key Value Observing to observe property changes on an object in Objective-C,,,,,,,,,,,,,KVO/KVC,,Objective-C Part 2,iOS Development Core,,0,,,0
use Key Value Observing to observe property changes on an object in Swift,,,,,,,,,,,,,KVO/KVC,,Objective-C Part 2,iOS Development Core,,0,,,0
understand and explain what autorelease means,"`autorelease` makes memory management with ARC a little easier, freeing you from having to remember to release objects in many cases. In this objective, you'll learn what autorelease does.",,"With only `retain` and `release`, you still have to remember to call `release` when you're done with an object, which can be easy to forget.

Enter `autorelease`. Semantically, `autorelease` has the same meaning as `release`. It decrements the reference count of the object. However, it has one critical difference. It decrements the reference count (ie. releases it) sometime in the future, **after** the call to autorelease. Exactly when that happens isn't important right now, but it will always happen after the end of the current outermost scope (ie. after the function/method you're in returns).

>A note on this: I've seen students get really hung up on autorelease and when the `release` **actually** happens. Autorelease is actually very simple, and you shouldn't over complicate it. It means ""release this thing sometime in the future"", and that's really all there is to it. There's nothing particularly smart about it. It doesn't detect when you're actually done with the thing, it doesn't ""know"" what your code is doing, it just releases the thing in the future. We'll cover the details later.

With `autorelease`, the above code could be written:

```
Object *object = [[Object alloc] init]; // Object starts out with a +1 ref count
[object autorelease]; // Release this object later (when isn't important, but it will be after this method has finished running)

// Use the object

return; // Finish the method we're in

// Sometime in the future, the object is released, but we don't have
```

We can remember to autorelease the object at the point we obtained it, instead of having to make sure we release it before the method finishes.

#### Naming

Rule #1 of MRC says:

> If you get an object from a method that starts with alloc/init, new, copy, or mutableCopy, you own it.

Rule #3 says:

>If you own an object you must release it (or autorelease it) when you’re done.

Very often, you create an object, only to use it for a few lines of code before you're done with it. If you create the object with `alloc/init`, you own it and need to either call `release` on it when you're done, or else call `autorelease` on it when you first create it.

```
NSMutableArray *tempArray = [[NSMutableArray alloc] init];
for (id object in someOtherArray) {
  [tempArray addObject:[object foo]];
}
NSArray *result = [tempArray copy];
[tempArray release]; // Done with tempArray now, so release it
```

Or, with autorelease:

```
NSMutableArray *tempArray = [[[NSMutableArray alloc] init] autorelease];
for (id object in someOtherArray) {
  [tempArray addObject:[object foo]];
}
NSArray *result = [tempArray copy];
```

Either way, you have to be vigilant, because if you forget either `release` or `autorelease`, you have a memory leak.

Convenience methods make this much easier. Convenience methods create an object and return it to you **already autoreleased**. That way you don't have to remember to `release` or `autorelease` them yourself. Using the convenience method `+array`, we can write:

```
NSMutableArray *tempArray = [NSMutableArray array];
for (id object in someOtherArray) {
  [tempArray addObject:[object foo]];
}
NSArray *result = [tempArray copy];
```

Naming is important here. By convention any method that returns and object but does **not** start with `alloc/init`, `new`, `copy`, or `mutableCopy`, returns an autoreleased object. You don't own an object returned by such a method, and therefore don't need to (and in fact must not) release it. It will stick around until at least the end of the current method. This makes writing MRC Objective-C code **much** easier in practice. Do keep in mind that if you have an object created with a convenience method, and **do** need it to stick around beyond the end of the current method, you need to take ownership of it by calling `retain`.",,,,,,,,,,Memory Management,,Objective-C Part 2,iOS Development Core,,1,,,1
effectively use custom autorelease pools in Swift and Objective-C,"Even when following all the rules, code that creates a lot of temporary objects, especially in a loop, can cause memory usage to spike high enough to cause problems. This can be fixed using custom autorelease pools. In this objective, you'll learn more about how autorelease works, and how to use custom pools to fix memory-hungry code.",,"Let's talk about the following code:

```
for (NSInteger i=0; i<10000; i++) {
  BigObject *big = [BigObject bigObject];
  NSLog(@""Big object is %@ bytes big!"", @([big size]));
}
```

Imagine you have a for loop, and each time through the loop one (or more) big object is created and autoreleased. Memory usage will go up each time through the loop because each created object won’t be released until “later” (after the loop is finished). This is despite the fact that you only need the big object in the iteration of the loop where it was created, not in subsequent iterations.

This code **does not** violated any of our stated memory management rules, and yet, it can cause a real problem. We call the maximum memory usage of a piece of code its _high water mark_. If memory usage goes high enough during the for loop, even if it would go down later when the autoreleased objects actually get released, the high water mark may be higher than the amount of memory available on the system. On iOS, this means that your app can be terminated for low memory even though you didn't leak memory or otherwise violate memory management rules.

Importantly, this code is problematic **even under ARC**, and **in Swift**.

So how do we fix it? The root of the problem is that the autoreleased objects don't get released until after the for loop has finished. What if we could fix that? Before we see how to fix that, we need to learn a little more about how `autorelease` actually works.

#### Autorelease Pools

When you `autorelease` an object, what actually happens is that it gets put into the current _autorelease pool_. An autorelease pool is just a collection of objects that have been autoreleased and are waiting to be released. The autorelease pool holds onto these objects until the pool is _drained_, at which time it calls `release` on them. Conceptually, you could write an autorelease pool like this:

```
extension AnyObject {
  func autorelease() {
    AutoreleasePool.current.autorelease(self)
  }
}

class AutoreleasePool {

  static let current = AutoreleasePool()

  deinit {
    drain()
  }

  func autorelease(_ object: Any) {
    objects.append(object)
  }
  
  func drain() {
    for object in objects {
      object.release()
    }
    objects = []
  }

  private var objects: [Any] = []
}
```

In reality autorelease pools in Objective-C are instances of `NSAutoreleasePool`, and in Swift are hidden from you. And of course, the real `NSAutoreleasePool` is significantly more complicated than this, mostly to account for thread safety, as well as having a stack for the current autorelease pool, but conceptually this is all it does. It holds onto a bunch of objects, releases them when you call `drain()` on the pool, and also drains itself when the pool itself is `dealloc`ated or `deinit`ed.

#### Custom Autorelease Pools

So, let's go back to our for loop:

```
for (NSInteger i=0; i<10000; i++) {
  BigObject *big = [BigObject bigObject];
  NSLog(@""Big object is %@ bytes big!"", @([big size]));
}
```

We want to make sure our autoreleased objects get released after every iteration of the for loop. We can do that pretty simply:

```
for (NSInteger i=0; i<10000; i++) {
  NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init]; // Makes this pool the current one
  BigObject *big = [BigObject bigObject];
  NSLog(@""Big object is %@ bytes big!"", @([big size]));
  [pool drain]; // Also releases the pool itself
}
```

Now, any autoreleased objects created in the for loop get put into our own custom `pool` created at the beginning of each iteration, and get released when it is drained at the end of each iteration. This results in the memory high water mark being **much** lower than it was before.

#### @autoreleasepool

In modern Objective-C, while the above code works fine, there's a shortcut, and it's recommended that you use it:

```
for (NSInteger i=0; i<10000; i++) {
  @autoreleasepool {
    BigObject *big = [BigObject bigObject];
    NSLog(@""Big object is %@ bytes big!"", @([big size]));
  }
}
```

Wrapping the loop iteration in `@autoreleasepool` does the same thing. It creates an autorelease pool at the beginning of each iteration, and drains it at the end. However, the compiler is able to optimize this code so that it potentially runs significantly faster.

#### Autorelease in Swift

This code has **the exact same problem in Swift**. The good news is that the fix is the same, the syntax is just a little different. Instead of `@autoreleasepool {}` you wrap the code with `autoreleasepool {}`. The same thing minus the `@`. 

```
for _ in 0...1000000 {
  autoreleasepool {
    let big = BigObject.bigObject()
    print(""Big object is \(big.size) bytes big!"")
  }
}
```

In fact, in Swift, `autoreleasepool` is just a function that takes a closure, and we usually call it with trailing closure syntax.",,,,,,,,,,Memory Management,,Objective-C Part 2,iOS Development Core,,1,,,1
understand and explain what a retain cycle is,,,,,,,,,,,,,Memory Management,,Objective-C Part 2,iOS Development Core,,0,,,0
use weak properties to fix retain cycles,,,,,,,,,,,,,Memory Management,,Objective-C Part 2,iOS Development Core,,0,,,0
use closure capture lists to prevent retain cycles in closures,,,,,,,,,,,,,Memory Management,,Objective-C Part 2,iOS Development Core,,0,,,0
perform basic bitwise operations,"The boolean operations you already know from using `if` and `while` can be applied to individual bits at a low level using what are called _bitwise_ operations.

This is useful for masking out portions of a number, or for sometimes doing math in a faster way than you might be able to with other non-bitwise operators.","Start with AND/OR/NOT because the students are used to them from a conditionals standpoint.

Then hit XOR/NOR/NAND.

Show how to do the operations on multi-bit numbers.","The instructor will build a truth table for the various bitwise operations and how they work with single bit numbers.

Starting with the familiar AND, OR, and NOT, we'll progress on to the less familiar XOR, NOR, and NAND.","The basic boolean operations are often demonstrated with _truth tables_. A truth
table shows, for a variety of input, what the output of a certain booleans
operation or gate will be.

For example, the _NOT_ gate (also called an _inverter_), has a single input and
a single output. If that input is 1 (or TRUE), then the output is 0 (FALSE).

Here is the truth table for _NOT_ (remember that 0 is FALSE and 1 is TRUE):

| A | NOT A |
|:-:|:-----:|
| 0 |   1   |
| 1 |   0   |

> Quick note: _XOR_ is _exclusive OR_; its result is true if _only one_ of its
> inputs is true. _NAND_ is ""not and""; it's an _AND_ gate with a _NOT_ gate on
> the output. _NOR_ is similar, except for _OR_.

The output is the rightmost columns. The other columns on the left are inputs.
You can clearly see that if `A` is `0`, `NOT A` is `1`.

The truth table for other operations are similar, but have two inputs:

| A | B | A AND B | A OR B | A XOR B | A NOR B | A NAND B |
|:-:|:-:|:-------:|:------:|:-------:|:-------:|:--------:|
| 0 | 0 |    0    |   0    |    0    |    1    |    1     |
| 0 | 1 |    0    |   1    |    1    |    0    |    1     |
| 1 | 0 |    0    |   1    |    1    |    0    |    1     |
| 1 | 1 |    1    |   1    |    0    |    0    |    0     |

When you are performing a boolean operation on a multi-bit number, each pair of
bits is considered in isolation. In the following example, we perform a
bitwise-AND on two bytes. We consider the top bit and bottom bit of each
position to determine the result:

```
    1 1 0 1 0 1 1 0
AND 1 1 1 1 0 0 0 0
-------------------
    1 1 0 1 0 0 0 0
```","* How would you perform an NOR operation between two numbers `x` and `y` if you didn't have an NOR operator? How could you use the other bitwise operators to the same effect?

* How would you perform an XOR operation between two numbers `x` and `y` if you didn't have an XOR operator? How could you use the other bitwise operators to the same effect?

* What is the result of `11011111 NOR 00010111`?

* What is the result of `10101010 XOR 11110000`?

* What is the result of `11011 AND 101`?",0PNyhnIEsXE,http://youtube.com/watch?v=0PNyhnIEsXE,https://www.youtube.com/embed/0PNyhnIEsXE,,,,,Computer Architecture I,,Computer Architecture,Computer Science,,1,1,1,3
"explain why we use the command line interface (CLI), and demonstrate use of basic CLI commands.",The terminal is a very important piece of your software development toolkit. Being able to use the terminal to execute commands is vital for every developer as there won't be a way to get away from it especially in node and react etc. Your mastery of this topic is essential as you grow and progress as a developer.,,"Throughout your career you'll hear a variety of ways in which we refer to the `terminal`. Some words you may come across are: `terminal`, `command line`, `bash`, `git bash` and `shell`. 

Note that there are some differences between the way that different OS's use the Terminal but these words all refer to pretty much the same thing, a way to give your computer some directions.

It's important to note that the terminal is `NOT` the `Window's Command Prompt` nor the `Powershell`.

For those windows users who haven't yet installed `git bash` now would be a great time to do so.

The `command line` or `terminal` is a way for us to use our computers without using what are called built in `Graphical User Interfaces (GUI's)` that we're all used to. 

In mac, we've gotten used to using the ""finder"" GUI that looks a lot like this: 

![Mac GUI](https://tk-assets.lambdaschool.com/9acb3fbc-1e9f-4eb1-a075-7fa9a8ff3a59_ScreenShot2018-11-26at12.28.22PM.png)

And if you've been using Windows, it should look a lot like this: 

![windows GUI](https://tk-assets.lambdaschool.com/6fd78941-61cf-4969-9285-4f9b482bc31b_copy-wim.png)

Essentially what these GUI's allow us to do, is create, read (open) update and delete files on our hard drive. The `terminal` allows us to do these same things. But it also allows us to do so much more, it allows us to execute commands; commands that can perform operations on our machine. 

What we will be learning about today, however is all about how to navigate on your machine using the `terminal`.

### **WARNING** Using the terminal removes a few safe-guards that are currently in place due to the use of GUI's. 

You can do some damage to your machine if you're not careful. So be wise before executing any commands. Everything we ask you to do with the Terminal here at Lambda School will be safe, but some commands you find on the internet, may not be safe. 

The terminal may look a bit intimidating at first, but as you become more and more comfortable with it, it will quickly become as comfortable as your home row on your keyboard. ","For this follow along assignment we're going to be practicing a few commonly used commands using `bash` syntax. 

Go ahead and open your terminal (on mac) or git bash (on windows) and lets type the following commands in the terminal. 

The first command we're going to type is: 

```
ls
```

This command stands for list. And what it will do is list all of the items currently found in the current directory you are in. So, when we open our terminals we're always directed to the `TOP LEVEL` directory aka `root` of our computer. If we were to run `ls` at the top level, we would see all of the folders and files that are currently stored in that top level folder. Later we'll learn how to use the terminal to move into different folders etc. and we can run LS to see the contents of each folder. 

Always run LS to remind you of where you're at in the terminal, and to quickly check items you have access to.

The next command we will type is: 

```
cd
```

This command stands for `change directory` so it's really simple to imply what this command does here for us, changes what directory we're currently looking in. 

`cd` allows us to move into a folder and is very commonly used in our `git` workflows. All you have to do is give the `cd` command the name of the directory in which you'd like to move. Try running this, and checking your output:

```
cd Desktop
```
You should have moved from the route into your Desktop. Now let's say you wanted to move into a directory that is found on your Desktop, and let's assume that directory is called LambdaSchoolWork. You would use the `/` forward slash and simply type out the name of the nested directory found within Desktop. 

Run the root flag to get back to your root directory:

```
cd ~ 
```

Now run:
```
cd Desktop/LambdaSchoolWork
```

You probably got yourself an error. That's because the directory we're trying to move into is not created yet. But there is a way we can create a directory using the command line. ",,vJ-9Fh2KbXk,http://youtube.com/watch?v=vJ-9Fh2KbXk,https://www.youtube.com/embed/vJ-9Fh2KbXk,,CLI Cheat Sheet,,,Git for Web Development,,Introduction to User Interface and Git,Full Stack Web Development Core,,1,,1,2
"sufficiently explain what version control and Git are, and why as software engineers we use them.",,,,,,a8e3kF2zYtk,http://youtube.com/watch?v=a8e3kF2zYtk,https://www.youtube.com/embed/a8e3kF2zYtk,,Git Cheat Sheet,,,Git for Web Development,,Introduction to User Interface and Git,Full Stack Web Development Core,,0,,1,1
demonstrate an ability to fork and clone a repo.,,,,,,TfcuaW-YjwQ,http://youtube.com/watch?v=TfcuaW-YjwQ,https://www.youtube.com/embed/TfcuaW-YjwQ,,,,,Git for Web Development,,Introduction to User Interface and Git,Full Stack Web Development Core,,0,,1,1
"explain and properly utilize the git commands: `status`, `add`, `commit`, and `push`",,,,,,TIsXqSNFSV0,http://youtube.com/watch?v=TIsXqSNFSV0,https://www.youtube.com/embed/TIsXqSNFSV0,,,,,Git for Web Development,,Introduction to User Interface and Git,Full Stack Web Development Core,,0,,1,1
"understand branching, and be able to create a branch locally.",,,,,,,,,,,,,Git for Web Development,,Introduction to User Interface and Git,Full Stack Web Development Core,,0,,,0
submit a Pull Request.,,,,,,GFdOSl-Zmlo,http://youtube.com/watch?v=GFdOSl-Zmlo,https://www.youtube.com/embed/GFdOSl-Zmlo,,,,,Git for Web Development,,Introduction to User Interface and Git,Full Stack Web Development Core,,0,,1,1
understand and explain the role of a foreign key,,,,,,,,,,,,,SQL Database,,Data Persistence,Android Development Core,,0,,,0
combine data from multiple tables into a single table,,,,,,,,,,,,,SQL Database,,Data Persistence,Android Development Core,,0,,,0
understand and explain what the Room Persistence Library is and what benefits it provides,,,,,,,,,,,,,Room Persistence Library (Android - Deprecated),,,,,0,,,0
understand how entities are defined in Room,,,,,,,,,,,,,Room Persistence Library (Android - Deprecated),,,,,0,,,0
understand how DAOs in the Room library vary from what we've done previously,,,,,,,,,,,,,Room Persistence Library (Android - Deprecated),,,,,0,,,0
understand how Room improves the process of upgrading a database to a new version,,,,,,,,,,,,,Room Persistence Library (Android - Deprecated),,,,,0,,,0
understand and explain what a broadcast is and how apps use them,,,,,,,,,,,,,,,,,,0,,,0
register their app with the system to receive broadcasts,,,,,,,,,,,,,,,,,,0,,,0
write classes that receives and handles broadcasts,,,,,,,,,,,,,,,,,,0,,,0
send a broadcast and receive data from it,,,,,,,,,,,,,,,,,,0,,,0
understand how services differ from activities and what they can be used for,,,,,,,,,,,,,Broadcasts and Services,,Android Networking,Android Development Core,,0,,,0
create a service that will perform tasks in the background,,,,,,,,,,,,,Broadcasts and Services,,Android Networking,Android Development Core,,0,,,0
start an stop a service as necessary,,,,,,,,,,,,,Broadcasts and Services,,Android Networking,Android Development Core,,0,,,0
,,,,,,,,,,,,,,,,,,0,,,0
understand and use common git vocabulary words,,,"As you're learning programming, you've already noticed that programmers use lots of words that non-programmers don't! Git is no exception to this, and there's a lot of jargon you need to be familiar with to understand git.

The [video](https://youtu.be/ng9m3EGLeTY) for this objective teaches you some of the most important vocabulary you'll encounter when working with git.",,,ng9m3EGLeTY,http://youtube.com/watch?v=ng9m3EGLeTY,https://www.youtube.com/embed/ng9m3EGLeTY,,,,,Git for Android Development,,Android Fundamentals I,Android Development Core,,0,,1,1
set up git on a local machine,,,,,,4EFu3-7M3Ss,http://youtube.com/watch?v=4EFu3-7M3Ss,https://www.youtube.com/embed/4EFu3-7M3Ss,,,,,Git for Android Development,,Android Fundamentals I,Android Development Core,,0,,1,1
implement a CSS reset and understand why it’s important for cross browser development,"CSS resets allow development teams to have a consistent rendering experience across multiple browsers.  Resets are common in the web development industry and although they may not be right every situation, knowing about them and how they are used it critical to most projects.","CSS resets come in many forms.  For our purposes, we will use an approach made popular by Eric Meyer

https://meyerweb.com/eric/tools/css/reset/

We will also look at normalize and how it's different and powerful:

https://necolas.github.io/normalize.css/","## What is a CSS Reset?

A CSS reset is when a developer will remove all default styling provided by browsers. Usually a CSS reset will set all box model and font properties to 0 or inherit.

Example code from Eric Meyer’s popular CSS reset:

```css

html, body, div, span, applet, object, iframe,  
h1, h2, h3, h4, h5, h6, p, blockquote, pre,  
a, abbr, acronym, address, big, cite, code,  
del, dfn, em, img, ins, kbd, q, s, samp,  
small, strike, strong, sub, sup, tt, var,  
b, u, i, center,  
dl, dt, dd, ol, ul, li,  
fieldset, form, label, legend,  
table, caption, tbody, tfoot, thead, tr, th, td,  
article, aside, canvas, details, embed,  
figure, figcaption, footer, header, hgroup,  
menu, nav, output, ruby, section, summary,  
time, mark, audio, video {  
margin: 0;  
padding: 0;  
border: 0;  
font-size: 100%;  
font: inherit;  
vertical-align: baseline;  
}

```

This type of reset is beginner friendly because it forces you to create your own styles from scratch.

## Alternative Resets

There are other more tailored resets that companies will use that are very specific to their needs. Some companies will incorporate their own style guides into a reset so that all new developers joining the company are aligned from the beginning.

A popular alternative to just setting everything to zero is called Normalize. Normalize focuses on only fixing the cross browser problems and adding your own styles. The focus here is to utilize the positive sides of default browser styles. If you would like to learn more about normalize it would be to your advantage as many companies use this to build their projects.

Link to normalize: https://necolas.github.io/normalize.css/

## Implementation

Because resets knock out most default styling from the browser, you will want to place your reset code at the top of your CSS page. If you put the reset at the bottom of your page, it will knock out all your styles due the cascade of CSS.

If you choose to use a CSS reset, make it your first priority to use it at the top of your CSS files when starting a project, otherwise it will be more of a headache than a help.","## CSS Reset In Action

The best way to see a reset in action is to have some existing code with default settings in it.  Then to add a reset to see the huge difference.  Follow these instructions to see how impactful a reset it:

Open this codepen:  https://codepen.io/lambdaschool/pen/bjWbrx?editors=1000
Go to Eric Meyer’s reset page:  https://meyerweb.com/eric/tools/css/reset/
Copy and paste the CSS reset code
Paste the code in the CSS section of the codepen you have open
Observe the huge changes that just occured

Notice how your code now looks lifeless.  This is pretty jarring at first, but it gives us an opportunity now style these tags the way the designer wants without being worried about cross browser issues.","## See The Difference: Reset vs Normalize

Use this codepen:  https://codepen.io/lambdaschool/pen/bjWbrx?editors=1000

Implement the eric meyer reset and take note of how much changed.  Then implement normalize instead of the eric meyer reset.  Notice the subtle but important differences.  Make a list of changes you see between the two approaches by inspecting the code in your web developer tools and looking at the CSS properties on each element.",-TVGmd81Vow,http://youtube.com/watch?v=-TVGmd81Vow,https://www.youtube.com/embed/-TVGmd81Vow,,Eric Meyer Reset,,,User Interface II,,"Introduction to User Interface and Git, Web for UX: Intro to HTML and CSS","Full Stack Web Development Core, UX Web and Labs Prep Unit",,1,1,1,3
use CSS display properties to build user interface,The display property in CSS is another vital part of styling layout.  Being able to understand the difference between `block` and `inline` is fundamental to user interface development.  You can craft any website using `inline-block` and the other display values.  ,"It's usually easier to explain inline first by showing an anchor tag.  Then making that anchor tag a block element.  Once the students see the big difference between block and inline elements, you can then showcase how inline-block melds the traits together. ","# CSS Display Property

We have learned about the box model but found it has some limitations in how we can render our elements to match a layout.  

We can leverage the CSS property `display` to render HTML elements as well as create simple layouts.  Think of `display` as the visual representation of your HTML.

There are [many `display` values available to us](https://www.w3schools.com/CSSref/pr_class_display.asp).  We will focus on several `display` values that lend themselves to building simple layouts. 

## `display: none`

When we use `display: none`, we are actually removing the HTML element from the page's flow.  This can be a powerful tool for layout when we need to temporarily remove content or toggle it off and on with JavaScript.

### `none` Traits

- Removes element from the document
- Not to be confused with `visbility: hidden` which does not remove the element from the document

### `none` Syntax

```css
  .example {
    display: none;
  }
```

## `display: inline`

`inline` elements can be nested inside of other elements without disrupting the flow of content.  

Some example `inline` elements are `<a>` or `<span>`.  Both the `<a>` and `<span>` elements are usually wrapped around content that won't create a break in the page flow. 

[Click here for a list of elements that `display: inline` as their default property](https://developer.mozilla.org/en-US/docs/Web/HTML/Inline_elements#Elements)

### `inline` Traits

- `height` and `width` properties have no effect
- Only takes up as much space as its content
- `block` elements are not allowed to be nested inside `inline` elements
- Can use `vertical-align` to position vertically
- Can use `text-align` to position horizontally

### `inline` Syntax

```css
  .example {
    display: inline;
  }
```

## `display: block`

Elements that are displayed as `block` will take up as much space as their parent element will allow.  This behavior is great for some layout designs however, if you want to control a `block` elements' size, you will need to employ both `width` or `height` depending on your needs.

`block` elements will break the flow of content on a new line. You will find that block elements are the backbone of most layouts and are vital to building any web page.

Some example `block` elements are `<div>` or `<p>`. You can nest other `block` or `inline` elements inside of a `block` element.

[Click here for a list of elements that `display: block` as their default property](https://developer.mozilla.org/en-US/docs/Web/HTML/Block-level_elements#Elements)

### `block` Traits

- Starts on a new line
- Takes up as much width as its parent element will allow
- Both `height` and `width` can be used to adjust sizing of the element
- Can nest both `inline` and `block` elements
- Can use `margin: auto` to center horizontally
- Vertical centering can be tricky without the flex box module.  [Click this link for an amazing guide on centering anything](https://css-tricks.com/centering-css-complete-guide/).

### `block` Syntax

```css
  .example {
    display: block;
  }
```

## `display: inline-block`

Sometimes we don't want a `block` element's abrupt behavior in our layouts but we also want the control it can provide with `width` and `height`.  

That is exactly what `inline-block` accomplishes.  An element that has `inline-block` applied to it has the default behavior of an `inline` element with the added bonus of controlling the size using `width` and `height`!

### `inline-block` Traits

- Inline behavior allows for elements to stack next to each other
- Both `width` and `height` can be used to control the size of the element

### `inline-block` Syntax

```css
  .example {
    display: inline-block;
  }
```

## Use Display For Layout

Now that we have a better understanding of what the display property can do, let's take a look at how we can employ it for layout.

We know that `display: block` takes up as much horizontal space as its parent's element.  What if we wanted to get two block level elements to stack next to each other?  We can utilize the hybrid `display: inline-block` to accomplish this.

Take a look at this HTML:

```html
<header>
  <h1>Sweet Eats Bakery</h1>
  <nav>
    <a href=""#"">About</a>
    <a href=""#"">Muffins</a>
    <a href=""#"">Cookies</a>
    <a href=""#"">Catering</a>
  </nav>
</header>
```

In its current form without CSS we can see that there is a `block` level `<header>` containing two more `block` level elements.  That means the `<h1>` and `<nav>` aren't going to cooporate in our layout.  

We will need to utilize our `inline-block` skills here.  Review this CSS:

```css
header h1 {
  display: inline-block;
}

header nav {
  display: inline-block;
}
```

Notice we overwrote both default `display` values.  The updated `inline-block` will allow our `<h1>` and `<nav>` to stack up horizontally because they are now being treated as `inline` elements that respect `width` and `height`.

At this point it's now a matter of using the `box-model` to push elements around where we want them.  This layout approach pales in comparison with the `flex box module` but it's great to get a solid understanding of for older browsers.","Follow the instructions found here to explore several display property values:
[Click me to go to the tutorial](https://codepen.io/lambdaschool/pen/oabLjN)","Go to your favorite website and use the developer tools to update various elements on the page.  Explore each of the following display property values:

- none
- block
- inline
- inline-block

Stretch yourself by using other display properties we haven't discussed yet by [clicking here](https://developer.mozilla.org/en-US/docs/Web/CSS/display).",0352NDaFNP8,http://youtube.com/watch?v=0352NDaFNP8,https://www.youtube.com/embed/0352NDaFNP8,,Relative vs. Absolute playground.,,,User Interface II,,"Introduction to User Interface and Git, Web for UX: Intro to HTML and CSS","Full Stack Web Development Core, UX Web and Labs Prep Unit",,1,1,1,3
set up the Django REST Framework and connect a model to an endpoint,Django comes with a powerful REST framework that makes it easy to expose models via an API. This makes it a powerful contender for quick implementation of REST backends.,This corresponds up through _Test the API_ in the Day3 docs: https://github.com/LambdaSchool/Intro-Django/blob/master/guides/day3.md,"There are two phases to exposing a model via a REST API. First, we need to tell which fields of the model we want to share, as well as which records from the database we need.

Once we've defined the data we also have to expose an endpoint so clients can hit our API and extract data.

Like we've seen before, one of Django's great strengths is how it creates beautiful, full-features admin UIs for us to use out of the box.

Not only does it do this for the `admin/` endpoint, but now that we've exposed a REST API, we have a full-features UI for GETting data and POSTing new records.

First we'll install the Django REST framework and do some boilerplate config.

Following that, we need to tell Django that we're interested in exposing data for a particular model. We do this through the use Django `Serializer`s and `ViewSet`s.

One that is set up, we finally use the REST framework's `routers` functionality to automatically hook the `Serializer` up to a specific URL endpoint.","#### Installing the REST Framework

We’ll be using the django REST framework: http://www.django-rest-framework.org/

Open the shell if you aren’t in it and install the framework:

```
pipenv install djangorestframework
```

Next, we need to tell the project about this.  Open
`[name_of_project]/settings.py`

Under `INSTALLED_APPS` add `'rest_framework'` to the list.

We also need to add some boilerplate to set up permissions:

```python
REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly',
    ]
}
```

This will allow read/write permissions for logged in users and read only for
anonymous users.

Launch the server and make sure everything is working, debug, and commit.

#### Expose the PersonalNotes Model

Next, we need to add more boilerplate.  In the `notes` folder, create a new file
called `api.py`.  This will use something called serializers and viewsets to
describe which parts of the model we want to expose to the API.

First, in `api.py`, import the serializers:

```python
from rest_framework import serializers
```

We’ll also need to import the `PersonalNote` class so that we can use it here.

Convention is to name the serializer classes after what they are serializing.
It will inherit from the specific serializer we are using for this project:

```python
class PersonalNoteSerializer(serializers.HyperlinkedModelSerializer):
```

Inside this class, we will make an _inner class_ (nested class) called a `Meta`
to tell it what parts of the model we want to access:

```python
    # Inner class nested inside PersonalNoteSerializer
    class Meta:
        model = PersonalNote
        fields = ('title', 'content')
```

To visualize this, we will use something called a viewset.  Add `viewsets` to
what is being imported from `rest_framework`:

```python
from rest_framework import serializers, viewsets
```

Create a new class for this, using the same naming convention as the serializer
and inheriting from `viewsets.ModelViewSet`

```python
class PersonalNoteViewSet(viewsets.ModelViewSet):
```

Link this back to the serializer class we made previously:

```python
    serializer_class = PersonalNoteSerializer
```

Next, add which records to search for.  We could use filters here, but for now,
grab all of them:

```python
queryset = PersonalNote.objects.all()
```

There isn’t anything we can check just yet to ensure that this is working, but
let’s make sure we haven’t broken anything.

At this point, we should have:

```python
from rest_framework import serializers, viewsets
from .models import PersonalNote

class PersonalNoteSerializer(serializers.HyperlinkedModelSerializer):

    class Meta:
        model = PersonalNote
        fields = ('title', 'content')

class PersonalNoteViewSet(viewsets.ModelViewSet):
    serializer_class = PersonalNoteSerializer
    queryset = PersonalNote.objects.all()
```

Run the server, debug, commit.

#### Add Routes

Lastly, we need to add a route to be able to access this functionality.  In the
project folder, open `urls.py`.

We’ll need to import two things here: router functionality for Django, and the
`PersonalNoteViewSet` we just created.

```python
from rest_framework import routers
from notes.api import PersonalNoteViewSet
```

Next, make a default router from the routers package, then register that router:

```python
router = routers.DefaultRouter()
router.register(r'notes', PersonalNoteViewSet)
```

This is similar to setting up a route in express, but we’re saying for this
route, this (`PersonalNoteViewSet`) is the data we want to associate with it.
(The `r` means that this is a regular expression, and to interpret the string as
literally as possible--somewhat overkill in this case.) 

Next, we need to add the URL to the `urlpatterns` list. In order to do that,
we'll be using a function called `include()` that we get from `django.urls`:

```python
from django.urls import path, include
```

And in `urlpatterns`:

```python
    path('api/', include(router.urls)),
```

This will set the path to `/api/notes`.  We can use `router.register` to add
as many paths as we want this way, without needing to add them to `urlpatterns`

#### Test the API

Run the server, navigate to `/api/` and review the information there.  Click the
link to `notes` and review that as well.

Use the admin feature at the bottom to attempt to post a new note.  This will
fail.

The reason is that our `PersonalNote` model requires a username as well.  We
need to add that in.",* Expose another model through a different endpoint than we covered in the example.,u_k8_bZrFD8,http://youtube.com/watch?v=u_k8_bZrFD8,https://www.youtube.com/embed/u_k8_bZrFD8,,,,,Building APIs,,Intro to Django,Computer Science Annex,,1,1,1,3
use token authorization to assign correct permissions to various users,"Since REST clients can't use our login UI to set which user they are, they have to use an alternate method of authentication. In this portion of the code, we'll use _token authentication_ to allow the user to log in via a new endpoint, and use that to control their access.

Although our REST calls will now transmit tokens (randomish strings of data) to authenticate, Django will seamless transform those to user objects on the back end so our login code will still operate without modification.",This is the entire Day4 doc. https://github.com/LambdaSchool/Intro-Django/blob/master/guides/day4.md,"The first step is to set up an endpoint for logging in. The user will submit the username and password, and then get a token back. We can then use this token to access other parts of the REST API.

We'll add some minor boilerplate that lets Django's REST Framework know that we want to use token authentication.

After that, we add a path to `urls.py` and hook that up to the authentication system. Django takes care of the details.

We can test it on the command line with the `curl` utility or with Postman.

Once we have our token, we can deliver it as part of the HTTP headers in subsequent API requests, and we'll be effectively logged in.","The Django Rest Framework also provides token authorization.  We will use this
to allow other users to login and access the data specific to them.  Information
can be found here:

http://www.django-rest-framework.org/api-guide/authentication/#authentication


#### Set up Token Authentication

Open `settings.py`.

To `INSTALLED_APPS`, add `rest_framework.authtoken`.

If you need them elsewhere, immediately before the boilerplate for `REST_FRAMEWORK`, import `SessionAuthentication`, `BasicAuthentication`, and `TokenAuthentication` from `rest_framework.authentication`

```python
from rest_framework.authentication import SessionAuthentication, BasicAuthentication, TokenAuthentication
```

In `REST_FRAMEWORK`, add:

```python
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.BasicAuthentication',
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.TokenAuthentication',
    ),
```

#### Set up the Route

Next, we need to set up the route to authenticate users.  In `urls.py`:

Import `re_path` from `django.urls` and `views` from `rest_framework.authtoken`

```python
from django.urls import path, include, re_path
from rest_framework.authtoken import views
```

Then add the endpoint in `urls.py` by adding the `api-token-auth/` route to
`urlpatterns`:

```python
    re_path(r'^api-token-auth/', views.obtain_auth_token)
```

The `^` is means ""match the beginning of the string"" in a regular expression.
The `re_path` function is just like `path`, except it interprets the endpoint as
a regex instead of a fixed string.

Do a migration to set up the database.

#### Test the Endpoint

We can test this on the bash command line with the [curl](https://curl.haxx.se/)
utility that you might already have installed. (Postman also works.)

Mac/Linux:
```
# The following makes a POST request with the given JSON payload:

curl -X POST -H ""Content-Type: application/json"" -d '{""username"":""admin"", ""password"":""PASSWORD""}' http://127.0.0.1:8000/api-token-auth/
```

Windows (or other platform if the above doesn't work):

```
# Windows needs some more double quotes and escaping of the payload

curl -X POST -H ""Content-Type: application/json"" -d ""{\""username\"":\""admin\"", \""password\"":\""PASSWORD\""}"" http://127.0.0.1:8000/api-token-auth/
```

PowerShell has its own thing independent of `curl`:

```
Invoke-WebRequest http://localhost:8000/api-token-auth/ -Method Post -ContentType ""application/json"" -Body '{""username"":""USER"", ""password"":""PASS""}' -UseBasicParsing
```

If you get back a very large amount of html and other text, you have an error.
Scroll back up and google the error displayed just under your console command
for help troubleshooting.  Many of the errors you can get here are easy to do,
common, and relatively easy to google for information on how to fix.

You should get back one line with a token, for example: 

```json
{""token"":""da51ccf5274050cd7332d184246d7d0775dc79e2""}
```

Your token will be different.  Try it out with your token:

```
curl -v -H 'Authorization: Token da51ccf5274050cd7332d184246d7d0775dc79e2' http://127.0.0.1:8000/api/notes/
```

Note that the trailing `/` matters.  You will get a 301 redirect if you don’t
add it here.

When using Axios to send the request, set the header here:

```javascript
axios.post('http://127.0.0.1:8000/api/notes/', data, {
  headers: {
    'Authorization': 'Token da51ccf5274050cd7332d184246d7d0775dc79e2',
  }
}
```","* There are other kinds of authentication you can add. Research these.

* Add session authentication, as well.",JNW0yfbsKpA,http://youtube.com/watch?v=JNW0yfbsKpA,https://www.youtube.com/embed/JNW0yfbsKpA,,,,,Building APIs,,Intro to Django,Computer Science Annex,,1,1,1,3
understand how to utilize GraphQL within a Django application,,,,,,,,,,,,,,,,,,0,,,0
demonstrate understanding of flex container properties in flex box,"Being able to style parent containers is the first step to successful use of the flexbox module.  Knowing what properties you can use, and how they work is fundamental to using flexbox to build user interfaces.",,"# Flex Container

We have learned that when we use `display: flex` on an element that we gain a full module of properties and rules.

One of the first rules is: whichever element you apply your `display: flex` that element becomes a `flex container`.  

This concept is extremely important because we use `flex container` properties to control our nested `flex items`.  Let's take a look at the properties that we can use on a `flex container`

## flex-direction

All flex box modules follow a general direction for content to flow.  This general direction is known as the main axis.

We can control which direction (main axis) our content will flow by using `flex-direction`. The default value is `row`. Default values are always enabled unless you override them.

Here are the values and content flow of flex-direction:

```css
/* Main axis will flow from left to right */
flex-direction: row;

/* Main axis will flow from right to left */
flex-direction: row-reverse;

/* Main axis will flow from top to bottom */
flex-direction: column;

/* Main axis will flow from bottom to top */
flex-direction: column-reverse;
```


## flex-wrap

Often `flex items` will be larger than their `flex container` width.  When this occurs we can actually control what happens by using `flex-wrap`.

The default value of `flex-wrap` is actually `nowrap`.  That means flex box modules try to contain everything inside of them.  This can be a really amazing feature but sometimes you want your `flex items` to wrap down to the next line.

We can use the value `wrap` or `wrap-reverse` to tell our `flex items` to jump down when they hit the `flex container` width limits.

Here is a list of values accepted by `flex-wrap`:

```css
/* This is the default value */
flex-wrap: nowrap;

/* Wraps content from top to bottom */
flex-wrap: wrap;

/* Wraps content from bottom to top */
flex-wrap: wrap-reverse;
```

## flex-flow

Flex-flow is simply a short hand version of both `flex-direction` and `flex-wrap`.  Check out the syntax below:

```css
/* This is a common use case: */
flex-flow: row wrap;

/* Another example: */
flex-flow: column nowrap
```

## justify-content

When you see the word `justify` in a flex box module, start thinking `main axis`.  Any time we want to style `flex items` on the `main axis` we can use `justify-content` to get the job done.  Let's look as some of the properties:

```css
/* This is the default value, it places content at the start point of the main axis */
justify-content: flex-start;

/* Content is placed as the end point of the main axis */
justify-content: flex-end;

/* Content is placed as the center of the main axis */
justify-content: center;

/* Content has an even space between each item on the main axis */
justify-content: space-between;

/* Content has equal space around each item on the main axis */
justify-content: space-around;

/* Content has even space around each item on the main axis */
justify-content: space-evenly;
```

You may be thinking ""Wait a second, what is the difference between `space-between`, `space-around`, and `space-evenly`!"" 

There is only one way to find out: try it out yourself and see the subtle differences.  You will find their uses truly suit unique situations provided to you by design files.

## align-items

We know how to adjust `flex items` on the `main axis` using `jusitfy-content`.  It's time to learn how to use our `cross axis`.   The `cross axis` is perpendicular to the `main axis`.   Anytime we use a property that starts with `align` our minds should be trained to think `cross axis`.  

Let's take a look at what align-items values can do:

```css
/* It can come as a suprise to some that stretch is the default value for align-items. Stretch will literally stretch an item's white space to fill the full flex-container */
align-items: stretch;

/* All flex items are placed at the starting point of the cross axis */
align-items: flex-start;

/* All flex items are placed at the ending point of the cross axis */
align-items: flex-end;

/* All flex items are placed at the center of the cross axis */
align-items: center;

/* All flex items align with the bottom base of their text content on the cross axis */
align-items: baseline;
```

## align-content

Similar to how `justify-content` works on the `main axis`, `align-content` controls white space for multiple lines of `flex items` on the `cross axis`.

**Warning:** `align-content` will not work if you don't have multiple lines of flex items to style.  If you only have one line of flex items, you won't see any changes!

```css
/* Stretch will literally stretch multiple flex items white space to fill the full flex-container */
align-content: stretch;

/* Multiple lines of flex items are placed at the starting point of the cross axis */
align-content: flex-start;

/* Multiple lines of flex items are placed at the ending point of the cross axis */
align-content: flex-end;

/* Multiple lines of flex items are placed at the center of the cross axis */
align-content: center;

/* Multiple lines of flex items are evenly spaced between each other on the cross axis */
align-content: space-between;

/* Multiple lines of flex items have an equal distance of space between each other on the cross axis */
align-content: space-around;
```

## Using Multiple Properties

It can be overwhelming at first to see the list of properties and values.  The great news is, you only need to use one property and one value to get some amazing results.  For example: centering anything horizontally or vertically!

We can use both the `justify-content: center` and `align-items: center` to achieve a perfect centering.  

Example:

```css
.example-centering {
  display: flex;
  justify-content: center;
  align-items: center;
}
```

You can mix and match all of the properties above to achieve some amazing results.  Flex box still respects the box model so you can use all of your hard earned CSS skills together to create layouts that every designer will love.","Now that we know all about the different properties that are available to us on the container elements once Flexbox is enabled, we're going to practice together how to use them and what they do. 

### Step 1 - Set up
Let's start with our previous example that we worked out of for our last objective. Go ahead and copy/paste this over into Codepen and jump in with me:

```html
<div class=""container"">
  <div class=""item"">Item 1</div>
  <div class=""item"">Item 2</div>
  <div class=""item"">Item 3</div>
  <div class=""item"">Item 4</div>
</div>
```

```css
.container .item {
  height: 50px;
  width: 50px;
  margin: 20px;
  border: 1px solid black;
  background: lightgray;
}

.container {
  display: flex;
}
```

Here we have a `div` with a class ""container"" wrapping our items. And because we have selected that ""container"" class and given it a `display: flex` style, we can consider it a `flex container`. 

### Step 2 - Direction

Notice that our content is all right to left, with item one at the start of the container. That is because the default behavior of flex, is that items line up in a `row` direction. To change this, we'll use the `flex-direction` property that we just learned about.

Go ahead and add `flex-direction: column;` and watch what happens.

```css
.container {
  display: flex;

  /* change flex direction */
  flex-direction: column;
}
```

Wow! Our content shifted back to a column style format. And we didn't have to do hardly anything to get there. Now we'll see some more cool things happen. 

Go ahead and remove the `column` value and replace it with `row-reverse`;

What just happened? Well, not only did we reverse our items, but we reversed the order and direction of the main axis. Remember that `flex is all about axis`. We gain magnificent power at our fingertips by laying out our content, and simple properties make things work differently. This is where things start to get fun.

Ok, let's see this happen one more time. Go ahead and change the value of our `flex-direction` prop to `column-reverse` and feast your eyes on the awesomeness. Before you do, think to yourself what's going to change? How is my axis going to be affected?

Top to bottom in a column, our items are now reversed how we probably expected them to be.

### Step 3 - Wrap.

For this example we'll change our container a bit. Add the following items to our flex container: 

```html
  <div class=""item"">Item 5</div> 
  <div class=""item"">Item 6</div> 
  <div class=""item"">Item 7</div> 
  <div class=""item"">Item 8</div> 
  <div class=""item"">Item 9</div> 
  <div class=""item"">Item 10</div> 
  <div class=""item"">Item 11</div> 
  <div class=""item"">Item 12</div> 
``` 

Give the container a `width of 300px;` 

```css
.container {
  display: flex;

  flex-direction: row;
  width: 300px;
}
```

Notice that our page is all sorts of ugly and our flex items are all squished and what not. Well this is because our flex items are trying to follow our flex rules we've provided them. And the content is getting messed up as a result. So for this, we can actually respect not only the flex rules, but extend them a bit by using `flex-wrap`.

Go ahead an add `flex-wrap: wrap;` to your flex container and watch things magically happen!

Now, try and add `flex-wrap: wrap-reverse;` and witness the glory. 

Flex Wrap will help your content move around within the bounds of the container to which it is confined. 

### Step 4 - Combining Wrap and Direction w/ flex-flow. 

There is shorthand we can use here to define our wraps and directions here. `flex-flow`. Let's go ahead and try it out. 

Add `flex-flow: row wrap;`. And then try, `flex-flow: column nowrap;`

As you can se we're starting to gain massive amounts of power.

### Step 5 - Justify Content

### Step 6 - Align Items

```html
<div class=""container"">
  <div class=""item"">Item 1 <br> Item A <br> Item A</div>
  <div class=""item"">Item 2</div>  
  <div class=""item"">Item 3 <br> Item B</div>
  <div class=""item"">Item 4</div>
  <div class=""item"">Item 5</div> 
</span>
```

### Step 6 - Align Content

[Follow this link to this codepen to play around with align content](https://codepen.io/lambdaschool/pen/KrBdBN)

It is important for you to remember that there are some good cheat sheets out there available for you to continue to grow you knowledge of Flexbox. These are resources that all developers use all of the time. You don't need to memorize all of this content. ","Go through this guide and take the following code into a text editor and start applying the principles that you've learned thus far to flex out some layout. 

[Link to flexbox cheat sheet](https://css-tricks.com/snippets/css/a-guide-to-flexbox/)",VcIcankxOfo,http://youtube.com/watch?v=VcIcankxOfo,https://www.youtube.com/embed/VcIcankxOfo,,,,,"User Interface III,CSS",,"Introduction to User Interface and Git, Web for UX: Intro to HTML and CSS, Intro to HTML & CSS","Full Stack Web Development Core, UX Web and Labs Prep Unit, UX Design Core",,1,1,1,3
demonstrate understanding of flex item properties in flexbox,Flex items represent the fine tune styling that the flexbox module has to offer.  Knowing what you can style and how flex items work in relation to the flex container is fundamental to your success with the flexbox module.,,,,,,,,,,,,"User Interface III,CSS",,"Introduction to User Interface and Git, Web for UX: Intro to HTML and CSS, Intro to HTML & CSS","Full Stack Web Development Core, UX Web and Labs Prep Unit, UX Design Core",,0,,,0
use Express Routers to organize Web API code.,"As your application matures and becomes larger, the number of resources and routes will likely follow suit. This can quickly add complexity to our Web API. If you find yourself thinking _""this server file has too many lines of code""_, it's time to brake it down into different files.

Express **Routers** are a way to split an application into sub-applications to make it more modular and easier to maintain and reason about.

In this module we'll:

- use Express Routers to reorganize our code for readability.
- discuss common patterns used to structure the files and folders in our Web API.
- use the `CommonJS` module system to share code among different files.","Make sure all project dependencies are up to date. Clone the project to a new folder and install all dependencies to make sure there are no errors.

Remind students the the CommmonJS module system is similar to the ES6 module system, show how to do the same thing in both.","An Express `Router` behaves like a mini Express application. It can have it's own `Routing` and `Middleware`, but it needs to exist inside of an Express application. Think of it as a way to organize Express applications, we write separate pieces that can later be _composed_ together.

This will all become clearer with an example.

We'll start with our main server file.

```js
const express = require('express');

const server = express();

server.use('/', (req, res) => res.send('API up and running!'));

server.listen(8000, () => console.log('API running on port 8000'));
```

If our applications looked like this, routers would not be needed, but now imagine that this application needs endpoints to see a list of users, get details for a single user, add users, modify existing users and also inactivate users. That is at least 5 endpoints for the `users` resource. Now imagine this application also needs to deal with products, orders, returns, categories, providers, warehouses, clients, employees, and more. If we only have 5 endpoints per resource and each endpoint surely will have more than one line of code, we can see how trying to cram all that code in a single file would get unwieldy real fast.

Let's rewrite it to separate the main server file from the file handling the routes for users.

Create a file to will handle all routes related to the user resource.

```js
// inside /users/userRoutes.js <- this can be place anywhere and called anything
const express = require('express');

const router = express.Router(); // notice the Uppercase R

// this file will only be used when the route begins with ""/users""
// so we can remove that from the URLs, so ""/users"" becomes simply ""/""
router.get('/', (req, res) => {
  res.status(200).send('hello from the GET /users endpoint');
});

router.get('/:id', (req, res) => {
  res.status(200).send('hello from the GET /users/:id endpoint');
});

router.post('/', (req, res) => {
  res.status(200).send('hello from the POST /users endpoint');
});

// .. and any other endpoint related to the users resource

// after the route has been fully configured, then we export it so it can be required where needed
module.exports = router; // it is recommended that this be the last line on the file
```

Now, even if the user resource needs 8 or 10 endpoints, they will be packaged neatly into this file.

How can we use it in our main file? Like so:

```js
const express = require('express');

const userRoutes = require('./users/userRoutes');
const productRoutes = require('./products/productRoutes');
const clientRoutes = require('./clients/clientRoutes');

const server = express();

server.use('/users', userRoutes);
server.use('/products', productRoutes);
server.use('/clients', clientRoutes);

server.listen(8000, () => console.log('API running on port 8000'));
```

Much cleaner, we added three sets of endpoints to our server where each needs only two lines of easy to read and understand code.

There is alternative syntax for writing route handlers, but we'll leave that for you to explore. 

Also note that **it is possible to have a central router that represents our API and have that router import the routes**. This cleans up our main server file even more. Let's see a quick example of that.

```js
const express = require('express');

const apiRoutes = require('./api/apiRoutes');

const server = express();

server.use('/api', userRoutes);

server.listen(8000, () => console.log('API running on port 8000'));
```

And the `apiRoutes` could look like this:

```js
// inside /api/apiRoutes.js <- this can be place anywhere and called anything
const express = require('express');

// if the other routers are not nested inside /api then the paths would change
const userRoutes = require('./users/userRoutes');
const productRoutes = require('./products/productRoutes');
const clientRoutes = require('./clients/clientRoutes');

const router = express.Router(); // notice the Uppercase R

// this file will only be used when the route begins with ""/api""
// so we can remove that from the URLs, so ""/api/users"" becomes simply ""/users""
router.use('/users', userRoutes);
router.use('/products', productRoutes);
router.use('/clients', clientRoutes);

// .. and any other endpoint related to the users resource

// after the route has been fully configured, then we export it so it can be required where needed
module.exports = router; // it is recommended that this be the last line on the file
```

AS you can see, Routers can _use_ other Routers.

The `userRoutes`, `productRoutes` and `clientRoutes` remain unchanged (other than relocating them inside the api folder).

In the next section, follow along as we practice using Routers.","Let's implement a simple API that returns strings, but takes advantage of Express Routers. This is overkill for such a simple application, but in larger applications the benefits will be evident.

We'll build it from scratch, follow these steps to create the folder and main server file:

- create an empty folder for our Web API, feel free to name it anything you'd like.
- **CD into the folder** you just created and type `npm init -y` to generate a default `package.json` file. The `-y` flag saves time by answering `yes` to all the questions that the `npm init` command would ask one at a time.
- open the folder in your favorite text editor.
- inside the `package.json` file, change `""test"": ""echo \""Error: no test specified\"" && exit 1""` inside the `scripts` object to read: `""start"": ""nodemon index.js""`. This will let us run our server using `nodemon` by typing `yarn start` or `npm start` at the command line/terminal. **Make sure to save the file.**
- we need to install `nodemon` as a development time dependency only because it is not needed when we deploy our server to production. Type `yarn add nodemon --dev` or `npm i nodemon -D` and that will add it to the `devDependencies` property in our `package.json` file.
- create a file to host the server code, we'll call it `index.js`.
- add the basic code to create our Express server and have a default `/` endpoint we can use to test that our server is responding to requests.

```js
const express = require('express');

const server = express();

server.use('/', (req, res) => res.send('API up and running!'));

// using port 9000 for this example
server.listen(9000, () => console.log('API running on port 9000'));
```

- add the `express` npm module: `yarn add express` or `npm i express`.
- start the server by typing `yarn start` or `npm start`.
- test it by visiting: [http://localhost:9000](http://localhost:9000) in your browser.

Let's add our first Router to manage the `races` resource.

- create a folder called `races` to host our router.
- create a file called `raceRoutes.js` and add the following code:

```js
const express = require('express');

const router = express.Router();

router.get('/', (req, res) => {
  const races = ['human', 'elf', 'hobbit', 'wizard', 'dwarf', 'orc'];

  res.status(200).json(races);
});

module.exports = router;
```

Now open your `index.js` file and use the newly created router by following these steps.

- require the `raceRoutes.js` file after requiring Express.
- use the race router to handle the `/races` endpoint.

Our `index.js` file now looks like this:

```js
const express = require('express');

const raceRoutes = require('./races/raceRoutes');

const server = express();

server.use('/races', raceRoutes);

server.use('/', (req, res) => res.send('API up and running!'));

server.listen(9000, () => console.log('API running on port 9000'));
```

Visiting [http://localhost:9000/races](http://localhost:9000/races) should return our array of strings.

Great job! You are on your way to writing well structured APIs that other team members (including your future self) will love working with.","Using your newly learned Express Router expertise, add a second Router to handle the `/villains` endpoint. Return a list of names of two or three villain characters you remember (even better if it's from the Lord of The Rings to be consistent).",qFCLzVbODJM,http://youtube.com/watch?v=qFCLzVbODJM,https://www.youtube.com/embed/qFCLzVbODJM,,Express Routing Guide,Express Router Documentation,"- why are Express Routers useful?
- are they recommended for really simple applications?
- what do we need to do inside the file that implements the Router before we can `require` it into another file?",Server-side Routing,Active,Building RESTful Web APIs with Express and Node.js,Full Stack Web Development Core,,1,1,1,3
write error handling middleware,"There are two types of middleware in Express that we'll call _regular_ middleware and _error handling_ middleware.

We have seen and worked with _regular middleware_. It is the middleware used when the application is working normally, but what happens when there is an error? That's when _error handling middleware_ comes into action and all _regular middleware_ is turned off.

In this section we'll cover how to write _error handling middleware_ and how it works.","Make sure all project dependencies are up to date. Clone the project to a new folder, update the `package.json` to the latest version of all packages, remove the `yarn.lock` file and then install all dependencies to make sure there are no errors.","When our application encounters an error in the middle of executing middleware (remember route handlers are also middleware) code, we can **choose** to hand over control to _error handling middleware_ by calling `next()` with one argument. It is an unspoken convention to make that argument be an error object like this: `next(new Error(""error message""))`.

This type of middleware takes four arguments: `error, req, res, next`. The first argument is the one we pass when calling `next(new Error('error message here'))`. When the error handling code is done, we can choose to end the request or call next without arguments to continue to the next _regular middleware_.

Error handling middleware CAN be placed anywhere in the stack, but if the intention is to have it handle errors that may occur at any middleware in the queue, then place it at the very end.","Let's see it in code. Let's write and endpoint that sends a file to the client in response to a `GET` request to the `/download` endpoint.

```js
const express = require('express');
const path = require('path');

const server = express();

server.get('/download', (req, res) => {
  const filePath = path.join(__dirname, 'index.html');
  res.sendFile(filePath);
});

server.listen(5000);
```

If we run our server and do a GET request to `/download` the server will crash as there is no `index.html` file to send. Let's rewrite our endpoint and take advantage of the fact that `res.sendFile` supports passing a callback function as a second argument. This callback function will be called after the file has been sent or if there is an error in the process of sending the file.

```js
// note we added the third parameter here: next
server.get('/download', (req, res, next) => {
  const filePath = path.join(__dirname, 'index.html');
  res.sendFile(filePath, err => {
    // if there is an error the callback function will get an error as it's first argument
    if (err) {
      // we could handle the error here or pass it down to error-handling middleware like so:
      next(err); // call the next error-handling middleware in the queue
    } else {
      console.log('File sent successfully');
    }
  });
});
```

Now let's go add error-handling middleware to our server. We can create the middleware function and then `use` it like any other middleware or we can do it inline. Below an example of `using` it inline.

```js
server.use((err, req, res, next) => {
  console.error(err);

  res
    .status(500)
    .json({ message: 'There was an error performing the required operation' });
});
```

This middleware will only get called if any other middleware or route handler **that comes before** it has called `next()` with an argument like in the `/download` endpoint above.

The complete code for our server now look like so:

```js
const express = require('express');
const path = require('path');

const server = express();

server.get('/download', (req, res, next) => {
  const filePath = path.join(__dirname, 'index.html');
  res.sendFile(filePath, err => {
    // if there is an error the callback function will get an error as it's first argument
    if (err) {
      // we could handle the error here or pass it down to error-handling middleware like so:
      next(err); // call the next error-handling middleware in the queue
    } else {
      console.log('File sent successfully');
    }
  });
});

server.use((err, req, res, next) => {
  console.error(err);

  res
    .status(500)
    .json({ message: 'There was an error performing the required operation' });
});

server.listen(5000);
```

Open your browser and visit [http://localhost:5000/download](http://localhost:5000/download) and the error message coming from our error-handling middleware should display.","Write a piece of middleware that accepts an object with two properties: `errorCode` and `errorMessage` and responds with different messages based on the `errorCode` provided. If the error code is `1404` return http status code 404 and a `not found` message, if the code is `1500` return a _500_ status code and a generic error message.",ItY7Ddzr8jA,http://youtube.com/watch?v=ItY7Ddzr8jA,https://www.youtube.com/embed/ItY7Ddzr8jA,,Middleware explained,Error handling middleware,"- how many arguments does an error handling middleware accepts?
- how can a route handler or middleware activate error handling middleware?
- when adding a _catch all errors_ middleware where should it be place in the _middleware queue_?
- can error handling middleware be placed anywhere in the _middleware queue_?",Express Middleware,Active,Building RESTful Web APIs with Express and Node.js,Full Stack Web Development Core,,1,1,1,3
practice professional behavior in stand-ups and meetings.,"Soft skills are critically important for developers.  In the workplace, you will be expected to show up on time to every stand-up and meeting.  You will often be called upon to discuss your work, give your opinion on possible solutions to a problem, and share progress with senior management.  ",,,,,,,,,,,,,,,,,0,,,0
plan and prepare for product launch.,"The product launch phase is a challenging time in the life of a project.  There are many tasks that need to be either completed or prepared for, including clearing out test data, ensuring the infrastructure can handle a spike in traffic, and having a plan in place to handle any unexpected issues.  ",,,,,,,,,,,,,,,,,0,,,0
evaluate outstanding issues and prioritize for addressing with limited resources.,At the end of every development cycle comes a time where the number of outstanding issues exceeds the time and resources available to address them.  Developers must collaborate with other key stakeholders to decide which issues will be fixed and which will not.,,,,,,,,,,,,,,,,,0,,,0
explain the importance of statistics in the context of informing a practical and reliable understanding of data,The data and problems we study tend to be messy and subjective - but our approach must not be. Statistics gives us the mathematical underpinnings to approach problems systematically and consistently.,"This is somewhat similar to some intro course material, but should be an accelerated second exposure that gets to the ""meat"" a bit.","So far we've developed an intuition for how to use statistics to describe data - and we've seen that there are both good and bad ways to do this. But what does ""bad"" mean in this context? How can we more objectively decide when something is, as it is often called, ""statistically significant""?

The frequentist perspective is that there is some ""true"" population distribution, and the frequencies represented in this distribution are what we want to get at. We have a sample - a subset of the population - and can use that to infer things about the population as a whole.","Consider an opinion poll - we want to know if the ""average American"" prefers Coke or Pepsi. The comprehensive approach would be to get this question added to the census - but the more practical approach would be to randomly sample the population, and ask them what they prefer.

The pieces we need are:

*The question* - ""Which soda do you prefer, Coke or Pepsi?"" Possible issues with this - by leading with Coke, we may be biasing people to select with that. A better approach is to randomize the order of the options (ballots do something similar).

*Sampling process* - for surveys, RDD (random digit dialing) is typical. The good news is this really is random in terms of selection, but in terms of response it is decisively not random - not everyone has a landline, and not everyone answers or participates in surveys given the opportunity. The main mitigation is to also collect demographic data, and weight the responses accordingly - we won't go into depth on this (it's not necessary for online A/B tests), but if you get into survey design it's an important approach.

*Null hypothesis* - in this case, the simplest null hypothesis would be that neither Coke nor Pepsi is the favorite - that is, both are preferred by half the population.

*Hypothesis test* - this is the approach to take the above and calculate a test statistic, which will allow us to interpret the results. One common test is [Student's t-test](https://en.wikipedia.org/wiki/Student%27s_t-test) - it is applied in cases where the test statistic is distributed normally (a very typical situation), but the standard deviation of the population is unknown (which, for lots of social/real-world situations, is also typical). It is a relaxed version of Z-tests (which assumes more strict normality and a known standard deviation).

There are many types of test statistics out there, and we'll cover some more of them. One rule of thumb is that t-tests are more flexible than Z-tests. Another rule of thumb is that $n > 30$ is enough to treat the distribution of the test statistic as normal (though still good to use t-tests, as you may not know the standard deviation).

Aside from distribution, another important decision is selecting the type of test - *one-sample*, *two-sample*, or *paired*. One-sample tests compare results from a single sample against a known or hypothesized population. Two-sample tests compare two different samples against one another. Paired tests are a special type of two-sample tests where, to control other variables, observations are paired and the differences between those paired observations becomes the sample.

In this situation, a one-sample test is appropriate - we have a single sample of people who we're asking if they prefer Coke or Pepsi. What do we compare that with? Our null hypothesis is that there isn't a difference, so the population mean would be 0.5 (where e.g. 0 is liking Coke and 1 is liking Pepsi).

The one-sample t-test will then let us compare what we observed, and calculate a test statistic to determine if it's consistent with the null hypothesis or if we should reject the null.","Using [scipy.stats.ttest_1samp](https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.ttest_1samp.html), perform a t-test on the above scenario, with the following data as input:

```
[0, 1, 0, 1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0,
 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 1,
 1, 0, 1, 0, 1, 1, 0, 0, 0]
```

This list represents 50 respondents to the survey, where a 1 indicates preference for Pepsi and a 0 indicates preferences for Coke.

After you perform the test, try to interpret your results - one hint is that, for most statistical tests, a larger test statistic means more ""significant"" or unusual results.",rnqOc_6UIz8,http://youtube.com/watch?v=rnqOc_6UIz8,https://www.youtube.com/embed/rnqOc_6UIz8,,,List of probability distributions,,"""Probability, Statistics, and Inference""",,Statistical Tests and Experiments,DS - Statistics Fundamentals,,1,1,1,3
"Demonstrate understanding of fundamental concepts of combinatorics and probability, including: permutations, combinations, expected value, variance, binomial distributions, and Bernoulli trials",,,,,,,,,,,,,,,,,,0,,,0
"Identify and distinguish between variables, random variables, and the difference between discrete and continuous",,,,,,,,,,,,,,,,,,0,,,0
"demonstrate understanding of fundamental concepts of set theory and probability, including permutations, combinations, expected value, variance, binomial distribution, and Bernoulli trial","Statistics itself is built on probability theory, and a fluency in the basics goes a long way.","Don't linger on this, but important to at least acknowledge the existence of these underpinnings.","First, some set definitions:

*Set* - a collection of unique entities, where any given entity is either contained or not contained in the set.

*Subset* - if a set $A$ is such that all its members are also members of another set $B$ then it is a subset of $B$.
![Subset](https://upload.wikimedia.org/wikipedia/commons/b/b0/Venn_A_subset_B.svg)

*Empty set* - a set without any members. It can be defined as the set that is the subset of every set and every set (including itself) is a subset of itself. If that's a bit mind-bending that's OK, it'll sink in.

*Universal set* - the set that every set is a subset of.

Why is this related to data science? In statistics we talk about populations and samples - these essentially are some large/universal set, and a subset (or many subsets).

In Python, the `set()` data structure supports all the basic sort of set operations, and can correspond to the above theory. As an exercise, instantiate a set object in Python (`my_set = set()`) and then use `dir()` and `help()` to investigate and interact with it.","Consider a situation where we have a set - the 52 cards in a standard deck. We want to draw subsets - perhaps hands of 5 cards each, for a game of poker. Assume fair and true shuffling and dealing/drawing of cards.

We deal ourselves a hand of five cards. We've just performed combinatorics!

<math> \binom nk = \frac{n(n-1)\dotsb(n-k+1)}{k(k-1)\dotsb1},</math>

Scary? Looks that way, but all ""$n$ choose $k$"" means is ""how many ways are there to make subsets of size $k$ from an overall set of size $n$?"" These $k$-sized subsets are called $k$-combinations, and the above formula calculates the total number of possible $k$ combinations.

So for poker, $n = 52$ (the cards in a deck) and $k = 5$ (the size of a hand). $52$ choose $5$ works out to be 2,598,960 (and so the probability of any given hand is one over that).

Consider a different situation - you have a deck of cards, but instead of just drawing hands you want to know how many different unique ways there are to order any 5 cards. You're now in the domain of *permutations*.

In math terms, we're now no longer talking about pure sets, but instead about sequences - sets with an order to them. Relating back to Python, this means that our normal `set()` structure won't suffice - we can use lists, or you can look up the various ""recipes"" for OrderedSet objects (they're not in the standard library, but ordered dictionaries are supported and can be used to build ordered sets).

How can we figure out how many orderings of poker hands there are? Let's consider an extreme but simpler case first - how many orders of the total deck are there? There are 52 cards, and the first card of an order could be any of them. The next card could be any of the 51 remaining, and the next any of the 50, and so forth to the last card. This results in the *factorial*:

$52 * 51 * 50 * ... * 1 = 52! = 8.0658175 * 10^67$

In this case, $n = k = 52$ - we're taking the whole set, and permuting it. For $k < n$ we follow similar logic, we just don't go all the way down to the last card. For 5 cards, it'd be $52 * 51 * 50 * 49 * 48$. The general formula:

<math>P(n,k) = \underbrace{n\cdot(n-1)\cdot(n-2)\cdots(n-k+1)}_{k\ \mathrm{factors}}</math>
<math>= \frac{n!}{(n-k)!}.</math>

Overall, remember - combinations don't care about order, permutations do. And, generally, combinations are a bit closer to sampling and statistics, while permutations are cool and fundamental but a bit further removed from most data science.","Write Python functions to calculate both the number of combinations and the number of permutations for given $n$ and $k$ (yes, these functions definitely exist out there - code your own, and compare!).",YXWIesQToUc,http://youtube.com/watch?v=YXWIesQToUc,https://www.youtube.com/embed/YXWIesQToUc,,,Intuition behind Conditional Probability,Come up with real-world examples of drawing (as subsets from a larger set) or counting combinations and of drawing or counting permutations.,"""Probability, Statistics, and Inference""",,Statistical Tests and Experiments,DS - Statistics Fundamentals,,1,1,1,3
Understand the relationship between common statistical distributions and is aware of the variety of statistical distributions,"Statistics often seems overwhelming because of the sheer number and apparent variety of statistical distributions to be characterized. But while there are a lot out there, a few stand out as more fundamental, with the rest being derivable or similar.",,"When we talk about statistical distributions we're implicitly in the world of parametric statistics. We are assuming that some population is characterized by a distribution, and that this distribution has some fixed set of parameters - for example, the normal distribution is parametrized by $\mu$ (the mean) and $\sigma$ (the standard deviation).",,,,,,,,,,,,,,,1,,,1
evaluate and summarize findings from real-world A/B test data,"The core tools of inferential statistics are widely used, but not always understood. In this module we'll both learn how to run these tests and the proper (frequentist) interpretation.","Don't go too deep down the frequentist rabbit hole, but it can be a fun philosophical discussion point.","#### Data from A/B tests

In industry, some data scientists never do Hypothesis Testing, but others do. The most obvious business use case is with A/B tests.

It's hard to find public datasets from real A/B tests. Here's one:

[MineThatData E-Mail Analytics And Data Mining Challenge dataset](https://blog.minethatdata.com/2008/03/minethatdata-e-mail-analytics-and-data.html)

_""This dataset contains 64,000 customers who last purchased within twelve months. The customers were involved in an e-mail test._
- _1/3 were randomly chosen to receive an e-mail campaign featuring Mens merchandise._
- _1/3 were randomly chosen to receive an e-mail campaign featuring Womens merchandise._
- _1/3 were randomly chosen to not receive an e-mail campaign._  

_During a period of two weeks following the e-mail campaign, results were tracked.""_","#### Hypothesis Testing + Real-World Data Storytelling

For an excellent recent example of inferential statistics for data storytelling, see [Allen Downey's slides on Generational changes in support for gun control.](https://docs.google.com/presentation/d/e/2PACX-1vRk2ld2uvI2q9OK5NumZ1Rq2b0We8FIehHRh8lEcjip8LTXWTT0UHov7vNaHtevAunglUb_Kb_jxRl3/pub?slide=id.p) This could be called hypothesis testing with a lower-case h, but not with an upper-case H. It's not about Null Hypopthesis Significance Testing. It's about interpreting logistic regression, which we don't introduce until the next unit.

Monte Carlo simulation of the null hypothesis is used for data storytelling with observational data in [The New York Times article, How Not to Be Misled by the Jobs Report.](https://www.nytimes.com/2014/05/02/upshot/how-not-to-be-misled-by-the-jobs-report.html) But this isn't a full example of Null Hypothesis Significance Testing either. It's not about calculating p-values. The intent is not to increase certainty, it's actually to reduce certainty.",Read the above articles and write a summary to share with a fellow classmate.,hzLGkVT4ZCc,http://youtube.com/watch?v=hzLGkVT4ZCc,https://www.youtube.com/embed/hzLGkVT4ZCc,,,"""""""The hype is real""""""",,Real-world Experiment Design,,Statistical Tests and Experiments,DS - Statistics Fundamentals,,1,1,1,3
Explain why we care about linear algebra in the scope of data science,"It's not enough to know the basics of Linear Algebra, you also need to know why they are so important and commonly used in Data Science. Learn some of the most important motivations behind the use of Linear Algebra as well as some of the most apparent uses of Linear Algebra in Data Science.",,,,,,,,,,,,Vectors and Matrices,,Linear Algebra,DS - Statistics Fundamentals,,0,,,0
Show when two vectors/matrices are orthogonal and explain the intuitive implications of orthogonality,If two vectors are orthogonal then they are perpendicular to one another and as such two vectors being orthogonal implies a whole host of other properties. As such we need to be able to mathematically and graphically identify orthogonal vectors.,,,,,,,,,,,,Intermediate Linear Algebra,,Linear Algebra,DS - Statistics Fundamentals,,0,,,0
"Calculate (by hand for small examples, with numpy for large) and understand importance of eigenvalues, eigenvectors",,,,,,,,,,,,,,,,,,0,,,0
"Conceptualize and utilize vectors and matrices through matrix operations and properties such as: square matrix, identity matrix, transpose and inverse",Basic Vector and Matrix operations are the building blocks of more complex operations. You need to be able to identify both the size and common types of vectors and matrices because there are important properties associated with them.,,,,,,,,,,,,Vectors and Matrices,,Linear Algebra,DS - Statistics Fundamentals,,0,,,0
"Recognize high dimensionality data, and can employ PCA to improve model performance",Principle Component Analysis is one of the most popular approaches to dimensionality reduction. Understanding how PCA actually makes its calculations will require us to have a strong grasp of many of the spacial intuitions around the linear algebra concepts that we have been establishing all week.,,,,,,,,,,,,Dimensionality Reduction Techniques,,"Linear Algebra, Unsupervised Learning","DS - Statistics Fundamentals, DS - Annex",,0,,,0
"Recognize when p > n, and why this leads to failure of certain ML models","The ""Curse of Dimensionality"" is an important buzzword that you need to be familiar with. There are a number of implications of working with high dimensional data that we will have to grapple with, but the main takeaway from this discussion should be that at a minimum you need more observations (rows) in your dataset than parameters in any model that you are fitting or else you will be at extreme risk of overfitting.",,,,,,,,,,,,Dimensionality Reduction Techniques,,"Linear Algebra, Unsupervised Learning","DS - Statistics Fundamentals, DS - Annex",,0,,,0
Understand the differences in standardization between variance and standard deviation as well as covariance and correlation in preparation for learning about variance-covariance matrices,"Before we can understand the importance of variance-covariance matrices, we need to make sure that we understand well the measurements that they are composed of. This will also be a good opportunity solidify our understanding of the difference between covariance and correlation",,,,,,,,,,,,Intermediate Linear Algebra,,Linear Algebra,DS - Statistics Fundamentals,,0,,,0
Understand the limitations that come with projecting data onto an eigenvector subspace  ,"Dimensionality Reduction can be useful but it is not a silver bullet. Projecting data onto an eigenvector subspace is how PCA reduces dimensions within a dataset, it has the effect of making our dataset smaller and easier to work with, but comes at the cost of losing a small amount of information in our dataset. We will learn how to interpret the principal components that result from PCA and how 100% of the information (variance) from the original dataset cannot be retained without retaining a large number of principal components.",,,,,,,,,,,,Dimensionality Reduction Techniques,,"Linear Algebra, Unsupervised Learning","DS - Statistics Fundamentals, DS - Annex",,0,,,0
"Recognize when unsupervised learning is necessary, and select and apply appropriate clustering techniques","Unsupervised learning is an important category of machine learning algorithms that we would use if our training data does not contain the feature that we are trying to predict. Because of this, we cannot optimize our models based on how close our training predictions resemble the ground truth. In scenarios like this, we might turn to other aspects of our data --like how the datapoints are spatially related (clustering)-- in order to be able to make some predictions from our data.

We will discuss the different types of clustering algorithms that exist, but only take a deep-dive into K-means clustering during class.",,,,,,,,,,,,Clustering,,Linear Algebra,DS - Statistics Fundamentals,,0,,,0
Use K-Means clustering and other centroid-based clustering algorithms,K-Means clustering is the most commonly taught centroid-based clustering algorithm and is a good introduction to algorithms of this type. K-means will reinforce the need for reasoning about high dimensional data in a spatial manner and will serve as a good example for how machine learning algorithms iteratively approach an optimum.,,,,,,,,,,,,Clustering,,Linear Algebra,DS - Statistics Fundamentals,,0,,,0
"Illustrate the difference between between precision, accuracy, and bias in predictive modeling",,,,,,,,,,,,,Regression Analysis,,,,,0,,,0
Construct and plot a linear equation including higher powered terms to capture nonlinear functional forms,,,,,,,,,,,,,Regression Analysis,,,,,0,,,0
Fit linear regression models using both simple regression and multivariate regression models and interpret regression equations (regressions on high dimensionality datasets),,,,,,,,,,,,,Regression Analysis,,,,,0,,,0
code multivariate regression by hand using the analytical and approximation techniques (gradient descent),,,,,,,,,,,,,,,,,,0,,,0
Can use Gradient Descent to estimate linear regression coefficients,,,,,,,,,,,,,Regression Analysis,,,,,0,,,0
Student can code the closed form (linear algebra - Least Squares Solution) using numpy,,,,,,,,,,,,,Regression Analysis,,,,,0,,,0
"Measure the significance *and* effect size of a statistical prediction, and apply both as appropriate to the situation",,,,,,,,,,,,,Evaluating the Fit of Statistical Models,,,,,0,,,0
"Prepare and split data into train/test sets for validation of models taking into account techniques and concepts such as: cross-validation, overfitting, underfitting, sources of bias, data quality issues",,,,,,,,,,,,,Evaluating the Fit of Statistical Models,,,,,0,,,0
"Understand the difference between type I and type II error, and the tradeoff inherent in trying to reduce both",,,,,,,,,,,,,Evaluating the Fit of Statistical Models,,,,,0,,,0
"Compare competing metrics of model fit and quality to select the most appropriate: R, R-squared, Accuracy, Root Mean Squared Error, AUC ROC",,,,,,,,,,,,,Evaluating the Fit of Statistical Models,,,,,0,,,0
use Seaborn to visualize distributions and relationships with continuous and discrete variables,,,,"We will explore concepts and techniques like what you can see at these links:
- [Seaborn tutorial](https://seaborn.pydata.org/tutorial.html)
- [Seaborn example gallery](https://seaborn.pydata.org/examples/index.html)
- [Chart Chooser](https://extremepresentation.typepad.com/files/choosing-a-good-chart-09.pdf)","Given example datasets, use Seaborn to make distribution, relational, and categorical plots.",,,,,,,,Choose appropriate visualizations,,Data Storytelling,,,0,1,,1
fix misleading visualizations,,,"Visualizations can mislead.

- [How to Spot Visualization Lies](https://flowingdata.com/2017/02/09/how-to-spot-visualization-lies/)

The same data can tell multiple stories.

- [Many Analysts, One Data Set: Making Transparent How Variations in Analytic Choices Affect Results](http://journals.sagepub.com/doi/10.1177/2515245917747646): _""Twenty-nine teams involving 61 analysts used the same data set to address the same research question: whether soccer referees are more likely to give red cards to dark-skin-toned players than to light-skin-toned players. ...  Findings suggest that **significant variation in the results of analyses of complex data may be difficult to avoid, even by experts with honest intentions.**""_ 
- [One Report, Diverging Perspectives](https://archive.nytimes.com/www.nytimes.com/interactive/2012/10/05/business/economy/one-report-diverging-perspectives.html): _""Friday’s jobs report is the second-to-last of the [2012] presidential campaign. Each party will interpret the numbers in a way to convince voters that its policies will help economic growth.""_

Data analysis has uncertainty, which is hard to communicate.

- [How Not to Be Misled by the Jobs Report](https://www.nytimes.com/2014/05/02/upshot/how-not-to-be-misled-by-the-jobs-report.html): _""The jobs number is just an estimate, and it comes with uncertainty. Let’s consider how statistical noise might affect our perception ...""_

Beware confirmation bias:

![](http://chainsawsuit.com/wp-content/uploads/2014/09/20140916-research.png)

([http://chainsawsuit.com/comic/2014/09/16/on-research/](http://chainsawsuit.com/comic/2014/09/16/on-research/))

Tell both sides of the story. It's more ethical, more credible — and more convincing, too.

- Allen (1998), [Meta-Analysis Comparing the Persuasiveness of One-sided and Two-sided Messages](https://pdfs.semanticscholar.org/54e0/a7c261598065f94fa4d3d265a31dddde389d.pdf): _""The results indicate that a communicator generally should use a two-sided message with a recognition and refutation of the available counterarguments.""_ 

This is all a big responsibility. But please don't be scared off from interpreting data and making recommendations. It's literally your job, when a business hires you to be a data scientist. Cole Nussbaumer Knaflic explains in her book _[Storytelling with Data](http://www.storytellingwithdata.com/book/)_:

_""**You should always want your audience to know or do something.** This can be an uncomfortable space for many. Often, this discomfort seems to be driven by the belief that the audience knows better than the presenter and therefore should choose whether and how to act on the information presented. This assumption is false. If you are the one analyzing and communicating the data, you likely know it best—you are a subject matter expert. This puts you in a unique position to interpret the data and help lead people to understanding and action. **In general, those communicating with data need to take a more confident stance when it comes to making specific observations and recommendations** based on their analysis.""_ ",,"Given a notebook with visualizations that violate best practices, improve the visualizations so they do not mislead viewers.

Optional stretch goal: Review a data journalism article of your choice. Is any of the analysis potentially misleading? What was done well, and what could be better?",,,,,,,,Choose appropriate visualizations,,Data Storytelling,,,0,1,,1
"Use Markdown to prepare a document that includes both mathematical syntax and code blocks, and is aware of LaTeX and how to get started with it for more advanced typesetting",,,,,Practice Markdown & LaTeX ...,,,,,,,,,,,,,0,1,,1
"Write reusable code using current plotting libraries (matplotlib, D3, seaborn) to generate compelling graphics",,,,,,,,,,,,,,,,,,0,,,0
Craft visualizations that are visually appealing *and* enhance the interpretability of data,,,,,,,,,,,,,,,,,,0,,,0
Create visualizations that use interactivity to expose meaningful dimensions of the data,,,,,,,,,,,,,,,,,,0,,,0
Generate advanced charts with interactivity (decision tree visualizations),,,,,,,,,,,,,,,,,,0,,,0
"Understand the importance of ""telling a story"" with data to create compelling and persuasive reports/presentations",,,,,,,,,,,,,,,,,,0,,,0
Write and present an argument using classical rhetorical structure,,,,,,,,,,,,,,,,,,0,,,0
Write a technical and informative article,,,"### Why

Will Koehrsen claims, [""The most important part of a data science project is writing a blog post.""](https://towardsdatascience.com/the-most-important-part-of-a-data-science-project-is-writing-a-blog-post-50715f37833a)

_""Writing creates **opportunities**, gives you critical communication **practice**, and makes you a better data scientist through **feedback**._

_I have never been contacted solely from someone who found me on GitHub, but **I’ve been contacted hundreds of times from people who read my articles.**_

_I went to college for mechanical engineering, and didn’t make a single connection (let alone learn any useful skills) in data science at school. However, I did start [writing](http://medium.com/@williamkoehrsen/) in my last semester, and as a result, was able to form numerous **relationships with potential employers**, collaborators, and even book editors that have been immensely helpful as I navigate the start of a data science career.""_

Will got his first data science job through his writing. His employer, Feature Labs, found him _""through an article I’d written that walked through a project and summarized the conclusions.""_


### How 

Nation Shudders At Large Block Of Uninterrupted Text
https://www.theonion.com/nation-shudders-at-large-block-of-uninterrupted-text-1819571366

How Users Read on the Web
https://www.nngroup.com/articles/how-users-read-on-the-web/

Inverted pyramid
https://en.wikipedia.org/wiki/Inverted_pyramid_(journalism)",,,,,,,,,,,,,,,0,,,0
Give an X minute presentation on a technical topic of their choice,,,,,,,,,,,,,,,,,,0,,,0
Contribute to library/API documentation,,,,,,,,,,,,,,,,,,0,,,0
"Understand Python virtual environments, and use pipenv and other modern tools to create and use them",,,,,,,,,,,,,,,,,,0,,,0
"Use appropriate static code checking tools (Flake8, autopep8, yapf), integrated with an editor and git workflow, to enforce consistent pep8 styling on Python code",,,,,,,,,,,,,,,,,,0,,,0
launch Docker containers and access/execute programs on them,"The purpose of containers is to run code, reliably and reproducibly. Even something as simple as ""Hello World!"", achieved identically and independently of platform, is a remarkable and powerful thing.","The real challenge here is either installing Docker, or (as a fallback) signing up for [Docker Hub](https://hub.docker.com) and using: https://training.play-with-docker.com/

Make sure PMs are prepared to help intensively debug issues 1:1 with students. MacOS and Windows 10 Pro work well with Docker, but earlier/non-pro Windows don't have built-in virtualization and require the ""Docker Toolbox"" (linked elsewhere - basically a packaged VirtualBox) to function.","What is a container? Just something that *holds* other things - in the context of computation, a system that holds programs. The difference between a container and the computer you're using right now is a container is abstracted and *virtualized* - it is independent of the hardware and (external) operating system it runs on.","Once installed, Docker ""Hello World!"" is as simple as:

```
docker run hello-world
```

Try it out! You should see something like:

```
docker run hello-world

Unable to find image 'hello-world:latest' locally
latest: Pulling from library/hello-world
ca4f61b1923c: Pull complete
Digest: sha256:ca0eeb6fb05351dfc8759c20733c91def84cb8007aa89a5bf606bc8b315b9fc7
Status: Downloaded newer image for hello-world:latest

Hello from Docker!
This message shows that your installation appears to be working correctly.
...
```

But what's really happening?

1. Docker is looking for a container named `hello-world`
2. It doesn't find it!
3. But not to worry - it looks for and pulls it from the [official Docker Cloud](https://cloud.docker.com/)
4. After some network and hash/checksumming (basically ""making sure it gets the right thing"")...
5. The image is downloaded and executed!

The result - well, it prints ""Hello from Docker!"" This is `hello-world`, after all.

But the somewhat subtle and crazy thing here is that this message is the single purpose of an entire *operating system*, contained and reproduced exactly (byte-for-byte) whenever and wherever you run it.

So, while ""Hello World!"" may not exactly pay the bills, the general ideal that it demonstrates is clearly powerful. And it's up to us to use that power to make our code reliable and reproducible.","Read up on Docker documentation, and execute a something on a Docker container beyond ""Hello World!""",,,,,"Play with Docker classroom,Docker Toolbox,Get Started with Docker","Hands-on Machine Learning in Docker,Intro to Docker",,Containers and Reproducible Builds,,Software Engineering and Reproducible Research,DS - Data Engineering,,1,1,,2
create/customize a Dockerfile to build a basic custom container,"Running containers other people make is useful - there's a lot of premade containers out there. But the *real* power of Docker is in customizing your own container, and reproducibly running your own code in a variety of environments.","Students using https://training.play-with-docker.com/ will have some trouble making a Dockerfile, as the only built-in text editor is vim. If possible demonstrate a basic flow, and `apk add ""nano""` (the playground environment is Alpine Linux based) will install `nano`, a somewhat easier command line text editor.","To customize Docker, you must write a `Dockerfile` - a text file ""recipe"" that specifies the container/Linux distribution you are basing your container on, and then adds additional environment and setup steps.","Example MVP `Dockerfile` for Python:

```
FROM debian

# So logging/io works reliably w/Docker
ENV PYTHONUNBUFFERED=1
# UTF Python issue for Click package (pipenv dependency)
ENV LC_ALL=C.UTF-8
ENV LANG=C.UTF-8
# Need to explicitly set this so `pipenv shell` works
ENV SHELL=/bin/bash

# Basic Python dev dependencies
RUN apt-get update && \
  apt-get upgrade -y && \
  apt-get install python3-pip curl -y && \
  pip3 install pipenv
```


1. Put the above in a `Dockerfile`
2. `docker build . -t python`
3. Wait (may take awhile, especially if it's your first container)
4. `docker run -it python /bin/bash`

You're now in a reproducible environment with `pipenv`! When you're done, `exit` - but note that if you run it again it will actually be a *new* copy of the container, i.e. you don't see what you did in the earlier version of the container.

If you want to reuse a single container, read up on `docker restart` and `docker attach` - but the idea of a container always being clean is actually quite powerful, as that is where reproducible builds come from. With a more elaborate `Dockerfile` (that specifies an actual package to install and run), you can have a contained and reproducible app that you *know* runs the same everywhere.","Build on the `Dockerfile` above - add to the `RUN` command to install specific useful packages and execute them. You may have to read up on `docker run`, in particular the `-p` argument to expose a port from the Docker container to localhost - this lets you e.g. run a Jupyter notebook server *inside* Docker and access it from your external operating system.

To see how deep the rabbit hole goes, check out [Docker Compose](https://docs.docker.com/compose/).",,,,,Dockerfile Reference,"Kubernetes,DevOps on Wikipedia,VMs versus Containers,Docker Classroom for Dockerfiles",,Containers and Reproducible Builds,,Software Engineering and Reproducible Research,DS - Data Engineering,,1,1,,2
"Perform ad hoc queries to select, join, and aggregate data",,,,,,,,,,,,,,,,,,0,,,0
Build a simple data pipeline processing data from a relational DB and creating “roll-up” csv files,,,,,,,,,,,,,,,,,,0,,,0
"Understand the different ways to connect to a database (terminal, ORM) and which is appropriate for a situation",,,,,,,,,,,,,,,,,,0,,,0
"Explain what SQL injection is, and know best practices to avoid it",,,,,,,,,,,,,,,,,,0,,,0
create a simple Python web application that exposes an API to URL endpoints,"Now that you know the basics of what a web application is, it's time to build our own! We'll be focusing on the back-end, building a simple Python web application with Flask (a microframework) to handle and return requests to URL endpoints.","Contrast w/Django (a ""batteries included"" framework, comes with templates/ORM/auth/etc.). Basically, you ""write Django"", you don't ""write Python"" (much like you ""write Rails"", not Ruby) when you use a heavy framework like that. Flask is lighter - still some opinions, but more modular and you write closer to normal Python and choose your own dependencies.","```python
from flask import Flask
app = Flask(__name__)

@app.route(""/"")
def hello():
    return ""Hello World!""

```

""Hello World!"" with Flask is as simple as that - 5 lines of code. Let's understand each one by one.","`from flask import Flask` - you've seen plenty of lines like this. We're importing a specific class we want (`Flask`) from a package (`flask`). The `Flask` class will allow us to instantiate our own Flask applications!

`app = Flask(__name__)` - instantiate our own Flask application! It really is just this, `__name__` is a bit of Python magic to know the name of the module the execution is occurring in (and it's actually optional, though nice to tell it to Flask). Also note that this is in global scope, so your linter may complain (you can use the all-capitalized variable name `APP` instead to reflect that it's global), but it is valid code.

`@app.route(""/"")` - this is a decorator, which is actually a function that takes a function, augments it, and returns it. That may sound scary, but all it's doing is what it says - routing requests to the base `/` route (the host of the application, without any other path) to be served by this function.

`def hello():` - defining the function to be decorated, which will be invoked by requests to `/`. The name is actually fairly arbitrary, as far as Flask is concerned - but do try to pick good names for your benefit. This is *somewhat* like *views* in other frameworks (e.g. Django), though a good bit lighter and simpler.

`return ""Hello World!""` - the response from our function. It means that requests to `/` will receive a response `""Hello World!""` - Flask responses can be fancy templates (HTML/CSS and JS), but they can also just be strings, and the latter can be pretty useful for fast developing and prototyping.","Make a new file `hello.py` with the contents of the above basic ""Hello World!"" Flask web application. Then, get to a terminal and try to run it:

```
$ pip install Flask
$ FLASK_APP=hello.py flask run
 * Running on http://localhost:5000/
```


This assumes you have `pip` ready to go - which you should! You'll only have to install `Flask` once (globally or per environment), and to run an application you specify what it is with an environment variable (`FLASK_APP=hello.py`) and then just `flask run` - and you can do it all in one line!

Once you get it running and see output as above, try to open the URL it gives in your browser. You should see ""Hello World!"" in all its Python Flask glory.",NUXLxvoFJmw,http://youtube.com/watch?v=NUXLxvoFJmw,https://www.youtube.com/embed/NUXLxvoFJmw,,"Pipenv documentation,Welcome to Flask",flask-Migrate,,Web Application Development with Flask,,Productization and Cloud,DS - Data Engineering,,1,1,1,3
Understand and apply the MapReduce model for distributed processing of data,,,,,,,,,,,,,,,,,,0,,,0
Set up and run a small local Spark cluster,,,,,,,,,,,,,,,,,,0,,,0
Connect to a larger remote (“cloud”) Spark cluster and run jobs,,,,,,,,,,,,,,,,,,0,,,0
"Understand the strengths and limitations of relational versus non-relational databases, and be able to make recommendations of which approach to use in a given situation",,,,,,,,,,,,,,,,,,0,,,0
effectively use Django's MVC-equivalent pattern,,,,,,,,,,,,,Model-View-Controller,,Python/Django II/Career Development,Computer Science Annex,,0,,,0
effectively use Django's ORM functionality,,,,,,,,,,,,,Object-Relational Mapping & Relational Databases,,,,,0,,,0
"understand and explain what Auto Layout is, and the problems it solves",,"For this objective, explain Auto Layout conceptually without getting into the details of the API. The goal is for students to understand that Auto Layout:

- Allows you to design interfaces that scale to different sizes and orientations
- Scales from simple scenarios up to very complex UIs
- Defines layouts in terms of the relationships between views
- Requires every view to have a specified position, and size.","Early on, there was only one kind of iOS device: the iPhone. And the iPhone only came in one size, with a 3.5 inch screen at a resolution of 320 x 480. At that time, designing your app's layout was simple. You knew exactly what size it would be when running, and could put views exactly where you wanted them without worrying about adjusting for other screen sizes.

Over time, Apple has added more and more iOS device sizes, starting with the iPad in 2010, and continuing with 5.5"" iPhones, multiple sizes of iPads, and more. Beyond different device sizes, on the iPad, apps can run side-by-side with each taking up only a portion of the screen. 

All of this means that today, it's vitally important for developers to create user interfaces that scale and adjust to look good at any size.

Auto Layout is the core iOS technology you use to layout your views, and ensure that your layout scales to different sizes. Using Auto Layout, you describe the layout of your views using _constraints_. Constraints define the relationships between views on screen, as well as providing for fixed constraints for size.

Constraints mean that you can make it so that two views are always the same size as each other, with a fixed spacing, even as they scale to fit narrow and wide screens. Constraints mean that you can make a view have fixed margins but resize to fill screens both large and small.

Constraints can even describe relatively complex relationships between objects. For example, it is entirely possible to use constraints to make one view be exactly half as high and twice as wide as another. Or to be offset from the center of the screen by 100 points. Constraints can be updated dynamically at runtime to adjust layouts, and can even be animated to make views move.

In this lesson, you'll learn the basics of auto layout, how you can use constraints to implement common layouts, and how you can use Stack Views to simplify constraint-based layout.",,,gTC2NSz_e2w,http://youtube.com/watch?v=gTC2NSz_e2w,https://www.youtube.com/embed/gTC2NSz_e2w,,,,,Auto Layout,,iOS Fundamentals I,iOS Development Core,,0,,1,1
explain what a Relational Database is and it's core components.,"Databases are everywhere. They drive all businesses and our own lives. The contact list in your mobile device, the appointments on your calendar, be it a pen and paper calendar or a digital one in your computer or other electronic devices. That's write a database can be analog, it doesn't have to be digital.

In this section we'll learn what databases are with special attention to electronic databases.",Students should have SQLite Studio installed. ,"A database is **a collection of data organized for easy retrieval and manipulation**. Of course we will concentrate on digital databases, those that run on computers or other electronic devices.

Digital databases have been around since the 1960s. One kind, Relational Databases, is the oldest and most common type of database in use today.

To manage digital databases we use specialized software called **D**ata**B**ase **M**anagement **S**ystems (DBMS). This systems tipically run on servers and are managed by **D**ata**B**ase **A**dministrators (DBAs).

##### Relational Databases

There are several types of Database Management Systems, but by far the most widely used is the Relational DataBase Management Systems or RDBMS and that is what we'll be working with during the week.

In relational databases, the data is stored in tabular format grouped into rows and columns similar to spreadsheets. That collection of **rows** is called a **table**. Each row represent a single record in the table and is made up of one or more **columns**.

These kind of databases are called relational due to the fact that a _relation_ is a mathematical idea that is equivalent to a table. So relational databases are databases that store their data in tables.

The structure of databases varies from vendor to vendor. The most common objects
found across all Relational Database are:

- tables.
- indexes.
- views.
- store procedures and functions.
- triggers.

##### Tables

- Tables organize data in rows and columns.
- Each row on a table represents one distinct record.
- Each column represents a field or attribute that is common to all records.
- Fields should have a descriptive name and a data type appropriate for the attribute it represents.
- Tables normally have more rows than columns
- Tables have Primary Keys that uniquely identify each row.
- The relationships with other tables are represented by Foreign Keys.

##### Indexes

- are a way to speed up data searching.
- we can index on one or multiple fields.

##### Views

- are defined by a query that filters table data.
- can be queried like a table.
- does not store any data.
- can combine data from two or more tables.

##### Stored Procedures and Functions

- uses SQL to perform a series of operations.
- has a unique name and can be called like a function.
- used to perform data intensive operations and return only the result to clients.
- stored in the database.

##### Triggers

- special type of store procedure.
- executes automatically in response to events like inserting/updating/deleting data.","Follow along as we use SQLite Studio to look at tables, views and indexes.",Use the internet to research two other types of databases (non-relational) and write a short paragraph for each describing how they are different from relational databases. Send the response to your PM on slack.,W6YG0zDfKB8,http://youtube.com/watch?v=W6YG0zDfKB8,https://www.youtube.com/embed/W6YG0zDfKB8,,Overview of SQL,SQL Tutorial,"- what do we mean by _relational_ when referring to databases?
- what do we mean by _relational_ when referring to databases?
- where do relational databases store the data, in views, in tables, other?
- how can we make searching faster?",Introduction to Relational Databases and SQL,Active,Adding Data Persistence to Web APIs,Full Stack Web Development Core,,1,1,1,3
 explain what SQL is and it's advantages,"Structured Query Language is the standard language used to manage databases and the data within them. It is the de facto way to interact with DBMS.

Nearly all, if not all, RDBMS will support SQL, but beware that most RDBMS vendors add extra features not present in the standard. 

We will cover parts of the SQL standard that should be the same across all vendors.",,"SQL is a standard, that means that most RDBMS will support a set of core commands. Learning the standard is a great start as the knowledge will transfer between database products.

The syntax for SQL is English-like and requires a lot less symbols than other traditional languages like C, Java or JavaScript. It is declarative and very concise, which means, there is a lot less to learn in order to use it effectively.

When learning SQL it is helpful to understand that each command is designed for a different purpose. If we classify the commands by purpuse we'll end up with the follwoing sub-categories of SQL:

- **Data Definition Language (DDL)**: used to modify database objects. Some examples are: `CREATE TABLE`, `ALTER TABLE` and `DROP TABLE`.
- **Data Manipulation Language (DML)**: used to manipulate the data stored in the database. Some examples are: `INSERT`, `UPDATE` and `DELETE`.
- **Data Query Language (DQL)**: used to ask questions about the data stored in the database. The most commonly used SQL command by far is `SELECT`, and it falls in this category.
- **Data Control Language (DCL)**: used to manage database security and user's access to data. This falls into the realm of Database Administrators. Some examples are: `GRANT` and `REVOKE.
- **Transaction Control Commands**: used for managing groups of statements that must execute as a unit or not execute at all. Examples are `COMMIT` and `ROLLBACK`.

As a developer, you'll need to get familiar with DDL and become proficient using DML an DQL.","Follow along as we write basic SQL Queries against a prepopulated database using [this online tool](https://www.w3schools.com/Sql/tryit.asp?filename=trysql_select_top).

We'll start by using the `SELECT` statement. The `SELECT` statment is used to find information and it looks like this:

```sql
select <selection> from <table name>;
```

To see a list of of rows in the customers table we can type:
```sql
SELECT * FROM Customers;
```
Using the `*` for the _selection_ will return all the fields. To pick the fields included for each row, list them separated by comma, like so:

```sql
select Country, CustomerName, ContactName from Customers;
```
We'll learn more about using `SELECT` statements in another section.","Using [this online tool](https://www.w3schools.com/Sql/tryit.asp?filename=trysql_select_top) write the follwoing queries:

- get a list of all records in the suppliers table.
- get a list of all customers that live in Germany.
- find all the orders for the customer wit the ID 90.
- get the list of products sorted ascending by the product name.",4EVQmLD64aU,http://youtube.com/watch?v=4EVQmLD64aU,https://www.youtube.com/embed/4EVQmLD64aU,,,,"- is SQL a relational database?
- what SQL command is used to find find records?
- what SQL command is used to add records to a database?
- what SQL clause is used to filter the results of a query?",Introduction to Relational Databases and SQL,Active,Adding Data Persistence to Web APIs,Full Stack Web Development Core,,1,1,1,3
use the `componentDidMount` function to set a component's state post render,"Understanding the timing of `componentDidMount` and utilizing that timing to ensure that your component has the state on it that you need when you need it, is pivotal in designing a proper functioning React application. Today we're going to learn all about what `componentDidMount` is, when it gets called, and what we commonly do within it.",,"The `componentDidMount` method is a part of the `mounting` phase in the React Lifecycle. This method gets called as soon as the render method is called the first time, and it's kind of like this:

 _our component has mounted, we have the bare bones minimum we need to put something on the screen... now what?_

Inside of `componentDidMount` we can actually call `setState` which will force a re-render of our component. This means that any asynchronous actions should be performed inside of our `componentDidMount` function, especially when it comes to **fetching** data via HTTP. This is the de-facto purpose for using `componentDidMount` within a component because of its position within the component lifecycle. 

**This method is guaranteed to be called only once in the whole lifecycle , immediately after a component is mounted.**

Until we know more about `async AJAX` calls, we'll use `componentDidMount` to simply set up some state data living in a separate file by pulling the data in and setting it on state. This is what we'll need to do in order to understand the usage of this Component method. This is also something you're going to have to do for your afternoon `Insta-Clone` assignment today.
","Lets now put some of our knowledge together and build a react component that consumes some data from a separate resource. 

To follow along, go ahead and click on [this link](https://codesandbox.io/s/xlx1714w8w){:target=""_blank""} that will take you to a `codesandbox`.

Note that our `index.js` file looks a lot like this:

```js
import React, { Component } from ""react"";
import { render } from ""react-dom"";
import CitiesList from ""./CitiesList"";

class App extends Component {
  constructor() {
    super();
    this.state = {
      cities: []
    };
  }

  render() {
    return <CitiesList />;
  }
}

render(<App />, document.getElementById(""root""));
```

We are simply importing in a component called CitiesList and returning it. CitiesList is a pure `functional Component` who's only responsibility is to render some props that are being passed down to it, to the screen. We have two very different styles of components here. The problem is that CitiesList wants to render something out, in fact, right now if you look at the console, you'll see that 'props' is an empty object. Our goal is to try and fix that. 

Take a peek inside of the `cities.js` file and notice what we're exporting. A global object with an property `data` as an array of cities. Lets import that into our `index.js` file and utilize the data.

```js
import cities from './cities.js';
```

Ok, now if we `console.log` our cities you'll see we have access to them. Lets set this data on state and then pass that data down as props to our `CitiesList` component, we'll do this inside of `componentDidMount`

```js
componentDidMount() {
  this.setState({ cities: cities.data });
}
```","Use this function inside of a `componentDidMount` call in an app with a state object set up. It will fetch you a list of Dogs you can see their beautiful images.

```js
const getDogs = () => {
    fetch('https://dog.ceo/api/breed/lab/images')
      .then(res => res.json())
      .then(dogs => this.setState({dogs: dogs.message}))
      .catch(err => console.log('noooo'));
};
```

Once the dogs are on state. Build out a list of `<img>` tags that display each doggo.

[If you get stuck this is what I'm going for](https://codesandbox.io/s/x96vm3vykq){:target=""_blank""}",t985N_qPhEU,http://youtube.com/watch?v=t985N_qPhEU,https://www.youtube.com/embed/t985N_qPhEU,,,,,The React Lifecycle,,Intermediate React,Full Stack Web Development Core,,1,1,1,3
properly explain what the `constructor` and `render` methods do and what their place is in the React Component Lifecycle,"`render()` is the life blood of every react class component. We have to use it when building our UI. You can think of our `render` function as the 'thing that tells react what will be mounted to the screen'. Learning about how this function works, and when it works, will help us all understand more about the React ecosystem and components in general.",,"### The Constructor Function

You already know all about the `constructor` function as it pertains to `classes` in JavaScript. It's not much different in React. But think of the constructor's purpose in React as one that serves the component up with the initial state data that it needs to have during initial render. Any props that the component receives that also need to be set up on state, can be done through the constructor function as well. We also used to bind all of our event handlers to our component via the constructor, now we don't have to because of some special `ESNext` syntax that allows us to use arrow functions on our `class methods`. The following snippet is an example of this.

```js
eventHandler = () => this.setState({ foo: 'bar' });
```

We will have ample time to practice setting up our application with some state data via the constructor so for now just soak in these examples. Lets say we had some data from an extraneous file somewhere living within our application. And we wanted our component to render a list of that data out to the DOM. We would need to import that data as an array, ( we don't care about the shape, or what type of data just that it lives on an array ) and use the constructor to set it up on state.

```js
import React from 'react';
import { data } from './extraneousSource.js';

class MyComponent extends React.Component {
  constructor() { // if I wanted to receive some props here I could pass them in through the constructor! constructor(props)...
    super(); // if i receive props through the constructor I will need to pass them back through super(props);
    this.state = { 
       arbitraryStateData: data,
    }
  }
}
```

This is what the constructor should be used for when in the `Mounting Phase` of our component's lifecycle. Now that our data is set up on state, we can access it during our render portion of the mounting phase. 

**Conclusion**: The constructor function on a React Class Component's purpose is to serve up initial state data for when the time comes to mount up your DOM elements. 

### The Render Method

`render()` is one of the react lifecycle methods that is used to essentially tell react, `when this method gets called it should return some piece of DOM`. The React `virtual DOM` then knows what to do to handle the steps to mount those DOM pieces.

**This method is actually required for a class component without it, your component won't work** 

`render` should also be a pure function, meaning it returns the same thing each time it is called. It's concern is to look at `this.props` and `this.state` and return some sort of DOM element, a `boolean`, an `array of DOM elements` and a couple of other things that you may want to reference or look into later. 

The key principle is that, the function is there to return what your component will _render_ to the screen. Many people gloss over the `render` method and don't think of it as a lifecycle method because it is required when using building a component that extends the react `Component`, however, it IS a lifecycle method and is that is what is important here. 

Another key item to remember about `render` is that it is called not only in the `Mounting Phase` of the component lifecycle but also during the `Updating Phase`. This what is unique about the `render` method, it exists across multiple phases. 

Now that we have our state data set up for us above, we can use that state data to give a list of elements to React and let it do it's `thing`. Inside the render method of our component lets return a list of items that we will generate from the `arbitraryStateData` property found on our `state` object.

```js
render () {
  return (
    <div>
        // map returns an array remember? So lets give react an array of JSX elements and let it perform it's magic. For this example we'll assume this list is a string.
        {this.state.arbitraryStateData.map(data => <div>{data}</div>)}
    </div>
  );
}
```

One last thing to note is, that any changes that happen through `setState` will invoke a call to our `render` method as well. There will be more on this to come, but it's important to remember that `render` is called during mounting, and will be reinvoked if anything changes in our state object. You can think of the two `the state object and render` as bound with one another. The state object is like the bigger brother to the `render` function, it tells the `render` function what to do, and the render function obeys. 

**Conclusion**: The render method is how we tell react what data we want to turn into DOM elements. It is necessary for every class component we create because it is what is needed in order to return `<JSX/>` elements. It also is involved in the `Mounting Phase` and the `Updating Phase` of our component's lifecycle. 

So what we have achieved here is nothing new to us. We already knew how to do all of this. But what I want you to get out of this is the ability to think about these methods as the mounting methods in our Component LifeCycle.","Lets build out some friends together using [this code sandbox link](https://codesandbox.io/s/5v3pql3y8x){:target=""_blank""}

Once there you should see a page that renders out a `<h1> and <p>` tags. You should also notice a `people.js` file that contains an array of objects with this shape.

```js
{
  ""id"": 1,
  ""first_name"": ""Suzi"",
  ""last_name"": ""Claiden"",
  ""email"": ""sclaiden0@arizona.edu"",
  ""occupation"": ""Biostatistician II"",
  ""friends"": [
      {
          ""firstName"": ""Gabe"",
          ""lastName"": ""Lemery""
      }
  ]
}
```

This will be the data that our application consumes. And we will talk about how we get this data from one place to another while using the knowledge of the React LifeCycle Methods. 

Lets start at the beginning with our constructor method. First lets define what our state data should be called. This is an object of people data, so lets just call them persons on our state object so that we can tell the two apart. 

Let's import the people and set them up on our constructor's state object.

```js
import { people } from ""./people"";

...
constructor() {
  super();
  this.state = {
    persons: people
  };
}
...
```

Now we are ready to loop over that friends array and generate a DOM element for each item in the array. Remember the way to do this is through the ","Now you're going to extend our Friends App that we built together [link](){:target=""_blank""} by completing the following tasks.

* Notice that each person object has a an array of friends assigned to it. 
* The goal for the stretch problem will be to have a `FriendsList` drop down built out that hides the friends for each person until it is clicked on.
* Once a user clicks on your FriendsList card, display that user's friends.",nFEorPNRNd8,http://youtube.com/watch?v=nFEorPNRNd8,https://www.youtube.com/embed/nFEorPNRNd8,,,,,The React Lifecycle,,Intermediate React,Full Stack Web Development Core,,1,1,1,3
build a percent based layout,Fully responsive websites are made up of responsive units.  One of the most powerful units we have available for layout is `%`.  Being able to manipulate layout based on the % of a parent container allows web developers to code for almost any device.,,,,,,,,,Percent based layout techniques,,,Responsive Web II,,Responsive & Interactive Web Dev,UX Design Core,,0,,,0
describe why responsive design impacts accessibility,The choices we make as web developers directly impact our user's experience everyday on the internet.  We need to know why it is important we make the best decisions we can.,,,,,hPLesMhuVR8,http://youtube.com/watch?v=hPLesMhuVR8,https://www.youtube.com/embed/hPLesMhuVR8,,,,,"Responsive Design II,Responsive Web II",,"Advanced CSS, Responsive & Interactive Web Dev","Full Stack Web Development Core, UX Design Core",,0,,1,1
query data from a single table,A **query** is a SQL statement used to retrieve data from a database. The command used to write queries is **SELECT** and it is one of the most used SQL commands.,,"The basic syntax for a SELECT statement is this:

```sql
select <selection> from <table name>;
```

To see all the fields on a table we ca use a `*` as the `selection`.

```sql
select * from employees;
```

The preceding statement would show all the records and all the columns for each record for the table employees.

To pick the fields we want to see we list them separated by commas.

```sql
select first_name, last_name, salary from employees;
```

The return of that statement would be all the records, but only the listed fields will be included in the result.

We can extend the capabilities of the SELECT command using `clauses` for things like filtering, sorting, pagination and more. In the next section we'll use some of them.

This section covers performing queries on a single table, but it is possible to query multiple tables in a single query. That will be covered in another section.","##### Ordering results using the ORDER BY clause.

Query results will be shown in the same order the data was inserted. To control how the data is sorted we can use the ORDER BY clause, let's see an example.

```sql
-- sorts the results first by salary in descending order, then by last name in ascending order
select * from employees order by salary desc, last_name;
```

We can pass a list of field names to `order by` and optionally choose `asc` or `desc` for the sort direction. The default is `asc`, so it doesn't need to be specified.

Some SQL engines also support using field abbreviations when sorting.

```sql
select name, salary, department from employees order by 3, 2 desc;
```

In this case the results will be sorted by department in ascending order first and then by salary in descending order. The numbers refer to the position of the fields in the _selection_ portion of the query, so 1 would be _name_, 2 would be _salaary_ and so on.

##### Filtering results using the WHERE clause.

We have seen how to pick the fields we want to see in the results of a query, but we can also filter the rows that get returned using the WHERE clause in combination with _operators_.

Most queries we write will include a WHERE clause because most database tables grow int thousands or even millions or rows and returning all rows from queries is not feasable.

Let's see an esample:

```sql
select * from employees where salary > 50000 order by last_name;
```

We can see that the WHERE clause comes always after the FROM clause and that the ORDER By clause goes last.

There are many _operators_ that can be used to build the conditions used by the WHERE clause. The operators will be different depending on the type of the fields and some database vendors might provide extra operators that are not part of the standard. Make sure to read the documentation for the DBMS you'll be using to take advantage of that.

It is possible to combine conditions using the AND operator.

```sql
select * from employees
where salary > 50000 and country = 'USA';
```

There is also an OR operator.

```sql
select * from employees
where salary > 50000 OR country = 'USA';
```

These operators can be combined and grouped with parenthesis to add complex selection logic. They behave similar to what you're used to in programming languages.

You can read more about SQLite operators from [this website](https://www.w3resource.com/sqlite/operators.php)

##### Obtaining the Number of Records

We can get the number of records in a table using the COUNT function like this:

```sql
select count(*) from employees;
```

Passing `*` as the argument means count the whole record. Passing a field name as the argument would only count records where that field is not NULL (meaning it has a value).

##### Using DISTINCT to Select Unique Values

In some instances we need to know things like ""from which cities do we have employees?"". In cases like this it is useful to have a way to show each city only once on the results. We can use DISTINCT for this.

```sql
select distinct city from employees;
```

That would show each only once regardless of how many records have that city.

We can combine DISTINCT and COUNT.

```sql
select count(distinct city) from employees;
```

And the result would be the number of unique cities contained in the employees table.

##### Adding Alisases for Readability

We can change the field names shown in results using _aliases_. Let's see an example.

```sql
select first_name Name, salary as Compensation from employees;
```

You can see there are different ways to do this, either separated by a space or using the keyword `AS`. The result is the same, we'll see `Name` and `Compensation` in the results instead of the original field names. This does not modify the field names in the table, only for this query results.

##### Using Wildcards

When filtering on alphanumeric fields, it is often usefil to be able to do partial matches. We can use the LIKE operator for such cases. We can use two wildcards characters with the LIKE operator:

- the `%` symbol is used to match multiple characters, a single character or no characters at all.
- the `_` (underscore) symbol is used to match exactly one character.

Let's put it to use.

```sql
select * from employees where name like '%jo_n%';
```

The above statment will return employees with names that include the letters `jo` preceded by any number of characters and followed by a single character that is preceded by the letter n and any number of characters after that. The names _john_, _johnny_, _johnatahn_ would all match.

##### Excluding Records with NOT

We can prepend the NOT operator to invert the effect of a filter. So the following query:

```sql
select * from employees where name NOT like '%jo_n%';
```

would exclude all the records that match the LIKE condition.

The NOT operator can be used in combination with any operator.","Write queries for the following requirements:
- which customers have orders.
- which customers have no orders.
- list the products but only show the product id and the product name.
- list the employees sorted by the last name in ascending order.",aU8dT5MLbWY,http://youtube.com/watch?v=aU8dT5MLbWY,https://www.youtube.com/embed/aU8dT5MLbWY,,,SQLite Operators,"- what SQL clause is used to sort the results of a query?
- how can we pick the fields we want to see in the query results?
- what operator can we use to filter the results using a partial string?
- what does the `%` symbol means when using the `LIKE` operator.",Introduction to Relational Databases and SQL,Active,Adding Data Persistence to Web APIs,Full Stack Web Development Core,,1,1,1,3
query data from multiple tables,"Now that we understand the basics of querying data from a single table, let's move on to selecting data from multiple tables using JOIN operations.",Introduce joins using both SQL and Knex.,"We can use a `JOIN` to query data from multiple tables using a single SELECT statement.

There are different types of joins, some are listed below:

- inner joins.
- outer joins.
- left joins.
- right joins.
- cross joins.
- non equality joins.
- self joins.

The requirement to be able to use joins is that the tables have fields in them that have the same information. For example a _departments_ table can have an _id_ field and an employee can have a _department_id_ field that stores a value that exists in the _id_ column of the _departments_ table. We can use those fields to join both tables like so:

```sql
select * from employees
join departments on employees.department_id = departments.id
```

This query will return the data from both tables for every instance where the ON condition is true. If there are employees with no value for department*id or where the value stored in the field does not correspond to an existing id in the _departments_ table, then that record will NOT be returned. In a similar fashion, any records from the _departments_ table that don't have an employee associated to it (the _id_ does not show as the value of department_id for an employee) will also be omitted from the results.

We can shorten the condition by givig the table names an alias. This is a common practice. The same example using aliases, picking which fields to return and sorting the results:

```sql
select d.id, d.name, e.id, e.first_name, e.last_name, e.salary
from employees as e
join departments as d
  on e.department_id = d.id
order by d.name, e.last_name
```

Notice that we can take advantage of white space and indentation to make queries more readable.

**There are several ways of writing joins, but the one shown here should work on all database management systems and avoid some pitfals, so we recommend it.**",A good explanation of how the different types of joins can be seen [in this article from w3resource.com](https://www.w3resource.com/sql/joins/sql-joins.php).,"Use [this onlne tool](https://www.w3schools.com/Sql/tryit.asp?filename=trysql_select_top) to write the following queries:

- list the products including their category name.
- list the products including the supplier name.
- list the products including both the category name and supplier name.",,,,,"SQL Joins Tutorial,Visual Explanation of Joins",,"- mention three types of joins
- can we join more than two tables in the same query
- how can we _alias_ the table name?","""Querying Data, Migrations and Seeding""",Active,Adding Data Persistence to Web APIs,Full Stack Web Development Core,,1,1,,2
can query to find out if user has previously allowed or denied permission,,"If possible, demonstrate an app that requests permission, fails to receive it, and gracefully handles that.","In order to avoid apps harassing users until they give in and allow the app to access something sensitive, the various permission authorization APIs will only actually prompt the user **the first time** they're called after installing an app. If the user denies the first request, subsequent authorization requests will immediately fail **without** prompting the user. From your code's perspective, there's no difference in behavior, as you have no way of knowing if the user actually saw a prompt or not.

Therefore, it's important to gracefully handle cases where authorization fails. Users can manually grant (or revoke!) permission for your app after the initial prompt in the iOS settings app. The exact spot in settings where permission is controlled depends on the capability or data you're trying to access.

You should provide your users with helpful, descriptive messaging explaining why your app needs access, and if authorization fails, you should tell them exactly how to open the settings app and grant access manually.","In your photos app, if authorization fails, fill out a label on screen with instructions for opening the settings app and manually granting permission.","Find the spot in settings where the user can manually grant permission for microphone, location data, and contacts.",,,,,,,,User Permission Model and Local Notifications,,,,,0,1,,1
schedule local notifications,,"Explain what local notifications can be used for. Use the documentation to explain the various trigger types (time interval, location, calendar date).","iOS has support for notifying the user of something even when your app isn't running. This is how you can receive messages on snapchat, an alert that a timer went off, or a reminder to buy bread. Notifications can be shown on the lock screen, as a banner when the iOS device is in use, and can be received and handled silently by apps.

There are two major types of notifications:

- Push notifications
- Local notifications

Push notifications are initiated by a server on the internet. They have the advantage of allowing you to send data from the internet to the user's device even when your app isn't running. In order for you to use them in your app, you have to have a backend running on a server somewhere.  Additionally, they don't work if the iOS device is in airplane mode, or otherwise doesn't have an internet connection.

Local notifications can be scheduled and sent by an app on the device without the use of a server or the internet at all. They have the advantage of working even with no internet connection, and being much easier to set up, since they don't require a backend server. Just like push notifications, they can be delivered even when your app isn't running. However, they can only be used to display data that is available **when they're scheduled**. They're great for things like reminders and timers, but won't work for messages or updates that come from the internet.

In this lesson, you'll learn how to schedule **local notifications**.","Create an app that has a single button. It should fire a local notification 1 minute after the button is pressed. Test it by tapping the button, quitting the app, and optionally locking the device, then waiting for the notification to show.","Make it so your app sends 15 notifications, one every 5 seconds. Tell your friend to download it and see how annoyed they get!",,,,,Scheduling a Notification Locally from Your App,,,User Permission Model and Local Notifications,,,,,0,1,,1
handle local notifications when they fire,,"Go through the documentation explaining what can be done in response to a notification firing. Touch on actionable notifications, although we won't be covering them today.","When your app is not running and a local notification happens, the user can tap on the notification to open your app and handle the notification.

When this occurs, your application delegate's `userNotificationCenter(_ center:, willPresent notification:, withCompletionHandler completionHandler: @escaping)` method if it's implemented. You should use this method to trigger any updates to your application's content or user interface. When this method is called, you also have a chance to specify whether and how you want the notification shown to the user.","In the notification app you built before, make it so that if the app is running and a notification is received, an alert is shown.","Modify the app so that if a notification is received while the app is running, the notification is **not** displayed, and text is logged to the console instead.",,,,,,,,User Permission Model and Local Notifications,,,,,0,1,,1
use an unwind segue to return to a previous view controller,,,,,,,,,,,,,"""Alert Controllers, Picker Views, and Unwind Segues""",,iOS Fundamentals II,iOS Development Core,,0,,,0
use a UIPickerView to allow user to select from a list of items,,,,,,,,,,,,,"""Alert Controllers, Picker Views, and Unwind Segues""",,iOS Fundamentals II,iOS Development Core,,0,,,0
create and present a UIAlertController,,,There will be numerous times when something happens in the code and the user needs to be notified. Perhaps a file or piece of media they've asked for has completed its download or it's time to switch to a different exercise. Providing an alert message is one way to let the user know about a change of state in the application. The alert styles provided in the iOS SDK both come from the class `UIAlertController`. Let's take a look at both styles and contrast their different strengths with various kinds of messages.,"```swift
// 1
let alert = UIAlertController(title: ""Download Complete"", message: ""Your movie is ready to watch!"", preferredStyle: .alert)
// 2
let watchAction = UIAlertAction(title: ""Watch Iron Man"", style: .default) { action in
    print(""Movie starting now..."")
    // invoke a video player to play movie
}
let deferAction = UIAlertAction(title: ""Watch Later"", style: .cancel, handler: nil)
let deleteAction = UIAlertAction(title: ""Delete Iron Man"", style: .destructive) { action in
    print(""Deleting movie."")
    // Remove downloaded file from filesystem
}
// 3
alert.addAction(watchAction)
alert.addAction(deferAction)
alert.addAction(deleteAction)
// 4
alert.preferredAction = watchAction
// 5
present(alert, animated: true, completion: nil)
```

1. Alert controllers are initialized with three arguments: `title`, `message`, and `preferredStyle`. The first two are both strings and designate what will appear at the top and in the main body sections of the alert view. The last argument specifies the style of the alert's presentation:
    * `.alert` - a modal window that appears over the presenting view
    * `.actionSheet` - a modal view that slides up from the bottom of the screen and presents a list of options

2. With any given alert controller, at least one action is required to provide the user the ability to choose what to do next, even if it's only to dismiss the alert view itself. `UIAlertAction` is the class that provides this functionality. Think of them as special buttons that work with the `UIAlertController`. These actions take three arguments as well: `title`, `style`, and a closure to run when/if the action is selected by the user.
    * `title`: the string displayed on the button
    * `style`: `.default`, `.destructive`, or `.cancel`; affects the way the button looks (see example screenshot below)
3. After an action object is created, it must be added to an alert controller.
4. The `preferredAction` property is optional and can be set to a particular action to give it emphasis in the UI (right now it bolds the text).
5. Lastly, the alert controller must be added to the view hierachy. Assuming the above code is in a method of a view controller, the `present` method can be called to show it on top of the current view.

The above code will produce the following view:

![UIAlertController in and alert style showing three actions](https://raw.githubusercontent.com/jcgohlke/lambda-resources/master/airtable-images/ios-fundamentals-ii/alert-controllers-picker-views-and-unwind-segues/alert-view.png)

Changing a single argument above, the preferred style to `.actionSheet` will produce this view instead:

![UIAlertController in and actionSheet style showing three actions](https://raw.githubusercontent.com/jcgohlke/lambda-resources/master/airtable-images/ios-fundamentals-ii/alert-controllers-picker-views-and-unwind-segues/action-sheet.png)",Create an alert controller of your own and play around with the various controller and action styles to see how it affects the presentation.,,,,,,,,"""Alert Controllers, Picker Views, and Unwind Segues""",,iOS Fundamentals II,iOS Development Core,,0,1,,1
use a Timer to do something at a specified time in the future,,,"The `Timer` class provides a way to either instruct the computer to delay an action for a specified amount of time, or to fire an action at a specified interval. Imagine something like the user asking to be alerted by your app after 1 min, or perhaps an app that provides prompts in an interval-based exercise routine. Both of these scenarios require code to be executed at a later time.

To illustrate this, let's write a small block of code to accomplish the first scenario described above. We want the code to alert our user after 1 minute.","```swift
let timer = Timer.scheduledTimer(withTimeInterval: 60.0, repeats: false) { timer in
    print(""Timer has ended."")
}
```

The above example uses the `scheduledTimer` class method to create a new instance of `Timer` and configures it to fire after 60 seconds. The `repeats` parameter is used to indicate whether this timer will fire on an interval or only once. Finally, we use _trailing closure syntax_ to send a closure argument with instructions that will be executed when the timer fires. Here we simply print `Timer has ended` to the console.

This block of code will be executed at runtime as follows:
1. The timer object is created and stored in the constant `timer`. The class method contains instructions to schedule it to run on the current run loop.
2. Once the time specified in the `withTimeInterval` parameter has elapsed, the closure block is executed.
3. The timer is either terminated if `repeats` is false, or waits the specified time and fires the closure block again. If `repeats` is true, the timer will continue to fire until you stop it.","There are a few other ways to instantiate a timer object, so you are encouraged to check out the official Apple documentation on the `Timer` class [here](https://developer.apple.com/documentation/foundation/timer).",,,,,,,,"""Alert Controllers, Picker Views, and Unwind Segues""",,iOS Fundamentals II,iOS Development Core,,0,1,,1
,,,,,,,,,,,,,,,,,,0,,,0
"insert, update and delete data using a relational database","Any system that uses a data needs a way to add, update and delete records. SQL provides the INSERT command to add data, the UPDATE command to modify existing data and the DELETE command to remove records from the database.",Demo data manipulation using SQL and Knex.,"### Insert Data

To add data to a database table we can use the `INSERT` SQL statement.

Given a _characters_ table with the following schema:

| field | type    |
| ----- | ------- |
| name  | text    |
| age   | integer |

The basic syntax for adding a new record is listed below.

```sql
insert into characters
values ('Frodo', 33);
```

When using this syntax the values listed will be added to the columns according to their order. In this query the value 'Frodo' will be assigned to the first field (name) and 33 will be assigned to the second field (age) of the record.

In cases where we have fields with values that are generated by the database, like auto-increment ids, it is necessary to use an alternative syntax known as _selective fields insert_. Let's revisit our table, but this time with a new `id` field that functions as the primary key and auto-increments.

| field | type    |
| ----- | ------- |
| id    | integer |
| name  | text    |
| age   | integer |

To insert a record into this table we would write the statement as follows:

```sql
insert into characters (name, age)
values ('Frodo', 33);
```

Using this syntax it is no longer necessary to specify the data according to the order of the fields on the table schema, but it is a good practice to do so.

Another thing to note is that for dates or string we must enclose the values in single quotes.

Any field that is not listed will be inserted with a `NULL` value, this means that if the omitted field is declared as `NOT NULL` in the schema the insert will fail.

##### Inserting Multiple Records

It is possible to insert multiple records using a single INSERT statement using the following syntax:

```sql
insert into characters (name, age)
values ('Bilbo', 111), ('Sam', 31), ('Pippin', 22);
```

Three new records will be added to the table.

##### Inserting Data from Another Table

We can use a combination of INSERT and SELECT to add data from one table into another. Let's see an example:

```sql
insert into characters
  select id, name, age from hobbits;
```

With this statement all records from the _hobbits_ table get added to the _characters_ table.

In the next section we'll add data creation capabilities to a Web API written using Node.js, Express and Knex.

### Updating Data

To update existing data in a record we can use the UPDATE command. The basic syntax for an UPDATE statement is:

```sql
update characters set
  name = 'Frodo Baggins',
  age = 34
where name = 'Frodo'
```

Note that the WHERE clause is not required, but you'll find that most updates (and deletes) will need one. **If no WHERE condition is provided all records in the table will be updated with the new values.**

That pretty much covers the basics of modifying data using SQL.

In the next section we'll add data modification capabilities to a Web API written using Node.js, Express and Knex.

### Deleting Data

To remove records from a table, we can use the DELETE command. We can specify a condition to choose which records should be deleted. **If no condition is specified, all records will be deleted**.

Below is an example of a DELETE statement.

```sql
delete from characters
where id = 3;
```

To delete all rows we simply remove the WHERE clause.

```sql
delete from characters; -- careful, this will nuke all records
```

It is recommended to first use a SELECT statement to verify that we are targeting the right records with our WHERE condition before executing a DELETE statement.","### Insert Data

Please code along as we implement a `POST /items` endpoint that uses `knex` to persist data to `SQLite`.

We will setup our Web API to use `SQLite3` as the database and the `knex` npm module to interact with the database.

Knex provides a thin abstraction over SQL. It provides a uniform interface we can use to interact with several relational database engines, including SQLite.

##### Install the Knex CLI Globally

We need to install the `Knex CLI` as we'll be using it to generate a configuration file.

Type `yarn global add knex` or `npm i -g knex` from a terminal window to install the `Knex CLI` globally on your system.

##### Add Knex and SQLite3 to the Project

We need to add local versions of the `SQLite` and `Knex` npm packages to our project.

We can add them both by typing `yarn add knex sqlite3` or `npm i knex sqlite3` from the root of our project.

The `sqlite3` module is a Node.js driver for SQLite. Knex will use the `sqlite3` driver to interact with the SQLite database.

##### Generate a Knex Configuration File

Now we can run `knex init` from the root of our project to generate a configuration file. The configuration file is called `knexfile.js` by default. We recommend keeping the default name and having it at the root of the application as that makes things easier later when we start using knex commands for things like migrations and seeding.

The default contents of the `knexfile.js` is listed below.

```json
// Update with your config settings.

module.exports = {

  development: {
    client: 'sqlite3',
    connection: {
      filename: './dev.sqlite3'
    }
  },

  staging: {
    client: 'postgresql',
    connection: {
      database: 'my_db',
      user:     'username',
      password: 'password'
    },
    pool: {
      min: 2,
      max: 10
    },
    migrations: {
      tableName: 'knex_migrations'
    }
  },

  production: {
    client: 'postgresql',
    connection: {
      database: 'my_db',
      user:     'username',
      password: 'password'
    },
    pool: {
      min: 2,
      max: 10
    },
    migrations: {
      tableName: 'knex_migrations'
    }
  }

};
```

The file _exports_ a configuration object with three properties: development, staging and production. The value of those properties are object that contain information that Knex uses to configured itself for a particular database.

##### Configure Knex to use SQLite3

We are using SQLite3 as our database. Let's remove the _staging_ and _production_ configurations as they are not needed in our case. We'll also add an extra property needed for SQLite.

Our `knexfile.js` should now look like this:

```json
module.exports = {
  development: {
    client: 'sqlite3', // tells knex that we're using the SQLite3 driver we installed via npm
    connection: {
      filename: './db.sqlite3', // update this with the location of your database file
    },
    useNullAsDefault: true, // new configuration for SQLite
  },
};
```

##### Create the Database

Our Knex configuration points to a file called `db.sqlite3` located at the root of the application, use _DB Browser for SQLite_ to create the database file and add a table called _characters_ with the following schema:

| field | type    | notes                       |
| ----- | ------- | --------------------------- |
| id    | integer | Primary Key, Auto-Increment |
| name  | text    | NOT NULL                    |
| age   | integer |                             |

##### Add Knex to the Server

We'll write all our code together in one file to make it easy to understand how everything works together. Create an `index.js` file with a basic Express application and an empty `POST /characters` endpoint.

```js
const express = require('express');

const server = express();

server.use(express.json());

server.post('/characters', (req, res) => {
  // we'll add our database code here shortly
});

server.listen(8000, () => console.log('Running on port 8000'));
```

We need to import `knex` and use it to generate an instance of it configure to use our database. Add the following lines after the requiring Express.

```js
const knex = require('knex');

const db = knex({
  client: 'sqlite3',
  connection: {
    filename: './db.sqlite3',
  },
  useNullAsDefault: true,
});
```

We can use the `db` constant to interact with our database.

You may have noticed that we pass a configuration object as the first argument to `knex` in order to _tell_ it which _sql driver_ it should use and how to connect to it. You may also notice that the object we are passing is exactly the same as the one we configured as the `development` property of the `knexfile.js` configuration file.

Let's pull the configuration from the file instead of hard-coding it into our server. Make the following changes to `index.js`:

```js
const knex = require('knex');
const knexConfig = require('./knexfile');

const db = knex(knexConfig.development);
```

Now the configuration for knex is coming from our `knexfile.js` and we're ready to start using Knext to interact with our database.

##### Complete the POST endpoint

We can use the configured knex instance saved in the `db` constant to complete our POST endpoint.

```js
server.post('/characters', (req, res) => {
  const character = req.body;

  db.insert(character)
    .into('characters')
    .then(ids => {
      res.status(201).json(ids);
    })
    .catch(err => {
      res.status(500).json(err);
    });
});
```

We're using the `.insert().into()` methods found in the knex instance to add our character to the characters table. After a successful insert, knex returns an array with one element: the id of the last record inserted. **Note that even when inserting several records at the same time only one id is returned**.

To insert multiple records, all we need to do is pass an array instead of an object to our `.insert()` method.

The complete code for `index.js` is provide below for reference.

```js
const express = require('express');
const knex = require('knex');

const knexConfig = require('./knexfile');
const db = knex(knexConfig.development);

const server = express();

server.use(express.json());

server.post('/characters', (req, res) => {
  const character = req.body;

  db.insert(character)
    .into('characters')
    .then(ids => {
      res.status(201).json(ids[0]); // responds with the id of the last record inserted
    })
    .catch(err => {
      res.status(500).json(err);
    });
});

server.listen(8000, () => console.log('Running on port 8000'));
```

**Knex provides multiple ways of writing most database interactions, we encourage you to read the documentation to pick the one that makes the most sense to you. We picked one that felt similar to how we use SQL to insert data.**

### Updating Data

Please code along as we implement a `PUT /characters` endpoint that uses `knex` to modify data stored in a `SQLite` database.

We can use the following code to implement update functionality.

```js
server.put('/characters/:id', (req, res) => {
  const changes = req.body;
  const { id } = req.params;

  db('characters')
    .where('id', '=', id) // or .where({ id: id })
    .update(changes)
    .then(count => {
      // count === number of records updated
      res.status(200).json(count);
    })
    .catch(err => {
      res.status(500).json(err);
    });
});
```

The code above is using `db('characters')` to get a point knex to the _characters_ table and then using `.where(condition)` we can pick the exact record we intend to update. After we have the reference to the record we want to update, we call `.update()` passing an object with the changes that need to be applied.

There is no need to pass all of the fields for the record, only the fields that need to change and Knex will leave all other fields unchanged. It will do the right thing.

The `.update()` method returns the number of records updated, in most cases this number will be one, but if the conditions on the `.where()` method return more than one record the number will be greater. If knex cannot find any records that match the search criteria then zero (`0`) will be returned.

We now have a way to update records in our Web API.

### Deleting Data

Please code along as we implement a `DELETE /items` endpoint that uses `knex` to remove data stored in a `SQLite` database.

We can use the `.del()` method to remove records. One possible implementation for a DELETE endpoint is shown below.

```js
server.delete('/characters/:id', (req, res) => {
  const { id } = req.params;

  db('characters')
    .where({ id }) // or .where(id, '=', id)
    .del()
    .then(count => {
      // count === number of records deleted
      res.status(200).json(count);
    })
    .catch(err => {
      res.status(500).json(err);
    });
});
```

**Calling `.del()` without first filtering the records will result on the removal of all the records in the table, be careful!**","
Write a query to insert data into a products table that has an id, name and price.

Write a query to insert data into an Employee table that has an id, name and salary.

Write a query to update the salary of the employee with id of 123 to be 78000.

Write a query to remove all customers that have the city of 'Los Angeles'.

Write a query to remove the product with id of 999.",4zbVDjRr_rc,http://youtube.com/watch?v=4zbVDjRr_rc,https://www.youtube.com/embed/4zbVDjRr_rc,,,,"- which SQL command is used to add data to a table?
- if we don't provide a list of fields when adding data, into which fields is the data added?
- which clause is used to provide the data to be added?

* which SQL command is used to modify data in a table?
* what does the `SET` clause of the update statement does?
* how can we modify more than one field in a single statement?

- which SQL command is used to remove records from a table?
- what happens if we don't provide a `WHERE` clause when removing records?",Inserting and Modifying Data,Active,Adding Data Persistence to Web APIs,Full Stack Web Development Core,,1,1,1,3
modify existing data inside a relational database.,Databases provide a way to update the data it contains. We can use SQL's UPDATE command to accomplish this.,Demo updating records using SQL and Knex.,"To update existing data in a record we can use the UPDATE command. The basic syntax for an UPDATE statement is:

```sql
update characters set
  name = 'Frodo Baggins',
  age = 34
where name = 'Frodo'
```

Note that the WHERE clause is not required, but you'll find that most updates (and deletes) will need one. **If no WHERE condition is provided all records in the table will be updated with the new values.**

That pretty much covers the basics of modifying data using SQL.

In the next section we'll add data modification capabilities to a Web API written using Node.js, Express and Knex.","Please code along as we implement a `PUT /characters` endpoint that uses `knex` to modify data stored in a `SQLite` database.

We can use the following code to implement update functionality.

```js
server.put('/characters/:id', (req, res) => {
  const changes = req.body;
  const { id } = req.params;

  db('characters')
    .where('id', '=', id) // or .where({ id: id })
    .update(changes)
    .then(count => {
      // count === number of records updated
      res.status(200).json(count);
    })
    .catch(err => {
      res.status(500).json(err);
    });
});
```

The code above is using `db('characters')` to get a point knex to the _characters_ table and then using `.where(condition)` we can pick the exact record we intend to update. After we have the reference to the record we want to update, we call `.update()` passing an object with the changes that need to be applied.

There is no need to pass all of the fields for the record, only the fields that need to change and Knex will leave all other fields unchanged. It will do the right thing.

The `.update()` method returns the number of records updated, in most cases this number will be one, but if the conditions on the `.where()` method return more than one record the number will be greater. If knex cannot find any records that match the search criteria then zero (`0`) will be returned.

We now have a way to update records in our Web API.",Write a query to update the salary of the employee with id of 123 to be 78000.,,,,,,,"- which SQL command is used to modify data in a table?
- what does the `SET` clause of the update statement does?
- how can we modify more than one field in a single statement?",,Active,,,,1,1,,2
delete data from a relational database,Most systems need to provide a way to remove records from the database. We can easily do this using SQL's DELETE command.,Demo deleting records using SQL and Knex.,"To remove records from a table, we can use the DELETE command. We can specify a condition to choose which records should be deleted. **If no condition is specified, all records will be deleted**.

Below is an example of a DELETE statement.

```sql
delete from characters
where id = 3;
```

To delete all rows we simply remove the WHERE clause.

```sql
delete from characters; -- careful, this will nuke all records
```

It is recommended to first use a SELECT statement to verify that we are targeting the right records with our WHERE condition before executing a DELETE statement.","Please code along as we implement a `DELETE /items` endpoint that uses `knex` to remove data stored in a `SQLite` database.

We can use the `.del()` method to remove records. One possible implementation for a DELETE endpoint is shown below.

```js
server.delete('/characters/:id', (req, res) => {
  const { id } = req.params;

  db('characters')
    .where({ id }) // or .where(id, '=', id)
    .del()
    .then(count => {
      // count === number of records deleted
      res.status(200).json(count);
    })
    .catch(err => {
      res.status(500).json(err);
    });
});
```

**Calling `.del()` without first filtering the records will result on the removal of all the records in the table, be careful!**","Write a query to remove all customers that have the city of 'Los Angeles'.

Write a query to remove the product with id of 999.",,,,,,,"- which SQL command is used to remove records from a table?
- what happens if we don't provide a `WHERE` clause when removing records?",,Active,,,,1,1,,2
understand and explain what a collection view is along with common scenarios for its use,"A _UICollectionView_ is similar to `UITableView`s in that they display a list of information. However, they can be much more powerful and customizable than table views. ",,"They aren't limited to only displaying a cell that spans the width of the view, and is displayed in a vertical list. Instead, we can make collection views scroll horizontally. Maybe we want the collection view cells to be square like in the Photos app. There are many possibilites with collection views, and there are a few things to note when using them though; Unlike `UITableViewCell`s, Apple doesn't provide a few pre-made styles of cells. This means we always have to subclass `UICollectionViewCell` in order to put the information to display onto the cell.",,,0e4GrLelZos,http://youtube.com/watch?v=0e4GrLelZos,https://www.youtube.com/embed/0e4GrLelZos,,WWDC 2012 205 - Introducing Collection Views,,,"UICollectionView and UserDefaults,Collection View Controller",,iOS Fundamentals II,iOS Development Core,,1,,1,2
implement UICollectionViewDataSource methods to populate a collection view from model data,"Similarly to `UITableView`s, `UICollectionView` has a data source delegate protocol called `UICollectionViewDataSource` that the collection view uses to obtain the information needed to set up its collection view cells.",,"At minimum you required to implement two methods from this the `numberOfItemsInSection` method, which is analogous to the `numberOfRowsInSection` method of `UITableViewDataSource`. This function works the exact same as its `UITableViewDataSource` counterpart. The difference between the two is that table views use the term ""row"" as table views are always laid out vertically in rows, while collection views use the term ""item"".

The other method is the `cellForItemAt`, which again is implemented in the same way the `cellForRowAt` method is implemented when using a table view. As collection view cells always are custom subclasses of `UICollectionViewCell`, you will always need to cast the cell as the appropriate subclass in order to access the cell's properties in this method.",,,,,,,,,,"UICollectionView and UserDefaults,Collection View Controller",,iOS Fundamentals II,iOS Development Core,,1,,,1
implement and customize basic layouts using UICollectionViewFlowLayout,"Collection view cells can be laid out in *very* complex ways, if desired. This is done by subclassing `UICollectionViewLayout`. Luckily for us, Apple has provided a subclass of one of these layout objects called _UICollectionViewFlowLayout_ that will arrange the cells in a grid format. ",,"Collection views actually have three main delegate protocols, as opposed to table views' two delegate protocols:  
- The `UICollectionViewDataSource` protocol which is concerned with giving information to the collection view to set up its cells.
- The `UICollectionViewDelegate` protocol which allows you to manage things like selections, highlighting, when a cell will be displayed, etc.
- The `UICollectionViewDelegateFlowLayout` which gives us access to methods that let us manipulate the layout of the collection view when using a `UICollectionViewFlowLayout` (which will be most of the time).

Using the `UICollectionViewDelegateFlowLayout` protocol methods, we can tell the flow layout how exactly we want the cells to look, and be arranged. For example, we can tell it how big the cells should be, the spacing in-between cells and lines of cells. We can even make the collection view scroll horizontally instead of vertically like a table view. Refer to the `UICollectionViewDelegateFlowLayout` protocol in the documentation for a full list of methods. 

In order for these methods to be called, make sure the collection view's `delegate` property is set to your collection view controller. Just like `UITableViewController`s, this is done for you if you use a `UICollectionViewController`, but not when using a collection view inside of a `UIViewController` subclass. If you are using a collection view in a `UIViewController`, setting the collection view's `delegate` and `dataSource` to the view controller is essential. There is no property for setting the view controller as the `UICollectionViewDelegateFlowLayout`. Instead, this relationship gets set up when you set the collection view's `delegate` property.",,,,,,,,,,"UICollectionView and UserDefaults,Collection View Controller",,iOS Fundamentals II,iOS Development Core,,1,,,1
implement custom UICollectionViewCells,"When using `UICollectionView`s, their cells are **always** custom. There are no Apple-provided cell styles with collection views, which means you will always have to create a Cocoa Touch Subclass (of `UICollectionViewCell`) when using a collection view. In code, custom collection view cells are exactly like custom table view cells, so there shouldn't be anything new for you. ",,"One function that you may not have used in the past that is available on both collection and table view cells is the `prepareForReuse()` function. This function is a way for us to reset the cell before it gets recycled to display some new information. This is useful because if a cell's background color gets changed from white to red, unless we tell the cell to put its background color back to white, when it gets reused to display new information, it will still be red, even though it looks like a new cell to the user. `prepareForReuse()` gets called right before the cell will get recycled so we can change the background color to red or do any other cleanup we might need to do.",,,,,,,,,,"UICollectionView and UserDefaults,Collection View Controller",,iOS Fundamentals II,iOS Development Core,,1,,,1
implement UICollectionViewDelegate method to react to selecting a collection view cell,"One of the things the `UICollectionViewDelegate` protocol does for us is have the collection view tell its delegate (in this case, the view controller) when the user taps on a cell. **NOTE**: The `UITableViewDelegate` protocol has a function that does the same thing as well.",,"Often times, you will want to execute some code when that happens. What code you want to run is up to you, but a few examples would be to select a cell or group of cells to perform some action on, present an alert, or trigger a manual segue after checking some conditions. ",,,,,,,,,,"UICollectionView and UserDefaults,Collection View Controller",,iOS Fundamentals II,iOS Development Core,,1,,,1
understand and explain the purpose of UserDefaults and the kind of information it should be used to store,_UserDefaults_ is another form of persistence. A difference between using `UserDefaults` and something like saving a plist with instances of your model object to the device's documents directory is that `UserDefaults` should be used for application defaults only.,,"That is to say settings or preferences that a user has in an application. For example, whether they want to use a dark or light theme, or whether they use the metric system or not for their units of measurement within the app. `UserDefaults` saves data in key-value pairs, similar to a dictionary, and is persisted locally on the device. This means if the user deletes the app, the persisted data will be deleted as well. This applies for any form of local persistence, as the application is ""sandboxed"".
",,,,,,,,,,"UICollectionView and UserDefaults,Collection View Controller",,iOS Fundamentals II,iOS Development Core,,1,,,1
define keys for specific values stored in UserDefaults,"As `UserDefaults` stores data in key-value pairs, it is good practice to avoid using ""magic strings"" when writing these keys. ",,"Say we have a class that has two functions, one for saving the preferences and one for loading them:

```
class PreferenceHelper {


    func savePreferences() {

    }


    func loadPreferences() {

    }

}
```

Say we wanted to save that the user prefers a dark theme in the application. We need to make a key for that preference to be stored in `UserDefaults` using the `savePreferences` method, then use that key later to retrieve its value in the `loadPreferences` method. In order to avoid magic strings, we could make a constant that holds the key for that preference:

```
class PreferenceHelper {


    func savePreferences() {

    }


    func loadPreferences() {

    }

  let themePreferenceKey = ""themePreference""

}
```

That way, the key is accessible whenever we need it, and we don't have to worry about messing it up by a character or two thanks to autocomplete.",,,,,,,,,,"UICollectionView and UserDefaults,Collection View Controller",,iOS Fundamentals II,iOS Development Core,,1,,,1
use UserDefaults to store and retrieve preferences,"There are two main parts you will use within `UserDefaults`. The first is `set`. There are many different forms of `set` which simply take in different types for the value such as `Float`, `Int`, `Bool`, `Any?` etc., but they all do the same thing which is to **save** a key-value pair. Secondly, if you look at `UserDefaults` in the documentation, you will see the section titled ""Getting Default Values"". It will list a group of functions that will return a value in as a specific type. For example, if you save a string value, you would use the `string(forKey: ...)` method. The function you use to retrieve a value depends entirely on the type of the value you saved. ",,"We could use `UserDefaults` to store that theme preference and load the dark theme automatically when the app opens. the main functions you will use. Let's look at an example: 

```
class PreferenceHelper {

    func savePreferences() {

      let themePreference = ""Dark"" // This is the value
      UserDefaults.standard.set(themePreference, forKey: themePreferenceKey) 
    }

    func loadPreferences() {

    }

  let themePreferenceKey = ""themePreference""
}
```

It's really as simple as giving it a key-value pair, and it will be saved. You'll notice that we use the `standard` property on `UserDefaults`, and then call the `set` method. All `standard` is is an instance of `UserDefaults`, similar to `FileManager`'s `default` property.

To load the value from `UserDefaults`, the process is simple as well:

```
class PreferenceHelper {

    func savePreferences() {

      let themePreference = ""Dark"" // This is the value
      UserDefaults.standard.set(themePreference, forKey: themePreferenceKey) 
    }

    func loadPreferences() {
      let themePreference = UserDefaults.standard.string(forKey: themePreferenceKey)

      // Change the theme here based on the value of the themePreference constant's value.
    }

  let themePreferenceKey = ""themePreference""
}
```",,,,,,,,,,"UICollectionView and UserDefaults,Collection View Controller",,iOS Fundamentals II,iOS Development Core,,1,,,1
understand what class members are,,,,,,,,,,,,,Class Basics,,Intro to Android,Precourse Android,,0,,,0
Articulate a basic summary of the history and context of user experience design,Contextualizing the circumstances of the UX design evolution will help students better understand the role of a UX designer and how they can insert themselves into that role.,"**They call them Unicorns**
Every employer wants employees who can wear multiple hats. They want someone with extraordinary skills. Larger organizations can afford to hire specialists, but most companies tend to need people who can do more than one thing. User Experience designers more than many other fields fall prey to companies who want them to do everything from research to visual design to code. Job ads will ask for user experience designers who can create a visual brand style guide for online and print, design mobile apps, be Photoshop or Sketch experts, write advertising or marketing copy, lead out with business strategy, perform ethnographic research and, at the same time, code in Javascript and HTML/CSS. 
It’s usually not quite that bad, but there is definitely some high expectations of UX designers. Not every company expects the same type of work from their UX team. We’ll talk a little about many of these areas in this introductory course, but just realize there is a lot of work available for a designer who can understand and be conversant in more than one of these areas. 

User experience is also a field where an outside perspective has immeasurable value. A lot of people join the UX profession as a second career, bringing in the insights gained while working in other industries. If you find that the material we cover in this introductory course interests you, you should really consider enrolling in our full-time course that launches [next launch date]. We’ll give you a strong foundation to enter the UX field and create value right off the bat. So, keep that in mind.","Computing
The earliest computers were invented in the 1940s and were huge, covering 1,800 square feet in some cases. Users tended to be researchers at large educational or research institutions. 

Users would punch holes in cards in order to make them work. The interface was a physical tool that allowed the user to actually punch holes in thick-stock paper cards. 

Gradually, researchers were able to reduce computers’ size. They became smaller and began to be used in business applications in the 60s and 70s. 

Academic and enterprise research organizations continued to invent and refine technologies like the mouse and graphical screen interfaces throughout the early years of computing. IBM, XEROX, and AT&T for example contributed to the development of important computing technologies we might take for granted today.","**Human Computer Interaction**
Meanwhile, HCI researchers were taking on the the impact and use of computer interfaces, the processes of technological development, and new applications of technology. HCI emerged as a design discipline—a “science of design”.

**Usability**
The term usability emerged from the research done by researchers and human factors specialists in industry throughout the 70s and 80s. Usability simply means how easily someone can use a given digital interface or product. As with most industries, usability has evolved and design principles that increase interface usability have grown and been refined over time. 

**Usability Engineering**
As the design process evolved, “usability engineering” became part of the lexicon. Researchers like Jakob Neilsen began promoting the idea of usability specifications, where usability was quantified and those specifications provided a goal for the iterative design cycles to try to achieve and measure progress along the way. They also advocated more participatory design, where users took a more active role in the design process. Ethnographic techniques were incorporated in the design process as well, bringing researchers and designers into the context and situation of the user to observe them in their natural habitat, so to speak, and thus have a less biased environment in which to make better design decisions. 

As users became involved with the design process, user-centered design became the de facto design paradigm for computer science, with universities rolling out user-centered design courses in their computer science programs and designating user-centered design as a research focus. 

While HCI is not entirely forgotten, its influence as a discipline has waned in the wake of the Internet and the age of the smart phone. HCI and Human Factors were the key terms used during the 80s and into the 90s, but in 1993 a new term was coined that has caught hold and dominated the discussion of computer interface design outside of academia for most of the last three decades and is used to describe the activities of interface designers in the digital age. That term is User Experience or UX.

**User Experience Design (UX)**
Cognitive psychologist Don Norman coined the term User Experience when naming his research group at Apple in 1993. Norman had been hired to build a team to improve Apple products. 

In 1998, Norman told Peter Merholz at the design agency Adaptive Path that he thought the term had begun to lose its value:

“I invented the term because I thought human interface and usability were too narrow. I wanted to cover all aspects of the person’s experience with the system including industrial design graphics, the interface, the physical interaction and the manual. Since then the term has spread widely, so much so that it is starting to lose it’s meaning.”

Shortly after Norman gave user experience a name, Alan Cooper published About Face, a seminal volume on interface design. The second edition in 2003 introduced a new term to the lexicon: Interaction Design, and Cooper picked up a second author: Robert Reimann. 2007 and 2014 saw updates to About Face, more or less matching the pace of technological advancements. Additional authors also joined to add perspective and experience to the book’s guidance.

In the year 2000, Jesse James Garrett (who incidentally first popularized the term AJAX for asynchronous javascript) published a book proposing a clarified model for user experience design on the web and justifying UX as a discipline.

Throughout the 80s and 90s, design of software and digital experiences in general, gradually moved from a waterfall process to a more iterative and nimble approach to design. The rigidity of the waterfall process was not feasible in the condensed product cycle interface designers found themselves in. Designers and researchers began to consult users of their products in the design process, rather than solely at the end to evaluate the product. User research became a formative activity—part of the design process—rather than a summative one merely evaluating the success of a completed design. 

The Lean movement brought lean to UX as well. In 2013, Jeff Gothelf and Josh Seidon published Lean UX to help understand how a UX process could be brought into the tight cycles of a lean development environment.

There are numerous debates about what it means to be a user experience designer today. There are certainly myriad roles within the discipline. There are many who call themselves UX designers without understanding the existing foundations and fundamentals of the human-computer experience. It might be easiest to discuss some of these roles and responsibilities in context with the product design cycle.",,,,,,,,,Introduction to UX,,Introduction to User Experience Design,Precourse UX,,1,,,1
Explain how the user experience process fits in the overall product design cycle,Giving students a visual/concrete way of visualizing and talking about the product design cycle will help them see the value of the work UX designers do and will help them articulate that value to others.,,"If you search online for product design diagrams, you’ll have thousands of results that are all slightly different. There’s no “One Right Way” to design a product. In this graphic We’ve tried to capture what best represents the idealized product design cycle as it’s experienced in industry. This diagram is not literal. The steps represented are just simple tools and language you can use to talk about the process. The steps are not discrete—they overlap and blend. Like one author said:

“The emergent nature of the design process makes design rationale both important and difficult. It is a tool for managing the complexity of a process in which everything, including the problem definition, constantly changes.”

We just try to provide a  product design process steps through these processes: 

Discovery
Definition
Ideation
Prototyping
Development
Testing

The processes feed into each other and continue in a cycle. Once you reach a testing phase, you begin to discover more about the product and can begin to move again into the cycle.

Discovery
Discovery comes in many forms. Our next class will focus on explaining and practicing some of these discovery tools, but for today we’ll just touch on it briefly. Discovery is also known as user research and is an important part of a user-centered design paradigm. It takes the form of interviews, observation, surveys and basically any form that we can gather information directly from the intended user of our devices or applications—preferably in a context where they would be using the software.

Definition
The Definition phase is where designers analyze findings from the discovery phase.  We’ll cover this later too, but there are tools we can use to make sense of all the raw data. There are also processes we use to capture and describe the circumstances and the things users need in order to meet their objectives.
Ideation
Ideation is generally the funnest part of design and sometimes is mistaken as design itself. Many people think of designers as the idea folks, but that’s just one part of the process. Ideation is the expansive, stretching, creative part of the process. It’s loose and exciting. It’s exploration and generation. But, ideation is insufficient to create a product of value. Ideas have to be beaten down and tested and tried and reformulated and then finally refined and built into something better.

Prototyping
Prototyping is the start of the refining process. In prototyping phase, we put frames around the ideas. Prototyping is dressing the ideas up in various states of dress so we can put the ideas in front of users again to see how they react. It’s quick and rough. It can form a tight loop with ideation one feeding and changing the other. Prototyping is meant to give us quick information and will often be the point at which problem definition changes and might require you to start back into deeper discovery to start the full cycle again before moving into development.

Development
The way we use this term, we’re referring to final creation of the customer-facing product. The ideas have been tested and refined at the prototype phase to avoid rework and reduce chances for errors at the development phase since the development phase tends to be more costly to a business—although I might argue that is less likely to be true now. Our concept of development includes not only the technical development of code, but also the creation and documentation of the high-fidelity interface mock-ups that communicate designed intent to the development team.

Testing
Once a product is live and submitted to users, we test it with them to ensure it meets expectations. This can be done in a variety of ways, including usability testing and analytics monitoring.",,,,,,,,,,Introduction to UX,,Introduction to User Experience Design,Precourse UX,,1,,,1
"Understand and explain the concepts of affordance, “recognition is better than recall”, and natural mapping.",These three concepts can be a strong foundation as UX designers begin to establish their personal ability to evaluate user experiences and design new ones.,,"When we create an interface, we create a bucket of decisions people have to make, a bucket of symbols they have to comprehend, and a bucket of actions they have to take to accomplish whatever it is they want to do.

Those three buckets if not created thoughtfully can quickly become a deluge of information that is overwhelming for people. In academia we call it cognitive overload, but it essentially amounts to people getting really, really frustrated. They either abandon their objectives altogether or they suffer through the process, cursing your name, your company, your children, and your pets.

We have to understand that one confusing form field might not be a big deal. One typo isn’t the end of the world. What happens though, is that through the process, every extra step, every extra decision, every even slightly confusing element, builds stress. It might seem a small thing, but when compounded, all those little things lead to cognitive overload and unhappy customers.

You should be concerned about the person using your app, software or website. You should care about what they think. Your job is to help them. Obviously your employer will have a stake and say in how much time you can spend caring and fixing, but if you make your focus on creating something people will have no trouble using, or even have fun and enjoy using, you will always be able to find someone who will pay you good money to help their customers.

We want you to understand a couple of concepts about interface design before we jump into this course. These concepts will be really useful to you in the future. 

These concepts as we’re explaining them come from Don Norman’s book, The Design of Everyday Things, which I highly recommend that you read, and also from the writings of Jakob Neilsen, a usability researcher. We’re reviewing just three ideas today to keep it simple. We’ll build on these in the future. These concepts are related to each other and considering each one every time you work on an interface will make your products better. As I talk about these, I’ll be referencing the design of physical objects. If you don’t immediately see the relevance to software design, we’ll talk more about that in a bit, so bear with me.

Affordance
The first concept I’d like to discuss is the idea of Affordance. 

Affordance means there are physical attributes, visible qualities to an object that suggest how they should be used. When you design something that has a purpose, your objective should be to give that object as much affordance as possible to help people

In the physical world, affordance manifests itself as Pull handles, Buttons, and Dials. It is extremely frustrating to reach for a pull handle on a door and pull only to then realize that you can’t pull the door open, you have to push it open. In many cases, once such a door has been installed, custodians have to also install a “Push” sign—usually one you only see once you’ve already tried to pull.

And that brings me to my next concept:

Recognition is better than Recall
Recognizing the affordance is much easier than trying to remember that this is a push door. Installing a push plate can help you recognize a push door when you see one. Creating a design with an obvious purpose is so much better than trying to remember what something does. One way to aid recognition in an ambiguous context is by adding a label. Reading the sign or label is often better than not having a sign even if it’s a little less aesthetically attractive. 

I’ll remind you here of the concept of buckets of decisions and actions and symbols I mentioned previously. We can sometimes expect our users to learn something in order to use our products. That’s not forbidden. But, this is where we must be aware of all those micro-moments of annoyance. They can build up into a sea of frustration. If you have buttons that just look like text boxes, or icons that have ambiguous meanings, people have to start clicking and tapping around until they find what they’re looking for. Their decision-making capacity gets filled quickly and they drop your app like it’s hot. 

So looking for ways to introduce affordance and recognition into your product will improve your product immensely. A bunch of little micro-wins will lead to a big win in the end.

The third concept is called:

Natural Mapping
It is related to the other concepts in that it helps provide affordance and aid recognition. Natural mapping refers to the placement of controls relative to the thing being controlled. The best example I have seen in the physical world is an oven range. Ranges generally have knobs for the four burners on the stove. Sometimes those knobs are placed in a single horizontal row above or below the burners. You are left to guess which knobs align with which stove top. Adding labels helps people recognize which knob is associated with which burner. But natural mapping takes the idea a step further and places the knobs next to the relevant burner. Immediately you know which knob turns on which burner. 

The problem is sometimes that a product designer will desire an aesthetic placement — a straight line of the knobs together — or the engineer will desire to keep like components together to simplify the manufacturing process, but the user experience designer is saying: Is that trade off worth it? Do we gain enough in efficiency to warrant giving people a more confusing experience? 

With every product, you have to weigh the pros and cons, but what I’d like to help you understand today is that you need to save you from yourself and, with a little user testing, important design changes can be made early enough in the process that you can create a better experience without having to create as many trade-offs for efficiency to build later on.

So, how do those design concepts manifest themselves in a digital environment?

Buttons and links are a big place where affordance makes a big difference. If you don’t give your text a link treatment that is understandable, people won’t know to click a link and you lose out on that option for interaction. Likewise, buttons can often be mistaken as non-interactive if appropriate affordance is not applied. There is an obvious spectrum of affordance—from a plain white box to colored boxes, to curved corner boxes, to round and pill-shaped buttons, to buttons with a drop shadow or other 3-d attribute that hints at press-ability or click-ability, all the way up to what’s known as skeuomorphism: where the digital components are designed to look like physical artifacts.

As I mentioned, icons on buttons are a big place where recognition over recall comes into play. If you use an icon that has been created specifically for the android environment on a web-app that’s accessed by all mobile platforms, you lose the recognition power of that icon for half your users. Adding a label goes a long way to helping people recognize what a button is supposed to do.

Natural mapping is not as frequently needed in interface design, but being aware can help you in situations where you need an easier solution for people.

An obvious place would be to place left and right arrows at the left and right edges of a screen indicating what that control might do, rather than creating a centralized control.

These are very simple implementations and discussions of these principles and the reason I bring them up now is that even when you’ve studied and worked hard to understand cognitive design principles and can create an interface, you still bungle things up from time to time. Each use case is unique. Each product’s user base has different qualities and backgrounds that it’s hard to know without interacting with them. For you, an icon might seem super obvious and could mean only one thing to everyone, but in testing you might quickly discern that for your particular audience that icon has no meaning. And really, the only way to find that out is to talk to your users.

For developers—and even designers—there’s also a big danger of knowing too much about the system. Understanding the database schema, the algorithms, the mark-up any of these under-the-hood elements can blind you to a simpler user experience. You might say, ok we need to collect name, email, phone number, password, and image to build out the user profile. The simplest way to do that is to create a form at the beginning of the experience with all the relevant fields and ask the user to complete it. But in testing, the user says, “I don’t want to give you all my information until I know I really want to buy into the product a little more. I’ll give you my throw-away email and a password but not my number or name or image. Let me look around and then if I like it, I’ll give you more.” The user interface initially becomes a lot simpler, but the underlying code base can become much more complex as you have to create opportunities to collect that additional information in the future. ",,,,,,,,,,Introduction to UX,,Introduction to User Experience Design,Precourse UX,,1,,,1
add a data model to Django,"At the core of Django, your data is represented by models. Django automatically translates actions on the models into a variety of other things: SQL statements, API endpoints, and so on.

But the data model you describe is at the core.","This corresponds to Adding Data Models in the Day1 doc: https://github.com/LambdaSchool/Intro-Django/blob/master/guides/day1.md

Can also go through [Django docs](https://docs.djangoproject.com/es/2.1/ref/models/fields/) to look a little more closely at what the Models parent class is doing and explore other ***Fields*** that are available. This gives students an opportunity to practice using documentation, especially if you challenge them to expand upon notes app starter code from precourse videos and add a few of their own fields.","We'll discuss how models have a variety of fields that are used to represent different data types. Also, we'll dig into the relationship between models and the migration process.

Together we'll implement a new data model in our Django app, add fields to it, and generate and run migrations so that the data can be represented in the database.","In the `notes` folder, open `models.py`.

Create a class called `notes` that inherits from `models.Model`:

```python
class Note(models.Model):
```

This gives our new class access to all of the built-in functionality in `models.Model`.

Think about the data that we need for standard web notes functionality. We might
want a title, body, some timestamps, etc. We can use the docs to find the types
of things we can add:

https://docs.djangoproject.com/en/2.0/ref/models/

Add the following variables to the class:

```python
class Note(models.Model):
    title = models.CharField(max_length=200)
    content = models.TextField(blank=True)
```

Add any additional fields you would like as well.

We also need something to serve as a unique identifier for each record. We’ll
use something called a UUID for this:
[https://en.wikipedia.org/wiki/Universally_unique_identifier](https://en.wikipedia.org/wiki/Universally_unique_identifier).

Add a UUID to serve as a key for each record.

* First, import the library:
  ```python
  from uuid import uuid4
  ```
* Second, add the field:
  ```python
  id = models.UUIDField(primary_key=True, default=uuid4, editable=False)
  ```

* Primary key is how the database tracks records.
* Default calls a function to randomly generate a unique identifier.
* We make editable false because we never want to change the key.
* Put it at the top of the list of fields because it’s sort of like the index
  for the record.

Next, we need to tell the project that the app exists. Open `settings.py` from
the project folder.

Find the section for `INSTALLED_APPS` and add `'notes'`, or other apps as
appropriate.

In the console, check for migrations again with `./manage.py
showmigrations`. The notes app should show up in the list now, but it has no
migrations.

To generate the migrations, run:

```
./manage.py makemigrations
```

If you get an error that there are no changes to make, double-check that you
have saved `models.py`.

Show migrations again to make sure they appear, then do the migration:
```
./manage.py migrate
```",* Add another data model that describes some type of data you're interested in.,2nlda8OUzCw,http://youtube.com/watch?v=2nlda8OUzCw,https://www.youtube.com/embed/2nlda8OUzCw,,,,,Django basics and setup,,Intro to Django,Computer Science Annex,,1,1,1,3
add data to the database using a Python shell,There's a Python shell built into Django that can be used to test the models and other Django entities that you create in the code. This can be a useful tool for experimenting and debugging.,Corresponds to _Adding Data with the Python Shell_ in the Day1 doc: https://github.com/LambdaSchool/Intro-Django/blob/master/guides/day1.md,"We'll discuss specific use cases for when we might want to use the shell and how it ties into Django and the backing database.

We'll launch the shell, import the model we made, and create instances of it. We'll also examine the data and functions associated with the new instance, as well as how to save it permanently to the database.

Once saved, we'll take a peek at how to programmatically get those instances back out of the database.","`manage.py` has its own shell. Run `./manage.py shell` to bring up a Python repl.

* The input line should change to `>>>`

Import the notes class into the repl:
```python
from notes.models import Note
```

Create a new note with:
```python
n = Note(title=”example”, content=”This is a test.”)
```

Check by the name of your variable to make sure worked:
```python
n
```

We can use a built in function from models (which `Note` inherited from!) to
save this to the database:
```python
n.save()
```

Exit the terminal, then restart it - `exit()` then `./manage.py shell`

We have to import the `Note` class again, using the same command as before.

There is another built in method that will retrieve all existing objects of a
class: `Note.objects.all()`

Use this to save the data back into a variable named `b` and explore.","* Using a different model, import the model.
* Create two new instances of the model.
* Save the instances to the database.
* Exit the shell, then restart it.
* Verify that the objects were saved in the database.",E8rcfcNChbw,http://youtube.com/watch?v=E8rcfcNChbw,https://www.youtube.com/embed/E8rcfcNChbw,,,,,Django basics and setup,,Intro to Django,Computer Science Annex,,1,1,1,3
use a .env file to track `SECRET_KEY` and other variables,"Django uses a secret key for a variety of different internal uses. It's important to keep this key secret, and that secrecy is compromised if you store the key in source control (like git).","https://stackoverflow.com/questions/7382149/purpose-of-django-setting-secret-key

Corresponds to _Moving the Secret Key to .env_ and _Creating New Secret Keys_ in Day1 doc: https://github.com/LambdaSchool/Intro-Django/blob/master/guides/day1.md 
","When we store data in source control, it's there for everyone to see. Since Django uses its `SECRET_KEY` variable in `settings.py` for a variety of cryptographic purposes, it's important that we keep it out of source control. We'll discuss a way to do this using a `.env` file.

Additionally, there are other variables that you might need to change depending on whether or not you're deployed or in a development environment. The `.env` file also helps in this regard.

Finally, we'll discuss how to generate a new key if you've accidentally compromised yours.","Take a look at that secret key in `settings.py`.

We want to move this out of the settings file so that it doesn’t get checked
into source control. We’ll move it to another file, which everyone on the
project will need a copy of, but it won’t be in the repo itself.

We’re going to make use of a module called Python Decouple by installing it in
the virtual environment:
```
pipenv install python-decouple
```

Once it’s installed, we can bring it into `settings.py` with:
```python
from decouple import config
```

Pull up the docs for Python Decouple and take a look at the usage and rationale.
There is an example for how to use it with Django. Follow that to remove the key
from settings.

Add the key your `.env` file (creating it if you have to):
```
SECRET_KEY='...whatever it was in the settings file...'
```

Then change the line in `settings.py` to:
```python
SECRET_KEY = config('SECRET_KEY')
```

We should also move `DEBUG` to the config file. Because the file is a string,
and `DEBUG` expects a bool, we need to cast it:
```python
DEBUG = config('DEBUG', cast=bool)
```

We do this not for security, but so that it can be changed as needed on a
development machine, without modifying the source code.

Don’t forget to add it to `.env` as well.

Test to make sure it still works and debug as needed.

Before moving on, verify that `.env` is in `.gitignore` and commit.

In case you've already committed a key earlier on accident, you can just
generate a new one in any Python REPL with:

```python
import random
''.join([random.SystemRandom().choice('abcdefghijklmnopqrstuvwxyz0123456789!@#$%^&*(-_=+)') for i in range(50)]) # All one line!
```","* What other variables might it be useful to keep in the .env file? Why?
* Create a new key and put it in your .env for safe keeping.",r6r-CFQPfoQ,http://youtube.com/watch?v=r6r-CFQPfoQ,https://www.youtube.com/embed/r6r-CFQPfoQ,,,,,Django basics and setup,,Intro to Django,Computer Science Annex,,1,1,1,3
set up and use the Django admin interface,"One of the big draws of Django is its built-in easy-to-use admin interface. You can manage users, manipulate data, and perform all kinds of actions through the interface that might otherwise be painful to build in other frameworks.",Corresponds to _Admin Interface_ in the Day2 document: https://github.com/LambdaSchool/Intro-Django/blob/master/guides/day2.md,"Users can be set up not only for accessing the admin interface, but also for accessing the site or REST endpoints, as we'll see later. Since you can also change data in the database, it gives you an automatic backdoor to remove offending data or add data in an ad-hoc way.

We'll create the first user, the _superuser_. Then we'll log in to the interface and create more users. We'll also learn how to expose a model through the interface and manipulate data in the database through it.","Start the environment and server:
```
pipenv shell
./manage.py runserver
```

Open the page in the web browser and navigate to the admin page:
`localhost:8000/admin`.  You will see a login page, but we don’t have an account
to log in with yet.

To make an admin account, run:
```
./manage.py createsuperuser
```

Add a user `admin` with whatever password you choose.

Although it can be tempting to use a short and easy password for things like
this, it is good practice to use a robust passphrase.  You don’t want to forget
and leave a superuser account with a weak password and have it pass to
production.

Run the server and log into the admin account you just created.  You will be
able to see the automatically generated users and groups from the database, but
our notes are missing.

We need to tell the admin interface which tables we're interested in seeing.

In the `notes/admin.py` file:

```python
from .models import Note
```

and register the `Note` model with the admin site with:

```python
admin.site.register(Note)
```

Return to the site admin page.  `Notes` should now be present.  Try adding
and/or editing a few.","* Add another user. Give them `staff` permissions.
* Expose another model through the admin interface.
* Use the interface to add and delete records in the new model.",QtmB7wbfDiA,http://youtube.com/watch?v=QtmB7wbfDiA,https://www.youtube.com/embed/QtmB7wbfDiA,,,,,Django basics and setup,,Intro to Django,Computer Science Annex,,1,1,1,3
migrate models with new fields added,"When you add new fields to models, something must be set up for the records that already exist in the database. There are several different approaches to take.",Corresponds to _Migrations with New Fields_ in the Day2 doc: https://github.com/LambdaSchool/Intro-Django/blob/master/guides/day2.md,"When you add a new field that can't be empty to a model, Django wants to know what to do with that field. It needs to be populated with _something_, or be allowed to be blank.

So it will insist that you take some action to prevent the database from becoming inconsistent.

First we'll add new fields to a model, then try to make a new migration for it. Django will let us know that we have to do something with the new fields for existing records.

We'll experiment with manually setting the existing records, and also adding fields that can be blank or have a default.","It would also be nice to track created and modified dates.  

Open `notes/models.py` and add:

```python
created_at = models.DateTimeField(auto_now_add=True)
last_modified = models.DateTimeField(auto_now=True)
```

The argument we are using determines when and how this information should be
updated:  `auto_now_add` only sets on create, while `auto_now` will set on both
create and update.

In the terminal, make the migration:
```
./manage.py makemigrations
```

You will get the following:
```
You are trying to add the field ‘created_at’ with ‘auto_now_add=True’ to note
without a default; the database needs something to populate existing rows.

1) Provide a one-off default now (will be set on all existing rows)
2) Quit, and let me add a default in models.py
Select an option:
```

Default can sometimes be specified with:
```python
foo = whateverField(default=value)
```

Or you can allow the field to be blank with:
```python
foo = whateverField(blank=True)
```

But this _will not work_ in a `DateTimeField` with `auto_now` or `auto_now_add`
set, so use option 1 with suggested default of `timezone.now`.

Do the migration: `./manage.py migrate`

You might notice that the new fields aren't showing up in the admin interface. This is because when you use `auto_now`, the field gets set to read-only, and such fields aren't shown in the panel.

To get the read-only fields to show up in the interface:

```python
class NoteAdmin(admin.ModelAdmin):
	readonly_fields=('created_at', 'last_modified')

# Register your models here.
admin.site.register(Note, NoteAdmin)
```","* Add three additional fields to your models
* Allow one to be blank
* Give another a default
* Make migrations
* Manually enter a value for the third new field",n042GgOq67Q,http://youtube.com/watch?v=n042GgOq67Q,https://www.youtube.com/embed/n042GgOq67Q,,,,,Django basics and setup,,Intro to Django,Computer Science Annex,,1,1,1,3
subclass and specialize a model,"If you have a simple model defined, you might want to offer variations on that model. Inheritance provides and easy way to do this, and Django takes care of the details of the relationship for you.",Corresponds to _Personal (per-user) Notes_ in the Day2 doc: https://github.com/LambdaSchool/Intro-Django/blob/master/guides/day2.md,"Just like classes can be related through inheritance, models (being classes themselves) can also be so-related. This can be a convenient to way to make multiple new models based on an existing, base model.

We'll add a new model based on our existing one, and give it some extra functionality. We'll also relate this model to a different model: the built-in `User` model. And, in order to maintain database consistency, we'll determine what to do with our model in case that model's `User` is deleted.

Django will take care of all the necessary database heavy lifting for us.","Next we want to add the ability to handle multiple users, and allow them to have
their own personal notes.

First, we will create a new model that inherits from another: personal notes.
Open up `notes/models.py`

To access the built-in user functionality:
```python
from django.contrib.auth.models import User
```

We could copy and paste the previous notes class to do this, but a better way is
to have it inherit from it and just add the additional fields we need.

```python
class PersonalNote(Note):   # Inherits from Note!
    user = models.ForeignKey(User, on_delete=models.CASCADE)
```

What this is doing is importing Django’s built in user class model with
something called a _foreign key_ to create a reference to data on another table.
It works sort of like a pointer in C.

`on_delete=models.CASCADE` helps with the integrity of the data.  In relational
databases, one of the principles is to protect consistency.  There shouldn’t be
an item in one table that references the foreign key of something that has been
removed from another.",* Subclass another model and add more fields to it.,-E0-5_rBIsQ,http://youtube.com/watch?v=-E0-5_rBIsQ,https://www.youtube.com/embed/-E0-5_rBIsQ,,,,,Django basics and setup,,Intro to Django,Computer Science Annex,,1,1,1,3
run SQL and ORM commands to investigate Django's SQL database,"Even though you don't normally interact with Django at the SQL level, peeking under the hood can help you understand how data is modeled at a higher level. It's also a good small introduction to SQL",This corresponds to _Under the Hood with SQL_ and _Django ORM compared to SQL_ in the Day2 doc: https://github.com/LambdaSchool/Intro-Django/blob/master/guides/day2.md,"When you define models in Django, it automatically does all the mappings required to store corresponding data in the SQL database. We can dig down and see how that storage is laid out, and we can access it with SQL commands.

For comparison, we'll see how easy it is to use the Django ORM functionality to access the same data.

First we'll launch Django's SQL shell. This will allow us to examine the database and we'll perform queries against it to retrieve our model data.

We'll also look at a migration and see how that impacts the database when it runs.

Finally, we use Django's ORM functionality to get data out. This is the typical way data is extracted from Django.","We can take a look in the database with `./manage.py dbshell`.  If you get an
error, you may need to install sqlite3 using your preferred method.

If it is working, the command prompt will change to `sqlite`.

`.tables` will display a list of tables

`pragma table_info(notes_note);` will show column names and types for the table
`notes_note`.

`.headers on` and `.mode column` will adjust some settings to clean up the
presentation if we open a table.

`SELECT * FROM notes_note;` is a sql command that will select all of the columns
in the notes_note table and display the data present.  By convention, sql
commands are often uppercase, but it is actually case insensitive.

All the notes we have created will be displayed.

Be _very_ careful with sql commands.  The command `DROP` will permanently delete
a table and all of the data inside it without warning. _This language is
powerful and has no mercy_.

Type `.exit` or `CTRL-D` to get out of dbshell.

Back in the virtual environment, because we modified the model to add personal
notes, we need to do another migration.

Complete the migration process as before.  

We also want personal notes to show up on the admin page. Open `admin.py` then
import and register the new class.  Remember, you can use tuples for both of
these.  Don’t forget to use the extra parentheses inside the register function.

Take a look at it in `admin`.  It should be the same as before, but now we have
a `user` field that is automatically populated.

We can use the admin interface to add more users in the user table, if we want.

For now, create a personal note for the admin account.

Go back to the sql shell, and take a look at the `notes_personalnote` table.

You’ll need to use the same three commands as above to display the table.  Note
that the info here is very different.  Instead of having everything, it just has
`user_id` and a foreign key `note_ptr_id`, pointing to a record in the full
notes table.

Take a look at the `notes_note` table.  The rest of the data will be here,
listed under the uuid stored in `note_ptr_id`, a reference by the foreign key.
This is why relational databases are relational.

The `user_id` is also a foreign key that points to Django's built-in `auth_user`
table. Run a `SELECT` query to look in that table, as well.

Drop out of the SQLite shell and open a Python shell with `./manage.py shell`.

Import personal notes: `from notes.models import PersonalNote`

Pull the list into a variable: `pn = PersonalNote.objects.all()`

Take a look at the name of the 0th record: `pn[0].user`.  Try other fields as
well.

Django lets us access information that is in multiple tables relatively easily.
The sql details are hidden from us (in a good way!).  It does all of the under
the hood operations for us.","* Perform more ORM queries.
* Look up the ORM `filter()` function and use it to select a subset of rows instead of all rows.
* Use `order_by()` to order the results.
",iZT-Pr6xY84,http://youtube.com/watch?v=iZT-Pr6xY84,https://www.youtube.com/embed/iZT-Pr6xY84,,,,,Django basics and setup,,Intro to Django,Computer Science Annex,,1,1,1,3
Explain what user research is used for,Students need to be able to articulate the purpose of user research in the discovery phase of the product design cycle.,,"The early stages of user research consist of acts of discovery. User research is exploratory. In User Experience Design, there are generally two roles you play:

One—Create a new experience where none existed before, thus filling a gap

_and/or_

Two—Iterate on and improve an existing experience, thus smoothing the surface of an established product.
Seek to understand
In both cases, you use user research to understand the circumstances of a person’s existing paradigm. You are seeking to understand the user. Without that understanding, you cannot design adequate and appropriate solutions to the gaps and rough experiences people endure each day.

The discovery phase is an inductive process that digs deep for that understanding. Once a designer has a good concept of what a user is currently experiencing in the design scenario, they are better able to form design hypotheses that will move the process of design forward.

*Have empathy*
Empathy is getting in someone’s shoes and walking around for a while. It’s seeing what they see and how they see it. No one can be perfectly empathetic, but empathy can be learned and cultivated. People drawn to UX tend to have a more developed sense of empathy, but that skill can be honed and improved.

Empathy comes most easily through systematic and direct observation and listening. It can be refined by pushing back against the biases and assumptions that naturally occur to us. The closer we get to the actual life circumstances of our users as they use (or would use) our products, the better we will be able to make informed decisions about our designs.

Data from research informs ideation and the rest of the product design process. The more accurate and realistic the data, the better our designs.",,,,,,,,,,Introduction to User Research,,Introduction to User Experience Design,Precourse UX,,1,,,1
Explain difference between qualitative and quantitative research,"Research can be approached in two ways: qualitatively and quantitatively. Quantitative research better allows for finding broad trends in a population. It also gives opportunity for extrapolating statistical results from a sample of people to the broader population. Qualitative research gives a richer description of events and experiences for users, but has more room for error when trying to extrapolate findings to a broader population.",,,"*Qualitative Research*

Research comes in two forms. In discovery, the most useful form of research tends to be Qualitative research which consists of gathering non-numeric data—data about the various qualities of an entity or environment.

For example, interviews that don’t collect “counted” answers tend to be qualitative in nature. Surveys with open-ended questions and observational research are other good examples. One form of research that is especially useful to user experience designers is called contextual inquiry.

Contextual inquiry consists of observing users in the circumstances in which they would actually use the product you are attempting to design. Contextual inquiry is a form of ethnographic research. Its objective is to describe and, in many instances, help you, as the designer, to view a culture or people with empathy. The better you know and understand a person and their circumstances and experiences, the better you are able to formulate and articulate ideas to help improve the experience.

*Quantitative research*
The other prominent form of data gathering is quantitative research, which consists of the collection and analysis of numeric data.

Surveys with responses that are counted in some way are an example of quantitative research.

The System Usability Scale (SUS) is a survey that gathers quantitative usability data. It converts usability constructs into a 5-point scale from Strongly Disagree to Strongly Agree.

1. I think that I would like to use this system frequently.
2. I found the system unnecessarily complex.
3. I thought the system was easy to use.
4. I think that I would need the support of a technical person to be able to use this system.
5. I found the various functions in this system were well integrated.
6. I thought there was too much inconsistency in this system.
7. I would imagine that most people would learn to use this system very quickly.
8. I found the system very cumbersome to use.
9. I felt very confident using the system.
10. I needed to learn a lot of things before I could get going with this system.

The questions are scored and the resulting score on a scale of 1-100 gives you a sense of how usable the product is compared to other products.

Analytics are another form of quantitative data that can be informative in the discovery phase. Many companies install code on their sites and apps that counts the activity of people using their site or app. For example, it might count how many visitors you had on any given day. Analytics programs allow you to set up to record specific interactions with the site as “events”. Those events can be counted. You can see how many times the event occurred, when it occurred, what time of day that event occurs most frequently. There are enormous amounts of data that get collected each second on the web and a UX designer can often access that data to try to make assumptions and draw conclusions about who is using the site or app and for what purposes and thus hypothesize about where improvements could be made.

The results of A/B and multivariate testing, where different designs are compared statistically, can also be informative in the discovery phase, but are more often used to validate design solutions.",,,,,,Use and Misuse of Focus Groups,,,Introduction to User Research,,Introduction to User Experience Design,Precourse UX,,0,,,0
Explain relative strengths of observational research and inquiry research,Having the skill to recommend the appropriate use of a specific research tool during the discovery process is valuable,,"Research methods span from direct observation to indirect observation and from direct inquiry to indirect inquiry. These, like the design process itself, are not necessarily discrete types of inquiry that always happen independently. They overlap and run into each other, but it’s helpful to have names for these activities to be able to discuss them. We’ll present these research activities in the context of a designer hoping to create a new shopping mobile app.

*_Direct Observation research_*
*Contextual Inquiry*
Contextual inquiry is a direct observation method of user research. It is an ethnographic technique where you shadow a user throughout the day or, at minimum, for a period of time when they would be most likely to use the product or service you are planning to design. In our example, Ruth contacts five mothers she knows and asks them to participate in her research. She explains to each of them that she will spend most of a day with them and just follow them around. Three mothers agree to participate. 

First, Ruth goes to Jennifer’s house and sits down at her table and watches as Jennifer goes about making her meals. Ruth jots down notes in a notebook as she watches. She notes that Jennifer keeps her cereal high in a pantry closet. She notes that breakfast starts promptly at 7:30 a.m. Ruth tries to capture each task that Jennifer tackles. She notes when Jennifer struggles, when she pauses for a long time. Ruth goes with Jennifer as she drops her youngest child off at daycare. 

Ruth and Jennifer go to the store and Ruth notes the path Jennifer takes through the store. She watches as Jennifer compares prices—how many she compared, whether she picked up items or just read labels without touching.

Every step throughout the store and then back home again, Ruth watches Jennifer’s actions. She takes notes about her observations, jotts down ideas she might consider later. Notes the time and the location with each note. 

At the end of the day, they part ways. Ruth begins the process again for each of the others who agreed to participate—watching and taking notes. Sometimes she would ask a question, trying to get into the minds of the women she is watching. “What are you thinking right now?” “Why did you do that?” Ruth’s aim is not to spur the women to answer a specific way but to get them talking about some of the tacit and implicit things that are going on in their minds as they take action.

*Usability study*
Ruth next does a competitive analysis, looking at other shopping apps that exist. What do they do well? What might they be missing? She contacts some new people and invites them to the office. She has them use the apps and talk about what they’re doing. This is called a usability study. Her objective is to see how people use the app. What works for them? What doesn’t? She gives them specific scenarios—goals for the user to achieve with the app. She watches to see what obstacles the customer faces as they attempt to achieve the goal. She notes where they struggle, where they succeed, what excites or delights them.

From the notes she gleaned from her research, Ruth is ready to move on to the definition phase of the product design cycle.

*_Indirect Observation_*
*Diary study*
But let’s imagine the scenario a little differently. Ruth has limited time. She can’t follow multiple people around for a day. She decides to try some indirect observation to gather the same type of information she gained in the previous scenario. She recruits four participants to do a diary study for her. One of those she recruited previously who wasn’t willing to be followed around is willing to do a diary study. Each participant carries around a notebook or recorder for the next day. Every 15 minutes, they write or record what they’re doing at that moment along with their thoughts about their activities. Ruth gets the notebooks or recordings and reads or listens to gain insights to their activities. 

*Analytics*
Ruth looks up “analytics” data from the web for any shopping apps she can find. She finds out how many people are using shopping apps. She looks for marketing data about the demographics of shoppers—when do they shop, how old are they, what are they buying?

*_Direct inquiry_*
*Interviews*
She also spends a day doing in-depth interviews with potential users of her shopping app. She recruited through her social network, gathering friends of friends and friends of friends’ friends. Five people agree to come in, so in one, long day, she conducts five one-hour interviews with a half hour in-between. To prepare, Ruth creates a guide that contains multiple questions she can ask, along with some suggestion questions Ruth asks a fellow UX designer to listen to the interview live with her to take notes so she can concentrate on the conversation.

Gathering this data will allow her to begin the definition phase of the design process.

*_Indirect Inquiry_*
Ruth could also use other methods even further removed from interaction with the user. One form of indirect inquiry is the survey. 

*Surveys*
Surveys are able to gather information from users about their experiences asynchronously. Surveys are potentially dangerous in that writing useful questions that will result in quality data is a skill that requires practice. Questions that are too broad result in imprecise data. Ambiguous questions result in meaningless data. Multiple choice questions can potentially miss the nuance of the human experience. But, surveys have great potential for getting a clearer picture of trends across many individuals. They potentially allow for statistical extrapolation.

*Seeing it altogether*
Clayton Christiansen’s well-known “Milkshake” case study offers a cautionary tale about the importance of getting closer to the user and probing for a greater understanding of their needs. He formulated a product methodology based on the research they did called “Jobs to Be Done”. 

The concept basically goes like this. A fast-food restaurant began marketing research based on the product (a milkshake) and around the demographics of their milkshake customers. They sought to find out from members of that demographic what makes the best milkshake. Customers told them and the company responded to the feedback, trying to improve the milkshake. After implementing the improvements, they saw no change in sales. One of Christiansen’s colleagues did a deeper dive. He observed customers buying milkshakes all day. 40% of them bought them in the morning and left the restaurant before consuming them. He came back the next day and asked people in essence: “What job are you trying to get this milkshake to do?” 

It turned out that most of those morning consumers needed something to help them get through their morning commute. They only had one hand to drive with and weren’t really hungry, but knew they would be hungry later. The milkshake helped keep their free hand occupied. The shake lasted a long time, so it helped keep them engaged on their long commute. It also helped them avoid hunger pains until lunchtime. The competitors in this category could be considered to be bagels or bananas or toast or coffee. The restaurant could respond to this idea by creating a new product and marketing it around the morning commute. A morning milkshake—thicker and will tide you over for the day.

Trying to understand what job a user needs to have done allows you to craft better products and experiences.",,,,,,,,,,Introduction to User Research,,Introduction to User Experience Design,Precourse UX,,1,,,1
conduct a user interview using best practices,"User interviews for discovery should also be conducted at the beginning of the discovery phase, as early as possible to help guide the rest of the process. Users should also be consulted whenever designers are working on a high-risk or high-impact design solution that is not backed by existing data or is supported only by weak data.",Have this link pulled up to use as a reference when creating the interview guide: https://docs.google.com/document/d/1P0Wn1-w5aJAo6ZY0_JNA0i3913JMIq-epRJb_U-RTB4/edit#heading=h.jo5px0cxb6p,"_*Preparing for an interview*_
*Equipment*
Have a notepad. If you’re interviewing over the phone or a computer connection, you can take notes on a laptop, but generally speaking you want to avoid using your computer to take notes in a face-to-face situation. Computers can form a psychological barrier between the researcher and the subject, reducing your ability to build sufficient rapport to have your subjects open up fully to share their honest experience. 

Don’t rely on notes. Don’t take copious notes. Spending time taking too many notes can disrupt the flow of a conversation and make subjects begin to close down their thoughts. To take notes, jot down a time-code from your recorder along with a keyword to help jog your memory when you go back and review.

Have pen or pencil and a backup pen/pencil.

Have a recorder and ideally a backup recorder. Most people have a smart phone and there are numerous apps you could use to record voice. Ideally, you’ll want a device that will allow you to export your audio files as an MP3 so you can re-listen and take better notes on a computer.

There are also services that can be used to record interviews over the phone. There are links in the course notes.","Demonstration of user interview.

Listen actively. Be present.

Interview student. Ask questions and discuss, as you ask questions, your reasons for asking the questions you are asking. Discuss the following guidelines as they come up in the interview process.

- *Watch for visual cues (listen for vocal cues)* in body language—signals that suggest discomfort, disinterest, or disgust.
- *Dig deeper: Ask “Why?”* Go as deep as five “whys” or more—even when you think you know the answer.
- *Draw out stories.* “Tell me about a time you …”
- Avoid generalized questions*, like “How do you usually do “x”
- *Get specific:* “Describe the last time you did “x”
- *People don’t always do as they say.* Watch for inconsistencies and ask more about them.
- *Never fear silence.* It often takes people time to sift through their thoughts. Give them a chance. 
- *Don’t “lead the witness.”* You should never suggest answers to your questions. People often will give you the answer you want to hear if they know what you want to hear.
- *No “Yes” or “No” questions.*
- *Save toughest questions for the end.*

Anytime you hear something you want to take a note on, jot down the time-code on the recorder. Maybe add a topic word or two.",,,,,,"Interviewing Users,Example Jobs to be Done interview ,Jobs to be Done — Job of a McDonalds Milkshake,How to Conduct Interviews,How to conduct user interviews",,,"Introduction to User Research,User Interviews",,"Introduction to User Experience Design, Discovery","Precourse UX, UX Design Core",,1,,,1
,,,,,,,,,,,,,,,,,,0,,,0
Explain what user and job stories are and how they are used,User stories have been a basic product design tool for many years. They help create a list of actions and their associated objectives. Typically user stories are driven by assumptions made about users. ,,"The format of a traditional user story is:

As a [Persona] I want to [Action] so that [Expected Outcome].

For example —

As a single, mother of four, I want to get my shopping done quickly so that I can avoid being in the store with four restless children longer than I have to.

Or —

As an office manager, I want to be able to keep a list of all employees’ contact information, so I can quickly find any employee’s phone number.

Or — 

As a single, mother of four, I want to tap a button on an app, so that all my dreams will come true.

User stories can be helpful in both the design of a product as well as in communicating the intent of a design to a development team or other stakeholders.

Let’s pause and talk about design tools for a minute. The best designers are those who can think critically about what they are doing. They are empathetic, seeking to understand a user’s point of view. They need to understand the situations they are designing for deeply enough that they can balance business needs against user needs and even against the status quo of other similar designs.The tools we use are simply tools. Like a hammer. I might prefer a sledge hammer for some jobs, a framing hammer for others, and a ball-peen hammer for other purposes. All of the jobs involve striking the surface of something with a heavy object, but there are nuances in each application. UX tools are similar. We have job stories and user stories and people use them in different ways. There is no “one true way” to do design. But, having a tool kit where you know how to use the tools is important. Having a knowledge of the other tools people use and of the vernacular so you can communicate with other team members—these are important things.

Let’s take an example. A user story might sound something like this:

DeShawn: As a guy who gets a lot of ingrown hairs, I want to be able to have a shaving lotion that softens the skin so my whiskers can penetrate to the surface more easily.

Or this:

DeShawn: As a man in a long-term relationship, I want to have a smooth face so my girlfriend will not complain about my having a beard.

Job stories emerged as an alternative adaptation to user stories. Rather than being based on a persona, job stories are written based on actual feedback from real users. They are written in a slightly different format based on situations and circumstances rather than on demographics or a persona. 

As a reminder, Jobs To Be Done theory was popularized by business professor Clay Christiansen and is primarily a marketing innovation theory. It has been adopted in product and UX design as a useful tool for helping innovate on a product or experience. The sticky idea of JTBD theory is that all products have been “hired” to do a “job” for the customer. A hammer has been hired to drive nails, but that might be a too simplistic understanding of the actual job to be done. Because some hammers cause greater fatigue or muscle strain when used than other hammers, someone buying a hammer might be actually trying to do the job of driving nails while also not making my shoulder hurt at the end of a long work day. In marketing the application should be apparent—you would want to market the hammer based on being able to play with your kids at the end of your work day without the strain your current hammer is causing you.

In product design, our discovery efforts should be aimed at helping find our customers’ jobs they want to be done. Job stories help articulate those stories in the context of the user’s actual experiences.


The framing of a Job Story is the following:

When _____ , I want to _____ , so I can _____ .

Triggering event/situation, objective or task, intended outcome (job to be done).

Job stories should represent real scenarios gleaned from real customer interviews.

The more context you have for the triggering event, the stronger your design recommendation can be.

A couple of examples: 

When I shave with a non-electric razor, I want to take care of my skin and whisker follicles, so I can prevent ingrown hairs.

When my razor gets dull, I want to have a fresh razor on hand, so I can get a clean shave right away.

A couple things to note about these job story examples. In the first one, we have been specific with the scenario of shaving with a non-electric razor for clarity. The task is to care for the skin with the job being to avoid ingrown hairs. There’s no specificity about what to do about the skin … no mention of lotions, creams or oils. Those things might be the right solution eventually, but during the definition phase we want to avoid specifying types of solutions to make room for creativity and innovative solutions to solve this problem during the ideation phase. 

The job, as listed in the user story right now, is to prevent ingrown hairs, but there’s the possibility that it might go deeper to an underlying job that has more emotional impact. For example, the job might actually be: I want to avoid the unsightly red bumps that come with ingrown hairs—it’s a social pressure concern. 

Or, another example: It might be that I want to avoid the pain that comes with ingrown hairs. That’s a more physical concern. It could even be both. 

The point of these stories is to help expose the design team to the real motivation for certain decisions and the ultimate social and psychological driving forces that will inform the design solutions.","
Demonstrate writing both types of stories in context of the user flow.

Review notes from an interview example and discuss how user stories might emerge from interview.",,,,,,,,,Defining the Product,,Introduction to User Experience Design,Precourse UX,,1,,,1
Explain what a persona and proto-persona are and how they are used,Personas and proto-personas are used in UX design to help guide design decisions and keep design user-centric.,,"As much as possible, you should seek out information about your users that will allow you to make informed decisions about the designs that they will use. That is what the discovery phase is meant to do. Today we’ll discuss a few tools that help you make sense of and communicate the data collected during discovery. First, Personas and Proto-Personas are two tools that help you articulate what your users are like. 

*Persona*
Personas are statistically derived. Through survey data, analytics data, and other market research data, personas can be constructed as an aggregate of segments of your user base. 

For example, let’s say you design product and experiences for a mail-order shaving company. You know that one of your primary user segments consists of African American males of average age of 23, with an annual income of $27,000. Most members of this segment live in the midwest. Most (80%) are in a relationship, but are not married.

From this data you can create an individual to represent that aggregate: 

_DeShawn Jackson_

Works at a customer service call center for USAA in Texas. 

Has steady girlfriend. They’ve lived together for 2 years in an apartment outside of San Antonio.

DeShawn found out about your company through a Facebook ad.

He has always had trouble with ingrown beard whiskers and found that the balm you send with your razors really helped reduce the number of ingrown hairs.

With this persona, you have somewhere to look and reflect against when you design. You think, what would DeShawn want? How would DeShawn use this product? What other help does DeShawn need that we could fix? Working from real data gives you the best possible scenario for creating useable designs. But, it’s important to remember that aggregated data, though covering the majority of users, is necessarily incomplete. For example, for every 5 users one of them is not going to be in a relationship. You can’t forget completely about that person. Designing for a persona will get you better results than designing without one.

*Proto-persona*
Sometimes, you can’t get access to sufficient data to have a statistically derived persona. The proto-persona is the next best thing. With a proto-persona you’re creating a profile similar to the persona above. However, in the case of a proto-persona, much of the information is conjectural and based on intuition and stakeholder input rather than hard data. The proto-persona is more risky than a persona as the data is not validated in any way. But, in the absence of validated data, using a proto-persona becomes a tent-pole in support of your design. It can surface assumptions to the team. It allows you to take a stand and can emphasize the need for further research to reduce risk.",,,,,,,,,,Defining the Product,,Introduction to User Experience Design,Precourse UX,,1,,,1
Explain what a user journey map is,"Journey maps help the product team understand the context in which a product would be used. It helps them see the full ecosystem of the user's experience so design and development decisions can be based on realistic scenarios and expectations.
",,"With a persona or proto-persona established, designers will often move to create a user journey map. Creating a user journey map is extremely valuable to guide a product designer. Creating a map of our users’ experience with the full context of their lives and how that fits around the product we’re designing helps us empathize with the frustrations and opportunities facing them. It also helps us better anticipate the objectives our users have, what is currently helping them with achieving those objectives, and it opens the door for innovation to help them meet those objectives. 

Using the information you have gleaned from user research you begin to build out the journey. Going through the process opens your eyes to gaps in your understanding. It reveals questions you need to answer in order to move forward and highlights assumptions you’re making that need to be verified–or at least acknowledged.

When we read English, our eye doesn’t move smoothly to the right across the page, even though it seems to in our minds. Our eyes are actually jumping to the right and then back to the left in little micro movements called saccades. The movement helps orient the reader to the context of the word they are currently reading and anticipates future texts. 

The product development cycle is similar. We move forward on the cycle, but often must jump back or forward in order to be better informed for moving forward in the design process. It’s not a smooth flow from one phase to the next. There’s always some overlap.",,,,,,,,,,Defining the Product,,Introduction to User Experience Design,Precourse UX,,1,,,1
Evaluate a web design or mobile experience based on an understanding of user experience design,A user experience designer should be able to assess the strengths and weaknesses of an interface based on best practices of design and an understanding of human psychology.,,,,"Evaluate three experiences—websites, mobile apps, or web apps—and articulate:

-Who is the intended audience?
-What outcomes they were the experiences designed to achieve?
-How successful were the designs and achieving those objectives?

Point out design decisions that affect the overall experience.",,,,,,,,Usability Heuristics,,Introduction to User Experience Design,Precourse UX,,0,1,,1
Diagram a user journey map,Journey maps help the product team understand the context in which a product would be used. It helps them see the full ecosystem of the user's experience so design and development decisions can be based on realistic scenarios and expectations.,,,,"Demonstrate the diagramming of a user journey map. 

Build a user journey map of a grocery shopping experience. 


Stages—> Awareness, Consideration, Decision, Post-experience

Persona

Touchpoints—>
Thoughts—>
Feelings—>

Excited
Happy
Neutral
Unhappy
Angry

Recommendations—>",,,,,,,,Defining the Product,,Introduction to User Experience Design,Precourse UX,,0,1,,1
Write user stories and job stories,,,,,,,,,,,,,Defining the Product,,Introduction to User Experience Design,Precourse UX,,0,,,0
Explain the difference between creativity and innovation,"Ideation is expansive and creative. It is intended to be a stage where we can frack our inhibitions and extract the insights hidden in our subconscious. The ideation process frees us partially from the constraints that keep our products in the status quo. At this stage, free-association and out-of-the-box thinking are encouraged. We plant the seeds for new and creative ideas so that we can move forward with innovations that will take our service or product to the next level and outpace the competition. As a UX designer, you should make it your goal to keep your company in a monopoly—not in the sense of beating down the competition and eating them for breakfast, but in the sense that your product or service is so much better that no one else can compete. Through ideation we give our companies more opportunities to excel, more ways to stand out. 

In UX design, we use creative exercises to help find new solutions to problems or “jobs” that have emerged from our discovery efforts. We will now talk a little more about creativity and innovation.",,"*Creativity*
Creativity is for most designers the fun part of their job. It’s fun because there are no constraints. It’s a time where designers can flex their creative muscles. They can let their juices flow without thinking about the burdens of time, money, or the opinions of the HiPPo (highest paid person in the room). Creativity has no value in and of itself and can be dangerous in a business context. Creativity without discipline can be wasteful and derail a company from its mission. In art, creativity is valued for its own sake, because creativity is the product. But even in art, too much creativity will often not find a market—it will be art without viewers. 

*Innovation*
In business, creative thinking can open up doors to new markets, new product ideas, new innovations. Innovation is really just creativity with legs, so to speak. It’s creativity encased in a little discipline and broader application in helping people solve practical problems. UX designers can help give the ideas parameters and focus, audience and context. 

Without innovation, products become commoditized. Businesses that don’t innovate tend to fizzle, because the only thing they can compete on is price. Eventually, someone else comes up with a novel way of doing things or adds some other level of quality. Innovation trumps the commodity.",,,,,,,,,,Introduction to Ideation,,Introduction to User Experience Design,Precourse UX,,1,,,1
"Articulate, and participate in, effective ways to conduct creative exercises for ideation in UX design",,,"So let’s talk about a few creative activities you can participate with and lead as a UX designer.

*Brainstorming*
Brainstorming can be problematic. It’s a great way to build team camaraderie. It can be rejuvenating to spend an hour or two in a brainstorm session. But, research has shown that group brainstorming is actually not as effective at coming up with as many creative ideas as is independent brainstorming. If you get your three team members generating ideas for 10 minutes independently, you will likely come up with more and more creative ideas than brainstorming as a group. 

One way to mitigate this effect is to combine individual brainstorming with group brainstorming. The benefit of group work is in the synergy of building off others’ ideas. If you share your ideas after brainstorming individually and then discuss and brainstorm again either as a group or individually, you will gain the benefits of group synergy while also benefiting from the greater creativity inherent in individual brainstorming.

One other danger in a group brainstorming experience is the presence of high-ranking company officials. There is a tendency for such folks to be A-personalities—confident and aggressive. They tend to dominate the conversation in a brainstorm. This can sometimes be good but more often impedes the flow of ideation and many of the people present who also have great ideas don’t weigh in because of the dominating presence in the room. So, just keep that in mind. Don’t invite the big-wigs if you need creativity to flow.",,"Let’s take 10 minutes and conduct a brainstorm. Each of you grab a pencil and paper or open a text document and for two minutes I’ll time you. I want you to come up with as many creative ideas you can for a mobile shopping application. 

Your pencil or keyboard should never be idle. Don’t stop to think about your next idea. Don’t worry about your ideas not being good enough. No one is going to be looking at this list. If you can’t think of an idea at any point, if your mind goes blank. Please write down one of the following phrases:

Watermelon Ripeness Sniffer
Oreo Cookie Inversion Detector
Toothbrush Aisle Locator

Keep writing those until your subconscious kicks into gear and you have more ideas of your own. Just don’t stop writing. Let that action occupy your conscious mind so you don’t get in your own way.",,,,,,,,Introduction to Ideation,,Introduction to User Experience Design,Precourse UX,,0,1,,1
Explain why sketching is a useful tool for UX designers,,,,"Sketching is an important way to collaborate and communicate during ideation. Sketching is often intimidating to people without a background in art or drawing in general. Most people will tell you they are terrible drawers. But, if you can write with a pen or pencil, you can sketch in ways that will be super helpful in UX design ideation and communication.

By sketching early on, you help yourself avoid the temptation to make everything look perfect. If you sketch with a developer or teammate, you can surface ideas that can help them think critically about your thinking and your approach and quickly give you guidance on difficulty or concerns on their end. It allows you to pivot quickly. 

If you are too careful with your sketching, you defeat the purpose of taking pencil to paper in the first place. You’re not going for finished, high-fidelity design. You just want to get an idea across quickly. I often find that I can move more quickly accomplishing the same thing as sketching in a vector based app like Adobe Illustrator or Sketch, but the tendency is to stick with what you’ve got once you start building a concept digitally. It’s harder to pivot away from initial ideas. With sketching, you know you’ll have to start from scratch digitally, so everything you draw is throw-away work. That is what gives it its power.

I should remind you at this point that, in the words of Mike Montoya, “you are not your work and your work is not you.” Don’t get emotionally attached to what you’re creating. Sketching has the built-in obsolescence as soon as it’s created. It will help you learn to let go of your ideas if they aren’t working. Embrace your power to fail and pick yourself up again. 

Let’s practice! ",,,,,,"Value of Sketching,Guide to UX Sketching",Sketching User Experiences,,Introduction to Ideation,,Introduction to User Experience Design,Precourse UX,,0,,,0
Sketch experience and interface ideas with pencil/pen and paper,,,,"Sketching for UX interactions, both in storyboarding and in interface sketches, can be done with just a few simple shapes.

Oval. (I say oval because I can’t ever draw a perfect circle.) Rectangle. (Not square—maybe I should say trapezoid.) Triangle. (-ish.) Line. It doesn’t even have to be straight. Squiggly lines can be useful to represent text. And, as a bonus, if you can do a kind of star shape you can represent a person. It’s a cinch!","Take out a piece of paper and a pencil or pen. Erasing is not allowed! For the first exercise, draw 20 ovals. There should be four columns and five rows of ovals. The rows and columns should fill the page. I’ll give you 30 seconds. Ready, go!

Now I will time you for one minute and see how many of those ovals you can fill. I want you to fill them with one of the shapes we discussed:

Oval
Rectangle
Triangle
Line - Straight
Squiggles
Star

The one rule you have to follow is that no two ovals can contain the same shape as the one next to it to the left or right. So, you can’t just draw a bunch of lines. You have to mix it up. 

*Reverse wireframes*
Let’s deconstruct a few designs using reverse wireframing. I’ll talk more about wireframing in a later lesson, but the idea is that you capture the structure and essence of an existing design by sketching it in simple lines and boxes.

Draw outside container
Create guides or grid
Draw larger groupings
Add details/emphasis

Draw Google Search Page

Demonstrate elements — Quick draw Google

Draw — San Diego Zoo
Draw — Amazon.com Screenshot",,,,,,,,Introduction to Ideation,,Introduction to User Experience Design,Precourse UX,,0,1,,1
Name and define six usability heuristics/guidelines,"Wikipedia: 

A heuristic technique, often called simply a heuristic, is any approach to problem solving, learning, or discovery that employs a practical method, not guaranteed to be optimal, perfect, logical, or rational, but instead sufficient for reaching an immediate goal. Where finding an optimal solution is impossible or impractical, heuristic methods can be used to speed up the process of finding a satisfactory solution.",,"No design is perfect. There’s always room for improvement. Thus we use guidelines—or heuristics—to reach a solution that is good enough and ideally continue a cycle of improvement. 

A few researchers have created several guidelines for reaching the best outcome in an interface design.

We’ve condensed many of these heuristics into seven basic guidelines for designing interfaces. We use the metaphor of a road trip to help you remember and implement these guidelines. As a user experience designer, you are responsible for the entire experience. In this metaphor, that includes the road, the road signs, the car motor, the dashboard, the maps, the traffic signals, the steering wheel—everything about the trip. As with all metaphors, this one breaks down if examined to deeply, but it still provides a great way to think about designing for a great experience.","-Let Driver Drive
-Keep Driver Updated
-Show Driver the Way
-Keep Driver Out of Trouble
-Rescue Driver when Needed
-Delight the  Driver",,,,,,,,,Usability Heuristics,,Introduction to User Experience Design,Precourse UX,,1,,,1
Describe what a mental model is and why a designer should be aware of a user’s mental model,,,"Mental Models
It’s important to understand the concept of a mental model. A mental model is how the user perceives the operation of a device or interface (as opposed to how it actually works under the hood). When working, a designer generally knows a great deal about the details of the inner workings of a website or application. This detailed knowledge can often impede the designer’s ability to match their design to how users perceive the experience. 

An example of an improvement to a designed experience based on user’s mental model is the URL input field. Early browsers would respond with an error if you typed anything other than a URL in the box. Needing to resolve a webhost using a properly formatted URL is a detailed mental model of the system and how it works. But, users perception is that when they type in the box, it will take them where they need to go. The error is one way to deal with that mental model, but a better way is to help get the user closer to their intended destination. Hence, if the user types “wikipedia” rather than taken to an error page, the Chrome browser takes them to a Google search page where wikipedia.com is the first option and the user can click it. As designers, especially designers who understand how the basic structure of our system works, we will always be in danger of complicating the user experience unnecessarily by adhering to too complex a mental model of the experience.",,,,,,,,,,Usability Heuristics,,Introduction to User Experience Design,Precourse UX,,0,,,0
"Evaluate websites, desktop applications, and mobile apps against the criteria of usability heuristics/guidelines",,,,,,,,,,,,,Usability Heuristics,,Introduction to User Experience Design,Precourse UX,,0,,,0
control which information is exposed based on the currently-logged-in user,So far we've just exposed _all_ the data from a model to the entire world. But commonly it's desirable to restrict access to data on a per-user basis. We'll set that up with some additional Python code.,Up through _Filter Results by User_ in the Day3 doc: https://github.com/LambdaSchool/Intro-Django/blob/master/guides/day3.md,"If we try to POST a new record to the database, we see that it's missing the required `user` field (since it doesn't show up in the UI). We'll retrieve this data from the web request and add it to the record before posting.

Once we do that, we can:

* Show no results if the user isn't logged in.
* Show only pertinent results to logged-in users.

First, we'll override the `create` method in our `Serializer` so that we can add fields in addition to whatever was present in the UI form. Notably, we wish to add the user information.

We can use the built-in debugger to explore and see what fields are at our disposal.

Once we find where the user is stored in the request, we can pass that data into our model constructor and get a complete object to return from `create`.

Lastly, we can also override the list of results that we pass back for a GET request. Currently we have it set to return everything, but we'll modify this to return nothing when the user isn't logged in, and only the user's information when they are logged in.

Django's ORM filters make it easy to filter results.","#### Add the Required `user` Field, Use the Debugger

We can do that in our serializer by overriding a method from
`serializers.HyperlinkedModelSerializer` called `create`. This method needs to
return a new `PersonalNote` object constructed from the passed-in data, which is
in the `validated_data` parameter, like so by default:

In `api.py`, `PersonalNoteSerializer`:

```python
    # !!! Broken code still missing the user field

    def create(self, validated_data):
        note = PersonalNote.objects.create(**validated_data)
        return note
```

But we need to add the `user` field into the mix. If the user is logged in to
Django through this browser, that information is automatically included in the
request... but where? Let's use the debugger to explore and find out.

In `api.py`, `PersonalNoteSerializer`:

```python
    def create(self, validated_data):
        import pdb; pdb.set_trace()  # Start the debugger here
        pass
```

Run this and use the debugger to the data present at this breakpoint.  If you
dig into `self`, you will find eventually find a context with a request.  As an
educated guess, using what we’ve previously learned about requests, it is fair
to hypothesize that a user is associated with the request.  Try it out:

```python
self.context[‘request’].user
```

Exit the debugger and add a new variable in `create` to store the user retrieved
from the location in `self` that we just discovered. Feed it in to `PersonalNote.objects.create` as an additional keyword argument:

```python
    def create(self, validated_data):
        user = self.context[‘request’].user
        note = PersonalNote.objects.create(user=user, **validated_data)
        return note
```

This will add the needed data to the create method and allow the form to work.
Return to the `/api/notes/` page and test.  

You will receive a `201 Created` that may appear at first as if the data is
being overwritten.  Return to the main list page to confirm that everything is
being saved.  

Debug as needed, then commit.  

#### Filter Results by User

Finally, we have one major problem remaining.  Right now, any user can request
and see all of the notes that are in the database.  We need to filter them so
that only the appropriate ones are returned.  Return to `api.py`,
`PersonalNoteViewSet`.

Change `queryset` to initialize with `Note.objects.none()`.  This will create
the variable with an empty dictionary of the correct type.  To make a decision
based on whether or not the user is anonymous, and return only the notes that
belong to the logged in user, we can override a method called
`get_queryset(self)`.

Load the user into a variable.  This class has access to the `request` directly,
so it can be found with `self.request.user`.  

```python
    def get_queryset(self):
        user = self.request.user
```

If `user.is_anonymous`, we can return an empty dictionary of notes.  Otherwise,
we can use a filter to return only the correct ones with
`Note.objects.filter(user=user)`.

```python
    def get_queryset(self):
        user = self.request.user

        if user.is_anonymous:
            return PersonalNote.objects.none()
        else:
            return PersonalNote.objects.filter(user=user)
```

Test, debug, and commit.

#### Set up CORS

In order to get your site to run well with a front-end, you might need to set up CORS:

https://github.com/ottoyiu/django-cors-headers

After installation, setting:

```python
CORS_ORIGIN_ALLOW_ALL = True
```

should be enough.
",* Change another endpoint to show no data if the user is not logged in.,Ri79BRr8BCI,http://youtube.com/watch?v=Ri79BRr8BCI,https://www.youtube.com/embed/Ri79BRr8BCI,,,,,Building APIs,,Intro to Django,Computer Science Annex,,1,1,1,3
Explain the principles of visual hierarchy,,,"Visual hierarchy is the way we put things on a screen in order to show to the viewer what is most important. The user interface designs should help engage people quickly. Users should be able to swiftly find what they’re looking for and/or be guided to what we want them to see that will help them achieve their goals and objectives or meet their emotional needs.

You should always consider, especially for first-time users or for products that don’t have a captive audience you have less than five seconds to help people understand what they can do on the site or to find what they’re seeking—or at least get closer to it—or you’ve lost your user. People jump (the common parlance is bounce) from a site or application right away if they don’t have a sense of making quick progress.","What to think about when creating a screen layout.

Review principles of visual hierarchy:
Size
The larger something is, the more importance it has on the visual hierarchy. So you can use size as a way to let people know what you want them to look at. 

Generally speaking, the largest thing on the page gets looked at first. 

Photos tend to draw the eye more than other elements on a page. So, if you have say text and photos at roughly the same size, the photo will get the first glance. But, an extremely large headline will get glanced at before a relatively smaller photo.

Contrast
Contrast is a tool you can use to make one object stick out compared to another. More than just color, contrast is speaking about tonality and vibrancy. Black on white offers the largest contrast. The greater the contrast between and element and its background the more important it seems.

Spacing
Whitespace
White space is one way to use contrast. White space is not always literally white. It refers to the area around an object. It is also referred to as “ground” in the phrase figure and ground. Generally speaking, the more white space around an object the more attention it receives and the more important it seems—even if it’s small.
Proximity
We use proximity to help group related information and imagery together. By grouping things we can call attention and lend importance to the elements that might otherwise seem unimportant. So, by nestling a headline next to a large image, the headline might still be relatively small, but we understand its role and importance by its proximity to the image. Using proximity we’re really also guiding the eye. 

Composition
Composition is how the page or screen is laid out. It uses the size, contrast and spacing rules to create a flow and a sense of interest. Failing to thoughtfully consider a page composition opens the door for confusion and chaos. Those things don’t automatically happen, but if you are thoughtful it’s very easy to prevent chaos and confusion in your users.

So let’s consider a few things that help guide composition decisions.

Symmetry
Many untrained designers tend to design with symmetry. Symmetry is not bad, but it tends to be less engaging in compositions. There is certainly a place for symmetry in design. You should always keep it in your toolkit. It adds stability to a design, but it also is harder to use in interaction design, because it makes a path through a page more difficult to find and follow.

Rule of Thirds
The rule of thirds is used to add interest to a composition and it is simple to remember and powerful in its use. The rule of thirds just means that if you were to divide your page or screen by two vertical, evenly spaced lines and two horizontal and evenly spaced lines, you would place your element of focus at the point of intersection of two of the lines. This is just a very solid, useful guideline that can quickly turn a stale layout unto an interesting one.

Rule of Odds
The rule of odds tells us that humans tend to respond better to odd numbers of elements as opposed to even ones. This is related to symmetry in that even numbers, being divisible by two, are a little more boring than odd numbers. They engage the mind a little less.

Implied Movement
Implied movement helps keep a user engaged. In one of our other classes, we talked about saccades. That is the small movements of the eye while reading. Saccades happen basically whenever we’re looking at anything. The saccades are our eyes taking in all the things. It becomes a shorthand for understanding. By laying out our page with implied movement we help guide the saccades to the next item of interest that will help carry the narrative of our pages forward. We create implied movement by creating diagonal relationships between the elements of our page or by incorporating actual imagery of implied movement. Implied movement adds energy and engagement to our designs.

Location
The location of our elements on the page help give it structure and sense of importance. Things higher on the page tend to seem more important, so you don’t want to push your important messages low on the page. 
Below the fold
There’s a term that emerged from the newspaper lexicon and has caught hold in web and mobile contexts, in spite of its literal ridiculousness and that is “below the fold”. When newspapers were sold in stands. You had basically the top half of the page to grab people’s attention. When designing a news page, you had the whole page open on the screen, but you had to be aware of where that page would end up being folded, so you didn’t bury your most compelling headlines where no one could see them. Now people refer to anything off-screen as below the fold. But, the fold is not consistent across devices, so digital designers have to be even more thoughtful

Banner Blindness
There have also been layouts that have caused parts of the screen to be ignored. For example, the right side of most websites was used as a place for advertising to the extent that people began to completely ignore content in that location. Sites that put important information there suffered because people simply didn’t look. They felt the ads were not relevant to them, so they began to ignore all content where the irrelevant ads tended to be placed. As designers we need to continually understand the perceptions of users and how they engage with a website or application so we can structure our pages in a way that is most useful to them in their context.",,,,,,,,,Visual Hierarchy and Wireframes,,Introduction to User Experience Design,Precourse UX,,0,,,0
Apply principles of visual hierarchy with wireframes in Sketch,"Wireframes, like sketching, are a way to quickly convey design intent. Wireframes become a communication tool. They are relatively fast to make, so can inform quick design iteration and can even be used in some user testing. Essentially, wireframes are the rough-draft of design and are meant to give you a quick way to demonstrate design concepts, get feedback and move on to high-fidelity design.",,,,,,,,,,,,Visual Hierarchy and Wireframes,,Introduction to User Experience Design,Precourse UX,,0,,,0
set up a usability test,The ability to set up a usability test will pay dividends in increased understanding of the product and the user.,,"#Introduction
According to 18F, a unique five-step process to follow when preparing for a remote moderated usability study is as follows: 
- Choosing what to test
- Planning for research
- Recruiting users and informing their consent
- Running the sessions (we recommend three sessions at 45 minutes each)
- Discussing and sharing the results

After setting up a prototype or determining what competitor to test, you recruit users to do the study with you. At a minimum, you can test on a family member or roommate for free. You can send out a request for users through social media, but you can quickly exhaust your pool of participants, especially if you want to test users unfamiliar with your product.

We've often offered a small stipend to those who participate—maybe a gift card to Amazon.com, for example. You can send those through email, so it's an excellent option. When budgets have allowed, I have used a marketing research company to recruit people in a specific demographic that I know represents my user. The key is to get someone, but remember that if you test someone outside of your core audience, they might not give you the type of actionable information that you need to make appropriate improvements to your product.

Before the interview, you create a guide with questions you want to answer. Then when you bring in your participants, you're giving each of them essentially the same experience. It allows you to think about how to ask the questions ahead of time and phrase them in a way that doesn't lead your users to a specific conclusion you want to hear.

#Choosing what to test
When choosing what to test, it's essential to test as early and often as possible. Test prepared user flows. Test prototypes. If you're selecting between a multitude of options, choose the option that provides the most value first. High-value options include core user flows/pages/experiences that exist within your design. In other words, options that help the user must interact with to reach their end goal.

#Planning for research
You'll want to coordinate with other stakeholders and team members to find an appropriate timeline for your research projects. You'll also need to consider what you want to learn, who will moderate, and who will observe. It's vital that you get these details in order before embarking on your research project. Some designers choose to figure out the details in a collaborative meeting with the rest of their team. Other designers want to work on the details independently and present/review with the rest of your organization. Either way is fine.

After you've decided what you're going to test, you'll need to prepare your script and prototype. In my experience, it's helpful to complete both in tandem, making sure that whatever you're asking the participant to do in the script is possible within the prototype. If you're working solely as a user researcher, you'll need to coordinate with your UX designer to ensure everything matches up. Here is a sample test script from 18F: <https://docs.google.com/document/d/1kgZ1yznnfwB614i96ONJcA7T5k5en68qtDbeWr1uJtA/edit?usp=sharing>

You'll notice that the script includes the following vital beats: Introduction, warm-up, tasks, follow-up, and closing. This format is quite standard and is an excellent template to follow when creating a usability test script of your own. 

#Recruiting users and informing their consent
Once you've coordinated and planned your research, your next step is to recruit. There are several ways to recruit participants, but ideally, you'll begin with a screener. A screener is a short questionnaire that you'll use to ensure you're recruiting the right users. An example from 18F goes as follows:
""Help us improve the design of OPM.gov! Sign up to participate in a remote usability test by emailing participate-18F@gsa.gov. Learn more about how we'll protect your information at <https://www.gsa.gov/reference/gsa-privacy-program/privacy-act-statement-for-design-research>""

You'll want to give your participants a couple of days to respond. It's also helpful at this stage if you use a scheduling tool, such as Calendly, to help manage your schedule for you. After you find participants that meet the criteria of your study, you can send out an additional email with more information and a link to your scheduling tool of choice. An example from 18F goes as follows:
""Hi there,
My name's Andrew. I'm working with OPM to incorporate feedback into our design process. I'm reaching out to confirm your interest in participating in a usability test.
Do you have any time in the next week to share your thoughts? We'll only need about 45 minutes. During the test, we'll ask you to share your screen and accomplish some tasks using a design concept. If that works for you, please book an appointment with our team at the following link: [Calendar appointment link]
Thanks,
Andrew
PS: If you do not wish to participate in this test, please ignore this email. If you do not want to be contacted for any future test related to my work, please reply to this email requesting to be removed 
from my contact list.""

Next, you'll need to prepare a participant agreement. This agreement will vary widely depending on your organization. Here's an example of a participant agreement: <https://methods.18f.gov/participant-agreement/>. Broadly, this will explain the nature of the studies and any implications implied because of them.",,,,,,,"Usability Testing - 18F Method,Moderated User Testing 101",,,Usability Testing,,"Introduction to User Experience Design, Prototyping","Precourse UX, UX Design Core",,1,,,1
conduct and analyze a user test,The ability to conduct and moderate a usability test effectively will open the door to a much improved design process and make you more marketable to employers.,,"#Run the Sessions
It's test day! Begin by sending all your participants any logistical information. Logistical information includes screen sharing software they'll need to download and prepare ahead of time. You'll likely be running on a tight deadline, and you'll want to try to mitigate as many issues as you can ahead of time. Before the test occurs, you'll want to double check that everything is working as planned. You'll also want to ensure that you have a backup method for conducting the study if necessary. Frequently, a backup process is simply a telephone number and a handheld recording device.

#Discuss and share results
After you've finished your usability testing sessions, it's time to analyze your results. Before analysis begins, it can be helpful to share raw data with stakeholders who may have a direct interest. If you've recorded the sessions, you can send the raw video with timestamps showing specific points in the usability test that you'd like to highlight. There are ultimately several ways you can go about this analyzing your results. Analyzing usability tests can be a solo endeavor, or can be done in a group. As you're analyzing your results, you'll want to highlight task completion rates, patterns you noticed, differences between what users said and what they did, new answers to questions you've posed, and anything else you saw. Remember the goal that you set forth before beginning your usability test and make sure to answer it.

It's a good idea also to include design recommendations with your report. Design recommendations will help to ensure that your team sees a clear path forward following usability testing. The suggestions that you make should be based directly on user research findings and usability heuristics. Remember, you want to remain unbiased when making recommendations.
You should share your results with all stakeholders involved in the creation of your product. Make sure that your final report is visually compelling and easy to digest. The more enjoyable you make it for people to view, the more likely the results will be used and shared with others.

Make sure to conclude your research with how you plan to use the results of the study and the next steps. Usually, this includes design decisions and conducting additional research where the results were inconclusive. If you've discovered several issues it's good to prioritize them in the order they'll be addressed.

#Recommendations
Once your research is complete, it's time to implement your research findings into your design. At this point in this process, you should have reviewed the research findings with key stakeholders, discussed your recommendations, and have a clear direction forward. If not, you must first circle back with key stakeholders and ensure that everyone is on the same page regarding what needs to happen next.

Implementing your recommendations is a reasonably straightforward process. Depending on where you're at in the design process, you'll go back to your wireframes or high-fidelity designs and add in the changes. Once you implement your changes, you'll want to circle back with stakeholders, review the changes, and if possible, test again.

Check out a sample usability test report from Xtensio here: <https://app.xtensio.com/folio/xgipqa0z?_ga=2.17410940.430712952.1557930008-1134029466.1556210143>",,,,,,,Reporting Usability Test Results,,,Usability Testing,,"Introduction to User Experience Design, Prototyping","Precourse UX, UX Design Core",,1,,,1
incorporate findings from research into design,"The most important value a UX designer brings to testing is the ability to take the findings of the test and convert it to improvements in the design.
",,,,,,,,,,,,User Testing in Practice,,Design in Practice: Solo Project Week,"UX Design Core [v1 deprecated], UX Design Core",,0,,,0
,,,,,,,,,,,,,,,,,,0,,,0
Use Sketch to create a high-fidelity mock-up,Sketch is currently the _de facto_ interface design program. Understanding its use in creating high-fidelity mock-ups is important.,,,,,,,,,,,,High Fidelity Design and UX Wrap Up,,Introduction to User Experience Design,Precourse UX,,0,,,0
explain what is authentication and provide guidelines for password security.,"Authentication and Authorization (also known as authN and authZ) are often confused or used interchangeably, but they don't mean the same thing. In this section we'll cover what they are and see how the different.

We will also talk about why implementing authentication is challenging and the things to keep in mind when dealing with credentials.",,"**Authentication** is the process by which our Web API verifies the identity of a client that is trying to access a resource. This is different from **Authorization** which comes after authentication and determines what type of access, if any, a user has to a particular resource or part of it.

Adding authentication to a Web API will required implementing ways to:

- register user accounts.
- login to prove identity.
- logout of the system to invalidate the user's access until they login again.
- add a way for users to reset their passwords.

Doing authentication properly is a hard problem to solve. It is a constant race between security experts coming up with innovative ways to protect our information and attackers coming up with ways to circumvent those security measures.

Some of the things we need to take into account when implementing authentication are:

- password storage
- password strength
- brute-force safeguards","Let's tackle the first one, **password storage**. The rule of thumb is: **NEVER, EVER, under no circumstances store user passwords in plain text**. Then what are the two main options:

- encryption.
- hashing.

##### Password Hashing vs Encryption for password storage.

- Encryption is two-way that goes: plain text + private key = encrypted password and then encrypted + key = original password.
- Cryptographic Hashes are one way: parameters + input = hash. It is pure, given the same parameters and input it generates the same hash.

If the database of users and the key are compromised, it is possible to decrypt the passwords to their original values, this is bad because users tend to share passwords across different sites. This is one reason why **Cryptographic Hashing is the preferred method of storing user passwords**.

##### Password Strength

Password length alone is not enough to slow password guessing, but easy to remember long passwords are better than short complicated passwords. It is a trade off between convenience and security.

Visit [this site](https://www.grc.com/haystack.htm) and see how a combination of password length and complexity affects an attacker's ability to pre-generate password hashes.

##### Brute-Force Attack Mitigation

A common way that attackers circumvent the one way nature of hashing algorithms is by pre-calculating hashes for all possible character combinations up to a particular length using different hashing techniques. The result of that then is store into a database table known as a **rainbow table** and whenever there is a breach and an attacker gets access to a database with hashed passwords, they check every password against their table.

Which Cryptographic Hashing Algorithm should we use? MD5, SHA-1, SHA-2, SHA-3? none of these, because they are flawed, they are optimized for speed, not security.

We aim to slow down hackers' ability to get at a user's password. To do so, we are going to add **time** to our security algorithm to produce what is known as a **Key Derivation Function**.

[Hash] + [Time] = [Key Derivation Function].

In the next section we'll learn how to use a popular Key Derivation library to safely store user passwords.",Write a paragraph that explains the difference between authentication and authorization and send it to your PM on slack.,,,,,"bcrypt npm module,User Account Best Practices","bcrypt defined,The Seif Project,Plain Text Offenders,OWASP Top 10","- What is unique about a hash function that make would make it so awesome for encrypting plain text passwords?
- is it better to encrypt or hash passwords? why?
- How does bcrypt helps when storing passwords safely.
- why do we add time/cost to our encryption/hashing algorithm? what is a good number of rounds?
- What recommendations would you give a user in regards to selecting a more secure password.",Introduction to Authentication,,Authentication,Full Stack Web Development Core,,1,1,,2
explain data normalization and normal forms,"The relational database model is differnt from the object model we use in our JavaScript code. In JavaScript we can add arrays or nested objects to our entities. A client can have multiple address embedded as an array. But that same relationship in a relational model could result in data repetition and other _anomalies_.

In this section we'll learn how this problems can be avoided by applied a process called `data normalization`.",This topic is very deep and this section cannot do it full justice. Cover the basics and encourage exploration.,"`Normalization` is the process of designing or refactoring your tables for maximum consistency and minimum redundancy.

With objects, we're used to _denormalized_ data that is stored with ease of use and speed in mind. Non-normalized tables are considered an anti-pattern in relational databases.

##### Anomalies

One of the reasons for normalizing tables is to avoid _anomalies_.

**Insert anomaly**: When we cannot insert a row into the table because
some of the dependent information is not yet known. For example, we
cannot create a new class record in the school database, because the
record requires at least one student, and none have enrolled yet.

**Update anomaly**: When information is duplicated in the database _and_
some rows are updated but not others. For example, say a record contains
a city and a zipcode, but then the post office changes the zipcode. If
some of the records are updated but not others, some cities will have
the old zipcodes.

**Delete anomaly**: The opposite of an insert anomaly. When we delete some
information and other related information must also be deleted against
our will. For example, deleting the last student from a course causes
the other course information to be also deleted.

By normalizing your tables, you can avoid these anomalies.","There are many _normal forms_. We'll talk about First, Second, and Third normal forms.

##### First Normal Form (1NF)

When a database is in first normal form, there is a primary key for each
row, and there are no repeating sets of columns that should be in their
own table.

Unnormalized (column titles on separate lines for clarity):

    Farm
        ID
        AnimalName1  AnimalBreed1  AnimalProducesEggs1
        AnimalName2  AnimalBreed2  AnimalProducesEggs2

1NF:

    Farm
        ID

    Animal
        ID  FarmID[FK Farm(ID)]  Name  Breed  ProducesEggs

Use a [_join_](#joins) to select all the animals in the farm:

```sql
SELECT Name, Farm.ID FROM Animal, Farm WHERE Farm.ID = Animal.FarmID;
```

##### Second Normal Form (2NF)

To be in 2NF, a table must already be in 1NF.

Additionally, all non-key data must fully relate to the key data in the table.

In the farm example, above, Animal has a Name and a key FarmID, but
these two pieces of information are not related.

We can fix this by adding a table to link the other two tables together:

2NF:

    Farm
        ID

    FarmAnimal
        FarmID[FK Farm(ID)]  AnimalID[FK Animal(ID)]

    Animal
        ID  Name  Breed  ProducesEggs

Use a [_join_](#joins) to select all the animals in the farms:

```sql
SELECT Name, Farm.ID
    FROM Animal, FarmAnimal, Farm
    WHERE Farm.ID = FarmAnimal.FarmID AND
          Animal.ID = FarmAnimal.AnimalID;
```

##### Third Normal Form (3NF)

A table in 3NF must already be in 2NF.

Additionally, columns that relate to each other AND to the key need to
be moved into their own tables. This is known as removing _transitive
dependencies_.

In the Farm example, the columns `Breed` and `ProducesEggs` are related.
If you know the breed, you automatically know if it produces eggs or
not.

3NF:

    Farm
        ID

    FarmAnimal
        FarmID[FK Farm(ID)]  AnimalID[FK Animal(ID)]

    BreedEggs
        Breed  ProducesEggs

    Animal
        ID  Name  Breed[FK BreedEggs(Breed)]

Use a [_join_](#joins) to select all the animals names that produce eggs
in the farm:

```sql
SELECT Name, Farm.ID
    FROM Animal, FarmAnimal, BreedEggs, Farm
    WHERE Farm.ID = FarmAnimal.FarmID AND
          Animal.ID = FarmAnimal.AnimalID AND
          Animal.Breed = BreedEggs.Breed AND
          BreedEggs.ProducesEggs = TRUE;
```","Normalize the the following customers table:

| id  | name         | city     | state |
| --- | ------------ | -------- | :---: |
| 1   | John Doe     | Miami    |  FL   |
| 2   | Jane Doe     | Miami    |  FL   |
| 3   | Frank Castle | New York |  NY   |
| 4   | Tony Stark   | New York |  NY   |
| 6   | Peter Parker | New York |  NY   |",,,,,Database Normalization Explained in Simple English,"Description of the database normalization basics,Database Normalization (Wikipedia)","* why is normalization important?
* give an example of a table structure that violates the first and second normal forms.
* what anomaly does the third normal form corrects?",Introduction to Data Modeling,Active,Adding Data Persistence to Web APIs,Full Stack Web Development Core,,1,1,,2
understand what shared preferences are,,,,,,9pt9ddX6pRI,http://youtube.com/watch?v=9pt9ddX6pRI,https://www.youtube.com/embed/9pt9ddX6pRI,,,,,Shared Preferences,,Android Fundamentals II,Android Development Core,,0,,1,1
understand and  explain the purpose of JSON,"JSON, or _Javascript Object Notation_, is what's called a data-interchange format. Think about the problem of sharing information between two computer systems. They may _speak_ a different language and store information differently. To allow for information to flow from one computer system to another, we must have a mutually agreed upon set of rules for formatting said data.",,"This problem has been solved many times over since computing began and while JSON is unlikely to be the last, it is remarkably lightweight and useful not only to computers but to humans as well. It is easy to read and to write, and it is easy to parse by a computer program. Many times interchange formats end up serving the needs of the computer more than the human, and make them fairly unreadable. See the following examples below.


Here's a simple data structure in XML:
```
<todo>
    <to>Jennifer</to>
    <from>Marissa</from>
    <heading>Shopping List</heading>
    <item>
        <description>milk</description>
        <aisle>1</aisle>
    </item>
    <item>
        <description>cheese</description>
        <aisle>1</aisle>
    </item>
    <item>
        <description>bread</description>
        <aisle>6</aisle>
    </item>
</todo>
```

And the same data, but in JSON:
```
{
  ""todo"": {
    ""to"": ""Jennifer"",
    ""from"": ""Marissa"",
    ""heading"": ""Shopping List"",
    ""items"": [
      {
        ""description"": ""milk"",
        ""aisle"": ""1""
      },
      {
        ""description"": ""cheese"",
        ""aisle"": ""1""
      },
      {
        ""description"": ""bread"",
        ""aisle"": ""6""
      }
    ]
  }
}`
```

As you can see, the JSON is much more human-readable, both because it has less cruft, but also because the reader can more clearly see the hierarchy of data. The other obvious advantage to front end developers is that JSON is fully compatible with Javascript, since it is derived from that language.

Here are some rules of thumb when examining JSON:

1. If you see a set of `[]`, the data contained within is an array or list.
2. If you see a set of `{}`, the data contained within is an object or dictionary.
3. All data is set up in `key-value` pairs. So `description: milk`, or `items: []`.
4. Keys are always strings.
5. Values can be a string, a number, an object (dictionary in Obj-C and Swift), an array, true, false, or null.

Take a look at the [JSON Spec](https://json.org) homepage for more information and some cool visuals showing how JSON is parsed. While it may seem otherwise, the above rules are pretty much all there is to JSON, so getting proficient with it only requires some practice converting into/out of the format in the programming language you're using. Both Swift and Objective-C have libraries for helping to make encoding/decoding easy.",,,jL1aobRgXZw,http://youtube.com/watch?v=jL1aobRgXZw,https://www.youtube.com/embed/jL1aobRgXZw,,,,,REST Basics and Enums,,iOS Networking Basics,iOS Development Core,,1,,1,2
,,,,,,,,,,,,,,,,,,0,,,0
configure a git identity and default editor on a computer,,,,,,U5flh0sRGBU,http://youtube.com/watch?v=U5flh0sRGBU,https://www.youtube.com/embed/U5flh0sRGBU,,,,,iOS Development Tools,,iOS Fundamentals I,iOS Development Core,,0,,1,1
"configure a global "".gitignore"" to exclude files that do not participate in version control",,,,,,0fzNSluYjNM,http://youtube.com/watch?v=0fzNSluYjNM,https://www.youtube.com/embed/0fzNSluYjNM,,,,,,,,,,0,,1,1
create a new GitHub.com account to share projects,,,,,,https://youtu.be/GeyDJAwTEO8,http://youtube.com/watch?v=https://youtu.be/GeyDJAwTEO8,https://www.youtube.com/embed/https://youtu.be/GeyDJAwTEO8,,,,,,,,,,0,,1,1
"create a new version-controlled project, starting at GitHub.com.",,,,,,https://youtu.be/txRu0pWqR_c,http://youtube.com/watch?v=https://youtu.be/txRu0pWqR_c,https://www.youtube.com/embed/https://youtu.be/txRu0pWqR_c,,,,,,,,,,0,,1,1
add version control and connect an existing project to GitHub.com,,,,,,https://youtu.be/1W4Pbpsb9_s,http://youtube.com/watch?v=https://youtu.be/1W4Pbpsb9_s,https://www.youtube.com/embed/https://youtu.be/1W4Pbpsb9_s,,,,,,,,,,0,,1,1
contribute to a GitHub.com project by forking and submitting pull requests,,,,"What makes a good pull request:

* It explains what you've done and why you've done it: ""This updates the README.md file to document the Hello World project"".
Optionally explain the background and context of this change so it's clear to anyone who hasn't carefully memorized a repository's history.
* Use a professional tone.
* Check your spelling and grammar.
* Specify what feedback you want: ""a quick pair of 👀 on the code, discussion on the technical approach, critique on design, a review of copy."" and when you want it.
* Use [WIP] for a work in progress and [Do Not Merge] for material that's experimental.
* Use GitHub's @username feature to mention people you want notified about this pull requst.
* After submitting the request, you can request specific reviewers (it's built into the interface) to look over the request.
* Point out the comment area below the request, where you can talk back and forth before a decision is made on whether to merge changes.

The big green check means ""this branch has no conflicts with the base branch"". The alternative is conflict resolution, where the pull request may need to be manually merged or rejected.",,https://youtu.be/ggP3jBpWZwQ,http://youtube.com/watch?v=https://youtu.be/ggP3jBpWZwQ,https://www.youtube.com/embed/https://youtu.be/ggP3jBpWZwQ,,,,,,,,,,0,,1,1
understand and explain version control,,,,,,aKmW0oe_aEU,http://youtube.com/watch?v=aKmW0oe_aEU,https://www.youtube.com/embed/aKmW0oe_aEU,,"Pro git,git cheat sheet",,,iOS Development Tools,,iOS Fundamentals I,iOS Development Core,,0,,1,1
"create good commits that are focused, self-contained, and well-described",,,,"A good commit is small, focused, and fixes only one project, one bug, or one feature, not several things at once.

* Adding too many things to a single commit muddles the purpose of the commit.
* Adding too many things to a single commit makes it hard to revert only part of that commit.
* Avoid committing until it compiles and works.
* Committing too often means each commit is too trivial, that it doesn't complete a full task, and it clutters your history.

A good commit uses a clear and effective message. Remember, you're writing to humans, so communicate well. ""Changed stuff"" is bad. See XKCD comic: https://xkcd.com/1296/

A good commit message is brief but not too brief. Describe the bug you fixed or the feature you implemented, or the thing you improved (like performance or another enhancement). People can look at your diff and see the code changes you made.

Finish a phrase starting with ""This commit will..."". For example, ""fix a bug that caused app to crash when the user pressed return with an empty text field"", ""remove dead code from input handling"", ""Request user-confirmation to empty the in-box"".

Explain what you changed and why you changed it but not how. ""How"" is an implementation detail that can be discerned from diffs.",,https://youtu.be/0jO9BUQUcsY,http://youtube.com/watch?v=https://youtu.be/0jO9BUQUcsY,https://www.youtube.com/embed/https://youtu.be/0jO9BUQUcsY,,git commit comic,,"Write commit messages for:

* There was a bug that crashed when users scrolled too fast.
* You added a new tab that shows an activity overview for the last week.
* You redesigned a loop so it runs much faster now.",,,,,,0,,1,1
create and manage version control branches,,,,,,,,,,,,,,,,,,0,,,0
understand and explain common version control vocabulary,,,,,,https://www.youtube.com/watch?v=ng9m3EGLeTY,http://youtube.com/watch?v=https://www.youtube.com/watch?v=ng9m3EGLeTY,https://www.youtube.com/embed/https://www.youtube.com/watch?v=ng9m3EGLeTY,,,,,,,,,,0,,1,1
,,,,,,,,,,,,,,,,,,0,,,0
use lightweight migration to migrate an older Core Data store to a newer version,"As an app evolves and grows to meet the demands of its users, new features often necessitate updating the format of the persistent data it stores. When a newly updated version of the app first opens data stored by an older version, it will need to first convert that data to the new format. We call this process _data migration_. Data migration can be a tricky and error-prone feature to get right. Thankfully, Core Data can help you keep track of multiple versions of your data model and migrate data between them. In this objective, you'll learn about Core Data's support for _lightweight migration_.","Explain lightweight migration, and go over the changes that qualify for automatic migration. Show how to create a new model version in Xcode and set it as the current model version.","Core Data has sophisticated support for data migration. It essentially provides three types of migrations, in order from simplest and easiest to most complex and difficult:

- Lightweight migration
- Migration using a mapping model
- Fully custom migration

Lightweight migration is entirely automatic. You create a new version of your data model alongside the old one, and Core Data is able to infer the differences between them and how to migrate data saved using the older model version to the newer one. However, lightweight migration only works if the changes to your model are relatively simple, as discussed in more detail later.

If the changes to your model are more complex than lightweight migration allows for, you can use a mapping model. A mapping model is a file that you create to tell Core Data how to convert data from an older model format to a newer one. It is fairly sophisticated, and lets you set up various transformation rules. It certainly takes more work to use than lightweight migration, but it still doesn't require you to write any code.

If neither lightweight migration nor a mapping model are sufficient to provide Core Data with the information it needs to migrate your data, you can do fully custom migration. When you do a fully custom migration, you write code that reads objects in your older data store and creates corresponding objects in the new store. Because you're writing code, you can essentially do anything required to migrate your data. This migration method is very powerful, but it's also the trickiest and requires the most work on your part. Even so, Core Data does provide API that guides you and encapsulates the migration code. In other words, even if you end up doing fully custom migration, it's likely that the migration code you write will be simpler and easier than if you had to do it without Core Data at all.

In this lesson, we're only going to cover lightweight migration, which is sufficient for most migrations.

#### Requirements for Lightweight Migration

There is a specific list of model changes that are allowable if you want to use lightweight migration. Basically, the changes need to be straightforward enough that Core Data can infer with certainty how to convert from the old data to the new. The allowable changes are:

- Addition of new optional attributes
- Addition of new non-optional attributes with a default value
- Removal of an attribute
- A non-optional attribute becoming optional
- An optional attribute becoming non-optional, and defining a default value
- Renaming an entity, attribute, or relationship
- Addition of a new relationship or deletion an existing relationship.

There are a few other esoteric changes that lightweight migration can support, but you're unlikely to encounter them.

#### Enabling Lightweight Migration

If you're using `NSPersistentContainer` to create your Core Data stack, you don't need to do anything to enable lightweight migration. It will be enabled for you, and the first time your app runs with a new model format, older data will automatically and transparently migrated to the new format.

If you're **not** using `NSPersistentContainer` (you should be!), you can enable lightweight migration by setting the `shouldInferMappingModelAutomatically` and `shouldMigrateStoreAutomatically` properties to true on `NSPersistentStoreDescription` before passing it to `NSPersistentStoreCoordinator.addPersistentStore(with:, completionHandler:)`.",Add a new model version with an additional attribute to the app built in the last objective. Open the app and verify that the existing data is opened and migrated correctly.,Try making a change that is **not** on the list of acceptable changes for lightweight migration and see what happens when you try to run the app.,,,,,Core Data Model Versioning and Data Migration Programming Guide,,,"""Core Data II - Migration, Fetching, and Predicates""",,Core Data,iOS Development Core,,1,1,,2
explain what automated testing is and why it's important.,"Testing is essential for software quality. It should be integrated into the development process from beginning to end. We should not wait until a feature is complete to start testing it.

Testing software manually on every commit to source control or every time we make a change does not scale. Automated testing works by using software to test our code.

In this module we'll learn how automated testing works and why it is considered a good practice by industry experts.",,"Testing minimizes the risk of bugs finding their way into production code. **Testing is NOT optional**, it should be a part of every developer's workflow. The feature is not done until it's fully tested.

Some of the benefits of testing our software are:

- verifying correctness.
- confidence. Trust in the code.
- minimizes the risk of `regressions`.
- acts as a safety net when making changes or _refactoring_.

We know adding automated tests will help boost the quality of the code we write, but it is also a good skill to have. Learning to write automated tests have many benefits, including:

- it's good for your resume. Companies of all sizes understand the importance of adding tests to their software and value developers that can write automated tests.
- can work on QA or DevOps. Can help you land your first job as _Quality Assurance_ or _DevOps_ if your dream company has no open developer positions at the moment.
- helps to understand how an existing application works. Most of your time as a developer will be spent reading existing code, often that code was written by someone else that may not be available. Understanding how legacy code works is a lot easier if there are test.
- helps clarify requirements. The exercise of writing tests for a feature requires a deeper understanding of the requirements and reveals gaps in our knowledge of the problem domain.","By now we see the benefits of writing tests, but what is the alternative? what could happen if we DO NOT write automated tests?

- software needs to be tested manually.
- as the application grows it takes longer to test it.
- higher risk of introducing _regressions_. Code that used to work, breaks unexpectedly.
- uncertainty about the software working correctly on all cases, including _edge/corner cases_.
- making changes becomes exponentially slow.
- **angry customer** due to product failures.

##### Types of Tests

- unit tests.
  - fast.
  - simple to write and execute.
  - used to test correctness.
  - written by developers.
  - useful when practicing TDD/BDD.
- integration tests. [why it is important](https://giphy.com/gifs/fail-technology-i5RWkVZzVScmY). [Other Examples](https://www.google.com/search?q=unit+no+integration+gif&tbm=isch&tbs=rimg:CSh2jvy7r9klIjh78ga5XFwkIKQ4JymZApTDg_1WSGwAJHfMPBYd3LbstEUYnkckATqo-CfjGQRreAFSw1_1OMFzUZsyoSCXvyBrlcXCQgEb5dMt0Lp2aTKhIJpDgnKZkClMMRDpcWwjll4AIqEgmD9ZIbAAkd8xHMnQyX00AM5SoSCQ8Fh3ctuy0RETgE1Jmb_1VC0KhIJRieRyQBOqj4Rk7Mu7Oid420qEgkJ-MZBGt4AVBF5WvgrJsyCyyoSCbDX84wXNRmzEZBXrJQVIIBu&tbo=u&sa=X&ved=2ahUKEwiAwoXKtd3bAhVlyFQKHTvfCioQ9C96BAgBEBs&biw=2048&bih=1019&dpr=1)
- component testing. (for component based frameworks, like React, Angular, Vue, etc.)
  - appearance and functionality of a component.
  - highly sensitive to small changes.
  - great against regression.
  - verifies changes to component output resulting from changest to state.
  - does not verify interaction between components.
- end to end. Slow to execute.
- snapshot testing. (unique to our stack/tools)
  - automatically generated by Jest.
  - sub-type of component testing.
  - checks current output against prior output.
  - fails with any change to the component.
  - very good to detect regressions.
- coverage testing.
- functional testing.
- performance testing.
- aceptance testing.
We will cover

- unit .
- component.
- snapshot.
- integration.

##### Tooling

- test runner (Mocha, Jasmine, Jest, QUnit)
- assertion library (Chai, Assert, Jest, Jasmine).

We will use Jest in combination with other tools.",Write a paragraph describing what is automated testing and send it to your PM on Slack.,,,,,,,,,,,,,1,1,,2
describe how a computer's memory model works and how pointers relate to this memory model in C,"One of the main differences between C and other languages students have utilized over the course of Lambda School is that C explicitly manipulates memory addresses and the values those memory addresses point to. This is done for a number of reasons:

- Pointers allow us to separate the actual reference from the value, which can be useful when we want to pass values around. Instead of always having to copy the value around in order to pass it, we can just pass the pointer to the value.

- Functions in C only permit one return value. If we need to return multiple values from a function, this issue can be circumvented by having the function return a pointer to all of the desired return values. 

- Pointers allow us to circumvent always needing to know up-front how much memory we want allocated in a string or array, since pointers themselves have fixed sizes, and yet they can refer to some value of arbitrary size and that we may not know the size of up-front. ","Walk students through what a pointer is and how they relate to / allow us to manipulate memory. Talk about how to define a pointer, how to take a reference using `&`, and how to dereference a pointer to get its associated value. Talk about why pointers are important and some other places in which they're used (URLs, for example). ","The C programming language is very much concerned with working with and manipulating memory. Memory, or RAM, can be thought of as nothing more than a giant array. When we work with arrays, there's always two parts: the value we're storing in the array, along with the index at which the value is stored at in the array. 

Since memory is just a giant array, we'll need to be cognizant of these same two concepts, the value and its associated index, when working in C. 

## When Do You Not Need to Use Pointers?

Pointers are only explicitly necessary when working with values of dynamic sizes. The most common use-cases are when working with arrays, strings, and structs, because these often hold other pieces of data, and we might not know the sizes of those other pieces of data up-front.

However, when working with values where we already know their size up-front, we don't need to use pointers. When working with integers, floats, and chars, we don't need to take a pointer to these because the C compiler always knows how large an integer is. In other words, the size of the integer doesn't inform its size. An `int` type (or `float`, or `double`, etc.) has a ceiling up to which it can store any integer value. So long as the integer we're storing doesn't exceed that ceiling, the size of the integer is known to the C compiler. 

To put it another way, pointers allow us to reference a value of an arbitrary type using a reference of a known size. The compiler always knows the size of a pointer, even if it doesn't know the size of whatever that pointer is pointing to. ","Here's an example of how to declare a pointer: 
```c
    char *str = ""I'm a string!"";
```
We can print out the actual _address_, which is the value of the pointer itself, like so:
```c
    printf(""%p\n"", str);
```
And we can print out the value that the address is pointing to like so:
```c
    printf(""%c\n"", *str);
```
Here we're using the asterisk again. When the asterisk isn't used in a variable declaration, it takes on an entirely new meaning. In this case, it's _dereferencing_ the pointer, which means it's getting the value (in this case a single character) that the pointer is pointing to. 

We can print out the  _entire string_, by using the string placeholder (%s) and passing a pointer to our printf() function., like so:
```c
    printf(""%s\n"", str);
```
Printf() will begin at the address you  pass via pointer and iterate through all of the characters it finds, printing them out until it reaches the terminating character \0","Take a look at the following code. At each line, write down what each variable is referring to (i.e. is it referring to a value, or an address?).

```c
    int x = 1, y = 2, z[10];
    int *ip;

    ip = &x;         // What is ip here?
    y = *ip;          // What is y here?
    *ip = 0;          // What is ip here now? What is x now?
    ip = &z[0];    // What is ip now?
```",MI_C_Qt4RCM,http://youtube.com/watch?v=MI_C_Qt4RCM,https://www.youtube.com/embed/MI_C_Qt4RCM,,,,,Introduction To C,Active,Intro to C,Computer Science,,1,1,1,3
utilize pointers appropriately in order to work with dynamic memory,"Now that students have a fundamental understanding of what pointers are and how to initialize them, they need to practice using pointers in appropriate contexts. 

Some examples of these appropriate contexts include:

- Using the `malloc` system call in order to allocate dynamic memory on the heap.
- Passing pointers as function parameters.","Walk through examples of using `malloc`, as well as talk about the return type of `malloc` and why that is important / why it's done the way it is. 

Also walk through examples of passing pointers to functions and talk about the tradeoffs associated with doing so. ","Now that we've talked about what pointers are, how they're created / initialized, and how to dereference them, it's time to talk about the situations in which we would apply pointers. But first off, let's talk about pointer arithmetic.

## Pointer Arithmetic

One of the neat features of pointers is that they can be incremented, just like array indices can be incremented in order to access subsequent slots in an array. Take a look at the following code:
```c
    char *str = ""supercalifragilisticexpialidocious"";
    printf(""%c\n"", *str);
    printf(""%c\n"", *(str + 1));
```
The `str` pointer initially points to the first character of the string, ""s"" in this case. We can advance the pointer by one spot so that it refers to the next character in the string ""u"". The parentheses are needed here because typically the dereference operator takes precedence over arithmetic operations, but in this case we specifically want the addition operation to happen before the dereference. 

## Memory Allocation

One of the most prevalent use-cases of pointers is memory allocation. Memory allocation is facilitated via the `malloc` system call. Given a parameter that indicates how many bytes of memory the user wants, `malloc` finds a contiguous spot in memory that satisfies the request size criteria and then returns a pointer to the first spot of the allocated block. From there, the user is able to fill this contiguous block with data. 

`malloc` returns a pointer instead of the actual block of memory because the block of memory can be of _any_ arbitrary size, since the user gets to request how large of a block they want. For large chunks of memory, it would be a lot of work to pass a possibly huge chunk of memory around. Instead, `malloc` just passes an address to the beginning of the block because pointers are comparatively much more compact and portable. 

## Passing Pointers to Functions

If you're familiar with the notion of passing by reference (and you should be), C makes this much more explicit than languages like Python and JavaScript, where there isn't an explicit concept of pointers. Since pointers _are_ references, any time we pass a pointer to a function we're passing by reference. This is useful if whenever we're passing large arrays, strings, and / or objects to functions, since it's a lot cheaper to just pass a reference than actually passing the whole thing, which would necessitate copying. 

So when we pass a reference to something into a function and then mutate that thing inside the function, the mutated thing retains those updates outside the scope of the function. Also, we don't actually need to explicitly return the pointer to the mutated thing. ","## Pointer Arithmetic

Going off of the earlier supercalifragilisticexpialidocious string example, we can write a loop to print out every single character separately:
```c
    char *str = ""supercalifragilisticexpialidocious"";
    int len = strlen(str);    // find the length of the string

    for (int i = 0; i < len; i++) {
        printf(""%c\n"", *(str+i));
    }
```
One thing to note about the pointer arithmetic syntax is that it's equivalent to the familiar array indexing syntax that uses brackets. We can rewrite the for loop like this:
```c
    for (int i = 0; i < len; i++) {
        printf(""%c\n"", str[i]);
    }
```
This implies then that the expressions `*(str+i)` and `str[i]` are equivalent. Indeed, the bracket notation is simply syntactic sugar on top of the pointer arithmetic syntax. 

## Using `malloc`

The following are examples of using `malloc`:
```c
    int *100_ints = malloc(100 * sizeof(int));
    char *50_chars = malloc(50 * sizeof(char));
```
In both of the these cases, the variables `100_ints` and `50_chars` are pointers that are pointing to blocks of memory of their respective requested sizes, but these blocks haven't been filled in with anything yet. 

We could then go and fill in the `malloc`'d block of memory with data like so:
```c
    for (int i = 0; i < 100; i++) {
        *(100_ints+i) = rand();    // fill the ith slot with a random int
    }
```
Another important thing to note is that whenever you allocate memory with `malloc`, you need to garbage collect that memory when you're done with it. This is as simple as calling the `free` function, which takes as its only parameter a pointer to `malloc`'d memory. That memory is then freed so that it can be used by other processes. 

## Passing Pointers to Functions

Let's take a look at the following function that performs element-wise addition on two input integer arrays:
```c
    void element_wise_add(int *result, int *a, int *b, int len)
    {
        for (int i = 0; i < len; i++) {
            *(result+i) = *(a+i) + *(b+i);
        }
    }
```
In this example, since every parameter to the function except for the length is a pointer, there's no need to copy any of the integer arrays into the body of the function. Only the addresses where each array is located is copied in the function's scope, and we can access the underlying array values by dereferencing the pointers. Note that our function can just have a return type of `void` since nothing needs to be returned from the function in order for us to see the changes performed by the function. 
    ","1. Write a C function `matrix_alloc` that receives two integer parameters `cols` and `rows` and have your function allocate a two-dimensional array of integers. Here, the parameter `cols` specifies the number of columns of the allocated matrix, and `rows` represents the number of rows. What will be the return type of this function?

2. Write a function `matrix_free` that receives a matrix created by `matrix_alloc` and frees it. ",uloU0VqOV7k,http://youtube.com/watch?v=uloU0VqOV7k,https://www.youtube.com/embed/uloU0VqOV7k,,,,,Introduction To C,,Intro to C,Computer Science,,1,1,1,3
use structs to create more complex composite types in C,C provides us a way to create composite types from other pre-existing types. This is facilitated via structs. Students will learn how to use structs to create new composite types and data structures. ,"Walk students through how to use structs to define a Stack type for a stack data structure. Define a `createStack` function that allocates memory for a Stack struct and initializes starter values. 

Also define a `destroyStack` function that frees the memory allocated with the `createStack` function. 

Mention the `typedef` keyword and how it can be used to alias user-created types. ","So far, we've only been exposed to types that C provides to us by default. How do we create any new types? How do we create data structures?

Luckily, C provides us with structs. Structs allow us to create new types that are composites of other existing types. Using this, we can create new types as well as data structures. ","## An Example Struct Definition
Let's say we wanted to create a Person type that stored a person's name, age, and weight. We could do that with a struct:
```c
    struct Person {
        char *name;
        int age;
        float weight;
    }
```
Our Person struct is a conglomeration of multiple other types that each hold a piece of the final composite type. We can not use this struct as a type in its own right, i.e., we can use it as a return type to a function, as a type for declaring a variable, we can take pointers to it, etc. 

One other thing we should add to this struct definition is the `typedef` keyword. This keyword simply allows us to define an alias for an existing type. Without the `typedef` keyword, the official name of our Person type is `struct Person`, meaning we'll have to type `struct Person` anywhere we're using it as a type. We can make a small tweak to the definition like so:
```c
    typedef struct Person {
        char *name;
        int age;
        float weight;
    } Person;
```
Now, the official name for our Person type is just `Person`; we no longer have to prepend the type with `struct`!

## Creating a Stack using Structs
We'll use structs to create a new type that represents a stack data structure. 

```c
    typedef struct Stack {
        int *storage;
        int length;
        int capacity;
    } Stack;
```
Once we've defined our Stack type, we'll need to write a function that actually creates an instance of a stack, just like how we would do it in JS or Python. In the case of C, that function might look like this:
```c
    Stack *createStack(int capacity)
    {
        Stack *newStack = malloc(sizeof(Stack));
        newStack->storage = malloc(capacity * sizeof(int));
        newStack->length = 0;
        newStack->capacity = capacity;
        return newStack;
    }
```
Similarly, we'll want to write a method to free the memory that we allocated to create our stack. Remember, every time we call `malloc`, we need to call the `free` function in order to free the allocated memory when we're done with it.
```c
    void destroyStack(Stack *stack)
    {
        free(stack->storage);
        free(stack);
    }
```",Finish up the implementation of the Stack data structure we started implementing. It will need a `push` and `pop` method. How might we need to implement these methods if C is not an object oriented language that has support for methods? ,3tBW2Hhocbk,http://youtube.com/watch?v=3tBW2Hhocbk,https://www.youtube.com/embed/3tBW2Hhocbk,,,,,Introduction To C,,Intro to C,Computer Science,,1,1,1,3
use Snapshot Testing to detect regressions,"Snapshot Testing is a useful tool for detecting unexpected changes to a component's UI.

This is particularly useful for detecting _regressions_ because we get immediate feedback in the form of a failing test whenever the way a component renders has changed be it intentional or by accident.",Remind students that snapshots should be push to source control.,"A _snapshot_ is a `JSON` representation of a component's output. When the tests run, the current output of the component is compared the the saved _snapshot_ and if anything changed, the test will fail.

When a _snapshot_ test fails, we can choose to update the snapshot if the change to the component's output was intended.

Since the _snapshot_ is simply a `JSON` object, it is committed to source control along with the rest of the code so it always stays in sync with the component's implementation.

The steps required to create a _snapshot_ are as follows:

- use a test renderer to create a _serializable_ component _tree_. We'll use `react-test-renderer` for that purpose.
- write an assertion to using the `.toMatchSnapshot()` matcher with the generated _tree_.
- the first time the test runs, the snapshot will be created and the test will pass.
- if the component's output changes and the change is intentional, simply press `u` to _update_ the snapshot. If the change was unintentional, fix the component to make the tests pass again.

##### Advantages of Snapshot Testing

- required very little code.
- helps detect regressions.
- committed to source control.
- easy to implement.

##### Drawbacks of Snapshot Testing

- easy to bypass, just press `u`.
- too sensitive, breaks the build for minor changes.
- waste of time to have them while actively making changes to components.
- only protects against regressions.
- adds extra files to the project.","Let'a add snapshot tests to the `App` component generated by `create-react-app`.

Start by generating an application using `create-react-app`.

Inside `src/App.test.js` add the following code:

```js
import React from 'react';
import renderer from 'react-test-renderer';

import App from './App';

describe('<App />', () => {
  it('should match snapshot', () => {
    const tree = renderer.create(<App />).toJSON();

    expect(tree).toMatchSnapshot();
  });
});
```

We import `react-test-renderer` and use it's `.create()` method to instantiate the App component. Next we _chain_ a call to the `toJSON()` method to get the _JSON_ representation of the component's tree and use `expect()` in conjunction with the `.toMatchSnapshot()` matcher to assert that the component's output is the same as the last recorded snapshot.

The first time this test runs, a _snapshot_ of the component will be saved inside the `__snapshots__` folder that is a sibling of the component being tested. If the `__snapshots__` folder does not exist, it will be created the first time a _snapshot_ is created.

Make a change to the `<App />` component to trigger a new test run. The test will fail with a helpful message asking to press `u` to update the snapshot if the change was intentional. Press `u` and the tests pass again.

Revert the change to make the tests fail again, then press `u` to update the snapshot again. Jest will notice what we have an old _snapshot_ that is no longer needed and will direct you to press `u` again, but this time it is to delete the _obsolete snapshot_. This feature keeps the _snapshots_ lean and free of clutter.

Now our tests will let us know if the component's output changes in any way.","Use `create-react-app` to generate an application then extract the _header_ section of the `App` component into a separate component.

Use snapshot testing to protect the new `Header` component against regressions then run the tests.

Make a change to the `Header` component and the test should fail and give the option to update the _snapshot_.",WWeK-GTahJ8,http://youtube.com/watch?v=WWeK-GTahJ8,https://www.youtube.com/embed/WWeK-GTahJ8,,Documentation on snapshot testing,"Snapshot Testing Introduction Blog Post,When to use Snapshot Testing","- what are some of the benefits of _snapshot testing_?
- what are some of the drawbacks of _snapshot testing_?
- what do we mean by _regressions_ when talking about automated tests?",Testing React,Active,Testing,Full Stack Web Development Core,,1,1,1,3
test asynchronous code,Most real world applications need to deal with asynchronous operations. Adding tests to asynchronous code is challenging as we need to make sure the code has finished executing and the application is stable before running the assertions.,,"An asynchronous test is a special kind of test that does not complete right away, as it needs to wait for the results of one or more asynchronous operations.

When writing these tests we need to notify Jest that the async code has finished executing and it is time to run the assertions. The are there different ways to do this, they are:

1. Invoke a `done()` callback passed to the test as a first argument when the async code is done.
2. Return a _promise_ from a test so Jest will wait for it to _resolve_ or _reject_.
3. Pass an `async function` to `describe()`.","1. **Create an async helper** inside `helpers.js`. We will have the function `asyncThing` return a promise that resolves the value 7 after one second. The function will also take a callback, which will be invoked after one second.

    ```javascript
    exports.asyncThing = function (callback) {
      return new Promise((resolve) => { // don't forget to return!
        setTimeout(() => {
          callback(); // looks like we will need a spy
          resolve(7);
        }, 1000); // will this block the test for a full second??
      });
    }
    ```
2. **Create test cases** inside `helpers.tests.js`. Note the `async` keyword!

    ```javascript
    describe('asyncThing function', () => {
      it('eventually resolves to 7', async () => {

      });
      it('eventually calls the callback', async () => {

      });
    });
    ```

3. **Await for the async thing!**. We don't care whether the callback is called in this test. Your tests should test one single thing! As the argument to `asyncThing` let's use `Function.prototype`. It will serve as a little stub function so `asyncThing` runs correctly.

    ```javascript
    it('eventually resolves to 7', async () => {
      const resolvedValue = await help.asyncThing(Function.prototype);
    });
    ```

4. **Assert** that the promise resolves the expected value! Our test should pass.

    ```javascript
    it('eventually resolves to 7', async () => {
      const resolvedValue = await help.asyncThing(Function.prototype);
      const expected = 7;
      expect(resolvedValue).toBe(expected); // yup.
    });
    ```
5. **Use a spy** to check that the callback is invoked! Do this in our next test:

    ```javascript
    it('eventually calls the callback', async () => {
      const spy = jest.fn();
      expect(spy).not.toBeCalled(); // test for sanity.
      await help.asyncThing(spy); // await the thing!
      expect(spy).toBeCalled(); // have the spy report.
    });
    ```

6. **Are you noticing our tests are being delayed** for a full second? Unacceptable! Let's use Jest's **Fake Timers** to fix this. They allow to replace `setTimeout`'s real implementation with another that allows us to **fast time forward**. Remember that unit tests need to be fast, because (1) we need to run them _often_, and (2) eventually there will be _hundreds_ of them.

    At the top of the `helpers.test.js` file, underneath our imports, do:

    ```javascript
    jest.useFakeTimers();
    ```

7. **Fix the tests**. Get the flux capacitor going!

    ```javascript
    it('eventually resolves to 7', async () => {
      // let's first save the promise to a variable
      const promise = help.asyncThing(Function.prototype);

      jest.runAllTimers(); // ====> fast time forward!

      // await for resolution, without the nasty delay
      const resolvedValue = await promise;
      const expected = 7;
      expect(resolvedValue).toBe(expected);
    });

    it('eventually calls the callback', async () => {
      const spy = jest.fn();
      expect(spy).not.toBeCalled();
      // save the promise to a variable
      const promise = help.asyncThing(spy);

      jest.runAllTimers();  // ====> fast time forward!

      // await for resolution, without the nasty delay
      await promise;
      expect(spy).toBeCalled();
    });
    ```",Research on your own how to test async code using one of the alternative methods.,IrkHSNGQbms,http://youtube.com/watch?v=IrkHSNGQbms,https://www.youtube.com/embed/IrkHSNGQbms,,Jest Documentation on Testing Asynchronous Code,,"- what are the three ways to test asynchronous code with Jest?
- what happens if we forget to return a promise?
- which syntax do you like best and why?",Unit Testing II,Active,Testing,Full Stack Web Development Core,,1,1,1,3
send persisted managed object data to a server via PUT,,,,,,,,,,,,,Core Data III - Sync Persistence,,Core Data,iOS Development Core,,0,,,0
sync local deletions with server,,,,,,,,,,,,,Core Data III - Sync Persistence,,Core Data,iOS Development Core,,0,,,0
sync local modifications with server,,,,,,,,,,,,,Core Data III - Sync Persistence,,Core Data,iOS Development Core,,0,,,0
,,,,,,,,,,,,,,,,,,0,,,0
enter and edit text in the bash command line interpreter shell,,,,,,https://youtu.be/mq2RWXEfJ6s,http://youtube.com/watch?v=https://youtu.be/mq2RWXEfJ6s,https://www.youtube.com/embed/https://youtu.be/mq2RWXEfJ6s,,,,,,,,,,0,,1,1
explain what the command line is and the advantages it offers,,,,,,https://youtu.be/tCrkdcDycjA,http://youtube.com/watch?v=https://youtu.be/tCrkdcDycjA,https://www.youtube.com/embed/https://youtu.be/tCrkdcDycjA,,,,,,,,,,0,,1,1
"understand, navigate, and use shell history to repeat previous commands",,,,,,https://youtu.be/urz7sdC556s,http://youtube.com/watch?v=https://youtu.be/urz7sdC556s,https://www.youtube.com/embed/https://youtu.be/urz7sdC556s,,,,,,,,,,0,,1,1
navigate through the Unix file system and list directory files,,,,,,https://youtu.be/mFh4vbOH81Q,http://youtube.com/watch?v=https://youtu.be/mFh4vbOH81Q,https://www.youtube.com/embed/https://youtu.be/mFh4vbOH81Q,,,,,,,,,,0,,1,1
perform basic file and directory management tasks using Unix best practices,,,,,,https://youtu.be/wvTTkiPyjCs,http://youtube.com/watch?v=https://youtu.be/wvTTkiPyjCs,https://www.youtube.com/embed/https://youtu.be/wvTTkiPyjCs,,,,,,,,,,0,,1,1
view text files using cat and less,,,,,,,,,,,,,,,,,,0,,,0
understand and explain Unix command flag conventions,,,,,,,,,,,,,,,,,,0,,,0
"understand, list, and change file permissions",,,,,,,,,,,,,,,,,,0,,,0
build basic scripts and make them executable,,,,,,,,,,,,,,,,,,0,,,0
locate files with find and grep,,,,,,,,,,,,,,,,,,0,,,0
"perform basic networking tasks including ping, whois, and curl/wget",,,,,,,,,,,,,,,,,,0,,,0
"list and manage processes with ps, top, kill, and killall",,,,,,,,,,,,,,,,,,0,,,0
search for help using the man manual system and apropos,,,,,,,,,,,,,,,,,,0,,,0
"understand the difference between stdin, stdout, and stderr, and use this knowledge to redirect output",,,,,,,,,,,,,,,,,,0,,,0
combine commands on a single line using ;,,,,,,,,,,,,,,,,,,0,,,0
create a new empty file using touch,,,,,,,,,,,,,,,,,,0,,,0
"run a utility or launch an application from the command line by supplying a proper path, including one sourced from the current directory",,,,,,,,,,,,,,,,,,0,,,0
,,,,,,,,,,,,,,,,,,0,,,0
group similar notifications,,,,,,,,,,,,,Notifications,,Android Fundamentals II,Android Development Core,,0,,,0
understand and use notification importance,,,,,,,,,,,,,Notifications,,Android Fundamentals II,Android Development Core,,0,,,0
utilize data structures in order to solve ,,,,,,,,,,,,,,,,,,0,,,0
take an existing first-pass solution to a problem and improve upon it,"Once a working first-pass solution has been implemented, we can iterate upon it and improve it. We're going to describe a few strategies for doing that here. ","We'll continue on with our Nth Fibonacci example, taking the naive recursive solution, and talking about a few ways in which we can improve it. We'll introduce a solution that takes advantage of memoization to save on redundant work. We'll also introduce an efficient iterative solution ","Ok, so we got an initial working solution. That's great! But can we improve it? Most of the time, yes, we can. 

The first step to improving upon something is to first figure out what it's issues are. Does our implementation use nested loops when it doesn't need to? Perhaps our solution is performing work that we don't actually need to be doing? Or maybe there's a data structure we could use to store our data more efficiently while our solution is working with it?

With our initial solution to Nth Fibonacci, a lot of unneeded, redundant work is being performed. One avenue we could take in order to improve our implementation then is to cut down on all the redundant work. How might we do that?","Here's our first-pass solution to the Nth Fibonacci problem:
```python
def fib(n):
    if n < 2:
        return n
    return fib(n - 1) + fib(n - 2)
```

Again, our solution takes too long to execute as our inputs start scaling up. What can we do about all that redundant work?

## Improving our Solution using Caching / Memoization

Here's one idea, can we save work we've already done so that when our recursive function comes around to doing that work again, we just have it re-use the answer we've already calculated beforehand? 

This is common strategy called caching or memoization, and it has many applications in other areas of software development and computer science, but it's a viable strategy here. So how might we leverage it to bolster our initial solution?

Well, essentially what we're looking to store is a key-value pair, right? So a dictionary would work great as a cache to store values we've already computed. That just leaves the question now of how to make our cache available to every recursive function call. 

For that, why don't we just pass the cache around as an argument to each recursive call?
```python
def fib(n, cache):
    if n < 2:
        return n
    elif cache[n] > 0:
        return cache[n]
    cache[n] = fib(n - 1, cache) + fib(n - 2, cache)
    return cache[n]
```

All we'd have to do now is to initialize our cache before calling our function for the first time:

```python
n = 35
cache = {i: 0 for i in range(n + 1)}
print(fib(n, cache))
```

We can clean this up so that the function doesn't break if no cache is passed into it:
```python
def fib(n, cache=None):
  if n < 2:
    return n
  elif cache and cache[n] > 0:
    return cache[n]
  else:
    if not cache:
      cache = {i: 0 for i in range(n+1)}
    cache[n] = fib(n-1, cache) + fib(n-2, cache)
    return cache[n]
```

You'll find that this relatively minor augmentation to our initial solution makes it _much_ more performant. It's able to chew through much larger inputs now that our first-pass solution could never even dream of computing. 

## An Iterative Solution

One of the great things about recursion is that it gives us a useful framework to start hashing out an initial first-pass solution. If we can answer the questions ""What are the base cases for this problem?"" and ""How do I get a recursive solution to converge to a base case?"", it's not too much of a stretch to then code out a working implementation. 

That being said, iterative solutions are actually generally more efficient than recursive solutions (we'll talk about why during live lecture). So let's come up with an iterative solution to the Nth Fibonacci problem.

An important observation here is that for any input n to our nth Fib function, we only need to keep track of the results of fib(n - 1) and fib(n - 2). We don't need any other results for figuring out the nth Fib number. 

Our iterative version of Nth Fib:
```python
def iter_fib(n):
    answer = 0
    prev = 1
    prevPrev = 0
    for i in range(n - 1):
        answer = prev + prevPrev
        prevPrev = prev
        prev = answer
    return answer
```","1. What are some of the tradeoffs exhibited between the recursive Nth Fib solution that utilizes memoization and the iterative Nth Fib solution?

2. Our memoized recursive solution is quite space-inefficient due to the fact that we're now caching every single answer up to the input n. Could we improve upon our recursive solution even further such that it's more space efficient?",1QCmUv4-sIc,http://youtube.com/watch?v=1QCmUv4-sIc,https://www.youtube.com/embed/1QCmUv4-sIc,,,,,How to Write and Analyze,Active,Algorithms,"Computer Science, DS - Computer Science",,1,1,1,3
identify when a problem is amenable to a recursive solution and utilize recursion in order to solve it,"Recursion is a useful strategy for solving certain classes of problems. When a problem can be framed as the sum or combination of solutions to a bunch of smaller sub-problems, recursion allows us to come up with simple, elegant, and intuitive solutions to such problems.

In practice, whenever a problem tasks you with generating a bunch of permutations of some input, recursion should be a strategy in consideration. Even if recursion ultimately doesn't end up yielding the _best_ solution to the problem at hand, it can still give us a starting point upon which we can build a more efficient solution. ","For this objective, students will be given a gentle introduction to recursion. We'll talk about situations and problems where it is applicable, as well as talk about how recursive code should be structured. We'll cover base cases and talk about how to get our recursive implementation to move towards the base case. 

During live lecture, give some additional examples of problems that lend themselves to recursive solutions, for example generating every single possible permutation of a string.

Discuss with students how recursive code is actually executed under the hood, as well as how to classify the time and space complexity of recursive code.","There's always a mind-bending moment whenever someone encounters recursive code for the first time. It may seem obtuse and scary, but recursion definitely also has its benefits as a strategy to be used when solving certain types of problems. 

Indeed, recursive solutions lend themselves to simpler, more elegant implementations that are, for the most part, intuitive for other developers to read and understand. Another benefit of recursion is that it's a handy framework for coming up with an initial first-pass solution to a novel problem. 

We're going to discuss when recursion is a strategy that should be considered, as well as how we need to structure our code in order to make it work in a recursive fashion. ","We're going to start off with one of the simplest examples of a problem that lends itself really well to a recursive solution. That is the problem writing a function to calculate n! for some input integer n. If you don't remember the factorial function, it calculates the cumulative product of every integer from 1 up to n. In other words, `n * (n - 1) * (n - 2) * ... * 1`. 

When it comes to defining a recursive implementation to a problem, there are always two questions you need to ask yourself:
 1. What are the base cases for this problem? 
 2. If my code has not currently arrived at a base case, how does it move towards a base case?

Here's the recursive form of the factorial function:
```python
def recurse_factorial(n):
    if n == 0:
        return 1
    return n * recurse_factorial(n - 1)
```

Diving a bit deeper into what this function is doing, the first two lines are our _base case_. In other words, this is the situation in which our recursive function needs to stop execution. If we don't have a base case that our recursive function eventually converges to, then our recursive function will just run in an infinite loop and never produce useful output. 

This base case encapsulates the logic that the factorial function starts at n and then stops at 1. Past that, the factorial function is undefined over negative numbers, and if we actually multiplied by 0, then we'd just get 0 back as our result. 

The last line is how our recursive function moves towards our defined base case. We have our given starting input n, we have specified in our function that once n reaches 0, we return. So what about all the values in between? Well, we can move towards our base case by continually subtracting 1 from our input n, then feeding that new input to our recursive function. Eventually, our recursive function will be called with n = 0, at which point, it's arrived at our defined base case and stops recursing, returning us an answer. 
","Write a _recursive_ search function that receives as input an array of integers and a target integer value. This function should return True if the target element exists in the array, and False otherwise. What would be the base case(s) we'd have to consider for implementing this function? How should our recursive solution converge on our base case(s)?",n59qpp0SNDo,http://youtube.com/watch?v=n59qpp0SNDo,https://www.youtube.com/embed/n59qpp0SNDo,,,,,Sorting,Active,Algorithms,"Computer Science, DS - Computer Science",,1,1,1,3
describe how the CPU handles subroutines,"All modern languages have the concept of _functions_ that you can call, have perform some task, and then return to where you were before you left off. At the assembly level, functions are implemented using a simple call/return mechanism that is commonly referred to as a _subroutine_.","This is an intro into how subroutines work in general, and with the LS-8 in specific.

Lecture for this objective:

* Another example call
* Go over the challenge answers (below)

Challenge answers:

* Why is the stack used to store the return address? Why not just a single register or memory location? **Allows for recursion, and functions calling other functions.**

* How might the idea of _local variables_ for the subroutine be implemented using the stack? ** Manually move the stack pointer down further, effectively ""pushing"" space there to use for local storage. Right before you return, be sure to manually move it back into the right place.**

* Think of two ways that arguments could be passed to subroutines. **In registers, in memory, or on the stack.**","Being a generally simple device, the CPU doesn't have the concept of function names, arguments, or return values. All it knows is that it can _call_ a subroutine (i.e. push the address of the _next_ instruction onto the stack, move the PC to the address of the subroutine) and it can _return_ from that subroutine (i.e. pop the value from the top of the stack into the PC.)","Take a look at this simple program (memory addresses on the left):

```
00: LDI R0,15
03: LDI R1,0B  # Holds the address of the subroutine
06: CALL R1
08: PRN R0
0A: HLT

0B: ADD R0,10  # Subroutine!
0E: RET
```

`R0` get the value `15`, then we `CALL` the subroutine at address `0B`. When we do this, the address of the next instruction (namely `08`, the `PRN` instruction) is pushed on the stack.

This subroutine adds `10` to `R0`, giving it the new value of `25`. Then it returns.

When the `RET` executes, it pops the value off the top of the stack and stores it directly in the PC. This causes the CPU to resume at address `08`, the `PRN`.","* Why is the stack used to store the return address? Why not just a single register or memory location?

* How might the idea of _local variables_ for the subroutine be implemented using the stack?

* Think of two ways that arguments could be passed to subroutines.",1thob4fgBrs,http://youtube.com/watch?v=1thob4fgBrs,https://www.youtube.com/embed/1thob4fgBrs,,,,,Computer Architecture II,,Computer Architecture,Computer Science,,1,1,1,3
use custom fonts,Using custom fonts in an application is a straightforward process. ,,"In order to learn this process, let's use [this font as an example](https://www.1001fonts.com/benja-font.html). Click the download button and locate it in Finder. The file we want is called ""Benja.otf"". Anther font file extensions you may see is "".ttf"". Both file extensions behave the same way as far as using them in an iOS application goes.

Drag the file into the project navigator pane in the left section of your Xcode project's window. Check ""Copy items if needed"", and make sure it's being added to your application's target. You don't need to add it to your test target(s) if you have any. 

In the ""Info.plist"" file, add a new row and find the ""Fonts provided by application"" key. Click the disclosure indicator on this new row and there should be a single key-value pair under it. The key should say ""Item 0"" as this key takes in an array of font names. We only have one font, but you can add as many custom fonts as you need here using more rows. For the value of ""Item 0"", add the font file's name, in this case ""Benja.otf"".

![](https://user-images.githubusercontent.com/16965587/50937044-4ed34d80-142f-11e9-89b4-400191743b7e.png)

At this point, you are able to go to the storyboard and select the Benja font from the fonts list when selecting a font for any UI element like you would with any other included font.

If you want to access this or any other font programmatically, you must use the `UIFont` class. This class has an initializer that takes in `name` and `size` arguments. `size` is how large you want the font text to be. The `name` is the name of the font. Sometimes the name of the font file is not the name of the font itself, and if the `name` argument isn't correct, the initializer will return `nil` In order to get the font's name, you can either look at the link where you downloaded it, or if you open the font in Finder, it will open Font Book, and display the font like so:

![](https://user-images.githubusercontent.com/16965587/50937329-5e06cb00-1430-11e9-9a02-a501f8aa6980.png)

The title at the top of the window shows ""Benja"", so that's what the `name` should be. As an example, you are then able to create an instance of the font and assign it to a textField, like so:

``` Swift
let benjaFont = UIFont(name: ""Benja"", size: 20)

someLabel.font = benjaFont
```

Of course, with any object that allows you to set its font in Interface builder, you can do in code.",,,z1aprnuYeXs,http://youtube.com/watch?v=z1aprnuYeXs,https://www.youtube.com/embed/z1aprnuYeXs,,,,,UIAppearance and Custom Fonts,,iOS User Interface,iOS Development Core,,1,,1,2
handle non-default font sizes (Dynamic Type),"Something to consider is that a much larger percentage of iOS users use a non-default font size than you may think. According [to this](https://twitter.com/browgrammer/status/1031630345551065089), it's about 40% of users. By default, most text in an application, whether it is in text fields/views, labels, etc. do not automatically scale like the rest of iOS does when a non-default font size is enabled. ",,"A large issue can arise if a user is used to having and needing very large text in applications because they have poor vision, then your application's text size is tiny. That can be frustrating and put them off of wanting to struggle through trying to use your app.

In order to enable this yourself, you can go to Settings -> General -> Accessibility -> Larger Text. If you are using the simulator, you can also use the Accessibility Inspector in Xcode by going to Xcode -> Open Developer Tool -> Accessibility Inspector, then select the simulator in the top-left corner. Then click the gear icon in the top-right corner and you can access the font size slider from there.

Implementing non-default font sizes is straightforward. If you are using the system font, you can simply select the UI element, and open the menu that allows you to change its font and select one of the ""Text Styles"":

![screen shot 2019-01-14 at 2 18 43 pm](https://user-images.githubusercontent.com/16965587/51141821-777c8e00-1807-11e9-85bb-f2b9beaeec98.png)

Please read Apple's Human Interface Guidelines' [page on Typography](https://developer.apple.com/design/human-interface-guidelines/ios/visual-design/typography/). It has a section that talks about the differences between these text styles under ""Dynamic Type Sizes"", which will explain what the font size for any given user-chosen system text size.

If we look at the font size for a label whose text style is set to ""Body"", we can see a large difference between the sizes at normal and the largest accessibility text size:

![textstylecomparison](https://user-images.githubusercontent.com/16965587/51147465-8d924a80-1817-11e9-8267-0fda4b1e9508.png)

This creates the need to account for the possibility of different text sizes when designing and laying out your UI. When testing you application, be sure that its text looks good no matter the size (nothing is being cut off, etc).

A rare case can occur when the user will change their system font size while the app is open. If this happens, the text in your app will not resize accordingly by default. In order to do fix this problem, you can simply check the ""Automatically Adjusts Font"" right under where you select a UI element's font in the Attributes Inspector. **Be aware that this will only work when you are using a text style, and not normal font sizes.**

You can also do this programatically. Simply take the font that you want to automatically scale, whether it's the system font or a custom one and use the `UIFontMetrics` class:

```
let benjaFont = UIFont(name: ""Benja"", size: 20)!

let resizableBenjaFont = UIFontMetrics(forTextStyle: .body).scaledFont(for: benjaFont)

someLabel.font = resizableBenjaFont
```

Using `UIFontMetrics` we can select a text style, then give the Benja font to the `scaledFont` method. This will add the text style to the font and will automatically adjust the font size as the user changes their system font size.

Please watch this WWDC video for more info on Dynamic Type: https://developer.apple.com/videos/play/wwdc2017/245/",,,GmR5o8rZnL8,http://youtube.com/watch?v=GmR5o8rZnL8,https://www.youtube.com/embed/GmR5o8rZnL8,,,,,UIAppearance and Custom Fonts,,iOS User Interface,iOS Development Core,,1,,1,2
use and understand Python Variables,,,,,,,,,,,,,Intro to Python,,Intro to Data Science,Precourse DS,,0,,,0
use and understand Python Lists,,,,,,,,,,,,,Intro to Python,,Intro to Data Science,Precourse DS,,0,,,0
use and understand If Statements in Python,,,,,,,,,,,,,Intro to Python,,Intro to Data Science,Precourse DS,,0,,,0
use and understand Functions in Python,,,,,,,,,,,,,Intro to Python,,Intro to Data Science,Precourse DS,,0,,,0
explain the role of Python in the data science industry and in data analysis,,,,,,,,,,,,,Intro to Python,,Intro to Data Science,Precourse DS,,0,,,0
"understand common Python pitfalls and ""gotchas""",,,,,,,,,,,,,Intro to Python,,Intro to Data Science,Precourse DS,,0,,,0
comprehend the role of Jupyter Notebooks in Data Analysis and Scientific Computing,,,,,,,,,,,,,Intro to Jupyter Notebooks and Pandas,,Intro to Data Science,Precourse DS,,0,,,0
make a copy of a Google Colab to their Google Drive account,,,,,,,,,,,,,,,,,,0,,,0
"understand the difference between Python modules, packages, and libraries",,,,,,,,,,,,,Intro to Jupyter Notebooks and Pandas,,Intro to Data Science,Precourse DS,,0,,,0
import and alias an external Python library,,,,,,,,,,,,,Intro to Jupyter Notebooks and Pandas,,Intro to Data Science,Precourse DS,,0,,,0
use Pandas to read in a CSV file and save it as a dataframe,,,,,,,,,,,,,Intro to Jupyter Notebooks and Pandas,,Intro to Data Science,Precourse DS,,0,,,0
print the shape and first 5 rows of a dataframe to view it.,,,,,,,,,,,,,Intro to Jupyter Notebooks and Pandas,,Intro to Data Science,Precourse DS,,0,,,0
print the datatypes of dataframe columns,,,,,,,,,,,,,Intro to Jupyter Notebooks and Pandas,,Intro to Data Science,Precourse DS,,0,,,0
check for NA values and remove them from a dataset using .fillna(),,,,,,,,,,,,,Intro to Jupyter Notebooks and Pandas,,Intro to Data Science,Precourse DS,,0,,,0
create a matplotlib scatterplot using two dataframe columns,,,,,,,,,,,,,Intro to Jupyter Notebooks and Pandas,,Intro to Data Science,Precourse DS,,0,,,0
understand what a Random Variable is and its importance in statistics,,,,,,,,,,,,,Statistics Fundamentals,,Intro to Data Science,Precourse DS,,0,,,0
explain the difference between Discrete and Continuous distributions,,,,,,,,,,,,,Statistics Fundamentals,,Intro to Data Science,Precourse DS,,0,,,0
understand the role of sampling from a population and its implications,,,,,,,,,,,,,Statistics Fundamentals,,Intro to Data Science,Precourse DS,,0,,,0
understand the importance of the Normal Distribution and its main features,,,,,,,,,,,,,Statistics Fundamentals,,Intro to Data Science,Precourse DS,,0,,,0
"understand and compute popular measures of center: Mean, Median, Mode",,,,,,,,,,,,,Statistics Fundamentals,,Intro to Data Science,Precourse DS,,0,,,0
understand the role of hypothesis testing in inferential statistics,,,,,,,,,,,,,Hypothesis Testing,,Intro to Data Science,Precourse DS,,0,,,0
understand and compute the standard deviation of a sample,,,,,,,,,,,,,Hypothesis Testing,,Intro to Data Science,Precourse DS,,0,,,0
calculate the z-score for a normal distribution,,,,,,,,,,,,,Hypothesis Testing,,Intro to Data Science,Precourse DS,,0,,,0
find the confidence interval of a distribution,,,,,,,,,,,,,Hypothesis Testing,,Intro to Data Science,Precourse DS,,0,,,0
successfully conduct a hypothesis test,,,,,,,,,,,,,Hypothesis Testing,,Intro to Data Science,Precourse DS,,0,,,0
understand basic Linear Algebra structure: Vectors and Matrices,,,,,,,,,,,,,Linear Algebra Foundations,,Intro to Data Science,Precourse DS,,0,,,0
"perform basic matrix operation using NumPy: matrix multiplication, inverse, transpose, ",,,,,,,,,,,,,Linear Algebra Foundations,,Intro to Data Science,Precourse DS,,0,,,0
"understand common matrix formats: row matrix, column matrix, square matrix, identity matrix, diagonal matrix, triangular matrix, ",,,,,,,,,,,,,Linear Algebra Foundations,,Intro to Data Science,Precourse DS,,0,,,0
represent equations in matrix form,,,,,,,,,,,,,Linear Algebra Applications,,Intro to Data Science,Precourse DS,,0,,,0
solve equations simultaneously using matrix algebra,,,,,,,,,,,,,Linear Algebra Applications,,Intro to Data Science,Precourse DS,,0,,,0
"compute the ""Least Squares Solution"" of a linear regression",,,,,,,,,,,,,Linear Algebra Applications,,Intro to Data Science,Precourse DS,,0,,,0
train a model with sklearn,,,,,,,,,,,,,DS Final Project Day 1,,Intro to Data Science,Precourse DS,,0,,,0
"understand the importance of finding a ""baseline"" model/accuracy",,,,,,,,,,,,,,,,,,0,,,0
use k-fold cross validation,,,,,,,,,,,,,,,,,,0,,,0
make predictions on a test datset,,,,,,,,,,,,,DS Final Project Day 1,,Intro to Data Science,Precourse DS,,0,,,0
perform basic feature engineering tasks,,,,,,,,,,,,,"DS Final Project Day 2,DS Final Project Day 1",,"Intro to Data Science, Intro to Data Science","Precourse DS, Precourse DS",,0,,,0
understand at a high level the types of supervised learning models,,,,,,,,,,,,,DS Final Project Day 2,,Intro to Data Science,Precourse DS,,0,,,0
improve upon baseline model to obtain a high level of model accuracy,,,,,,,,,,,,,DS Final Project Day 2,,Intro to Data Science,Precourse DS,,0,,,0
create and use object literals as well as describe object properties and methods,"Objects are used all over in JavaScript. In fact, without the object, we don't have the JavaScript language. Understanding how everything we do in JavaScript is built on objects is not only crucial to your understanding of the language, you won't be able to go very far without knowing about them.","This lesson is designed to help students learn all about objects and how we use them.  The concept of name (key) : value pairs and methods is paramount to future lessons this week.

You could use this codepen as a guide for this section:

https://codepen.io/lambdaschool/pen/rqYQmd?editors=0012","### Object Literals 
Lets learn how to create an `object literal` and assign it properties/values by use of `dot notation` and `bracket` notation. Objects can give a program access to their properties.  

Objects are super powerful. In fact, you may hear this a lot: `Everything in JavaScript is an object`. Objects are used throughout almost every single part of the JavaScript Programming language.

#### Object Properties 
Objects in JavaScript are used as a way to store data and give the programmer access to that data when needed.

This ability to store data and call it is known as a property.  Properties are organized in a `key:value` pairing.  

Lets look at an object literal with some properties on it:  

```javascript  
const myPersonalObject = {  
firstName: 'Fred',  
lastName: 'Flintstone',  
};  
```  

We have created a `myPersonalObject` and assigned some properties to it.  The **keys** of `myPersonObject` are `firstName` and `lastName`. The **values** of those keys are `Fred` and `Flintstone` Respectively.  

If we want to use `myPersonalObject` later on, all we have to do is reference it with either `bracket` or `dot` notation.  

#### Dot Notation for referencing the `firstName` property is:

```javascript  
myPersonalObject.firstName // 'Fred'
```  

#### Bracket Notation for referencing the `firstName` property is:  

```javascript  
myPersonalObject[""firstName""] // 'Fred'  
```  

Pay attention to the quotes around the ""firstName"" property. This is because we're using `brackets` around the firstName value.

If we want to change ""Fred's"" first name, all we'd have to do (just like a variable) is reference what we want changed and set it `=` to something.  

For example, if Fred's name were to be changed to reflect `Wilma` all we'd have to do is select the property with either `bracket` or `dot notation`, and then set the `firstName` key to 'Wilma'  

```javascript  
myPersonalObject.firstName = 'Wilma';  
```  

**NOTICE:** It's really important to remember that an object's values are mutable by default. Meaning, even though `myPersonalObject` is set to a `const`, it's values can be changes. This is because, `myPersonalObject` is never going to point to another object, but we can change the props on an object all we want.  

There are a few really neat methods for handing objects.  These methods can help us iterate over keys

```javascript  
Object.keys() -> Gives us an array back of the Object's properties/keys  

const keys = Object.keys(myPersonalObject);  
returns ['firstName', 'lastName'];  
```  

```javascript  
Object.values() -> Gives us an array back of all the Object's values  

const values = Object.values(myPersonalObject);  
returns ['Wilma', 'Flintstone'];  
```  

```javascript  
Object.entries() -> Gives us back an array of the Object's key/value pairs as a `tuple`  

const entries = Object.entries(myPersonalObject);  
returns [ [ 'firstName', 'Wilma' ], [ 'lastName', 'Flintstone' ] ]​​​​​  
```  

When dealing with Objects it is common practice to see them handled in this way.  

[To review everything you learned above click here for CodePen examples](https://codepen.io/lambdaschool/pen/rqYQmd?editors=0012).","## Create an object that tells us all about you. 

This object should include:
- firstName
- lastName
- age
- homeTown
- favoriteColor

### Once you're done creating your object, do the following:
- Return a list of the values of your object. 
- Return a list of the keys of your object. 
- Return a list of the entries of your object. 

[Click here to see an example of this if you're stuck](https://codepen.io/lambdaschool/pen/VErVEw?editors=0012).","Objects: [Work through all of these exercises on codepen](https://codepen.io/lambdaschool/pen/gBXdEe)

[A POSSIBLE solution to Objects](https://codepen.io/lambdaschool/pen/LgOXRM?editors=0012)",VLrBkmLZIYs,http://youtube.com/watch?v=VLrBkmLZIYs,https://www.youtube.com/embed/VLrBkmLZIYs,,,,,JavaScript I ,,JavaScript Fundamentals,Full Stack Web Development Core,,1,1,1,3
create and use arrays as well as array properties and array methods,Arrays are just a special type of object.  The thing that makes arrays special is their ability to store ordered values.  We gain a lot of abilities from using an array methods on our code.  Let's take a look at what an array is and how it works.,,"### Arrays

Lets Learn about the fundamental usage of the array in JavaScript how to define an array and assign it to a value.  

Arrays have a special `0 based` indexing (organizational) ability. They allow us to store data in them sequential based on 0. An array under the hood might look something like this:  

```javascript  
array: {  
'0': 'firstValue',  
'1': 'secondValue,  
}  
```  

Even though Arrays in JavaScript are just specially treated Objects under the hood (run `console.log(typeof [])` in the chrome console to see what I mean) they actually behave quite a bit differently. For one they are index based, and ordered, where as Objects are not ordered or sorted in any fashion.  

Arrays in JavaScript are `0` index based. Which means the first item found in an array will be found at index 0. So item 1 will be index 0, item 2 will be index 1 etc. This can be confusing but once you get used to it, Arrays become quite nice to work with.  

You can actually access any item in an array by selecting the array, and using 'brackets' to select which index you want to reference.  

```javascript  
const hogwarts = ['Harry', 'Hermione', 'Ron'];  
hogwarts[0] === 'Harry';  
hogwarts[1] === 'Hermionie';  
hogwarts[3] === 'Ron';  
```  

If you wanted to add a character to our hogwarts array, you could do so by using `.push()`  

```javascript  
hogwarts.push('Dumbledore');  
// gives us -> ['Harry', 'Hermione', 'Ron', 'Dumbledore]';  
```  

If we wanted to add something to the front of the array, we can use `.unshift()`  

```javascript  
hogwarts.unshift('Snape');  
// gives us -> ['Snape', 'Harry', 'Hermione', 'Ron', 'Dumbledore]';  
```  

If we wanted to remove the last item in the array. Use `.pop()`  

```javascript  
hogwarts.pop(); -> this will give you the item poped off the array.  
// gives us -> ['Snape', 'Harry', 'Hermione', 'Ron']';  
```",Create an array of your favorite things. Use methods like `.push()` `.unshift()` `.splice()` to play around with your list. ,Arrays: [Work through all of these exercises on CodePen](https://codepen.io/lambdaschool/pen/YJEdRQ?editors=0012),TaaCNAjpaa8,http://youtube.com/watch?v=TaaCNAjpaa8,https://www.youtube.com/embed/TaaCNAjpaa8,,,Arrayzing,,JavaScript I ,,JavaScript Fundamentals,Full Stack Web Development Core,,1,1,1,3
use CABasicAnimation to animate layer properties,,,"Keyframes allow you to build a complex animation using staggered and potentially overlapping animation elements. Each keyframe sequence must be designed in a (0.0 ... 1.0) timeframe, where 0.0 represents the start of the sequence and 1.0 the end. You can then scale a keyframe animation to any duration desired.","Add a bar button to the tool bar. Call it ""Key"". Control-drag to your controller and add the IBAction called `performKey(_ sender:)`.

Add the following code, which mimics the basic animation from Anim

Add the following code, which performs a rotation followed by an un-rotation. Demonstrate it and discuss the two stages.

```
   cleanup()
    let taskView = newView()
    view.addSubview(taskView)

    let animBlock = {
      UIView.addKeyframe(withRelativeStartTime: 0.0, relativeDuration: 0.5) {
        taskView.transform = CGAffineTransform(rotationAngle: CGFloat.pi / 4.0)
      }
      UIView.addKeyframe(withRelativeStartTime: 0.5, relativeDuration: 0.5) {
        taskView.transform = .identity
      }
    }

    UIView.animateKeyframes(withDuration: 4.0, delay: 0.0, options: [], animations: animBlock, completion: nil)
```

The easiest way to build keyframe animations is to create an animation block and then use the animateKeyframes call after. We'll come back to keyframe animations but first let me show you another way to animate using spring oscillation.",,Qb4kETsUdtw,http://youtube.com/watch?v=Qb4kETsUdtw,https://www.youtube.com/embed/Qb4kETsUdtw,,,,,Animation I - View Animations,,iOS User Interface,iOS Development Core,,0,,1,1
create autolayout constraints programmatically using the NSLayoutConstraint API,"So far, you've always created auto layout constraints in Interface Builder. However, constraints, like every other part of UIKit, have an API you can use to create and manipulate them in your code. In fact, there are three major ways to programmatically create constraints. In this objective, you'll learn how to create auto layout constraints using the most fundamental of these APIs.",,"### Linear Equations (Don't Be Scared!)

As you learned before, auto layout constraints are used to describe *relationships* between views. More specifically, they're used to describe the relationship between individual *properties* of views. For example, we can use constraints to say that one view's leading (left) edge is 10 pixels to the right of another view's trailing (right) edge. We can use an aspect ratio constraint to say that a view's width should be twice it's height.

In fact, constraints allow us to define the relationship between view properties in mathematical terms. Each constraint describes an equation of the form:

```
v2 = m * v1 + c
```

In this equation, `v1` is one property of a view, and `v2` is another property of a view. `m` is what we call the _multiplier_, while `c` is the constant. If you remember algebra class, you might recognize that this is a _linear equation_. If you have multiple constraints, you've actually created multiple linear equations describing the relationship between various view properties. At its core, auto layout is based on a _constraint solver_, which just means that it's a bunch of code that knows how to take a list of linear equations and solve for all the unknown values based on the values that are known.

Mostly, you don't need to care too much about what's going on under the hood, but when you use the programmatic API for creating constraints, understanding that a constraint actually describes a simple linear equation will help you.

### Creating Constraints

To create a constraint programmatically, you can use an initializer for `NSLayoutConstraint` that takes each of the parts of the equation:

```
let constraint = NSLayoutConstraint(item: view2,
                                    attribute: .leading,
                                    relatedBy: .equal,
                                    toItem: view1,
                                    attribute: .trailing,
                                    multiplier: 1.0,
                                    constant: 10.0)
```

This creates a constraint equation that looks like this:

```
view2Leading = 1.0 * view1Trailing + 10.0
```

Going back to our template for auto layout constraint equations, `v2` is `view2`'s leading edge, `m` is 1.0, `v1` is `view1`'s trailing edge, and `c` is 10.0.

#### Fixed Constraints

One question this might raise is, how do you create fixed width/height constraints? With a fixed dimension constraint, you're really not describing a **relationship** between **two** properties, you're just describing a fixed value for one property. It turns out that `v1` in our equation is optional. You can express something like `view2Width = 150` by doing:

```
let constraint = NSLayoutConstraint(item: view2,
                                    attribute: .width,
                                    relatedBy: .equal,
                                    toItem: nil,
                                    attribute: .notAnAttribute,
                                    multiplier: 1.0,
                                    constant: 150.0)
```

### Adding Constraints To a View

Once you've created a constraint, you must add it to a view for it to have any effect. You do that using `UIView.addConstraints()` But which view do you add it to? The documentation says:

>All constraints must involve only views that are within scope of the receiving view. Specifically, any views involved must be either the receiving view itself, or a subview of the receiving view. Constraints that are added to a view are said to be held by that view.

In practice this means that if the two views involved in the constraint are siblings, you add the constraint to their superview. If they're a parent/child, you add the constraint to the parent (ie. the highest view in the hierarchy). If the constraint only involves one view (ie. item1 and item2 are the same or item2 is nil), you add the constraint to that view.

This is all a little complicated, and can be hard to remember. Thankfully, there's an easier API you can use instead. You can pass the constraints you want to add to `NSLayoutConstraint.activate()` and they will automatically be added to the correct view.

```
let constraint = NSLayoutConstraint(item: view2,
                                    attribute: .leading,
                                    relatedBy: .equal,
                                    toItem: view1,
                                    attribute: .trailing,
                                    multiplier: 1.0,
                                    constant: 10.0)
NSLayoutConstraint.activate([constraint])
```","Build a project with a single green view (`view.backgroundColor = .green`) as a subview of the main view controller's view. The green view should be 200 x 200, and should be centered horizontally and vertically using programmatically-created constraints.","Add a second, purple view below the green view. It should be the same width, also be centered horizontally, but fill the space below the green square with a margin of 10 points.

```
┌───────────────────────────────────┐
│                                   │
│                                   │
│                                   │
│                                   │
│                                   │
│                                   │
│                                   │
│                                   │
│                                   │
│                                   │
│                                   │
│                                   │
│                                   │
│          ┌─────────────┐          │
│          │GGGGGGGGGGGGG│          │
│          │GGGGGGGGGGGGG│          │
│          │GGG GREEN GGG│          │
│          │GGGGGGGGGGGGG│          │
│          │GGGGGGGGGGGGG│          │
│          │GGGGGGGGGGGGG│          │
│          └─────────────┘          │
│                10                 │
│          ┌─────────────┐          │
│          │PPPPPPPPPPPPP│          │
│          │PPPPPPPPPPPPP│          │
│          │PPPPPPPPPPPPP│          │
│          │PPPPPPPPPPPPP│          │
│          │PPPPPPPPPPPPP│          │
│          │PP PURPLE PPP│          │
│          │PPPPPPPPPPPPP│          │
│          │PPPPPPPPPPPPP│          │
│          │PPPPPPPPPPPPP│          │
│          │PPPPPPPPPPPPP│          │
│          │PPPPPPPPPPPPP│          │
│          └─────────────┘          │
│                10                 │
└───────────────────────────────────┘
```",,,,,,,,Animation I - View Animations,,iOS User Interface,iOS Development Core,,1,1,,2
animate auto layout constraints,,,,,,,,,,,,,Animation II - View Controller Transitions,,iOS User Interface,iOS Development Core,,0,,,0
"understand and explain the ""rules of animation""","Disney is the acknowledged expert when it comes to creating physical 'reality' without the benefit of a real physical system. Most people recognize  Frank Thomas and Ollie Johnston's 1981 book from Disney Studio titled _The Illusion of Life_ as the ""bible"" of animation.

The authors recognize how to tell a physical story without being unduly tied to actual physics. Their exaggerated and enhanced visual language has contributed not only to cartoons and films but also to the development of lively and deferential user interfaces.

Apple has taken many of Disney's story-telling lessons and incorporated them into the interface. From follow-through to exaggeration to stretch and squash, these features create engaging and harmonious interface elements.

Animation principles include: Squash and stretch, anticipation, staging, follow-through, secondary action, timing, and exaggeration.",,"### Exaggeration 

Exaggeration moves beyond reality to add animation emphasis that wouldn't normally exist in a physical scenario. In the demo's example, a view appears to blow into the screen but goes too far (in a way moving along the z axis towards the viewer) and then is constrained by a spring until it bounces into place both forward and back along that axis.

There's no physical reality backing this, just the pleasure of seeing the grandness of the excess size, which is then backed away from. Damped harmonics are common in iOS, and you'll find them in many elements that ease into place.

This example used harmonics to manipulate a view's size. It's also common to use this call to manipulate a view's location.

### Squash and Stretch

Pull in another bar button item called ""Squash"" and connect it to `performSquash`. Squash and stretch give the illusion of physicality to a view as it moves. 

add this code:

```
  @IBAction func performSquash(_ sender: Any) {
    cleanup()
    let taskView = newView()
    view.addSubview(taskView)

    // Start offscreen
    taskView.center = CGPoint(x: view.center.x, y: -taskView.bounds.size.height)

    let animBlock = {
      UIView.addKeyframe(withRelativeStartTime: 0.0, relativeDuration: 0.4) {
        taskView.center = self.view.center
      }
      UIView.addKeyframe(withRelativeStartTime: 0.3, relativeDuration: 0.2) {
        taskView.transform = CGAffineTransform(scaleX: 1.7, y: 0.6)
      }
      UIView.addKeyframe(withRelativeStartTime: 0.5, relativeDuration: 0.2) {
        taskView.transform = CGAffineTransform(scaleX: 0.6, y: 1.7)
      }
      UIView.addKeyframe(withRelativeStartTime: 0.7, relativeDuration: 0.15) {
        taskView.transform = CGAffineTransform(scaleX: 1.11, y: 0.9)
      }
      UIView.addKeyframe(withRelativeStartTime: 0.85, relativeDuration: 0.15) {
        taskView.transform = .identity
      }
    }

    UIView.animateKeyframes(withDuration: 1.5, delay: 0.0, options: [], animations: animBlock, completion: nil)
  }

}
```

The key to squash and stretch is to preserve the overall content volume. If you stretch in one direction by 50% (to a total of 150%), you'll need to shrink the other dimension to about 67%. If you pull out a calculator you'll discover that 1 / 1.5 is .666667.

Show the demo in slow motion, and point out that the proportions used in this example are 1.7/0.6, 0.6/1.7, 1.11/0.9, and 1/1.

### Anticipation

Anticipation prepares the viewer for an upcoming action. You ""pose"" a view in a way that establishes the start of the primary event. 

> ""Early on at the Disney Studio the animators learned that audiences"" could not easily follow the animation unless there was a ""planned series of events"" leading the eye. Therefore, in order to prepare the audience for an action, the animators would add a so-called anticipation drawing, allowing the audience to anticipate the main action in the scene. This would also help to make the action appear more realistic.

In the demonstration code, the view angles clockwise first, much as someone would draw back their arm before a pitch. This preliminary angle anticipates the counter-clockwise tilt of the movement off-screen.

Add a bar button named ""Antic"" and a method called `performAntic`

```
  @IBAction func performAntic(_ sender: Any) {
    cleanup()
    let taskView = newView()
    view.addSubview(taskView)

    let animBlock = {
      UIView.addKeyframe(withRelativeStartTime: 0.0, relativeDuration: 0.1) {
        taskView.transform = CGAffineTransform(rotationAngle: CGFloat.pi / 16.0)
      }
      UIView.addKeyframe(withRelativeStartTime: 0.1, relativeDuration: 0.2) {
        taskView.transform = CGAffineTransform(rotationAngle: -1 * CGFloat.pi / 16.0)
      }
      UIView.addKeyframe(withRelativeStartTime: 0.2, relativeDuration: 0.8) {
        taskView.center = CGPoint(
          x: self.view.bounds.size.width + taskView.bounds.size.width,
          y: self.view.center.y)
      }
    }

    UIView.animateKeyframes(withDuration: 1.5, delay: 0.0, options: [], animations: animBlock, completion: nil)

  }
```",,,Qb4kETsUdtw,http://youtube.com/watch?v=Qb4kETsUdtw,https://www.youtube.com/embed/Qb4kETsUdtw,,12 Principles of Animation Compilation,,,Animation I - View Animations,,iOS User Interface,iOS Development Core,,1,,1,2
use UIView’s animation block methods to animate simple view property changes,"The simplest UIKit interaction is based on a `UIView` class method called ""animate with duration"", or `UIView.animate(withDuration:)`. It takes a trailing closure that specifies the changes to apply over that duration. You mention the end points and allow UIKit to interpolate between the current state of the interface and your desired outcomes.",,"### Animatable view and layer properties
You can animate both view properties (like position, background color, and size) and layer properties (like corner radius, border width, and color).

[Video tour of UIView animations](https://youtu.be/rWOKlOYUXFY)

**UIView**:

* frame
* bounds
* center
* transform
* alpha
* backgroundColor

**CALayer**:

* anchorPoint
* backgroundColor
* backgroundFilters (Sub-properties of the filters are animated using the default implied CABasicAnimation object)
* borderColor
* borderWidth
* bounds
* compositingFilter (Uses the default implied CATransition object. Sub-properties of the filters are animated using the default implied CABasicAnimation object)
* contents
* contentsRect
* cornerRadius
* filters
* hidden
* mask
* masksToBounds
* opacity
* position
* shadowColor
* shadowOffset
* shadowOpacity
* shadowPath
* shadowRadius
* sublayers
* sublayerTransform
* transform
* zPosition","Add a bar button to the tool bar. Call it ""Anim"". Control-drag to your controller and add the IBAction called `performAnim(_ sender:)`.

Add the following code, which performs a rotation followed by an un-rotation. Demonstrate it and discuss the two stages. The ""animate with duration"" call has an argument called ""completion handler"". You can use this to chain simple animations, so one occurs after another.

```
    cleanup()
    let taskView = newView()
    view.addSubview(taskView)

    UIView.animate(withDuration: 2.0, animations: {
      taskView.transform = CGAffineTransform(rotationAngle: CGFloat.pi / 4.0)
    }, completion: { _ in
      UIView.animate(withDuration: 2.0, animations: { taskView.transform = .identity })
    })
```

If you're going to animate more than one stage, it's better to use keyframe animations.",,,,,,,,,Animation I - View Animations,,iOS User Interface,iOS Development Core,,1,,,1
save a percentage of income automatically with each paycheck,,,,,,,,,,,,,Personal Finance,,Optimize Your Life and Career,,,0,,,0
describe the importance of speaking of others as though they were standing right next to you,,,,,,,,,,,,,Treating Others w/ Respect,,Empathy,,,0,,,0
write functions with a generic type that work with any type,"Generics create re-usable code applied across many types, not just one at a time. They abstract away specific type information and use shared APIs to unify code calls. In this objective, you'll learn how to use generics to write functions that work with any type.",,"For this section, try writing a function that exchanges the values of two numbers. For example, it should allow the following code:

```
var a = 23
var b = 99

""before: \(a) and \(b)""

exchange(lhs: &a, rhs: &b) // note the inout notation 

""after: \(a) and \(b)"" // 99 and 23
``` ",,,,,,,,,,Swift Generics,,Intermediate Swift,iOS Development Core,,1,,,1
use generics to create types,,,,,,,,,,,,,Swift Generics,,Intermediate Swift,iOS Development Core,,0,,,0
use generic constraints to restrict the types that can be used with a generic function,,,,,,,,,,,,,Swift Generics,,Intermediate Swift,iOS Development Core,,0,,,0
use generic beautification to simplify generic functions and locate them to a natural type or protocol extension,,,,,,,,,,,,,Swift Generics,,Intermediate Swift,iOS Development Core,,0,,,0
explain what a heuristic evaluation is and why it is valuable in a design cycle.,Many times UX designers are asked to perform a heuristic evaluation of a product. Being able to recommend improvements to a site or app based on established design principles will be a useful skill. Learning to recognize usability strengths and weaknesses in other sites or apps decreases a designer’s likelihood to make the same mistake again.,"Review the usability heuristics covered in the video in conjunction with the Heuristic Road Trip Metaphor. 

For the course, also introduce students to more specific heuristics (e.g. Jakob Nielsen's 10 heuristics) as you conduct the usability heuristic evaluation demonstration.

Reference: 
Jakob Nielsen’s 10 Usability Heuristics are perhaps the best known. 
https://www.nngroup.com/articles/ten-usability-heuristics/
Bruce Tognazzini has more guidelines:
https://asktog.com/atc/principles-of-interaction-design/ 
Susan Weinschenk:
http://uxmag.com/articles/the-psychologists-view-of-ux-design ","To effectively evaluate the usability of a website or application, you have to know what is generally considered good or bad in web design. A few researchers have proposed various heuristics to guide design of websites. 

According to Wikipedia: 

```""A heuristic technique, often called simply a heuristic, is any approach to problem solving, learning, or discovery that employs a practical method, not guaranteed to be optimal, perfect, logical, or rational, but instead sufficient for reaching an immediate goal. Where finding an optimal solution is impossible or impractical, heuristic methods can be used to speed up the process of finding a satisfactory solution.""```

No design is perfect. There’s always room for improvement. Thus we use these guidelines—or heuristics—to reach a solution that is good enough and that will ideally continue a cycle of improvement. 

A few researchers have created several guidelines for reaching the best outcome in an interface design.

We’ve condensed many of these heuristics into seven basic guidelines for designing interfaces. We use the metaphor of a road trip to help you remember and implement these guidelines. As a user experience designer, you are responsible for the entire experience. In this metaphor, that includes the road, the road signs, the car motor, the dashboard, the maps, the traffic signals, the steering wheel—everything about the trip. As with all metaphors, this one breaks down if examined too deeply, but it still provides a great way to think about designing for a great experience.

We have compiled these recommendations using a metaphor of a road trip. The metaphor acts as a way to remember the essence of the heuristics and what you’re trying to achieve for a user in following the guidance they offer.

Heuristic Road Trip Metaphor

-Let the driver drive
-Keep driver updated
-Show driver where to go
-Keep driver out of trouble
-Rescue driver if needed
-Delight the driver

There are more specific heuristics associated with each of those guidelines in the metaphor.

“_Let the driver drive_” simply means that you want to avoid forcing an action for any user, especially if it is hard to return to their previous state. We want to design for a user’s sense of their own internal locus of control. 

One way to help keep the driver in control is this: “_Keep driver updated_.” Software users get most frustrated when they don’t know what’s going on. As a designer, your intimate knowledge with the system can potentially blind you to places where the user will not know what is happening with the system—whether they should wait for it or whether it is broken.

You should also always “_Show driver where to go_.” The ability to create sensible and clear navigation structure along is an important skill to have. Design techniques that promote wayfinding are extremely important. Designers can use journey maps to help guide design decisions around navigation and wayfinding. Using principles like recognition over recall help users find their way through your product.

“_Keep driver out of trouble_” should be a fixed mantra in your head. We have to think one step ahead of the user. What might they do? Where might they go? If we can provide escape routes or directional guidance, we help to make the user’s experience more fluid and easy and avoid needing to move to the next step.

We don’t want to have to, but we should always make it possible for us to “_Rescue driver if needed_.” Whether through a documentation wiki or a help center, we should do our best to provide users a resource that will help them get unstuck. It is amazing the difference a little help can be once a user has become stuck or in a state of error they don’t know how to leave. A little guidance through a help system or documentation will buy back a little of the users’ good graces if they’re able to get back to what they were doing.

Lastly, it should be on our minds to “_Delight the driver_.” When our other, foundational digital needs are met, when we can easily achieve our goals, we should watch for opportunities to add a little snippet of delight. A light animation, a positive word, a hidden easter egg, all of these can add some delight to our lives.

Additional, more specific heuristics, fall under these categories and designers would do well to learn and understand them.

A heuristic evaluation is a process by which a UX professional reviews an existing product or application or website to see if it violates any of the established heuristics or guidelines.

A heuristic evaluation is also sometimes called an expert review. The idea is that because of their expertise in the field, a UX designer can evaluate an interface and its product to see where design improvements can be made. It can be less costly than a full-scale research program and can still have useful results.

“Expert reviews usually expand on heuristic evaluations by assessing the design not only for compliance with heuristics, but also against other known usability guidelines, principles of usability-related fields such as cognitive psychology and human-computer interaction, and the reviewer’s expertise and past experience in the field. The emphasis on the reviewer’s past experience and knowledge of usability principles is why this type of design review is often referred to as an expert review.” [Source.](https://www.nngroup.com/articles/ux-expert-reviews/)

In order to do an effective heuristic evaluation or expert review, you need to be able to recognize violations of the heuristics or established design principles.

A heuristic review will often have a final document presented by the reviewer to stakeholders. Sometimes the contents of the analysis document will be presented in person as well.",Open a site you have prepared to review and go through the site using a Heuristic Evaluation template sheet.,Open the following website,,,,,,,,Intro to Lambda and User Experience Design (UX),,Fundamentals: Discovery,UX Design Core [v1 deprecated],,1,1,,2
"understand and explain what concurrency means, and common scenarios where it is appropriate","Concurrency allows your code to do multiple things simultaneously. This allows your UI to continue to be responsive even while your app is doing a networking request, image processing, or other long running task in the background. Modern CPUs have multiple cores. In order for your app to take advantage of multiple cores, it must use concurrency.

In this objective, you'll learn about the fundamental building blocks of concurrency, as well as common use cases for concurrency.","This is a conceptual introduction to concurrency/multithreading/multiprocessing itself, rather than an iOS-specific lesson. Discuss concurrency in a platform-agnostic conceptual manner.",,,,,,,,,,,Concurrency II - Fundamentals,,Intermediate Swift,iOS Development Core,,0,,,0
understand and explain the difference between a GCD queue and a thread,,,,,,,,,,,,,Concurrency III - iOS Concurrency,,Intermediate Swift,iOS Development Core,,0,,,0
use GCD to implement thread safe properties in Swift,,,,,,,,,,,,,Concurrency III - iOS Concurrency,,Intermediate Swift,iOS Development Core,,0,,,0
implement a custom subclass of NSOperation,,,,,,,,,,,,,Concurrency III - iOS Concurrency,,Intermediate Swift,iOS Development Core,,0,,,0
cancel an operation,,,,,,,,,,,,,Concurrency III - iOS Concurrency,,Intermediate Swift,iOS Development Core,,0,,,0
set up dependencies between operations,,,,,,,,,,,,,Concurrency III - iOS Concurrency,,Intermediate Swift,iOS Development Core,,0,,,0
understand and explain what a race condition is,,,,,,,,,,,,,Concurrency II - Fundamentals,,Intermediate Swift,iOS Development Core,,0,,,0
understand and use mutexes to prevent race conditions,,,,,,,,,,,,,Concurrency II - Fundamentals,,Intermediate Swift,iOS Development Core,,0,,,0
understand and explain what a deadlock is,,,,,,,,,,,,,Concurrency II - Fundamentals,,Intermediate Swift,iOS Development Core,,0,,,0
use knex migrations to build a schema,We have seen how to work with an existing database using `knex`. Now we'll see how to use `knex`'s schema building features to create and modify a database and tables.,,"A `database migration` describes changes made to the structure of a database. Things like adding new objects, like tables, or modifying existing ones like adding or removing a column or index from a table are all migrations.

We can then use `migrations` to build our database schema and evolve it over time.

We will use the **knex command line interface (CLI)** to create database migrations.

Knex migrations are written in JavaScript files and as such are saved within source controle. This is very convenient because we can always re-create the database the way it was at a particular point in time. The code commited to source control includes all we need to have the database just like it was when the commit was made.","Let's use knex migrations in an example.

Add zoos table

- add a `database` folder, this will not get created automatically.
- create migration for zoos table: `knex migrate:make add_zoos_table`
- it will use the development environment by default, meaning it will work with sqlite3 in our case
- notice warning
- add `useNullAsDefault: true,` to the development key on knexfile.js
- the `migrations` folder will be created automatically
- open the newly created file. Each migration has an `up` and a `down` method.
- the `up` and `down` function should return a promise.

```js
exports.up = function(knex, Promise) {
  return knex.schema.createTable('zoos', function(tbl) {
    // we must use the callback syntax for .createTable()
    tbl.increments(); // pass the name if you wanted to be called anything other than id
    tbl
      .string('name', 255)
      .notNullable()
      .unique('uq_zoo_name');
    tbl.timestamp('createdAt').defaultTo(knex.fn.now());
  });
};

exports.down = function(knex, Promise) {
  return knex.schema.dropTableIfExists('zoos');
};
```

Apply latest migration.

```shell
knex migrate:latest
```

The database folder must exist, not created automatically.

Open the database file using SQLBrowser and notice that the table was created and has the correct schema.

Now, on to bears `knex migrate:make add_zoos_table`.

```js
exports.up = function(knex, Promise) {
  return knex.schema.createTable('bears', function(tbl) {
    // primary key
    tbl.increments('Id'); // or bigIncrements
    tbl
      .integer('zoo_id')
      .notNullable()
      .references('id')
      .inTable('zoos');
    tbl.string('species', 80).notNullable(); // .defaultTo('n/a')
    tbl.string('latinNme', 80).notNullable(); // error on purpose
    // tbl.timestamps(); // adds created_at and updated_at
    tbl.timestamp('createdAt').defaultTo(knex.fn.now());
  });
};

exports.down = function(knex, Promise) {
  return knex.schema.dropTableIfExists('bears');
};
```

Add new migration to correct spelling

- `knex migrate:make fix_bears_latinName`

```js
exports.up = function(knex, Promise) {
  return knex.schema.hasTable('bears').then(function(exists) {
    if (exists) {
      return knex.schema.table('bears', function(tbl) {
        tbl.renameColumn('latinNme', 'latinName');
      });
    }
  });
};

exports.down = function(knex, Promise) {
  return knex.schema.table('bears', function(tbl) {
    tbl.renameColumn('latinName', 'latinNme');
  });
};
```

Rollback a Migration

- use `knex migrate:rollback` to rollback latest changes.
- rollbacks done at the batch level, not migration level.
- deleting the migrations folder and running latest again will run all
  migrations in the same batch. Rolling back will roll all migrations on the
  batch back.

### Many to Many

```js
.createTable('zoo_bears', function(tbl) {
    tbl.integer('zoo_id').notNullable().references('id').inTable('zoos').onDelete('CASCADE');
    tbl.integer('bear_id').notNullable().references('id').inTable('bears').onDelete('CASCADE');
    tbl.primary(['zoo_id', 'bear_id']); // composite
})
```","Use knex migrations to create a products table with the following columns:

- id: make this the primary key.
- name: should be a string that is unique.
- price: should be a number.",,,,,Knex,,"- why are migrations useful for developers coming into a project.
- which command is used to create a knex migration?
- which command is used to apply all pending knex migrations?
- which command is used to undo the last knex migrations batch?","""Querying Data, Migrations and Seeding""",Active,Adding Data Persistence to Web APIs,Full Stack Web Development Core,,1,1,,2
seed data using knex.,,,,,,,,,,,,,,,,,,0,,,0
,,,,,,,,,,,,,,,,,,0,,,0
describe what system calls are and why they are useful,"System calls are a fundamental part of how programs get executed. Because security is a concern, processes are all isolated by default, each with minimal permissions. To that end, how does a run-of-the-mill process perform privileged operations such as creating a new process, or executing an arbitrary program? The answer is, of course, system calls. ",,"It turns out the OS is a privileged process that needs to be allocated execution time on a CPU itself in order to run. The OS has direct access to hardware resources, and it is tasked with the job of ensuring that other non-privileged processes do not access those resources without the OS's permission. How does the OS perform this job without compromising performance?

Let's start off with the simplest premise. We could just give each process complete control of the CPU it is running on when it is allocated execution time. With this model, each process would not be interrupted at all until it either completes its execution, or it voluntarily yields the CPU it is running on. This would maximize overall performance, but at what cost?

Indeed, if we gave each process full reign of the CPU it is executing on, there would be no way to stop said process from accessing some memory that doesn't belong to it, or ensuring that it yielded the CPU in a timely fashion. 

Instead, let's make a firm distinction between privileged and non-privileged processes. Non-privileged processes, which is most processes, run in what is called _user mode_. User mode processes are restricted in what they can do; they can't directly issue I/O requests or allocate new blocks of memory. If a non-privileged process attempts to perform an operation it isn't allowed to, the OS intervenes and termininates the offending process. 

Conversely, the OS and other privileged processes run in _kernel mode_, so named because privileged processes have access to the kernel in order to allow them to directly access memory and hardware resources. Processes that run in kernel mode can essentially do whatever they want, including preempt another process that is running on a CPU. This solves the question of how the OS can reclaim control of a processor from a process that isn't cooperating and yielding the CPU in a timely fashion. 

So now the question becomes, how do user mode processes access hardware resources they need? The solution to this is to have the kernel expose certain key pieces of functionality to user mode processes. These pieces of functionality include accessing the file system, creating and destroying processes, allowing a process to communicate with another process, and allocating more dynamic memory. ","Executing system calls is no different from executing any other procedure call. You've been doing it already when using the `malloc` function in order to allocate a program more memory. Additionally, `fork`, `wait`, `exec`, and `pipe` are all system calls. Can you see why?

Of course, doing it this way isn't as performant compared to if we simply gave each process full reign over its CPU. Making a system call takes more time than a regular procedure call, since when a system call is made, the OS actually intervenes on behalf of the calling process, allocates the requested resources on behalf of the calling process, and then returns the newly-allocated resources to the calling process. Another way to think about it is that two border crossings need to be made from user mode into kernel mode, and then from kernel mode back into user mode. One of the exercises you'll be working on will have you time how long it takes on average for a system call to complete. ","Look up the following system calls to figure out what they do:

1. `msgctl`
2. `nice`
3. `semctl`
4. `brk`
5. `fstat`",PqOzLRdPx1c,http://youtube.com/watch?v=PqOzLRdPx1c,https://www.youtube.com/embed/PqOzLRdPx1c,,,,,Processes and System Calls,Active,Intro to C,Computer Science,,1,1,1,3
"implement code to manipulate processes using `fork`, `wait`, `exec`, and `pipe` system calls",,,,,,,,,,,,,,,,,,0,,,0
,,,,,,,,,,,,,Treating Others w/ Respect,,Empathy,,,0,,,0
something related to another module,,,,,,,,,,Unnamed record,,,,,,,,0,,,0
create multiple layouts for the same activity,,,,,,,,,,,,,Activity Layouts,,Intro to Android,Precourse Android,,0,,,0
output text for applications with a graphical user interface,,,,,,,,,,,,,Intro to Java,,Intro to Android,Precourse Android,,0,,,0
use a switch statement to allow for multiple possible outcomes,,,,,,,,,,,,,Conditionals and Loops,,Intro to Android,Precourse Android,,0,,,0
understand what key-value paired data is,,,,,,,,,,,,,Collections,,Intro to Android,Precourse Android,,0,,,0
"store data in a key, value storage tool",,,,,,,,,,,,,Collections,,Intro to Android,Precourse Android,,0,,,0
conduct a heuristic evaluation.,"We've often heard the mantra in tech and design circles that one should fail fast and fail often. The reasoning is that we can learn from failures and make improvements to our products if we simply try things and get our ideas in front of people. But, if there are established principles of design, you shouldn't make violating those principles your early mistakes. A designer should always be aware of the tools, processes, and practices of the field so we can make more meaningful mistakes and not rehash the mistakes of the past.","You’ll need to have two or three websites to evaluate during class. It would be great to have examples of each of the usability heuristics and/or cognitive principles to demonstrate good vs. bad implementations. Double-check them ahead of time to ensure they are still up and running. 

Here are some possible sites/apps:

*https://stripe.com 
*https://mailleartisans.com
*https://bedbathandbeyond.com
*https://gov.uk
*https://pandora.com
*https://spotify.com
*Apple Music
*Sketch App
*Adobe Illustrator
*Invision App
*Any university website
*Amazon.com

Use the heuristic evaluation template: [link](https://docs.google.com/spreadsheets/d/100oU0XYRpF4NuqbwG6tTvugAlk1gbOklQQuKKuF_QO4/edit?usp=sharing)","Understanding usability heuristics helps you avoid many of the common errors of software development that cause problems for end users. Using your knowledge of heuristics allows you to recognize errors in existing software and avoid making new errors when designing a new system.

For existing systems, the process of conducting a heuristic evaluation can be intimidating, especially to a new designer. We'll help you feel more comfortable with the heuristics and what they mean so you can conduct an effective evaluation. We'll give you practice and feedback to improve your performance.

Study the heuristics we've presented so you can recognize the usability problems inherent in an existing application. An evaluator should have solid knowledge and understanding of usability heuristics and design principles. It is often helpful to have a usability principle / heuristic rubric as a guide to the evaluation process. The rubric helps remind evaluator of the principles and can help keep the evaluation organized.

To conduct The evaluator reviews each screen in a digital interface, testing all the links, buttons, text fields, and any other interactive component. For each action taken and each screen reviewed, the evaluator should create a list of both positive design strengths and usability weaknesses. Each strength or weakness should be clearly marked on a screenshot and clearly explained.

The rubric can help generate a list of all the strengths and weaknesses. Heuristic violations or weaknesses should be ranked to give stakeholders an idea of the severity of each item. ",Open a website or application and review the page. Look for any violations of any heuristics. Note any design elements that demonstrate effective use of heuristic guidelines. Record all notes in heuristic guideline sheet.,Your instructor will provide a list of URLs you will use to conduct your own heuristic evaluation. Choose one and begin an evaluation. Use the heuristic guidelines sheet to track and annotate your evaluation progress. Try to find as many heuristic violations as you can in 10 minutes. ,,,,,,,"-Name the steps of the heuristic road trip
-Explain the principle of recognition over recall
-When in the product design cycle would a usability heuristic evaluation be most effective?
-Under what circumstances would you not want to conduct a usability heuristic evaluation?",Intro to Lambda and User Experience Design (UX),,Fundamentals: Discovery,UX Design Core [v1 deprecated],,1,1,,2
identify when to conduct a heuristic evaluation in a design cycle.,"Heuristic evaluations, while useful, might not be the best tool for the job at times. Other evaluation methods can yield better data for informing product decisions. By being aware of strengths and weaknesses, UX designers can choose the right tool for the right time.","This section will be brief and not have a demonstration associated with it. Review the product design cycle and discuss with students how a heuristic evaluation can come at many different times in the design cycle. The product design cycle is covered in the introductory course, but should be reviewed again to help reinforce and ensure students' understanding.

Try to ensure students are thinking critically about the role of a UX designer and what is required of them to understand in order to design products. This is just one tool of many that can help inform product design decisions.","Usability heuristic evaluation can be performed at any time in the design process where you have a prototype or final product available to be reviewed. The heuristic evaluation is a relatively inexpensive and quick means for evaluating a site or applications' usability. Typically, it will be used during a discovery process for an existing design before undertaking a major redesign project. It allows you to see where improvements could be made based on typical user needs and behavior. 

A heuristic review can also be conducted as part of a competitive analysis on a competitor’s product or site, allowing you to see opportunities for differentiation that strengthens your product's position in the market.

A heuristic evaluation can also be used when working with other designers at the ideation and prototype phases to provide effective feedback and to evaluate design before they are placed in a working environment. It's much like proofreading the draft of an essay—you're not necessarily evaluating for style, but rather for mechanics. It can also be used as a final check at the conclusion of a design phase to ensure milestones have been reached.

Ideally, multiple designers conduct a heuristic evaluation separately and pool their findings in the final presentation to stakeholders. Having about three designers perform the evaluation helps find more usability issues and can still be done inexpensively.",,,,,,,,,,Intro to Lambda and User Experience Design (UX),,Fundamentals: Discovery,UX Design Core [v1 deprecated],,1,,,1
asdfqwer,,,,,,,,,,,,,,,,,,0,,,0
add a test target to their existing app,"Xcode includes tools for writing and running unit tests using the XCTest framework. Before you can write tests, you need to add a _test target_ to your project. This is a set of tests, in the form of Swift (or Objective-C) files, separate from the code that makes up your app. In this objective, you'll learn how to add a test target to your existing project.","Demonstrate the ""Include Unit Tests"" checkbox when creating a new project in Xcode. Also show how to add a new test target to an existing project.","To add a new test target to your existing project, do the following:

1. Open the project in Xcode
2. View the project settings by clicking on the project file itself in the Files navigator
3. Click in the project settings pane somewhere (this is just to give it focus)
4. From Xcode's menu, select Editor->Add New Target
5. In the sheet that appears, with iOS selected, find and choose the Unit Tests template.
6. You'll notice that a new folder, called YourAppName Tests is added to your project, along with a target in the project settings.

If you're creating a new project in Xcode, you can have it create a test target for you by checking the ""Include Unit Tests"" target in the new project sheet. You should do this in the future, since you'll want to start out writing unit tests from the earliest stages of your code.",Practice adding a tests target to an existing app.,"Create a new project in Xcode. Select the checkbox to include unit tests when you create it. Add a text field and a button. When a user enters a name into the text field and taps the button, your app should split the name into first and last name and print them to the console using the function you wrote above.",inDYvU4qMCI,http://youtube.com/watch?v=inDYvU4qMCI,https://www.youtube.com/embed/inDYvU4qMCI,,,,,Unit Testing I - Intro to Unit Testing,,iOS Code Quality,iOS Development Core,,1,1,1,3
understand and explain the purpose of UI Testing,"We've all done ""Manual Testing"" where we want to test a feature. This means we have to run the application on a device or the simulator, and go through using the application to test some feature. UI tests allow us to write a test that will actually do this process for us as if we were using it.",,"Manual testing up to now might not seem like a big deal, but as your app progressively gets larger and larger there comes a point where you have to spend a lot of time just testing every feature of your app to make sure the new features you add over time haven't broken the old ones. 

As with unit tests, UI tests will allow us to ensure that our application works as we add more features to it. The tests you will write for UI tests are a bit different than unit tests. While unit tests are for checking the functionality of small chunks or units of our code, UI tests are more for testing the integration of these units together that form a certain functionality. As an example, if we had a journaling app, we might write a UI test that tests that the user can navigate to the view controller to create an entry, the actual creation of the entry and making sure that it gets saved.

Another key difference between unit and UI tests is that UI tests use [black-box testing](https://en.wikipedia.org/wiki/Black-box_testing), which means that we don't have access to our application's code when we write the tests. This forces us to write our tests in a way that simulates a user only able to use the functionality available to them on the device's screen.

We're going to look at how to create UI tests that are both effective and without having to take up a ton of your time.",,,YC3V59BCSlI,http://youtube.com/watch?v=YC3V59BCSlI,https://www.youtube.com/embed/YC3V59BCSlI,,,,,Unit Testing II - UI Testing,,iOS Code Quality,iOS Development Core,,1,,1,2
set breakpoints in code,"When debugging your code and you want to check some value, like how many elements are in an array, that a string is what you expect it to be, etc. it may be tempting to put print or `NSLog` statements in your code. A downside of this is that your code can get cluttered quickly and once you solve the problem, you have to go in and remove all those statements. A better way to do this is using breakpoints.",,"As you've likely seen at this point, breakpoints are used to pause the execution of the application running either in the simulator or a physical device in Xcode. Breakpoints along with the tools we get access to when our code is paused on a breakpoint allow for a simple, yet powerful form of debugging. 

To add a breakpoint to a line of code simply click in the gutter (the place where the line numbers are) at that line, or if the shortcut isn't being used for anything else on your machine, you can also place a breakpoint on the line your cursor is on using `⌘ (command) + \`. 

An important thing to note is that when a breakpoint is triggered, the code that is written on that line has not been executed yet.

Being able to pause your code isn't itself very helpful, so we'll look at some of the tools at our disposal when our code is paused.",,,hFjfsqSFL6M,http://youtube.com/watch?v=hFjfsqSFL6M,https://www.youtube.com/embed/hFjfsqSFL6M,,,,,Debugging I - Basic Debugging Tools,,iOS Code Quality,iOS Development Core,,1,,1,2
use the Xcode debugger’s single step tools to move through code being debugged,"Sometimes it can be helpful to run through your code slowly, literally line by line if you need to. In order to accomplish this when on a breakpoint the Debug Bar will give us a few controls:

![](https://developer.apple.com/library/archive/documentation/DeveloperTools/Conceptual/debugging_with_xcode/Art/dwx-qs-13_2x.png)",,"The controls you will likely use the most are:

* Breakpoint Activation: Quickly toggle on/off all breakpoints.
* Continue/Pause: Continues the execution of your code like normal if on a breakpoint.
* Step over: Allows you to go through the execution of your code line by line. This is helpful to run through a function or specific chunk of code where you want to check multiple things in it without having to add a ton of breakpoints. ",,,,,,,,,,Debugging I - Basic Debugging Tools,,iOS Code Quality,iOS Development Core,,1,,,1
use Xcode’s variables view and hover feature to inspect the current value of variables,"The variable view allows you to check the state of variables when on a breakpoint:

![](https://developer.apple.com/library/archive/documentation/DeveloperTools/Conceptual/debugging_with_xcode/Art/dwx-dt-varlist-simple_2x.png)",,"This is very helpful as it will show you information including the values of variables in the paused code without you having to make a print statement to get the value. For example, in the image above, the `currentPoint` variable's type is a `CGPoint` and its value is `(x = 0, y = 0)`. Alternatively, you can get the same information by hovering your cursor over a variable, like so: 

![](https://user-images.githubusercontent.com/16965587/48185463-4c029200-e2f2-11e8-969b-7630c62f85de.png)

If you right click or hold control and click on a variable, a contextual menu will appear allowing you to copy the value, print a description of the variable in the console, and a few other things that you are less likely to use.

Another great tool is Quick Look. At the bottom of the variable view or when you hover over a variable, it's represented by the icon of an eye. It will show a popover of the variable: 

![](https://developer.apple.com/library/archive/documentation/DeveloperTools/Conceptual/debugging_with_xcode/Art/dwx-qs-17_2x.png)

Quick View is the most useful if you want to see something graphical such as an image, a path being drawn, a collection view cell, etc. You could use it to look at the value of a string, but it isn't any more helpful than looking at it in the variable view or hovering over it. However if you have something like a `URL`, Quick Look will actually pull up a web view in the popover as if you went to the URL in a web browser. For example  you could see the JSON that is returned from an endpoint using the NASA API: 

![](https://user-images.githubusercontent.com/16965587/48186012-05159c00-e2f4-11e8-8a7a-087c28bc53ac.png)",,,N6uK0B5J8FQ,http://youtube.com/watch?v=N6uK0B5J8FQ,https://www.youtube.com/embed/N6uK0B5J8FQ,,,,,Debugging I - Basic Debugging Tools,,iOS Code Quality,iOS Development Core,,1,,1,2
use the LLDB command line to inspect variables with po,"The console (to the right of the variable view) allows you to use LLDB, which is a command-line debugger. LLDB is very powerful and can do many things.",,"99% of the time, you will likely use a single command, which is `po`.

`po` stands for ""print object"". This will print the `description` of a variable. For example, using `po` on the `currentPoint` variable would give this output: 

![](https://user-images.githubusercontent.com/16965587/48186488-54a89780-e2f5-11e8-9673-cc28f133d0ef.png)

This allows you to essentially view the value of a variable like in the variable view. It **can** be helpful to do this over looking at the value of something in the variable view if there is a lot of information in the object, like a dictionary for example. You would be able to see all the key-value pairs in the dictionary. At the same time, this may not be preferred for the same reason as you may want to look at only a single part of the dictionary. Both methods exist for a reason and you should learn to use them both and when you prefer using one over the other. ",,,,,,,,,,Debugging I - Basic Debugging Tools,,iOS Code Quality,iOS Development Core,,1,,,1
implement description and debugDescription to provide better descriptions of custom types,"If you're familiar with the `po` command, then you may have tried to use it on an instance of your own object and got a less helpful result than you hoped for that looks like this:

```
<Person: 0x6000002c1590>
```

You may also have tried to call `print` on an object in code and given something like this:
```
MyProject.Person
```",,"All this shows is the name of the type and its location in memory. If you want to get any more information about the object, you'd have to manually `po` each of its properties. That's where implementing `description` and/or `debugDescription` come in.

There is a protocol called `CustomStringConvertible` which simply requires a `description: String` variable. This way, when we use `po` or `print` on any object that conforms to that protocol, the compiler will print the string contained in the `description` instead of the examples above. This allows you as the developer to decide what information you think would be useful to know about it when using `po` or printing the object directly.

So as an example, we could adopt and conform to the protocol in a simple `Person` object like so: 

``` Swift
struct Person: CustomStringConvertible {
    let name: String
    let age: Int

    var description: String {
        return """"""
        Name: \(name)
        Age: \(age)
        """"""
    }
}
```

In this example, the description simply lists out all the values of the `Person` object's properties. Again, what the description actually shows is completely up to you.

What about `debugDescription` then? There is a separate protocol called `CustomDebugStringConvertible` that you can implement as well. If you chose to implement this instead of `CustomStringLiteral`, then `po` and `print` would take string contained in the `debugDescription`. It would behave exactly the same way. If you adopt and conform to both protocols on the same object, when you call `po`, it will use the `debugDescription` and when you call `print` it will use the `description`.

Why would you want both? Since all these properties are are strings, they can be whatever makes the most sense to you. In your `debugDescription` you could include more detailed information about that object that would be relevant to debugging but not something you'd want to see all the time.",,,DVFj-weL85s,http://youtube.com/watch?v=DVFj-weL85s,https://www.youtube.com/embed/DVFj-weL85s,,,,,Debugging I - Basic Debugging Tools,,iOS Code Quality,iOS Development Core,,1,,1,2
debug exceptions using an exception breakpoint,You may have had an app crash and pull up the `AppDelegate` with red highlighting on a line. This is less than helpful. Aside from the normal breakpoints you get from clicking on the gutter there are some more advanced and powerful breakpoints. ,,"One of these is called an ""exception breakpoint"". An exception breakpoint is not added to a specific line of code, instead it gets added to the entire module itself. It will trigger right before a crash occurs. Often times, this will show you the line that is causing the exception which can be of great help just knowing the exact line of code that is causing it. You will also get access to the call stack in the Debug navigator. If you just let the app crash, you will not get the chance to use the call stack with nearly as useful information.

To add an exception breakpoint, simply go to the Breakpoint navigator in the left pane or use `⌘ + 7`.",,,n7OTymavDeY,http://youtube.com/watch?v=n7OTymavDeY,https://www.youtube.com/embed/n7OTymavDeY,,,,,Debugging I - Basic Debugging Tools,,iOS Code Quality,iOS Development Core,,1,,1,2
use breakpoint actions to print information without modifying source code,"Breakpoints are more powerful than simply pausing the execution of your program. You can add an ""action"" to any breakpoint by double clicking on it in the gutter or right-clicking on it and selecting ""Edit breakpoint..."" You can add a condition to the breakpoint. A condition is simply a Swift (or Objective-C if you are writing Objective-C code) statement that returns a `Bool`. You could do something like `myArray.count > 10` then the breakpoint would only trigger if that condition is met.",,"Actions allow you to perform something when the breakpoint is hit. For example, a simple, yet helpful thing that you can do is have it print a variable or some other information you might want to look at near the breakpoint. These actions let you use debugger commands (among other things), so you could do `po person` and it would automatically print the person's `description` without you having to type it out in the console every time the breakpoint hits. To further improve your debugging experience, you can choose to have the code continue after the breakpoint's action has been performed so you don't have to resume the execution of the app manually. This will effectively replace and eliminate the need to litter your code with print statements then manually remove them one by one. Once you're done with a particular debugging session, you can go to the Breakpoint navigator and simply delete all your breakpoints at once.
",,,rph_rQLfg4Y,http://youtube.com/watch?v=rph_rQLfg4Y,https://www.youtube.com/embed/rph_rQLfg4Y,,,,,Debugging I - Basic Debugging Tools,,iOS Code Quality,iOS Development Core,,1,,1,2
understand and explain the purpose of Instruments and the problems it helps solve,"Instruments is a separate application that allows you to [profile](https://en.wikipedia.org/wiki/Profiling_(computer_programming)) your code in various ways. There are many different templates for profiling your application such as profiling memory leaks, energy usage, network usage, etc. ",,"Profiling your application using instruments is on the opposite end of using breakpoints. Breakpoints and the single step tools are used to debug a single line of code at a time, while profiling allows you to test the performance of your application as a whole. For example, you'll learn to use the Time Profiler which will look at the project as it's running and break down where it spends most of its time (i.e. in a function that performs network calls, processes an image, etc.). Using this more macro sense of debugging, you will be able to determine that your code is running smoothly as a whole, and if it isn't, you will be able to figure out where the problem is and fix it.

In order to pull up Instruments and profile your project, type Command + I in Xcode when the project is open.",,,9lx-NOl6vMQ,http://youtube.com/watch?v=9lx-NOl6vMQ,https://www.youtube.com/embed/9lx-NOl6vMQ,,,,,Debugging II - Instruments,,iOS Code Quality,iOS Development Core,,1,,1,2
use Instruments’ Time Profiler instrument to understand slowness in an application,"As you may have guessed, the Time Profiler is used to profile where your code spends the most time running. This means you can see a breakdown of how your code is running both on the main thread and on background threads. This will help you make sure that only the code that you want to run on the main thread is running there and vice-versa. You can also see a breakdown of the function calls in your app so you can gain an insight into which ones take the most time and give you the opportunity to see if you can optimize your code.",,"Once you select the Time Profiler instrument, you will be greeted with a window like this:

![](https://user-images.githubusercontent.com/16965587/49046458-6f9e5700-f191-11e8-8462-cbb741a43b8c.png)

To begin profiling your application, click the red record button on the top, left of the pause button. It will then launch the simulator. Use the app like normal, or in the way that will run the code that you want to profile. It will then begin to fill in the graph in the top section and the table view in the bottom section. You'll end up with something like this:

![](https://user-images.githubusercontent.com/16965587/49046483-85138100-f191-11e8-8f1e-fa4c20a9a8bc.png)

This isn't necessary, but after you've profiled the section you want, you can click and drag on the graph to filter the code you want to look at. For example, we could just look at the big spike that plateaus for a while. That looks like a reasonable place to look for things to optimize.

![](https://user-images.githubusercontent.com/16965587/49046818-a88afb80-f192-11e8-901e-891eff3b0a02.gif)

Now we can look at the bottom section. Each row here is a thread. We have the main thread, then some worker threads. If you open a thread by clicking on the disclosure triangle, it will open up to the function calls within the thread. Now these function calls go fairly deep, so the easiest thing to do is hold the option key while clicking on the disclosure triangle and it will open up many at the same time. 

![](https://user-images.githubusercontent.com/16965587/49047980-767b9880-f196-11e8-9a1e-ebb2cb692089.png)

There is a lot here, but don't feel overwhelmed. Starting from the left, we have the amount of time a particular thread or function (including their children functions) took. If you've filtered the graph, then it will only show the code ran in that filtered section in the bottom.

Next, the weight is the percentage of the entire profile or if you've filtered the graph, then just in the filtered section that a particular thread and function takes up. The way that this works is that the Time Profiler will query about 1,000 times per second which function is running and then it gets broken down like this.

In the screenshot above, we can see that the weight is largely the same (~98.8%) for about half of the tree. Then it jumps down to 84.6%, then it jumps down to 47.0%, then 37.2%. A good way to start is by looking around the function calls where the weight drops significantly. To the right of the ""Self Weight"" column is an icon. These icons represent function calls from different frameworks, like Foundation, CFNetwork, etc. The icon that looks like an outline of a person's head and torso are from our application. 

You can double click on any of these function calls and it will bring you to the code that is getting run for the function. We only happen to have the source code for our application so more often than not, looking at the assembly code when double-clicking on a function call that isn't our own isn't super useful. In this specific case, double-clicking the `thunk for...` and `partial apply for...` functions that are from our app don't give us much to look at. However the last one that starts with `closure #2` will bring us to some source code:

![](https://user-images.githubusercontent.com/16965587/49140597-e7fc3980-f2b1-11e8-97ce-503d1f761a86.png)

In this case, there are only a few lines highlighted. The highlighted lines will show you the points in the function where a significant amount of time was spent and either a percentage or the amount of times the line was run. This will show us that 99.7% of time spent _in this function_ is spent on line 40. 

Now, what you do with this information is dependent on the situation but from using the Time Profiler, you will have a better insight into the places where your code spends the most time, thus the places where you can try to improve its performance.",,,V-lJc7qIJto,http://youtube.com/watch?v=V-lJc7qIJto,https://www.youtube.com/embed/V-lJc7qIJto,,WWDC 2016 418 - Using Time Profiler in Instruments,,,Debugging II - Instruments,,iOS Code Quality,iOS Development Core,,1,,1,2
use Instruments’ Allocations instrument to determine the cause of high memory usage,"Another great instrument is Allocations. Allocations works in a similar way to the Time Profiler, where it will profile the application as you use it when you hit the record button. It also shows a graph in the top and a table view in the bottom section. However, it will profile the memory allocation in the application. This will allow you to make sure that you aren't using too much memory, see where the memory is being taken up, and also that your memory is getting deallocated the way you expect it to.",,"Once your application has been profiled, the graph can be very telling of how well your memory is managed. iOS allots a limited amount of memory to your application to ensure that the rest of the operating system has enough memoory to function in parallel. We need to be ""good citizens"" and make sure that our application doesn't hog memory needlessly. That isn't to say your application can't ever increase its memory usage, but you need to make sure that it doesn't continually increase. How to do this is dependent on your application. Let's take the iTunes Search project as an example solution to this problem: 

In an application with photos, videos or other large resources, it is easy to end up using a lot of memory. Say that with every iTunes search result, an image was fetched with the app screenshots, or cover art for the music and movies. Every time you perform a search, the API will return 50 results. Assuming that the screenshots and cover art are about 1 MB each, that's 50 MB of memory taken up. Now if the user performs another search, does it make sense to keep the images from the previous search in memory? Probably not, as it's unlikely that they'll search for the same thing again, and if they do, we can fetch the images again. If we didn't approach the problem this way, every search would increase the memory usage of the application by 50 MB and eventually reach the point where iOS will give a warning saying that your app needs to **immediately** reduce its memory usage or it will force quit it to free up memory. In that case, the graph would look something like this:

![](https://user-images.githubusercontent.com/16965587/49203708-7cc06f00-f366-11e8-9f28-feee6252ff0d.png)

The memory usage is always increasing. By contrast, if we were to do the same the same things, the same amount of times, but deallocating the old search results, the graph would look something like this:

![](https://user-images.githubusercontent.com/16965587/49203602-1f2c2280-f366-11e8-89f4-659e32764ec2.png)

The key is that the memory usage isn't continually increasing with nothing being deallocated. As stated previously, the way you would handle this is difference. You need to decide when it makes sense for you to discard old information.

The graph is great for seeing how your memory usage flows over time. In the bottom half of the window, we can see a list of allocations in the app in order to tell what is getting allocated and where. It will look something like this:

![](https://user-images.githubusercontent.com/16965587/49275851-e5c4e700-f439-11e8-99d0-68567c1fc39f.png)

Again, there's a lot here. Starting from the left:

- You can decide to add a single group of allocations to the graph with the checkbox.
- Category: separates allocations based on the size and/or type of allocation.
- Persistent Bytes: the amount of bytes that are allocated and have stuck around throughout the entire filtered section of the graph or the whole graph if it isn't filtered.
- \# Persistent: The number of persistent items.
- \# Transient: The number of items that were allocated but then freed from memory. 
    - A note on persistent and transient: If your \# Persistent are high and your \# Transient are low, it **may** be an indication that you have items allocated that could be deallocated. 
    - A high \# Transient can be a good indication that things are being deallocated when necessary. However a very large number of Transient items can also mean that you could be needlessly using memory to create objects over and over that could be persisted. 
- Total Bytes: A combination of the Persistent Bytes and the amount of memory that was taken up from the Transient items.
- \# Total: The total number of items between Persistent and Transient items.
- Persistent/Total Bytes: A graph showing a comparison between the other items in this list as well as between the item's own Persistent/Transient items. The persistent items are in a dark color, while the transient are in a lighter shade of the same color.



As an example, let's look at the row that says ""Malloc 124.00 KiB"" (the fourth row in the table view). A few eye-catchers here are that the persistent bytes are the largest in the entire profile. It also shows that there are 0 Transient items which means whatever this is gets allocated and always stays in memory. 

If you click the arrow next to the category in that row, the table view will show a list of each individual item allocated in that category: 

![](https://user-images.githubusercontent.com/16965587/49281938-16f9e300-f44b-11e8-93ec-6eaea2e7b5b2.png)

Selecting a row in the table view will show the Stack Trace (also known as the Call Stack) when the item was created: 

![](https://user-images.githubusercontent.com/16965587/49282090-7bb53d80-f44b-11e8-901c-74ca5129a474.png)

We can see that just like the Time Profiler there are icons indicating which framework the function call comes from. We have access to a couple of our own functions (indicated by the blue outline of a person's head and shoulders). If we double-click it, it will also show the function in code:

![](https://user-images.githubusercontent.com/16965587/49282216-d64e9980-f44b-11e8-98f6-dcb1358d2269.png)

You can also choose whether to see the percentage or value on each highlighted line using the gear menu on the top right. In this case the `fetchImage()` method (that was added for the purposes of this example) was the problem. From here, you would be armed with the knowledge about where the memory usage is coming from. As stated before, how you use this information is subjective and dependent on your application. The way that you solve excessive memory usage is up to you. For example, you could discard the old search results once a new search is completed, only keep x amount of search results before discarding them, etc.",,,bXhqL2WJiB8,http://youtube.com/watch?v=bXhqL2WJiB8,https://www.youtube.com/embed/bXhqL2WJiB8,,,,,Debugging II - Instruments,,iOS Code Quality,iOS Development Core,,1,,1,2
implement unit tests using XCTestCase,"Xcode's `XCTest` framework provides a class called `XCTestCase`. To create tests, you subclass `XCTestCase`, then implement your tests as methods in your subclass. In this lesson, you'll learn how to use `XCTestCase` to add your tests to a project.","Show a basic `XCTestCase`. Explain how test methods are created, the rules for naming them, and the purpose of `setUp()` and `tearDown()`.","Generally, you'll create a subclass of `XCTestCase` for each group of tests. For example, you might create a `class MathTests: XCTestCase` class with tests for all the math functions in your app. Each test method's name **must** begin with `test`, for example: `testImageFilter()`. Xcode uses the names of the methods to discover your tests, and will only recognize and run methods that begin with `test`. Use one function for each test. What ""one test"" means is subjective, but in general, your test methods should be relatively short, test one piece of functionality and/or use-case. You can add as many test methods to a test case class as you like. One thing to keep in mind is that Xcode specifically does not run tests in order. You should not rely on tests running in a particular order or share state between them.

Before you can use code in your app, you need to import the app into your test case(s). Do that the same way as you import a framework, with `import YourAppName` at the top of the test case file. Usually, you'll want to be able to access internal methods and properties from code in your app. By default, when you import a framework or app module into another module, you can't access internal functions or properties. This is usually the majority of your code, since internal is the default access level for code. The fix for this in your test cases is to use `@testable import YourAppName`. `@testable` tells the compiler to expose the internal methods of the imported app module so that your tests can access them.

### Preparing for Tests

If you need to do some set up or tear down work before each test, for example, loading a file, creating a helper class, etc., you can override `XCTestCase`'s `setUp()` and `tearDown()`. It is important to realize that `setUp()` is called before **each** test method runs, and `tearDown()` is called after **each** method finishes. Despite being members of the same class, each test method should be thought of as functionally independent of the other test methods.","Create a new project with unit tests. Add some math functions including:

```
func add(a: Int, b: Int) -> Int {
  return a + b
}

func subtract(a: Int, b: Int) -> Int {
  return a - b
}

func multiply(a: Int, b: Int) -> Int {
  return a * b
}

func divide(a: Int, b: Int) -> Int {
  return a / b
}
```

Create a test case class called `MathTests`. Write test methods for each of the functions above.",Create a test case class in your name splitting app called `NameSplitTests`. Add a test method called `testNameSplitting()` and move your test code into it.,KIQ5yAkndAc,http://youtube.com/watch?v=KIQ5yAkndAc,https://www.youtube.com/embed/KIQ5yAkndAc,,,,,Unit Testing I - Intro to Unit Testing,,iOS Code Quality,iOS Development Core,,1,1,1,3
use XCAssert functions to test whether code is working correctly,"Using an if statement to check the results of a function your testing is fine, but your only real option if the test fails is to log a message. Wouldn't it be better if you could tell Xcode about the failure so it could keep track of it and reported it to you? You can use `XCTAssert()` and related functions for that. In this objective, you'll learn how to use `XCTAssert()` and friends to test the result of the code you're testing.",Explain `XCTAssert`. Go through the documentation showing other variatiations on it.,"`XCTAssert()` tests an expression. If the expression is true, the test is considered to have passed. If it's false, `XCTAssert()` signals to Xcode that the test has failed. You can also provide an (optional) message to `XCTAssert()` to log along with the test failure result.

For example, we could rewrite our `testSumFunction()` method from above like so:

```
func testSumFunction() {
  let testNumbers = [1, 2, 3]
  let result = sum(testNumbers)
  XCTAssert(result == 6, ""Incorrect result from sum() function"")
}
```

There are several other variations on `XCAssert` that are built for testing different kinds of conditions. For example, `XCAssertNotNil` checks to make sure an optional is not nil:

```
let result = functionThatMayReturnNil(validArgument)
XCTAssertNotNil(result, ""functionThatMayReturnNil() returned nil when it shouldn't have"")
```

Others include: `XCTAssertEqual()`, `XCTAssertEqualWithAccuracy()` (great for testing floating point calculations), `XCTAssertNoThrow()`, `XCTAssertThrowsError()` and several more. You can even use `XCTFail()` which always triggers a test failure, which can be useful if you do want to write your own possibly complex if statement to check test results, and fail in the body (or else clause) of the if statement.","In `MathTests`, use `XCTAssert`, etc. in your tests.","In your `NameSplitTests` test case, use `XCTAssert()` or related function to check to make sure the results of your tests are correct.",xhwik1hTdM4,http://youtube.com/watch?v=xhwik1hTdM4,https://www.youtube.com/embed/xhwik1hTdM4,,,,,Unit Testing I - Intro to Unit Testing,,iOS Code Quality,iOS Development Core,,1,1,1,3
add a UI test target to an existing app,The method for adding a UI test target is almost identical to adding a unit test target:,,"To add a new test target to your existing project, do the following:

Open the project in Xcode
View the project settings by clicking on the project file itself in the Files navigator
Click in the project settings pane somewhere (this is just to give it focus)
From Xcode’s menu, select Editor->Add New Target
In the sheet that appears, with iOS selected, find and choose the UI Tests template.
You’ll notice that a new folder, called YourAppNameTests is added to your project, along with a target in the project settings.
If you’re creating a new project in Xcode, you can have it create a test target for you by checking the “Include UI Tests” target in the new project sheet.

## Follow Along

Add a UI test target to a project of your own or one that you have worked on here at Lambda School.",,,oBA5ClnPNL8,http://youtube.com/watch?v=oBA5ClnPNL8,https://www.youtube.com/embed/oBA5ClnPNL8,,,,,Unit Testing II - UI Testing,,iOS Code Quality,iOS Development Core,,1,,1,2
record UI tests using Xcode’s recording feature,Xcode includes the ability to record the way that you interact with the application in the simulator and synthesize some code that mimics what you did.,,"When in a UI test function, you will notice on the toolbar there is a red circle icon:

![](https://user-images.githubusercontent.com/16965587/50180734-ab779880-02c7-11e9-923a-0af7d287e0c0.png)

When you click this icon, the simulator will appear and as you interact the application, code will be filled in that represents what you have done:

![](https://user-images.githubusercontent.com/16965587/50180630-694e5700-02c7-11e9-9803-27ac638979ff.gif)

Now if we were to run the test now, it actually wouldn't end up doing the same thing as we recorded. Why? Because this is an imperfect tool, and purposely so. The recording feature is meant primarily to be a starting point for your tests. It can be great to get an idea of what you will need to do, but it will either partially or completely miss some things. In this case, it didn't even catch the text that was being typed in the text fields whatsoever.

## Follow Along

Open a project of your own and record a UI test to be cleaned up in the next objective.",,,C-slERVWjUo,http://youtube.com/watch?v=C-slERVWjUo,https://www.youtube.com/embed/C-slERVWjUo,,,,,Unit Testing II - UI Testing,,iOS Code Quality,iOS Development Core,,1,,1,2
clean up recorded code,"As we saw, recording UI tests is really cool, but fairly inconsistent. However it gave us a great place to start, so now all we need to do is improve it by adding the things that it missed.",,"In order to do this, we need to understand the things we use in UI tests. Specifically, the interactions with everything that was recorded and can be accessed in UI tests are all `XCUIElement` objects, whether they are a table view, text field, label, etc. Please take a few minutes to look in the documentation for `XCUIElement` to familiarize yourself with the class. So if we take a look at the code that was recorded:

``` Swift
     func testSomething() {

        let app = XCUIApplication()

        app.navigationBars[""Root View Controller""].buttons[""Add""].tap()
        app.textFields[""ClassmateDetailViewController.NameTextField""].tap()
        app.textFields[""ClassmateDetailViewController.FavoriteColorTextField""].tap()
        app.textFields[""ClassmateDetailViewController.FavoriteAppTextField""].tap()
        app.navigationBars[""New Classmate""].buttons[""Save""].tap()
        app.tables.staticTexts[""Jim""].tap()
    }
```

The first thing in this test is the `app`. This is an `XCUIApplication` object, which is a subclass of `XCUIElement`. In order to get access to the app's UI elements that are currently on the screen at any time, we need access to the proxy for the application and this is done using the `app` in this case.

Once we have access to the app, we can query for child UI elements of the `app` (or any `XCUIElement`). For example, the first thing being queried is a navigation bar with the title ""Root View Controller"". The way this works is using the the `XCUIElementTypeQueryProvider` protocol and `XCUIElementQuery`s. In the next objective, we will go into more depth on how these queries work under the hood. For now, all you need to know is that we're asking the `app` to look for any navigation bars with that title (though there should only be one), and then ask any of those navigation bars for an ""Add"" button, which we then can call the `tap()` method on.

If we want to interact with elements like the text field more than once (to tap on them, but also enter text), we could instead make a constant for them. The recorded code would now look like this:

``` Swift
    func testSomething() {

        let app = XCUIApplication()
        app.navigationBars[""Root View Controller""].buttons[""Add""].tap()

        let nameTextField = app.textFields[""ClassmateDetailViewController.NameTextField""]
        nameTextField.tap()

        let favoriteColorTextField = app.textFields[""ClassmateDetailViewController.FavoriteColorTextField""]
        favoriteColorTextField.tap()

        let favoriteAppTextField = app.textFields[""ClassmateDetailViewController.FavoriteAppTextField""]
        favoriteAppTextField.tap()

        app.navigationBars[""New Classmate""].buttons[""Save""].tap()
        app.tables.staticTexts[""Jim""].tap()
    }
```

This lets us now save the time of writing that long query to get the text field again to enter some text:

``` Swift
    func testSomething() {

        let app = XCUIApplication()
        app.navigationBars[""Root View Controller""].buttons[""Add""].tap()

        let nameTextField = app.textFields[""ClassmateDetailViewController.NameTextField""]
        nameTextField.tap()
        nameTextField.typeText(""Jim"")

        let favoriteColorTextField = app.textFields[""ClassmateDetailViewController.FavoriteColorTextField""]
        favoriteColorTextField.tap()
        favoriteColorTextField.typeText(""Red"")

        let favoriteAppTextField = app.textFields[""ClassmateDetailViewController.FavoriteAppTextField""]
        favoriteAppTextField.tap()
        favoriteAppTextField.typeText(""Twitter"")

        app.navigationBars[""New Classmate""].buttons[""Save""].tap()
        app.tables.staticTexts[""Jim""].tap()
    }
```

If we now run the test, it will work the way that we originally used the app when we recorded. As stated previously, recording UI tests should be  a **starting point** for your tests, not the final product.",,,3ixbJ5CHFaE,http://youtube.com/watch?v=3ixbJ5CHFaE,https://www.youtube.com/embed/3ixbJ5CHFaE,,,,,Unit Testing II - UI Testing,,iOS Code Quality,iOS Development Core,,1,,1,2
add accessibility identifiers to UI elements to improve testability,"The way that UI testing works is written on top of the Accessibility framework. If we look at the `XCUIElementQuery` at its `subscript(String) -> XCUIElement` method (which is what gets called when you use square brackets, it says:

> Returns a descendant element matching the identifier specified by `key`.

The definition of the `key` parameter is:

> An identifier string to match against the descendant element's accessibility identifier.",,"Going back to the `testCreatingClassmate()` method above, the string used in the subscipt is actually the text fields' placeholder text. If a UI element does not have an accessibility identifier, the application will assign one to it for you. Depending on the UI element, the identifier will be assigned from the placeholder text like we see above, or for a cell, button, label, etc. it will generally take the text inside of it. We run into a problem with this; what if the element's text changes and we are looking for its old text? Our tests will break. So instead, we need to assign our own accessibility identifier instead of letting it be assigned for us.

You can assign an accessibility identifier programmatically in a view controller's `viewDidLoad()` (or somewhere that will assign it as soon as possible once created) by simply assigning a string value to a UI element's `.accessibilityIdentifier` property. You can also assign one in Interface Builder by going to the Identity Inspector. Under the Accessibility section at the bottom:

![](https://user-images.githubusercontent.com/16965587/50182385-715cc580-02cc-11e9-992e-6e8e34c1ec70.png)

The string you assign isn't important, as long as it's unique. A solid syntax for making sure that you never have two UI elements with the same identifier is to write the name of the view controller the element belongs to, add a period, then add the name of the element. For example, `ClassmateDetailViewController.NameTextField`. Even if you have more than one name text field in your application, the view controller prefix ensures you're querying for that _specific_ name text field. 

**Caution: Some UI elements' accessibility identifier cannot be set in Interface Builder for some reason.** `UIBarButtonItem`s are an example of this. In that case, you must set it programmatically.

We can now go back to our recorded code and clean it up even more.

``` Swift
    func testCreatingClassmate() {

        let app = XCUIApplication()
        app.navigationBars[""Root View Controller""].buttons[""Add""].tap()

        let nameTextField = app.textFields[""ClassmateDetailViewController.NameTextField""]
        nameTextField.tap()
        nameTextField.typeText(""Jim"")

        let favoriteColorTextField = app.textFields[""ClassmateDetailViewController.FavoriteColorTextField""]
        favoriteColorTextField.tap()
        favoriteColorTextField.typeText(""Red"")

        let favoriteAppTextField = app.textFields[""ClassmateDetailViewController.FavoriteAppTextField""]
        favoriteAppTextField.tap()
        favoriteAppTextField.typeText(""Twitter"")

        app.navigationBars[""New Classmate""].buttons[""Save""].tap()
    }
```

Now that we've assigned an identifier, the placeholder and text from the text fields can change but we will always be able to get the text fields back. Where possible **you should always assign accessibility identifiers to your UI elements.** ",,,J_I2hesMPzY,http://youtube.com/watch?v=J_I2hesMPzY,https://www.youtube.com/embed/J_I2hesMPzY,,,,,Unit Testing II - UI Testing,,iOS Code Quality,iOS Development Core,,1,,1,2
use assertions to test for expected UI behavior,"The way we assert that our application is behaving the way we expect it to is largely the same as with unit tests; we still use `XCTAssert` and its derivitives. The only difference is that we don't have access to the application's code, so we can only assert the state of things visually displayed on the screen. ",,"For example, in `testCreatingClassmate()` we could assert that there is a cell that says ""Jim"" after saving the classmate by adding this to the test:

``` Swift
        let cell = app.tables.cells.staticTexts[""Jim""]

        XCTAssertEqual(cell.label, ""Jim"")
```

This is a simple example of a single assertion and in a UI test, but you should include multiple assertions as UI tests are generally used for integration testing; they run through more code than a single unit test would. 

Many times you will want to check if a UI element exists at all. Going back to the query language:

``` Swift
        let cell = app.tables.cells.staticTexts[""Jim""]
```

Remember that this is simply a query for a cell whose label says ""Jim"". There is no guarantee whether there is such a cell or not. To check that something exists, there is a handy `exists` property on `XCUIElement` that you can then use with an assertion:

``` Swift
      XCTAssert(cell.exists)
```
",,,hilhfvxcw_A,http://youtube.com/watch?v=hilhfvxcw_A,https://www.youtube.com/embed/hilhfvxcw_A,,,,,Unit Testing II - UI Testing,,iOS Code Quality,iOS Development Core,,1,,1,2
use expectations and the wait API to wait for UI elements to appear or change,"Sometimes you will have to test concurrent code, which poses its own problem for testing. That is, if you have to wait for some information to come back from an API, an image to be filtered, or anything else asynchronous before you can assert that something worked or not, you need to make the test wait before it thinks it's finished. 
",,"For example, say we have a new bar button item in the classmates app that fetches classmates from an API. We could write a test like this:

``` Swift
let app = XCUIApplication()
app.navigationBars[""Classmates""].buttons[""Fetch Classmates""].tap()

XCTAssert(app.tables.cells.count > 0)
```

The problem with this code is that if it takes time for the classmates to be fetched and displayed on the table view, this test won't wait until it has had the opportunity to do so. The most common way to implement this is by using `XCTExpectation` objects. If you are familiar with using expectations in unit tests, they must be used in perhaps a different way than you are used to. Specifically, we use `XCTestCase`'s convenience method:

``` Swift
func expectation(for predicate: NSPredicate, evaluatedWith object: Any, handler: XCTNSPredicateExpectation.Handler? = nil) -> XCTestExpectation
```

Expectations can be used in a few ways, but the way that we use them with UI testing makes use of a `predicate` to check the state of some `object`. There is an optional handler as well, but the most important parts are the first two arguments. Let's make an expectation that checks to see if there are more than 0 cells:

``` Swift
let fetchedClassmateExpectation = expectation(for: NSPredicate(format: ""count > 0""), evaluatedWith: app.tables.cells, handler: nil)
``` 

The second part of testing asynchronous code is using one of `XCTestCase`'s `wait` methods. `wait` is where the expectation gets run after a given amount of time so the application can have time to complete whatever asynchronous operation we are testing. If we expect the classmates to be fetched within 5 seconds, we can set the `timeout` to about the same time. After the given time, the expectation will be evaluated and the test will continue running if there are more than zero cells in the table view, or it will fail the test.

There are two `wait` methods, and in this case either of them will work great. `waitForExpectations` waits for all the expectations in the test, whereas `wait(for: ...)` will only wait for the expectations that you pass in as arguments to the function. That way you can have multiple places where the code waits in the same test. We'll just use `waitForExpectations` here. So here's the whole test:

``` Swift
func testFetchingClassmates() {

        // 1
        let fetchedClassmateExpectation = expectation(for: NSPredicate(format: ""count > 0""), evaluatedWith: app.tables.cells, handler: nil)
        // 2
        fetchedClassmateExpectation.expectationDescription = ""Classmates should have been fetched and displayed on the table view.""

        let app = XCUIApplication()

        app.navigationBars[""Classmates""].buttons[""Fetch Classmates""].tap()

        // 3
        waitForExpectations(timeout: 5)
}
```  

- 1: We create the expectation with the predicate checking the count of table view cells currently displayed.
- 2: A great part of expectations is the `expectationDescription`. This should simply describe what is expected to happen if all worked correctly. This message will be displayed in the red test failure output line if the test fails.
- 3: `waitForExpectations` with a timeout of 5 seconds will wait those 5 seconds before evaluating the expectation.

A key thing to note is that any code below a `wait` call will not be executed until after the timeout, assuming the expectation passes.

",,,ewfPNKbfCRs,http://youtube.com/watch?v=ewfPNKbfCRs,https://www.youtube.com/embed/ewfPNKbfCRs,,,,,Unit Testing II - UI Testing,,iOS Code Quality,iOS Development Core,,1,,1,2
use TestPages to create easily readable and maintainable UI tests,,,,,,VDz2ALHiTw4,http://youtube.com/watch?v=VDz2ALHiTw4,https://www.youtube.com/embed/VDz2ALHiTw4,,,,,,,,,,0,,1,1
understand and explain the purpose of unit testing,"Unit testing is writing code that tests other code. This way, you can make sure your functions, classes, and other code behave the way they're supposed to in an automated fashion. Being able to run tests on all your code makes it so you can be confident that it actually works before shipping it to your users. In this objective, you'll learn more about what unit testing means, and how it works.",Explain the value of unit testing. You might talk about how you've used it in code you've worked on to ensure quality.,"Unit testing refers to testing small pieces, or _units_ of your program. A unit might be a single function, a specific functionality of a class, a single class, or an entire system. (Good unit tests usually cover smaller, rather than larger units.) The code being tested is sometimes referred to as the _unit under test_ (UUT) or _system under test_ (SUT). Unit tests themselves are code that calls the SUT code to make sure it behaves properly. Let's look at an example.

Imagine you have a function that calculates the sum of an array of numbers:

```
func sum(_ array: [Int]) -> Int {
  var result = 0
  for number in array {
    result += number
  }
  return result
}
```

This is a simple function, but that means it's easy for us to use it to illustrating testing. We want to make sure that this function works correctly. That is, given an array of numbers does it produce the right result? We can write code to test this!

```
func testSumFunction() {
  let testNumbers = [1, 2, 3]
  let result = sum(testNumbers)
  if result != 6 {
    NSLog(""sum() failed to produce the correct result! Expected 6, got \(result)"")
  } else {
    // Test passed
  }
}
```

Here we run the function with a known input, and test to make sure that it produces the correct result. `testSumFunction()` is a unit test. If it the result isn't what we expected, we log out the error.

Now, we're only testing one possible set of inputs. A comprehensive test should test many inputs including edge cases like the sum of an empty array, the sum of a **huge** array, the sum of an array of 1, etc. But the idea is the same.

One of the main benefits of having good unit tests, besides ensuring that your code works from the outset, is that if you want to change the internal implementation of a function or class, your unit tests can help you be sure that your changes didn't subtly break something.

For example, we could rewrite our `sum()` function to use `reduce()`:

```
func sum(_ array: [Int]) -> Int {
  return array.reduce(0, +)
}
```

We can run our `testSumFunction()` again, and let it verify that our newly-rewritten `sum()` function still produces the correct ouptut for a variety of inputs.","Write a function that calculates x raised to the y power, `power(x: Int, y: Int)` using a for loop. Write a unit test that ensures it works with a variety of values for x and y. Include edge cases like `0,0`, `0, 1`, `1, 0`, etc. Next, rewrite the `power()` function to use recursion instead. Rerun the unit test to verify that it still works.","Write a function `components(fromName name: String) -> (firstName: String, lastName: String)`. It should take a string and return the first and last name. Assume that first names are always one word, but last names may be multiple words (e.g. `de la Cruz`). Assume names never have a middle name.

Write a unit test that tests to make sure this works with the following names:

```
Andrew Madsen
Jose de la Cruz
Dan'l Lewin
Jean-Luc Picard
```",fGxF-9o6GtA,http://youtube.com/watch?v=fGxF-9o6GtA,https://www.youtube.com/embed/fGxF-9o6GtA,,XCTest Documentation,,,Unit Testing I - Intro to Unit Testing,,iOS Code Quality,iOS Development Core,,1,1,1,3
run unit tests in Xcode,"Xcode has the ability to run your tests, report on their results, and more. In this objective, you'll learn how to use Xcode to actually run your tests.",Demonstrate running tests in Xcode. Show the test results pane. Show how to run a test case or a single test method by clicking on the buttons in the file editor gutter. ,"When you use a test target with `XCTestCase`s in it, you can tell Xcode to run a all your tests and report the results back to you. This is a simple as selecting Product->Test in the menu. You can also run an individual test case (a collection of test methods), or even a single test method.

When Xcode runs tests, it will tell you whether they succeeded or failed. Overall, your tests are said to fail if **one or more** of them fail. Only 100% passing tests is considered successful. Xcode will also tell you which test(s) failed in the case of a failure, along with the exact assertions that failed. This will help you narrow down the problem so you can fix it.

It can be useful to use the debugger when your tests are running. You can set breakpoints in your test methods just as you can with regular app code, and use all the normal debugger tools to explore what's going on.",Run the tests in the math app. Try intentionally breaking one of the math tests and observe the tests failing.,"Run the tests in your name splitter app. Do they all succeed? If any fail, debug the problem and fix it.",,,,,,,,Unit Testing I - Intro to Unit Testing,,iOS Code Quality,iOS Development Core,,1,1,,2
add relationships between tables,"When modeling the data for our systems we'll start noticing the relationships that exist between our entities. Those relationships need to be added to our resulting model.

The way we model the relationship between our entities will influence how easy (or difficult) querying data will be.",,"There are three types of relationships:

- one to one.
- one to many.
- many to many.

##### One to One Relationships

A one to one relationship is used to model cases where one instance of an entity corresponds to exactly one intance of another entity. It is very useful for cases where we need to extend one entity with additional information that we don't need to query frequently.

We can define this type of relationship in different ways:

- share the same primary key value between the two tables.
- add a foreign key in one table that points to the primary key of the other table. To make it a true one to one, the foreign key will be marked as unique.
- have a third table that holds the relationship, again the foreign keys of the extra table must be marked as unique.","##### One to Many Relationships

This is the most common type of relationship between entities and it models cases where entity 1 can have none or many of entity 2.

Some examples:

- a `customer` can have many `orders`.
- a `user` can have `followers`.

This type of relationships is modeled by adding a foreign key in the many side of the relationship that points to the primary key in the table that represents the \_one` side.

##### Many to Many Relationships

This type of relationship models things like:

- an `order` can have many `products` and the same `product` will appear in many `orders`.
- a `book` can have more than one `author` and an `author` can write more than one `book`.

To model this relationship we need to introduce a third table that holds foreign keys that reference the primary key on the related tables.","Model the relationship for addresses where:

- an address has the street addres, the city, state and zip code.
- a state can have several cities.
- a city belongs to only one state.",,,,,one to one relationships,"one to many relationships,many to many relationships","- mention the types of relationships.
- provide an example of one to one relationships.
- provide an example of many to many relationships.
- what is a foreign key?",Introduction to Data Modeling,,Adding Data Persistence to Web APIs,Full Stack Web Development Core,,1,1,,2
Add additional fields when creating records,"When creating new records in Django, some read-only fields need to be automatically populated. Some fields, like date fields, can do this out-of-the-box.

But other ones, most notably foreign key fields into the user table, cannot.

Fortunately we can override this behavior to get user information automatically added to records when we create them.","Although not necessary, we use this lesson to introduce the Django debugger.",,"We can do that in our serializer by overriding a method from
`serializers.HyperlinkedModelSerializer` called `create`. This method needs to
return a new `PersonalNote` object constructed from the passed-in data, which is
in the `validated_data` parameter, like so by default:

In `api.py`, `PersonalNoteSerializer`:

```python
    # !!! Broken code still missing the user field

    def create(self, validated_data):
        note = PersonalNote.objects.create(**validated_data)
        return note
```

But we need to add the `user` field into the mix. If the user is logged in to
Django through this browser, that information is automatically included in the
request... but where? Let's use the debugger to explore and find out.

In `api.py`, `PersonalNoteSerializer`:

```python
    def create(self, validated_data):
        import pdb; pdb.set_trace()  # Start the debugger here
        pass
```

Run this and use the debugger to the data present at this breakpoint.  If you
dig into `self`, you will find eventually find a context with a request.  As an
educated guess, using what we’ve previously learned about requests, it is fair
to hypothesize that a user is associated with the request.  Try it out:

```python
self.context[‘request’].user
```

Exit the debugger and add a new variable in `create` to store the user retrieved
from the location in `self` that we just discovered. Feed it in to `PersonalNote.objects.create` as an additional keyword argument:

```python
    def create(self, validated_data):
        user = self.context[‘request’].user
        note = PersonalNote.objects.create(user=user, **validated_data)
        return note
```

This will add the needed data to the create method and allow the form to work.
Return to the `/api/notes/` page and test.  

You will receive a `201 Created` that may appear at first as if the data is
being overwritten.  Return to the main list page to confirm that everything is
being saved.  

Debug as needed, then commit.  ","* For your other models that have a user field, make sure that field is populated for when creating new records.",,,,,,,,,,,,,0,1,,1
write types and functions that support dependency injection for testing,"Dependency Injection is a fancy name for a simple technique. It allows us to provide (or _inject_) object or data (_dependencies_) into another object. This can be a valuable technique for many reasons, but one of the most important is that it makes it so we can more effectively test complex code with one or more dependencies. Swift's rich support for protocols is a great way for us to set up dependency injection that allows for easy testing.",,"Many functions, methods, classes, and structs depend on data or functionality provided by other objects. When testing, we often rely on calling a function with known arguments, then verifying that its output is correct. If you're testing a method whose result depends on more than just its arguments, for example the value of internal properties of its class, testing becomes more difficult. You have to be sure to setup the instance of the class correctly before calling the function to test it. For this reason, it's much easier to test functions or methods whose output depends **only** on the arguments passed to them. Even in a class where a method must make use the value of internal properties, you can improve testability by explicitly requiring that all of the needed property values be passed in as arguments to the method rather than referencing them directly in the method (using `self.property`). This allows us to provide the needed data directly to the function, and makes it very easy to test it with known values. This technique of allowing necessary data or objects to be explicitly provided to a class or function is called _dependency injection_.

",,,,,,,,,,Unit Testing III - Dependency Injection and Mocking,,Modularity,iOS Development Core,,1,,,1
understand and explain the benefits and drawbacks to using third party libraries,"
A library is simply a chunk of code that performs a set of functionalities. For example, UIKit is a library written by Apple that allows us to create a user interface for our application. We can write our own libraries and we will later on in the week. However, for today we are going to talk about third-party libraries; libraries written by someone else that we can use in our own projects.",,"Third-party libraries are often public and open-source. They are generally hosted on websites like GitHub. Let's look at some pros and cons to using third-party libraries in your code.

Pros:

  - You can get some functionality for free wihtout doing the work yourself. Perhaps the functionality you requuire is beyond your current skill level.
  - You can focus on the code unique to your app and you don't have to ""reinvent the wheel""

Cons:

  - No code is perfect. There will inevitably be bugs in third-party libraries
  - You are responsible for all the code in your project, including the libraries' code.
  - A potential lack of support
  - Overuse can cause:
      - ""[Dependency hell](https://en.wikipedia.org/wiki/Dependency_hell)""
      - App bloat

You are at a stage in your development career where you are learning new things every day. While this is going to be true throughout your career, this point is crucial to set yourself up for the rest of your career. It can be tempting to use third-party libraries a lot to get a lot of free functionality. Ultimately it can lead to you using them as a crutch instead of you forcing yourself to learn how to do that functionality yourself. You can rob yourself of that learning experience.

Does this mean that you should never use third-party libraries? No, but you should be wary of them and think about these benefits and drawbacks before throwing a bunch of libraries in your project.

",,,QhsS_VepeaI,http://youtube.com/watch?v=QhsS_VepeaI,https://www.youtube.com/embed/QhsS_VepeaI,,,,,Third Party Libraries and Dependency Management,,Modularity,iOS Development Core,,1,,1,2
create a framework for sharing code between multiple apps,"Frameworks allow you to package up code so that it can be reused in more than one app. You can share frameworks with other people, but just as importantly, you can use them to share code between your own apps. Frameworks can even be used to share code between macOS, iOS, watchOS, and tvOS versions of an app.

In this objective, you'll learn how to use Xcode to create a new framework project, and how to use it in an app project.",,"The term _library_ is used to refer to a collection of code that solves a problem and can be reused. Good libraries are generalized enough to be useful in many different applications.

There are several different techniques for using a library from an app, including static libraries, dynamic libraries, and frameworks. All three of these methods have their uses, but generally on iOS, the best of them is frameworks.

Fundamentally, a framework is compiled code along with (optional) resources like images and storyboards. Frameworks come in the form of a _bundle_, which is really just a directory full of subdirectories and files with a specific structure. Apps on iOS are also bundles, and both app bundles and framework bundles have a similar structure. Unlike apps, frameworks can't be run on their own. Instead, they're meant to be _linked into_ and included with an app. That way, the app's code can use the classes, methods, functions, etc. contained in the framework.

Xcode allows you to create frameworks just like you can create apps. To create a new framework:

1. Select File->New Project
2. In the templates sheet, under the ""Framework & Library"" section, select ""Cocoa Touch Framework"", then click Next.
3. Give your framework a name. Choose a team, organization name, organization identifier, language, etc. You've seen these options before when creating an app. Click Finish.
4. Choose a location for the framework project. Click Create.

After your framework project has been created, you might notice that the files it contains are quite different from what you see when you create an app. In fact, there are only two files: `YourFrameworkName.h` and `Info.plist`. 

The `Info.plist` file serves the same purpose as `Info.plist` in your app projects. It includes metadata information about the framework. At least when you're starting out, you generally won't need to edit this.

`YourFrameworkName.h` is what's called the framework's _umbrella header_. This is mostly only relevant if your framework will include Objective-C code and/or will be used from Objective-C code. If you're only using Swift, you can ignore it (but don't delete it).

",,,,,,,,,,Creating Frameworks,,Modularity,iOS Development Core,,1,,,1
use protocol oriented programming to create mocks for testing code with complex dependencies,"When our code depends on system code that we don't have control over, it can be difficult to test. We want to make sure that it calls the correct methods on its dependencies, and correctly handles the results of those calls. _Mocking_ is a technique that allows us to provide ""fake"" or ""mock"" dependency objects to code we're testing, so we can verify correct behavior. In this objective, you'll learn how to use protocols and mocks along with dependency injection.",,"### Test Only Your Code

When you're testing, it's important to test **your code**. You shouldn't be testing the frameworks and APIs you're using. This is particularly relevant when testing networking code. If your tests require a network connection, they'll fail if you try to run them when the internet is down, when the server is down, or when the backend developers on your team have made a mistake. (Sometimes you _do_ want to test for that last case, but you don't use unit tests for that, you use _integration tests_.)

Let's think about a specific example where a class or function depends on _implicit state_. When we write a networking class, let's call it `NetworkController`, it uses `URLSession` internally. It depends on `URLSession`. Or in other words, `URLSession` is a _dependency_ of `NetworkController`. So far, we've always used `URLSession.shared` to get the shared `URLSession` object before asking it to create data tasks. `NetworkController` has an _implicit_ dependency on `URLSession`, because it's not possible for external code to **explicitly** specify the exact instance of `URLSession` to use.

Our network controller might have a method like:

```swift
class NetworkController1 {
    func fetchObjects(from url: URL, completion: @escaping ([Model]?, Error?) -> ()) {
        URLSession.shared.dataTask(with: url) { (data, _, error) in
            if let error = error {
                completion(nil, error)
                return
            }

            guard let data = data,
                let objects = try? JSONDecoder().decode([Model].self, from: data) else {
                    completion(nil, CustomError())
                    return
            }

            completion(objects, nil)
            }.resume()
    }
}
```

Here, `fetchObjects(...)` has an **implicit dependency** on the shared URLSession. How can we test this code in the absence of a network connection? We can't really! The function will fail if there's not a network connection. Instead of effectively testing just our code, any test we write would also be testing that the network itself is working, and that's not what we want.

### Mocking

Instead, we can make tests of networking code use a ""fake"" or _mock_ `URLSession` object that doesn't actually communicate over the network. If we modify our `NetworkController` to allow dependency injection, we can provide our mock `URLSession` object, then test to make sure that the networking code is for example passing in the correct URLs when it creates data tasks.

There are various ways to make mock objects, but perhaps the nicest way to do so in Swift is to use a protocol. Instead of our networking code relying directly on `URLSession`, we can create a protocol:

```swift
protocol NetworkLoader {
    func loadData(from url: URL, completion: @escaping (Data?, Error?) -> ())
}

// Make URLSession conform
extension URLSession: NetworkLoader {
    func loadData(from url: URL, completion: @escaping (Data?, Error?) -> ()) {
        dataTask(with: url) { (data, _, error) in
            completion(data, error)
        }.resume()
    }
}
```

Then, we make our `NetworkController` depend on an object that conforms to this protocol, **and** make it so that it can be provided externally:

```swift
class NetworkController {
    private let loader: NetworkLoader

    init(loader: NetworkLoader) {
        self.loader = loader
    }

    func fetchObjects(from url: URL, completion: @escaping ([Model]?, Error?) -> ()) {
        loader.loadData(from: url) { (data, error) in
            if let error = error {
                completion(nil, error)
                return
            }

            guard let data = data,
                let objects = try? JSONDecoder().decode([Model].self, from: data) else {
                    completion(nil, CustomError())
                    return
            }

            completion(objects, nil)
            }
    }
}
```

In our regular code, we can just pass the shared `URLSession` into `NetworkController`'s initializer. We could even make it a default value for the initializer's argument.

However, in our unit tests, we will instead create a mock object that conforms to NetworkLoader, but doesn't actually make a network request. Instead, it checks the incoming URL, and calls the completion closure with appropriate `data` and `error` properties. 

```swift
class MockLoader: NetworkLoader {
    var data: Data?
    var error: Error?

    func loadData(from url: URL, completion: @escaping (Data?, Error?) -> ()) {
        completion(data, error)
    }
}
```

With direct control over the `data` and `error` properties provided to our `NetworkController`'s completion closure, we can test that it behaves correctly. Another advantage of this approach is that not only can we test that it works when good data is provided, we can also make sure it correctly handles errors.

```swift
func testLoadingValidData() {
    let mock = MockLoader()
    mock.data = validData  // Data? 
    let controller = NetworkController(loader: mock)
    let expectedModels: [Model]? = validModels

    controller.fetchObjects(from: testURL) { (models, error) in
        XCTAssertEqual(expectedModels, models, ""Loading valid data failed"")
    }
}
```",,,,,,,,,,Unit Testing III - Dependency Injection and Mocking,,Modularity,iOS Development Core,,1,,,1
use expectations to test asynchronous code,"The nature of asynchronous code is that it may complete its task after the calling code has moved on. If we're trying to test asynchronous code and the code being tested doesn't finish running until after the test method itself returns, we need a way to catch the error and report it to Xcode. _Expectations_ allow us to test asynchronous code. In this objective, you'll learn how to use `XCTest`'s expectations API.",,"If a function takes a few arguments and directly returns a value, it's pretty easy to test. We can call it with known arguments, and make sure it returns the value we expect.

If a function is asynchronous and takes a completion closure to report when it's done, testing is a little more complicated.

```swift
func doSomethingAsynchronously(completion: @escaping (Int) -> ()) {
    // Simulate 1 second of ""work""
    DispatchQueue.global().asyncAfter(deadline: .now() + 1, execute: {
        let result = 43
        // do work ...
        completion(result)
    })
}
```

The async function *should* return 42 (but it doesn't because of an intentional bug), and it takes 1 second to run. 

You should see an error in the following test method, but you won't see the error, instead it'll look like it's passing.

```swift
func testSomethingAsynchronousReturns42() {
    doSomethingAsynchronously { (result) in
        // Problem: Test succeeds when 42 != 43
        // Async code finishes after our test function has already reported success
        XCTAssertEqual(42, result, ""doSomethingAsynchronously() returned an incorrect result"")
    }
}
```

Why? Because `testSomethingAsynchronous()` will finish and return **before** the completion closure passed to `doSomethingAsynchronously()` has been called, our assertion won't actually trigger a test failure. After all, how would Xcode know which test the assertion corresponded to?

We can solve this using an _expectation_. Expectations allow us to wait for a result before we report back to Xcode using an assertion.

You can create an expectation by calling `expectation(description: String)`. Then, in the completion closure for the asynchronous task you're testing, call `expectation.fulfill()` to indicate that the task has completed. 

```swift
func testSomethingAsynchronous() {
    let testExpectation = expectation(description: ""doSomethingAsynchronously completion expectation"")
    doSomethingAsynchronously { (result) in
        XCTAssertEqual(42, result, ""doSomethingAsynchronously() returned an incorrect result"")
        testExpectation.fulfill()
    }
    waitForExpectations(timeout: 60.0, handler: nil)
}
```

In the body of the test method itself, you can use `waitForExpectations()` to pause and avoid finishing the test method until all pending expectations have been fulfilled. `waitForExpectations()` takes a timeout value in seconds, along with an optional completion handler to be run when all expectations have been fulfilled. If the timeout elapses before expectations have been fulfilled, the test will fail.",,,,,,,,,,Unit Testing III - Dependency Injection and Mocking,,Modularity,iOS Development Core,,1,,,1
understand and explain how to evaluate third party libraries for quality,"
Anyone can make and push a library to GitHub and make it available for others to use in their own code. This doesn't mean all libraries are created equal. Like previously stated, no code is perfect, but some libraries will be much better than others. ",,"In order for you to use your best judgement when gauging whether or not a library is a good fit for what you need, consider the following:

1. Is it popular? (stars on GitHub, etc.)
2. Is it active? (commits, pull requests)
3. Why am I considering using this library?
    - Time crunch
    - I can’t solve the problem on my own
    - I'm lazy and I don't want to figure it out myself
    - Other


The best indicator is a combination of these three aspects. A popular repo means that many people use or have used it. You can assume that people aren't encountering (too many) problems when using the library. An active repo means that there is a good owner and/or community around the repo that are always updating and improving the repo. This is especially relevant if the library is written in Swift as the language itself is being updated twice if not more times a year at the time of writing this. And finally an introspection into why you want to use the library in the first place will help. If you are on a time crunch but ultimately could write the functionality that the library provides makes sense. If you can't solve the problem on your own, that's fine but also be wary that if something goes wrong with the library, you may not be able to understand the problem. Remember: **you own all the code in your project**. 
",,,1LngwmqqwC4,http://youtube.com/watch?v=1LngwmqqwC4,https://www.youtube.com/embed/1LngwmqqwC4,,,,,Third Party Libraries and Dependency Management,,Modularity,iOS Development Core,,1,,1,2
include sub-projects with a framework in an Xcode app project,"Whether from a submodule, or your own library that you've made yourself, you can include the libary in your project as a subproject. ",,"All you have to do is:

1. Drag the `.xcodeproj` of the **libary** into the Project navigator (the list of files in the left pane) of your main Xcode project (the one you want to import the library to)
2. Find the `.framework` file in the ""Products"" group of your embedded library project.
3. In the main project's project file (at the top of the files in the left pane) drag the `.framework` into the ""Embedded Binaries"" section in the ""General"" tab. This will also put the framework in the ""Linked Frameworks and Libraries"" section right below the ""Embedded Binaries"" section. This is normal. 
Once you've done that, you should be able to import the library just like you would UIKit or any other framework and use it!",,,1bGFRNY6FiA,http://youtube.com/watch?v=1bGFRNY6FiA,https://www.youtube.com/embed/1bGFRNY6FiA,,,,,"Third Party Libraries and Dependency Management,Creating Frameworks",,"Modularity, Modularity","iOS Development Core, iOS Development Core",,1,,1,2
use Git submodules to include a third-party library in a project,"
Submodules are a feature of Git. They allow you to clone a repository (of say, a third-party library from GitHub, etc.) inside of a repository on your machine. You could think of it as a sub-repository. Your main repository will have its own commit history, remote, etc. and the submodule will still have its own commit history, remote, etc. ","Submodules are not only for third-party libraries, but they are useful when we wish to include third-party libraries in a project. Using submodules to add third-party libraries is more of a manual process than using Carthage or CocoaPods. You have to manage the dependencies on your own and make sure they don't conflict, manually find the version of the library you want etc. 

Please watch the video above for a walkthrough of how to add a submodule.",,,,ajeBG0x5p4g,http://youtube.com/watch?v=ajeBG0x5p4g,https://www.youtube.com/embed/ajeBG0x5p4g,,,,,Third Party Libraries and Dependency Management,,Modularity,iOS Development Core,,0,,1,1
use Carthage to include a third-party library in a project,"
Carthage is a dependency manager that allows you to add third-party libraries to your application. A key feature of Carthage is that it does not modify your project whatsoever. It will manage dependencies and get the third-party libraries you specify, but you must add the libraries to your app yourself. This isn't necessarily a bad thing. For more information, look at the README in the Carthage repo [here](https://github.com/Carthage/Carthage). ",,"Before class, you should have carthage installed on your machine. For help with the installation, either watch the embedded video above on Carthage, or look at [this part](https://github.com/Carthage/Carthage#installing-carthage) of the repo for instructions. Note, if you use homebrew to install it, you **may** need to run the command that is in the ""Installer"" part of the instructions.

If you're having trouble installing Carthage, reach out to a PM or your instructor before class so you are ready for the guided project.",,,rRc1OZFd7Og,http://youtube.com/watch?v=rRc1OZFd7Og,https://www.youtube.com/embed/rRc1OZFd7Og,,,,,Third Party Libraries and Dependency Management,,Modularity,iOS Development Core,,1,,1,2
use CocoaPods to include a third-party library in a project,"
CocoaPods is an alternative to Carthage that accomplishes the same goal of adding third-party libraries to your application. Where it differs from Carthage is that it **will** modify your project and create an `.xcworkspace` that is essentially a project that contains both your Xcode project and an Xcode project that CocoaPods generates itself, containing the third-party libraries.",,"On one hand, this allows you to run a simple command, and CocoaPods will grab the library, create a workspace, then immediately open up the workspace and get coding. On the other hand, because it modifies your project, it can sometimes mess up your project causing you to take the time to figure out the problem, google it, then fix it.

Please also install CocoaPods on your machine. For help, refer to the embedded video above and/or follow the instructions found [here](https://cocoapods.org) under the ""Install"" section. If you're having trouble installing Carthage, reach out to a PM or your instructor before class so you are ready for the guided project.",,,8cZ51iJGDOc,http://youtube.com/watch?v=8cZ51iJGDOc,https://www.youtube.com/embed/8cZ51iJGDOc,,,,,Third Party Libraries and Dependency Management,,Modularity,iOS Development Core,,1,,1,2
"understand and explain the advantages and disadvantages of submodules, CocoaPods, and Carthage","Now that you've been introduced to three methods of integrating third-party libraries into your projects, which one should you use? Well, it depends. One factor will be which method the company you work at prefers. Another factor will be your own personal preference. There is no one answer here, and that's precisely why we've shown you all three methods. ",,,,,Yg4B75oKMxA,http://youtube.com/watch?v=Yg4B75oKMxA,https://www.youtube.com/embed/Yg4B75oKMxA,,,,,Third Party Libraries and Dependency Management,,Modularity,iOS Development Core,,0,,1,1
"use Swift’s access control modifiers appropriately to make code private, internal, or public","When writing classes or structs, you should think carefully about the _API surface_ (in other words, the methods and properties) you expose to users of your types. This is true even if **you** are the only one using the API in question, but it's doubly true when you're writing a framework that will be used by others. In this objective, you'll learn how to use Swift's access control modifiers to appropriately control access to individual pieces of API.",,"Swift includes five _access control_ levels. In order from most restrictive to least, they are: `private`, `fileprivate` `internal`, `public`, and `open`. In general, you'll only use `private`, `internal`, and `public`, and we'll focus on those three. You can annotate any entity, including types (classes, structs, enums), methods/functions, and properties with these access control modifiers.

For example, to mark an entire class as private, you can do:

```
private class SomeClass {
}
```

You can also mark individual functions within a class as private even if the class itself is `internal` or `public`:

```
internal class SomeClass {
  private func aFunction() {
  }
}
```

However, you **cannot** mark an entity with a **less** restrictive access level than its parent. For example, you can't have a public function on a private class.

So what do each of these access levels mean?

#### Private

Private access restricts the use of an entity to the enclosing declaration, and to extensions of that declaration that are in the same file. Use private access to hide the implementation details of a specific piece of functionality when those details are used only within a single declaration.

#### Internal

Internal access enables entities to be used within any source file from their defining module, but not in any source file outside of that module. In other words, internal entities can be used from any other file within the same app or framework module that they are defined. If you'd need to `import` something to use a type or function, that means it's in a different module and you'll only be able to use it if it's `public` (or `open`).

**Internal is the default access level if you don't specify one yourself.**

#### Public

Public access enable entities to be used within any source file from their defining module, and also in a source file from another module that imports the defining module. You typically use public access when specifying the public interface to a framework. 

#### Fileprivate and Open

Fileprivate and open access are essentially variations on `private`, and `public`, respectively. You generally shouldn't need them. You can learn more in the [Swift Language Guide](https://docs.swift.org/swift-book/LanguageGuide/AccessControl.html).

### Which Should You Use?

Determining which access control level to use for any given piece of code is important, and also subjective. So, how should you decide. As a rule of thumb, you should **use the most restrictive access level to start**, then open up access as needed. In general, methods and properties in a type should be `private` until and unless they **need** to be accessible to code in other files. Similarly, for code that's used throughout a module, it should be `internal` (the default) until and unless it needs to be exposed publicly to code in other modules. Again, `public` is generally only necessary in framework code, not app code.

Especially when writing re-usable library code, think carefully about whether something should be public. When something is public, there's more pressure to get it right the first time, because modifying it -- or even just renaming it -- will force existing users of that API (whether that's you or others) to update existing code that uses it, which is disruptive. On the other hand, well-encapsulated private code can be modified, even drastically, without disrupting existing users, as long as the public interface and its behavior remains unchanged. (And as always, good unit tests make it _much_ easier to make drastic changes to internal implementation while confirming that you haven't broken public behavior.)",,,,,,,,,,Creating Frameworks,,Modularity,iOS Development Core,,1,,,1
"make good decisions about abstraction, API surface, and modularity when creating a framework","Part of writing good library or framework code is making sure that it exposes an API that is easy to learn, but flexible, powerful, and long-lasting. In this objective, you'll learn how to think about issues that can impact the quality of your frameworks, and the experience of developers using them.",,"In many ways, when you write a framework, you should be thinking about user experience, the same as you think about user experience when writing an app. However, with a framework, your ""user"" is the developer writing code that uses the framework to solve problems (often this is you!). And the experience you need to think about includes questions like:

- Is the framework easy to integrate?
- Are simple uses of the framework straightforward or do they require large amounts of boilerplate code?
- Is the API finicky? In other words, does a developer have to be careful to set everything up just-so in order to get the framework to work, or is it picky and prone to errors?
- Does the API use [progressive disclosure](https://en.wikipedia.org/wiki/Progressive_disclosure) of complexity? Your users should find getting up and running easy, but be able to dig in and solve more complex problems as they learn more.
- Is the API well-documented? A developer using your library should be able to learn what they need to know to use your framework by reading the documentation, whether that's in the README file, in documentation code comments, or in a more formal documentation system generated using something like [Jazzy](https://github.com/Realm/jazzy) or [appledoc](http://gentlebytes.com/appledoc/).

These are abstract questions, with no one solution that applies to every situation. But they are questions you should be asking yourself as you design your framework's API.",,,,,,,,,,Creating Frameworks,,Modularity,iOS Development Core,,1,,,1
describe the purpose of networking protocols as well as describe some of the main protocols such as TCP and UDP,"The networking protocol most students are familiar with is TCP (Transport Control Protocol). TCP, along with the Internet Protocol, IP, are both concerned with providing a reliable transport layer through which data packets can be sent from one location to another. 

UDP (User Datagram Protocol) is an alternative protocol for different use cases. In this module, we'll talk a bit more about networking protocols as well as the TCP and UDP protocols. ",,"A _protocol_ is an agreement between two programs about how they will
communicate. For the Internet, most protocols take the form of ""If you send me _x_, I'll send you back _y_."" Internet-related protocols are clearly written down in specifications, known as an _RFC_.

When you send some data out on the network, that data is wrapped up in several layers of additional data that provide information about data integrity, routing, and so on.

At the highest level, you have your data that you want to transmit. As it is prepared for transmission on the network, the data is _encapsulated_ in other data to help it arrive at its destination. Any particular piece of data will be wrapped, partially unwrapped, and re-wrapped as it moves from wire to wire across the Internet to its destination.

The act of wrapping data puts a new _header_ on the data. This header encapsulates the original data, _and all the headers that have been added before it_.

Here is an example of a fully-encapsulated HTTP data packet.

```
+-----------------+
| Ethernet Header |  Deals with routing on the LAN
+-----------------+
| IP Header |  Deals with routing on the Internet
+-----------------+
| TCP Header |  Deals with data integrity
+-----------------+
| HTTP Header |  Deals with web data
+-----------------+
| <h1>Hello, | 
| world!</h1>  |  Whatever you need to send
+-----------------+
```

The details of what data exists in each header type is beyond the scope of what most people need to know. It is enough to know the short description of what each does.

As the data leaves your LAN and heads out in the world, the Ethernet header will be stripped off, the IP header will be examined to see how the data should be routed, and another header for potentially a different protocol will be put on to send the traffic over DSL, a cable modem, or fiber.

The Ethernet header is created and managed by the network drivers in the OS.

## TCP vs UDP
The TCP protocol is the protocol of choice when reliability of data transfer is of utmost importance. In order to achieve this reliability, TCP uses what's called a ""three-way handshake"" in order to establish a connection between a client and a server. When instigating a three-way handshake, the client first sends an initial request to the server saying that it wishes to connect. The server responds with an acknowledgment that it received the client's initial request, then it waits for the client to send a message back acknowledging that it received the server's initial acknowledgment. Only after the third message is received by the server from the client can client and server begin to exchange HTTP packets. 

The UDP protocol, in contrast, can be thought of as more of a gushing firehose. In other words, packets sent out using the UDP protocol are blasted out with no safeguards in place to ensure that the packets actually reach their destination. With this scheme, a much larger volume of packets can be delivered compared to the TCP protocol. ","For each of the following applications, decide whether such an application would be better served using the TCP or UDP protocols:

1. The front page of YouTube
2. Watching a movie on Netflix
3. A fast-paced online multiplayer game
4. An application for making phone calls over the internet",Name at least three tradeoffs between the TCP and UDP protocols. ,8dJhcEPVmww,http://youtube.com/watch?v=8dJhcEPVmww,https://www.youtube.com/embed/8dJhcEPVmww,,,,,Web Server I,Active,Web Server,Computer Science,,1,1,1,3
describe what a component is and identify different parts of a component,"Components are the building block to modern application development.  Being able to use HTML, CSS, and JS in a reusable way opens up new possibilities for web developers.",,"#### Components

A component is made of several parts: HTML, CSS, or JavaScript brought together for reuse in a website or application.   

#### Components - HTML:

When building HTML with a component mentality the developer would be wise to look at their data first. Ask the question: “What am I trying to display from my data?” 

Because we are focusing on user interface concepts, we don’t have access to a database at this point. What could we use in place of data at this point? The answer could be static HTML. 

Review the following code:
```html
<div class=""custom-buttons"">
  <button>Button 1</button>
  <button>Button 2</button>
  <button>Button 3</button>
  <button>Button 4</button>
</div>
```
Notice we have repeating `<button></button>` tags.  This is an opportunity for us to think about how we could use our CSS and JavaScript to create multiple buttons regardless of how many buttons we have to work with.  The HTML gives us a great starting point for a button component, but we need to style it for reuse. 

#### Components - CSS:
Writing CSS for components is more about a mentality than syntax.  Components should be modular or stand-alone.  With that in mind, you should try to think of your component CSS in a way that could be moved around at any moment and not reliant on any other styles being in place.

One way that can help you control your styles is to use a specificity chain that only matches up with your component.  You could use a specific class name to accomplish this:  

```html
<div class=""custom-buttons"">
  <button class=""custom-btn"">Button 1</button>
  <button class=""custom-btn"">Button 2</button>
  <button class=""custom-btn"">Button 3</button>
  <button class=""custom-btn"">Button 4</button>
</div>
```
***Naming conventions vary wildly in the work place. The recommendation is to adjust to the standards decided on by your employer.***

If you're using a preprocessor a common practice is to have your preprocessed file named after the component.  You could then import your component name into the main file.  Here is an example of the import you could use and then what the file could look like:
```less
@import custom-btn.less
```

```less
.custom-btn {
  // custom styles here
}
```
You may be thinking ""Wait, that's it?"" It really is as simple as thinking ""I need to build my styles so they don't rely on any other element on the page AND don't bleed over into another component.""

#### Components: JavaScript:
JavaScript is used to consume the data and output the content into the DOM.  JavaScript's involvement in components is the glue that ties everything together.  We can use JavaScript to consume the HTML (our mock data for now) and return a component version of it!  The how-to of JavaScript is explained in greater detail throughout the rest of our objectives. ",Let's identify component patterns in the wild.  Lets go to a social media platform and discuss how components are used.,"Go to your favorite social media platform and practice identifying how components are used throughout the app.  Screenshot a component and try recreating the HTML, CSS.  You could even try to create simple DOM interactions in JavaScript.",,,,,,,,Components I,,Applied JavaScript,Full Stack Web Development Core,,1,1,,2
use a component to update a styled HTML element on the DOM,"Knowing that a component combines HTML, CSS, and JavaScript allows us to use the DOM in a new way.  Updating HTML and CSS on the DOM requires knowledge from everything we have learned thus far.",,,,,,,,,,,,Components I,,Applied JavaScript,Full Stack Web Development Core,,0,,,0
build a class that creates multiple elements,JavaScript is the core component in the repeatable nature of components.  Class syntax can be used to create functionality and properties for multiple elements in an app.,,"As we build our page, we may notice that we build elements that have very similar functionality, perhaps they all have click handlers that use the same callback, perhaps they interact with the user in a similar way, perhaps they share the exact same styling. As we now know, these elements are referred to as components. Now that we can create components that share the same styling, we can focus on the Javascript functionality they possess using class syntax.

#### class
We know from our previous lessons about the class syntax. We learned that a class can build javascript objects that share methods and properties. 
```javascript
class Dog {
  constructor(breed){
    this.animal = 'Dog';
    this.breed = breed;
  }

  speaks(){
    console.log('Bark!');
  }
}

const lab = new Dog('Labrador');
const poodle = new Dog('Poodle');
```

We know from our earlier lessons that when we select DOM nodes we are essentially getting objects back. We can apply this class syntax logic to DOM nodes. We can add event listeners, event handlers, inline styling, or virtually any interaction or functionality to these elements. And we can do it to entire sets of elements using a class. 

```html
  <div>
    <button class=""button"">Button 1</button>
    <button class=""button"">Button 2</button>
    <button class=""button"">Button 3</button>
    <button class=""button"">Button 4</button>
  <div>
```
```javascript
const buttons = document.querySelectorAll('.button');
class Button {
  constructor(element){
    this.element = element;
    this.element.addEventListener('click', () => { this.buttonClick() });
  }
  buttonClick(event){
    console.log('button clicked!');
  } 
}
```",,,,,,,,,,Components I,,Applied JavaScript,Full Stack Web Development Core,,1,,,1
describe what Unix sockets are and how to use them.,"Sockets are not a new concept to students, however, in this module we're going to dive a bit deeper in exactly _what_ sockets are and how they function. ",,"Under Unix-like operating systems, the _sockets API_ is the one used to send Internet traffic. It supports both the TCP and UDP protocols, and IPv4 and IPv6.

The sockets API gives access to the IP and TCP layers in the diagram above.

A _socket descriptor_ is a number used by the OS to keep track of open connections. It is used to send and receive data. In our web server, this variable is called `fd`.

You can create a new socket (socket descriptor) with the `socket()` system call.

Once created you still have to _bind_ it to a particular IP address (which the OS associates with a particular network card). This is done with the `bind()` system call.

Once bound, you can read and write data to the socket using the `recv()` and
`send()` system calls.","The steps involved in establishing a socket on the client side are as follows:

1. Create a socket with the socket() system call
2. Connect the socket to the address of the server using the connect() system call
3. Send and receive data. There are a number of ways to do this, but the simplest is to use the read() and write() system calls.

The steps involved in establishing a socket on the server side are as follows:

1. Create a socket with the socket() system call
2. Bind the socket to an address using the bind() system call. For a server socket on the Internet, an address consists of a port number on the host machine.
3. Listen for connections with the listen() system call
4. Accept a connection with the accept() system call. This call typically blocks until a client connects with the server.
5. Send and receive data","For each of the following port numbers, look up the service that is associated with that port number on Unix systems.

For example, on a Unix system, the `echo` service is associated with port 7.

1. 7 - echo
2. 21 - 
3. 23 - 
4. 25 - 
5. 80 -
6. 6000 -",QylI0CDukq4,http://youtube.com/watch?v=QylI0CDukq4,https://www.youtube.com/embed/QylI0CDukq4,,,,,Web Server I,Active,Web Server,Computer Science,,1,1,1,3
properly format HTTP packets.,"Students are at this point are familiar with HTTP headers as well as making GET, POST, etc. requests using the HTTP protocol. In this module, students will be manually parsing and formatting HTTP requests and responses as part of the C web server implementation.",,"In the web server, you will be writing code that parses down strings that hold HTTP requests, and builds strings that hold HTTP responses. Study what an HTTP request and response look like.

The final piece of information needed for web traffic is the _HyperText Transport Protocol_ (HTTP). While TCP deals with general data integrity and IP deals with routine, HTTP is concerned with `GET` and `POST` requests of web data.

Like the other stages of networking, HTTP adds a header before the data it wants to send with the packet. Like IP and TCP, this header has a well-defined specification for exactly what needs to be sent.

Though the specification is complex, fortunately only a small amount of information is needed to implement a barebones version.","For each _HTTP request_ from a client, the server sends back an _HTTP response_.

Here is an example HTTP `GET` request and response using version 1.1 of the HTTP protocol getting the page `http://lambdaschool.com/example`:

```
GET /example HTTP/1.1
Host: lambdaschool.com

```

And here is a sample HTTP response:

```
HTTP/1.1 200 OK
Date: Wed Dec 20 13:05:11 PST 2017
Connection: close
Content-Length: 41749
Content-Type: text/html

<!DOCTYPE html><html><head><title>Lambda School ...
```

The end of the header on both the request and response is marked by a blank line
(i.e. two newlines in a row).

If the file is not found, a `404` response is generated and returned by the server:

```
HTTP/1.1 404 NOT FOUND
Date: Wed Dec 20 13:05:11 PST 2017
Connection: close
Content-Length: 13
Content-Type: text/plain

404 Not Found
```

If you've ever looked in the Network panel of your web browser's debugger, some of these headers might look familiar.

Important things to note:

* For HTTP/1.1, the request **must** include the `Host` header.
* The second word of the first line of the response gives you a success or
  failure indicator.
* `Content-Length` gives the length of the request or response body, not
  counting the blank line between the header and the body.
* `Content-Type` gives you the MIME type of the content in the body. This is how
  your web browser knows to display a page as plain text, as HTML, as a GIF
  image, or anything else. They all have their own MIME types.
* Even if your request has no body, a blank line still **must** appear after the
  header.
* `Connection: close` tells the web browser that the TCP connection will be
  closed after this response. This should be included.
* The `Date` should be the date right now, but this field is optional.",Look up the required formats for HTTP PUT and DELETE requests. ,CA2YlpqtF80,http://youtube.com/watch?v=CA2YlpqtF80,https://www.youtube.com/embed/CA2YlpqtF80,,,,,Web Server I,Active,Web Server,Computer Science,,1,1,1,3
understand and explain what a design pattern is and why they’re useful,"Cocoa (Touch), Apple's APIs for doing iOS development, have a long history, with their origins dating back to 1988 with the release of NeXTStep. Over the decades since, a number of common design patterns have emerged. Design patterns are very important in Cocoa. Good Cocoa programmers know their design patterns, and know when and how to use them. In this objective, you'll learn a little more about Cocoa design pattern and why they're important.","Talk about the importance of design patterns. Emphasize that knowing them well will help you write better code, and to more easily solve problems. They're also helpful when trying to understand new APIs, as Cocoa makes heavy use of them in UIKit and Foundation.","Cocoa contains a number of design patterns. [Whole](https://www.amazon.com/Cocoa-Design-Patterns-Erik-Buck/dp/0321535022) [books](https://store.raywenderlich.com/products/design-patterns-by-tutorials) have been [written](https://developer.apple.com/library/archive/documentation/Cocoa/Conceptual/CocoaFundamentals/CocoaDesignPatterns/CocoaDesignPatterns.html) on the subject of Cocoa design patterns. Knowing some of the most common design patterns used on iOS will help you be a more confident, capable programmer. When faced with a new problem, the ability to boil it down to its essence and apply a design pattern to it is a valuable skill. Knowing common design patterns that the frameworks use will help you more quickly dive in and learn new APIs as well.

Some of the most important design patterns are:

- Model View Controller
- Template Methods
- Extensions (Categories in Objective-C)
- Archiving and Unarchiving (e.g. `Codable` in Swift), aka memento pattern
- Delegation
- Singleton
- Outlets, Targets, and Actions
- Notifications / Observers
- Facade
- Responder Chain

Most of these you've already encountered, but for many of them, we haven't put a name to them. In this module, we'll focus in depth on a few: singletons, notifications, facade, and the memento pattern. You're encouraged to learn more about others as you continue to develop as an iOS programmer.","Talk through some of the most common design patterns explaining how they work, and the kinds of problems they solve.","Pair off, and with a peer, each choose a design pattern and think of an instance you've used it code you've written or have seen it used in UIKit.",,,,,,,,Cocoa Design Patterns,,Modularity,iOS Development Core,,1,1,,2
"explain and use the singleton design pattern, including understanding its drawbacks","The singleton design pattern is used when there must only be a single instance of a certain class. Another common name for this pattern is the _shared instance_ pattern. There are subtle differences between the two terms in real use, but they're often used interchangeably.

In this objective, you'll learn more about how to use the singleton pattern, common scenarios where it's appropriate, as well as its downsides.","Emphasize that there are valid occasions to use the singleton design pattern, but explain that it also has a history of abuse, and isn't appropriate everywhere. As you teach, focus on the singleton design pattern being for objects where having only a single instance makes sense. Do not place a primary emphasis on the idea that singletons/shared instances make it easy to pass data between view controllers or other objects. If that's the primary problem being solved, there are better approaches than using a singleton (dependency injection, etc.)","#### Overview

Sometimes in an application, you'll have a shared set of data or resource that will be used throughout an app. When such data or resource is singular, that is there's can and should be **only one** throughout the app, it may make sense to represent it using a singleton.

Using a singleton to provide access to a shared resource or data means that you can effectively control and coordinate that access. For example, you can serialize access so that the singleton can safely be used by code running on multiple threads without each piece of code knowing about each other.

Examples of data or resources that are often appropriate to represent using a singleton include: 

- Physical devices (screen, audio ports, custom hardware peripherals)
- App-wide data (Core Data container, database, information about the logged in user, etc.)

#### Downsides

The singleton pattern is a great way to solve certain problems, but it also has downsides, and shouldn't be your first choice in every situation.

Before using a singleton, be sure that the data or resource in question will be best represented using a single instance. If now or in the future, you may have multiple of the same type of resource, a singleton is likely not your best bet. For example, you may think that representing the logged in user using a singleton in your social networking app is a good choice, but what happens when you expand your app to support multiple logged in accounts? (Instagram made this exact change early on.)

If your primary goal is to make it easier to pass data between view controllers or other objects, a singleton is likely not the right choice. While it can be tempting to use in that case, it can cause problems.

Probably the most visible and commonly-cited downside to using the singleton pattern is that it makes testing difficult. If code you want to test is implicitly dependent on a singleton accessed by calling the singleton class's `shared` property, you can't easily test its interaction with the singleton, or inject custom data. If the singleton persists between tests, it can also lead to coupling and dependencies between tests making the order that tests run important, which is almost always a bad idea.

Instead, make your classes support dependency injection and explicitly pass data into them. If appropriate, you can use a hybrid approach where classes use the singleton instance by default, but allow overriding that for testing or other scenarios where customization is appropriate. Default argument values in Swift make implementing this approach pretty nice. This hybrid approach is sometimes called the ""Singleton Plus"" pattern.

#### Implementation

If you _do_ decide to use a singleton, there are three goals you should make sure you meet:

- Encapsulate and coordinate access to a shared resource
- Provide a standard way to create the shared instance/singleton
- Provide a standard way to access the singleton

The last two of these three are often accomplished using the standard `static let shared = SomeClass()` property on the singleton class. The first goal is about how you implement that code. Is it designed to be used in multiple places, potentially simultaneously from multiple threads? Does it provide effective mechanism to inform disparate parts of the code about changes or events? (See the notification/observer pattern later in this module.)",Write a class that implements the singleton design pattern and show how it can be accessed from multiple places in the code.,Look through the documentation and find at least one UIKit class that uses the singleton pattern.,,,,,,,,Cocoa Design Patterns,,Modularity,iOS Development Core,,1,1,,2
explain and use notifications,"The notification pattern allows you to communicate between objects in your app without tightly coupling those objects together. A model controller can broadcast a notification that its data has changed. The application itself can broadcast a notification that it is about to be put in the background. A user login controller can notify code throughout the app that the user has just logged in so that various UIs can be updated in response.

In this objective, you'll learn about the `Notification` API provided by the Foundation framework, along with common scenarios for its use, and possible downsides.",,"The Foundation provides an API implementing the notification pattern in the form of the `Notification`/`NotificationCenter` classes. Objects can register with the (singleton!) `NotificationCenter` to be notified when a certain notification is broadcast. Objects can also post `Notification`s, and all registered observers for that notification will automatically be notified.

Think of `NotificationCenter` like a bell system in a school. The bell can be heard throughout the school. That is, anyone can listen -- and pay attention -- to it throughout the building. It can be rung to signal a number of events: school is starting, class is over, class is about to begin, school's out, even ""there's a fire, please evacuate"". The person ringing the bell doesn't need to know who all is listening to it, nor do the people listening to it necessarily care who rang it.

To post a notification (ring the bell) using `NotificationCenter`, you use one of the `post()` methods:

```
let notificationCenter = NotificationCenter.default
notificationCenter.post(name: NSNotification.Name(""BellRung"", object:self)
```

The name of the notification being posted should be a string that accurately describes the purpose of the notification. That is, what event is it being posted to announce? The `object` parameter is the object posting the notification. Usually this will be `self`, but it doesn't have to be, and can even be nil.

Code that wants to be notified when a notification has been posted (aka broadcast) can do so by registering as an observer with the `NotificationCenter`:

```
class ClassThatWantsToListen: NSObject {
    func registerForNotifications() {
        let notificationCenter = NotificationCenter.default
        notificationCenter.addObserver(self, selector: #selector(bellRung(_:)), name: NSNotification.Name(""BellRung""), object: nil)
    }

    @objc func bellRung(_ notification: Notification) {
        print(""The bell rung!"")
    }
}
```

A few things to note here: there are actually two APIs for registering for notifications. One takes a selector, the other takes a closure. I recommend that you use the selector variant, because the closure variant requires you to manually unregister observers, and forgetting to do can cause a memory leak. The selector variant is easier to get right. When you use the selector variant however, the notification center calls a **method** on your class. You specify the method you want it to call using the `#selector(notificationMethod(_:))` syntax. The mechanism by which `NotificationCenter` actually calls the method you specify relies on the Objective-C runtime, so your object must inherit from `NSObject` (or another Objective-C class, like `UIViewController`), and the notification function itself must be marked with `@objc`.
","Use notifications to communicate when the ""pluto is a planet"" setting is toggled in the Planets app. Toggling the switch should cause Pluto to immediately show/hide.","Write code to post a notification when a button is tapped indicating a bell has rung. In another class, sign up to be notified when this notification is posted, and make sure it works.",,,,,,,,Cocoa Design Patterns,,Modularity,iOS Development Core,,1,1,,2
explain and use the facade design pattern,"The _facade_ design pattern is a way to encapsulate and hide complexity. It can simplify code, and make it easier to maintain in the future. This objective covers the facade pattern and how you can apply it to your code.","Students have already seen this pattern though we haven't given it a name before. As you teach, use examples to explain where you might use this.","Often individual layers or subsystems of your app are themselves made up of several coordinating components. To other parts of the app, the subsystem has a single unified function. The facade design pattern refers to hiding the complexity of multiple components behind a common, relatively simple interface or facade.

For example, your persistence layer may do local persistence using Core Data and syncing over the network. Instead of making every part of the code that uses the persistence subsystem know about and coordinate local persistence and network syncing, you provide a unified ""PersistenceController"" type API that makes it so that non-persistence code (e.g. view controllers) doesn't need to know what's going on behind the scenes to make both local and remote persistence work.

```
class LocalPersistenceDatabase {

  func add(record: Model) {
    records.append(record)
  }

 func remove(record: Model) {
    records.remove(record)
 }

  var records = [Model]()
}

class NetworkClient {
  func put(record: Model, completion: ...) {
    let request = URLRequest(url:...)
    request.httpMethod = ""PUT""
    URLSession.shared.dataTask(with: request) {
       // ...
       completion()
    }.resume()
  }

 func fetchRecords(completion:...) {
    URLSession.shared.dataTask(with: url) {
      // ...
      completion()
    }
 }
}
```

Here we have two parts of a system. A class for doing local persistence, and another class for sending data to/from the network. A naive approach might require our view controller to make sure that data gets saved locally and on the server and that the two data store stay in sync.

```
class ViewController: UIViewController {
  @IBAction func createNewRecord(_ sender: Any) {
    let record = Model(title: textField.text)
    networkClient.put(record: record) {
      self.database.add(record: record)
      DispatchQueue.main.async {
        self.tableView.reloadData()
      }
    }
  }

  private let networkClient = NetworkClient()
  private let database = LocalPersistenceDatabase()
}
```

This works, but it puts a lot of the burden on any code that does anything with the persistence layer, requiring more code through out the app, requiring us to repeat ourselves more, increasing the chances for errors to slip in, and making it harder to change the way persistence works in the future.

Instead, we can provide a unified `Persistence` class, which present a simple interface (aka facade) for the persistence system:

```
class Persistence {
  createNewRecord(name: String, completion:...) {
    networkClient.put(record: record) {
      self.database.add(record: record)
      DispatchQueue.main.async {
        completion()
      }
    }
  }
}
```

Now, the code in our view controllers or other classes that interact with the persistence system becomes **much** simpler:

```
class ViewController: UIViewController {
  @IBAction func createNewRecord(_ sender: Any) {
    persistence.createNewRecord(name: textField.text) {
      self.tableView.reloadData()
    }
  }

  private let persistence = Persistence()
}
```

Use the facade pattern whenever you have a self-contained system made up of several subsystems, but for which you want to provide a single, unified, simple, encapsulated interface.",,Think about a time we've used the facade pattern before. Are there places that we could have used it to write better code but didn't? Discuss with a peer.,,,,,,,,Cocoa Design Patterns,,Modularity,iOS Development Core,,1,1,,2
explain and use the memento pattern via state restoration,"In the _memento_ design pattern, information about an object's state -- that is the value of its properties and internal data -- is captured and store so that it can be restored later. This is closely related to archiving/unarchiving or the use of `Codable`, and indeed those technologies can be used to implement the memento pattern.

There are many uses for the memento pattern, but one interesting one on iOS is [state restoration](https://developer.apple.com/documentation/uikit/view_controllers/preserving_your_app_s_ui_across_launches). State restoration allows your view controllers (and other objects) to encode their state before your app is terminated. Then, when the app is relaunched, their state can be restored so that the app returns to the exact state it was in before it was terminated. This makes it look to the user like the app was never quit.

In this objective, you'll learn more about the memento pattern, and how to use it for state restoration.",,"Conceptually, the memento design pattern is pretty simple. You make it so that an object can save its state, then later, it (or another instance of the same type) can load the saved data to return to its previous state.

You could accomplish this by making the object encode its state in a dictionary, using `Codable` (or by providing a custom model object that conforms to `Codable`), by using `NSKeyedArchiver/Unarchiver`, or another approach.

iOS provides a feature called state restoration. It's a system API that helps your app save and restore its state between launches. That way, even if your app was quit, when a user launches it again, it can return to exactly the state it was in before it quit. The system does most of the hard work, but you do have to make it so your app, view controllers, and any other relevant classes know how to save their state.

#### Implementing State Restoration

To implement state restoration in your app, at the very least you must:

1. Assign Restoration Identifiers to any view controller that you want to restore, as well as any view controllers that are their parents (e.g. navigation controllers, tab bar controllers). You can do this with the Restoration Identifier field on the Identity Inspector in Interface Builder.
2. In your app delegate, implement `application(_ application:, shouldSaveApplicationState:)` and `application(_ application:, shouldRestoreApplicationState:)`. Both should return `true`.
3. In any view controllers that have data/state that they need to store and reload, implement `encodeRestorableState(with:)` and `decodeRestorableState(with:)`.

Step 3 is where the memento pattern is evident. The system will call these methods as appropriate to ask a view controller to save or restore its state. These methods are passed an `NSCoder` object, which behaves much like a dictionary with methods to save or retrieve values for a given key.",Add support for state restoration to the Planets app.,Add support for state restoration to another app you've built.,,,,,,,,Cocoa Design Patterns,,Modularity,iOS Development Core,,1,1,,2
sign up to https://app.huntr.co/lambda-school/signup and track your job applications,,,,,,,,,,,,,Daily Objectives,,"Next Week I, Next Week II, Next Week III, Next Week IV, Next Week V, Next Week VI","Lambda Next, Lambda Next, Lambda Next, Lambda Next, Lambda Next, Lambda Next",,0,,,0
write code and get a green score in your GitHub contributions graph,,,,,,,,,,,,,Daily Objectives,,"Next Week I, Next Week II, Next Week III, Next Week IV, Next Week V, Next Week VI","Lambda Next, Lambda Next, Lambda Next, Lambda Next, Lambda Next, Lambda Next",,0,,,0
practice interviewing,"*Technical interview sessions (Mondays, Wednesdays, and Fridays).
*Behavioral interview sessions (Tuesdays and Thursdays).",,,,,,,,,,,,Daily Objectives,,"Next Week I, Next Week II, Next Week III, Next Week IV, Next Week V, Next Week VI","Lambda Next, Lambda Next, Lambda Next, Lambda Next, Lambda Next, Lambda Next",,0,,,0
,,,,,,,,,,,,,,,,,,0,,,0
clean a dataset using common Python libraries,"You may be able to load data, but have missing values and other issues. Fix them as is appropriate for the type of data. Pandas in particular will have helpful functionality.","Another critical foundational topic - most of the time, this will be assumed, so the smoother students get at it the better.","When a data scientist talks about ""cleaning"" data, they usually mean fixing missing values - these are often represented as NA (Not Available), NaN (not a number), or just `None` (the special Python object for nothingness), and occasionally as specific often negative numbers (-1, -9, etc.). Sometimes data just literally has blank fields, in which case their representation will be determined by how you loaded it, but whatever it is it won't be *data*.

These values are problematic for the same reason that consistent quantifiable data (discussed yesterday) is important - computers do not have any ""intuition"" and cannot know to just ""skip"" things. In some situations, depending on how the missing values are represented and what function you execute on your data, skipping may indeed ""magically"" occur - but to make sure you can freely and corectly run analysis, you need to make a conscious effort to understand and correct for missing values.

There are two particularly useful data cleaning methods in pandas - [fillna](https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.fillna.html) and [interpolate](https://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.interpolate.html). Today, we'll look at how these work - and while documentation can be intimidating, you should take a look and try things yourself.",,"Go back to the data you loaded, and check for missing values. If there aren't any, find and load a dataset with some. Then, apply Pandas techniques to appropriately drop or fill. Try multiple approaches, and report the summary statistics (mean, median, mode) of the data for each approach.",qNZ97UF8nQQ,http://youtube.com/watch?v=qNZ97UF8nQQ,https://www.youtube.com/embed/qNZ97UF8nQQ,,,Asking For and Giving Technical Help,"Discuss with a fellow student:
-What things might happen while analyzing data if you don't properly ""clean"" (handle missing values)?
-What's the difference between pandas `fillna` and `interpolate`?","Make a notebook exploring data,Loading data from a variety of sources",,Dealing with Data,DS - Statistics Fundamentals,,1,1,1,3
identify types of variables in a dataset,"For your chosen data you should answer (as a block in your notebook, with supporting code): which variables are numeric? Categorical? Ordinal?",,,,,,,,,,,,Make a notebook exploring data,,,,,0,,,0
characterize the distributions and relationships of variables in a dataset,"Use tables, charts, and other appropriate techniques to show how the data is distributed. Explore some multivariate distributions, e.g. cross tabulation and scatterplots.",,,,,,,,,,,,Make a notebook exploring data,,,,,0,,,0
generate appropriate visualizations for a dataset,"Generate at least three appropriate visualizations for the data, and display in your notebook with supporting code and description.",,,,,,,,,,,,Make a notebook exploring data,,,,,0,,,0
form and test meaningful hypotheses for a dataset,Form and test at least one hypothesis using valid statistical techniques.,,,,"Test multiple hypotheses, and generate visualizations that illustrate your results.",,,,,,,,Make a notebook exploring data,,,,,0,1,,1
distinguish between dependent and independent variables,"For your data, answer: which variables make sense to be dependent, and which independent?",,,,,,,,,,,,Extend notebook with predictive analysis,,,,,0,,,0
fit and validate a linear regression,"Fit, validate, and refine (improve by parameter optimization or changing what variables you include) a linear regression. Note - remember that linear regression is for predicting numeric values.",,,,,,,,,,,,Extend notebook with predictive analysis,,,,,0,,,0
fit and validate other regression types,"Fit, validate, and refine (improve by parameter optimization or changing what variables you include) another type of regression. Note - most regression models determine the appropriate dependent variable type (e.g. logistic regression requires a binary dependent variable).",,,,,,,,,,,,Extend notebook with predictive analysis,,,,,0,,,0
compare and contrast regression models,"For your models/data, answer: which sort of regression was more informative/interesting, and why?",,,,,,,,,,,,Extend notebook with predictive analysis,,,,,0,,,0
predict new results with a regression model,"Use the model you chose in objective 4 to predict new results, and discuss.",,,,"Generate visualizations to demonstrate your predictions. Analyze the confidence of your predictions, and discuss.",,,,,,,,Extend notebook with predictive analysis,,,,,0,1,,1
write about data analysis for a general audience,Write a second post in your Medium blog continuing from your first and describing your analysis and results so far.,,,,,,,,,,,,Present your project,,,,,0,,,0
present and answer questions about data analysis,"At the end of the week, students will be grouped and present their results to each other. In this context, you can assume your audience is familiar with data science, and discuss more details about techniques and challenges. You should plan to speak for 5 minutes, followed by a few minutes of feedback/Q&A.",,,,,,,,,,,,Present your project,,,,,0,,,0
write a blog post summarizing their results,Data analysis is meant to be shared - write a Medium blog post sharing your findings.,,,,,,,,,,,,Write a blog post,,,,,0,,,0
utilize multiple Classes to build a component ,,,,,,,,,,,,,Components II,,Applied JavaScript,Full Stack Web Development Core,,0,,,0
use arrow function syntax in classes as well as explain the `this` keyword in class syntax ,,,,,,,,,,,,,,,,,,0,,,0
write an if statement in Objective-C,"In this objective, you'll learn the syntax for if statements in Objective-C.",,"Objective-C's syntax for if statements is very similar to Swift's.

```
if (condition) {
  // Do something
}
```

The primary difference is that in Objective-C, the condition in an if statement **must** be enclosed in parentheses, while in Swift, the parentheses are optional (and usually omitted).",Write a few if statements in Objective-C.,Write an if statement that checks to make sure two conditions are true using AND. The and operator in Objective-C is `&&` just like in Swift.,,,,,,,,Objective-C Fundamentals,,Objective-C Part 1,iOS Development Core,,1,1,,2
write a for loop and a while loop in Objective-C,"Objective-C has two kinds of for loops: traditional ""C-style"" for loops, and for-in loops. In this objective, you'll learn about both kinds of for loops.",,"#### For-in Loops

The most common for loops in Objective-C are for-in loops. For-in loops in Objective-C do the same thing as for-in loops in Swift. They allow you to iterate through each item in a collection (array, set, dictionary, etc.). The syntax is very similar to Swift with two important differences:

```
for (NSString *string in array) {
  NSLog(@""%@"", string);
}
```

First, the for loop statements must go in parentheses. Second, you must provided an explicit type for the item variable (`NSString *` here), since the compiler doesn't know what kind of objects the array contains.

#### Traditional For Loops

Objective-C also inherits C's syntax for for loops. In Swift, if you want to iterate through a range of numbers, you can do:

```
// Prints the numbers 0-9
for i in 0..<10 {
  print(i)
}
```

In Objective-C, if you want to run a for loop a specific number of times, or iterate through a range of numbers, you use a different syntax:

```
// Prints the numbers 0-9
for (int i = 0; i<10; i++) {
  NSLog(""%i"", i);
}
```

The body of the for loop consists of three separate statements. The _initial_ statement, the _condition_ statement, and the _update_ or _increment_ statement.

The initial statement is executed at the very beginning of the entire for loop. It can be (and usually is) a variable declaration. Anything declared in the initial statement will be valid for the remainder of the for loop's execution. Most of the time, you declare the loop variable (`i` here), and set it to an initial value, which is the first value in the range you want to iterate over.

The condition statement is checked **before** each iteration of the for loop's body. If the condition is true, the loop continues to run. If the condition is false, the loop stops running. So here, if `i` is not less than `10`, the loop stops running.

The update statement is executed immediately **after** each iteration of the for loop's body. You can put anything you want in here, but most often, you increment the loop variable by 1. You can do that with `i += 1`, but more often, you'll see the increment operator `++` used instead. `i++` adds one to `i` just like `i+=1`.

>Note: Early versions of Swift contained traditional C-style for loops. They were [removed](https://github.com/apple/swift-evolution/blob/master/proposals/0007-remove-c-style-for-loops.md) with the release of Swift 3. You can thank Erica Sadun for that :). The `++` increment operator (and `--` decrement operator) were also in early versions of Swift, but [removed](https://github.com/apple/swift-evolution/blob/master/proposals/0004-remove-pre-post-inc-decrement.md) in Swift 3.","Write a few for loops that iterate through arrays, dictionaries, and ranges of numbers.","Write a for loop that prints every 4th number between 1 and 100. The body of the for loop must only contain `NSLog(@""%i"", i);`.",,,,,,,,Objective-C Fundamentals,,Objective-C Part 1,iOS Development Core,,1,1,,2
"use literal syntax to create strings, arrays, and dictionaries","Objective-C supports _literal syntax_ which is shorthand syntax for creating strings, arrays, and dictionaries. In this objective, you'll learn how to sue literal syntax in Objective-C.",,"#### Arrays

So far, we've created arrays using `[[NSArray alloc] initWithObjects:...]`. For a long time, this was the only real way to create arrays in Objective-C, and it's still perfectly valid. However, it's a bit wordy. Luckily, as of a number of years ago, there's a better way. _Literal syntax_ provides a shorthand for creating arrays:

Instead of:

```
NSArray *people = [[NSArray alloc] initWithObjects:@""Steve"", @""Woz"", @""Ron"", nil];
```

We can do:

```
NSArray *people = @[@""Steve"", @""Woz"", @""Ron""];
```

The literal syntax for an array in Objective-C is the same as in Swift except that you put an `@` in front of the opening bracket. This is to distinguish an Objective-C `NSArray` from a C array, which is not an object at all (more on that later).

#### Dictionaries

You can also create dictionaries using literal syntax. Here, the syntax is slightly different from Swift. Instead of using square brackets, you use curly braces (`{}`). And again, you prefix them with an `@` symbol:

```
NSDictionary *foodColors = @{@""broccoli"" : @""green"", @""carrot"" : @""orange"", @""apple"" : @""red""};
```

As with Swift, keys and values are separated by a colon (`:`), with the key appearing first. Key-value pairs are separated from each other with a comma.

#### Strings

You've already seen literal syntax for strings. In Objective-C, a string with plain double quotes around it is a C-style string. It is not an object, doesn't have any methods, and is not particularly easy to work with. Most of the time, you want `NSString`s, which you create with double quotes with an `@` in front:

```
NSString *name = @""Andrew""
```",,,,,,,,,,Objective-C Fundamentals,,Objective-C Part 1,iOS Development Core,,1,,,1
understand and use block syntax,"In Swift, closures are pieces of code that can be passed around, stored in variables, and executed. Objective-C has the exact same concept. However, instead of being called closures, they're called _blocks_. In this objective, you'll learn how to create and use blocks in Objective-C.",,"Conceptually, blocks in Objective-C are the same as closures in Swift. They allow you to write chunks of code and pass them into functions, return them from functions, store them in variables, and execute them.

#### Syntax

The syntax for creating blocks is somewhat different from the syntax for closures, but all the same building blocks (no pun intended) are there. Blocks can have arguments, and can return values.

To create a block in Objective-C, the syntax is:

```
^returnType(arguments) {
}
```

If the return type is `void` and there are no arguments, you can create a block like so:

```
^{
  NSLog(""I'm a block!"");
}
```

This is equivalent to the following in Swift:

```
{
  print(""I'm a closure!"")
}
```

The first thing that sticks out at you is probably the caret (`^`) before the braces. The caret is what makes this a block. There's no special significance to it other than that when Apple was creating the syntax for blocks, the caret was an available symbol that wasn't already being used for something else (in this context), and isn't commonly used in other programming languages either. When you see `^{}` you know you're dealing with a block.

##### Returning Values

What about blocks that return a value? You place the return type (if any) immediately after the caret:

```
^int {
  return 42;
}
```

However, this is one place where Objective-C actually does support type-inference, so you can leave the return type off and the compiler will figure it out from the return statement:

```
^{
  return 42;
}
```

##### Arguments

To create a block that takes arguments, put them in parentheses after the caret (and return type if any):

```
^(int x) {
  NSLog(@""%i"", x);
}
```

##### Block Variables

If you're creating a variable to store a block, you have to declare the type of the variable. Unfortunately, the syntax for this is a little different than the syntax you use while _defining_ or creating the block.

```
returnType (^variableName)(arguments) = <block>;
```

For example, to create a variable called `multiplier` that holds a block that takes two `int`s and returns an `int`, you'd write:

```
int (^multiplier)(int arg1, int arg2) = ^(int arg1, int arg2){
  return arg1 * arg2;
};
```

##### Blocks as Method Arguments

The syntax for declaring a method that takes a block as an argument is different again:

```
- (void)someMethodThatTakesABlock:(int (^)(int arg1, int arg2))blockName;
```

##### Typedefs

The syntax for blocks is somewhat arcane, has several variations, and is difficult to type and remember. You can make life easier using a `typedef` for block types. A `typedef` is the Objective-C equivalent to Swift's `typealias`. It allows you to give a different name to a certain type. If we wanted to create a typedef for our block that takes two `int`s and returns an `int` type, we'd do:

```
typedef int (^MathBlock)(int arg1, int arg2);
```

Now we can use `MathBlock` anywhere we'd use a type normally.

```
// Local variable:
MathBlock multiplier = ^(int arg1, int arg2) {
  return arg1 * arg2;
};

// Method:
- (void)someMethodThatTakesABlock:(MathBlock)block;
```

You should use typedefs for block types wherever it would make your code clearer. For simple blocks that take no arguments and return `void`, it _may_ not be necessary. But for more complex blocks, it can significantly improve readability and make your code easier to write as well.

#### Executing Blocks

Blocks can be executed using the same syntax as a function call in Objective-C:

```
block1(); // Block with no arguments
block1(arg1, arg2); // Block with two arguments
```

Objective-C inherits C's syntax for calling functions, which doesn't include argument labels.

#### Differences from Swift

There are two major differences between blocks in Objective-C and closures in Swift:

- Blocks capture local scope at creation time
- Blocks are not functions and vice versa

##### Capture Semantics

In Swift, if I create a closure like so:

```
var x = 42
let closure = {
    print(x)
}
x = 63
closure() // prints 63
```

The current value of `x` is seen by the code in the closure when it's run. If `x` has changed since the closure was created, the new value of `x` will be printed. It also means that changes to `x` made inside the closure will be visible **outside** the closure after it has executed.

You can change this behavior by explicitly capturing `x` in the closure using a capture list:

```
var x = 42
let closure = { [x] in
    print(x)
}
x = 63
closure() // prints 42
```

This actually creates a ""shadow"" local let copy of `x` inside the closure. This makes it so that `x` is a constant in the closure, and can't be changed by the closure's code.

In Objective-C both behaviors are available, but the default behavior is to capture variable values at the time the block is created.

```
int x = 42;
void (^block)(void) = ^{
    NSLog(@""%i"", x);
};
x = 63;
block(); // prints 42
```

Here, the value of x is captured when the block is created, so the block will print `42` regardless of later changes to the value of `x`.

To change this behavior, you must explicitly define `x` using the `__block` qualifier:

```
__block int x = 42;
void (^block)(void) = ^{
    NSLog(@""%i"", x);
};
x = 63;
block(); // prints 63
```

Using `__block` here means that the value of `x` is not captured when the block is created, and changes to `x` made after the block is created will be visible to the code in the block when it is executed. Similarly, if the block's code changes the value of `x`, that change will be visible outside the block after it executes.

To summarize: **Swift closures do not capture local variable values by default**, and you must provide a capture list to do so. In contrast, **Objective-C blocks do capture local variable values by default** and you must declare variables using `__block` if you want to prevent that.

In practice, this behavior is usually not important, as the most common uses of closures and blocks don't rely on capture behavior working one way or the other. In other words, either way is fine

##### Blocks Are Not Functions

In Swift, if a method takes a closure as an argument, a function with the same signature (ie. argument types and return type) can be passed in as if it were a closure. In a very real sense, functions in Swift _are_ closures.

In Objective-C, this isn't really true. Blocks are functions in that they can take arguments, return values, and can be executed. We even call them ""anonymous functions"" meaning they're functions without a name. However, functions are not blocks. If a method in Objective-C takes a block as an argument, you **cannot** pass in a function or another method. You must pass in a block.

On the other hand, blocks are Objective-C objects, and can be used as such. You can put them in `NSArray`s and `NSDictionary`s, store them in properties, etc.",Practice writing blocks with various arguments and return types.,,,,,,,"Working with Blocks,Gosh Darn Block Syntax",,Objective-C Fundamentals,,Objective-C Part 1,iOS Development Core,,1,,,1
use JSONSerialization to decode JSON into model objects,"In Swift, we've so far used Codable to encode and decode JSON. Codable is a relatively recent addition to the Swift language, and is not available in Objective-C. In Objective-C, Foundation provides the `NSJSONSerialization` API for doing JSON decoding and encoding. (`NSJSONSerialization` is also available in Swift.) In this objective, you'll learn how to use `NJSONSerialization` to decode JSON into model objects in Objective-C.","Students are familiar and comfortable with Codable, but have likely not seen `NSJSONSerialization` before, and also won't have encountered the idea of turning objects into dictionaries and vice versa.","JSON usually contains either a dictionary or an array as the top-level object. (Other types at the top level are called ""fragments"" and are somewhat out of the ordinary.) Swift's Codable can automatically decode the dictionary (or array of dictionaries) in JSON data and turn that dictionary into an object with properties that correspond to the dictionary's key-value pairs.

In Objective-C, `NSJSONSerialization` will decode JSON data and return an `NSDictionary` or an `NSArray` (depending on the contents of the JSON). But it's up to us to take that dictionary (or array) and turn it into model objects.

There are multiple ways to do this, but perhaps the most common is to add an initializer to our model class(es) that takes a dictionary and initializes itself from the data in the dictionary. Then we can take the dictionary decoded from the JSON and turn that into model object(s).

```
@interface LSIPerson : NSObject

- (instancetype)initWithName:(NSString *)name favoriteFood:(NSString *)favoriteFood;
- (instancetype)initWithDictionary:(NSDictionary *)dictionary;

@property NSString *name;
@property NSString *favoriteFood;

@end

@implementation LSIPerson

- (instancetype)initWithName:(NSString *)name favoriteFood:(NSString *)favoriteFood
{
  self = [super init];
  if (self) {
    _name = name;
    _favoriteFood = favoriteFood;
  }
  return self;
}

- (instancetype)initWithDictionary:(NSDictionary *)dictionary
{
  NSString *name = dictionary[@""name""];
  NSString *favoriteFood = dictionary[@""favoriteFood""];
  return [self initWithName:name favoriteFood:favoriteFood];
}

@end
```

Here we've created a `LSIPerson` class with properties for name and favorite food. If our JSON data looks like:

```
{
  ""name"": ""Chris"",
  ""favoriteFood"": ""hot sauce""
}
```

We can decode this JSON using `NSJSONSerialization` then turn the resulting dictionary into an instance of `LSIPerson` using the `-initWithDictionary:` initializer:

```
NSData *json = ...; // Get this from NSURLSession or whatever
NSDictionary *dictionary = [NSJSONSerialization JSONObjectWithData:json options:0 error:NULL];
LSIPerson *person = [[LSIPerson alloc] initWithDictionary:dictionary];
NSLog(@""Person's name is %@ and their favorite food is %@"", [person name], [person favoriteFood]); // Person's name is Chris and their favorite food is hot sauce
```

#### Arrays

If, as is common, you have a whole array of dictionaries, you need to turn that into an array of model objects. In Swift, you can use `map()` to help with this. Objective-C's `NSArray` doesn't include a map method (though you could create one yourself!), so you'll just use a for loop:

```
NSData *json = ...; // Get this from NSURLSession or similar
NSArray *dictionaries = [NSJSONSerialization JSONObjectWithData:json options:0 error:NULL];
NSMutableArray *people = [[NSMutableArray alloc] init];
for (NSDictionary *dictionary in dictionaries) {
  LSIPerson *person = [[LSIPerson alloc] initWithDictionary:dictionary];
  if (person) {
    [people addObject:person];
  }
}
// people now contains all of the LSIPerson objects
```",,,,,,,,,,Objective-C Fundamentals,,Objective-C Part 1,iOS Development Core,,1,,,1
check if an object is nil in Objective-C,"Objective-C variables can essentially always possibly be nil. Or at least, as far as the compiler is concerned they can be. Unlike Swift, there is no special construct for checking whether an object is nil. Instead, you use a standard if statement. In this objective, you'll learn how to check to see if an object is nil in Objective-C.",,"Objective-C doesn't have a concept of optionals the way Swift does, and therefore doesn't have `if let` statements. However, it is common that you'll want to check a variable to find out if it's nil or not.

You can of course do `if (object != nil) { }`. However, there's a shorthand for this that you'll commonly see which is `if (object) {}`. With this syntax, if `object` is `nil`, the if condition will evaluate false, if it's non-nil, the if statement will evaluate true. Similarly, you can express `if (object == nil)` by saying `if (!object)`.

Swift does not allow you to do this. Conditions in Swift must always explicitly evaluate to a `Bool`. Objective-C is more flexible here.",,,,,,,,,,Objective-C Fundamentals,,Objective-C Part 1,iOS Development Core,,1,,,1
understand and explain the difference between immutable and mutable classes,"Mutability is something you've definitely not only already seen, but also used. In Swift, it's the differenece between declaring a value as a `let` or a `var`. In Objective-C, it's not quite that simple.",,"Let's take the integer we created above and examine it further:

```
int aNumber = 6;
```

We can see it's declared as an integer, and initialized with a value of `6`. If we wanted to modify the variable, it would be a simple task to change it.

```
aNumber = 10;
```

or

```
aNumber = 5 + 2;
```

Either of the above lines would change the value stored in `aNumber`. In that way, it performs just like a `var` in Swift.

What if we had the following however?

```
NSString *hello = @""Hello"";
```

Let's say we wanted to append "", World!"" to the end of that string. You might think this would work:

```
hello = hello + "", World!"";
```

But the above would cause a compiler error. That kind of string concatentation doesn't work in Obj-C. Instead we have to do the following:

```
hello = [NSString stringWithFormat:@""%@, World!"", hello];
```

It's not nearly as elegant as it can be in Swift. And even in this case, we're not actually __modifying__ the value in `hello`. Remember that all object variables are _pointers_ to the actual data in memory. When we execute the line above, we're replacing the pointer entirely. The right side assignment operator above (`=`) is creating a brand new `NSString` instance that reads ""Hello, World!"" and the pointer held in `hello` is replaced with a new pointer. The reason for this is that `NSString` objects are _immutable_, meaning they cannot be modified after creation. In order to have a mutable string, you must create an instance of `NSMutableString`, which is a subclass of `NSString`, but allows for modification of its contents.

Let's look at a far more common example.

```
NSArray *characters = @[@""Rick"", @""Morty"", @""Summer"", @""Beth""];
NSString *jerry = @""Jerry"";
```

If we wanted to add Jerry to our list of characters, we could __not__ simply append it to the existing array. This is because the array was listed as an `NSArray`, which is immutable. Apple has a pattern for these classes, so you might guess the name of the mutable version: `NSMutableArray`.

```
NSMutableArray *characters = @[@""Rick"", @""Morty"", @""Summer"", @""Beth""];
NSString *jerry = @""Jerry"";
[characters addObject:jerry];
```

To make it mutable, simply declare the array with the `NSMutableArray` subclass. It contains methods to append, insert, and remove objects within the array.

Many immutable classes in `Foundation` contain mutable versions. Just look in the documentation (or even make a guess and type it into Xcode and look for code completion) to see how to initialize them.",-,"Try creating an `NSDictionary` object but make it mutable. Initialize it with a couple key-value pairs, and then try to add a new key-value pair on a separate line after objection initialization.",,,,,,,,"""Primitives, NSNumber, and Mutability""",,Objective-C Part 1,iOS Development Core,,1,1,,2
use copy/mutableCopy to convert from immutable to mutable and vice versa,,,"Sometimes you won't have the luxury of simply changing the data type of an object at declaration to affect its mutability. Let's say you are returned an object from a method you don't control for example. In cases like that, you can change the mutability of an object with the following techniques.

Let's take the same example as the previous section, but this time we'll work with the `NSArray` as-is.

```
NSArray *characters = @[@""Rick"", @""Morty"", @""Summer"", @""Beth""];
NSString *jerry = @""Jerry"";

NSMutableArray *mutableCharacters = [characters mutableCopy];
[mutableCharacters addObject:jerry];
```

If you have an `NSArray` and need a version of that data to be mutable, you can call `mutableCopy` on the original object. This will create a duplicate of the array but use the `NSMutableArray` subclass on initialization.

Conversely, if you have a mutable object and wish to make it immutable, you can use the `copy` method.

```
NSMutableString *hello = [[NSMutableString alloc] initWithString:@""Hello""];
[hello appendString:@"", World!""];
NSString *helloCopy = [hello copy];
```

The final line above takes the `NSMutableString` and duplicates it with the `copy` method. The initializer used there is the one from `NSString`, thus making the copy immutable.",,,,,,,,,,"""Primitives, NSNumber, and Mutability""",,Objective-C Part 1,iOS Development Core,,0,,,0
instantiate a new object in Objective-C,"In this objective, you'll learn how to instantiate new objects in Objective-C.",,"Object instantiation in Objective-C is a two part process. First, you allocate memory for the object, then you initialize it. This is essentially always done on a single line. So, to create an instance of `MyClass`, you'd do:

```
MyClass *anInstance = [[MyClass alloc] init];
```

First, call `+alloc` to allocate the correct amount of memory for the instance. `+alloc` returns the (uninitialized) object. You then call `-init` on that to initialize the instance and all of its properties, etc.

If you have an initializer that takes arguments, initialization looks like:

```
Person *steve = [[Person alloc] initWithName:@""Steve"" age:63];
```

#### `+new`

If you're doing a ""plain"" init where you don't need to provide arguments to the initializer (the equivalent of `MyClass()` in Swift), you can call `+new` instead of `alloc/init`:

```
MyClass *anInstance = [MyClass new];
```

Internally, `+new` simply calls `+alloc` then `-init`. The only reason to use it is because it's slightly shorter than calling `alloc/init` and only requires one set of brackets. While `+new` has a very long history in Objective-C, most ObjC programmers don't commonly use it and do `alloc/init` instead. Still, there's nothing wrong with it, and you can use it if you'd like.

#### Convenience Methods

Many Objective-C classes provide _convenience methods_. Convenience methods are class methods that do object allocation and initialization for you in one step. `+new` is actually an example of a convenience method itself. By convention, convenience methods are named like `<classNameMinusPrefix>WithArgument:`. Examples for `NSString` and `NSArray`:

```
NSString *word = [NSString stringWithString:@""hello""];
NSArray *array = [NSArray arrayWithObjects:object1, object2, object3, nil];
```

For these specific examples, there are also corresponding initializers:

```
NSString *word = [[NSString alloc] initWithString:@""hello""];
NSArray *array = [[NSArray alloc] initWithObjects:object1, object2, object3, nil];
```

Before Automated Reference Counting (ARC), which is Objective-C (and Swift)'s memory management system, existed, convenience methods made memory management easier. We'll explore this in more detail in a later lesson. Under ARC (which you're using), convenience methods and their corresponding initializers are interchangeable. Use whichever you'd prefer, as they're both valid ways to create a new instance of an object. Do be aware that some classes only have convenience methods not initializers, and vice versa. When Objective-C classes and APIs are bridged into Swift, convenience methods show up as initializers in Swift (also explored more in a later lesson).",,,,,,,,,,Intro to Objective C,,Objective-C Part 1,iOS Development Core,,1,,,1
declare properties using Objective-C's @property syntax,"Objective-C supports properties on classes just like Swift. However, the syntax for declaring them is different. In this objective, you'll learn how to add properties to a class in Objective-C.",,"In Objective-C, properties are declared in an `@interface` block for the class. The syntax for declaring a property is as follows:

```
@property (<attributes>) <type> <propertyName>;
```

As an example, a property of type `int` would be declared like so:

```
@property int temperature;
```

We'll cover property attributes in a later lesson, but know that they can be omitted as we've done above. To create a property you only **need** to include `@property`, the type of the property (`int` here) and the name of the property (`temperature` here).",Create a class called `Person` with properties for name (NSString) and age (int).,"Create a class called `Car`. It should have properties for `make`, `model`, and `color`, using appropriate types.",,,,,,,,Intro to Objective C,,Objective-C Part 1,iOS Development Core,,1,1,,2
implement a basic hash table.,"How do hash tables work? By writing a basic implementation, you will be able to see the strengths and limitations of a hash table. How much space does an empty hash table occupy in memory? What role does the hash function play? How does a hash table achieve the rare and mythic property of constant time complexity for insertion, deletion and search?","Day 1: Talk about basic hash table structure, various hash methods and characteristics, performance and big-O",What are hash tables? What is a hashing function? What is the performance of a hash table?,We will go over basic functions of a hash table and hash functions using diagrams and pseudo-code.,Implement a hash table (no collision handling) in C.,z07XGvC9D4c,http://youtube.com/watch?v=z07XGvC9D4c,https://www.youtube.com/embed/z07XGvC9D4c,,,Hash Tables,"What is a hash function?
How are hash table values indexed?
What is the big-O time complexity of hash table insert, delete, and search?",Hash Tables,Active,Theory of Computation/Hash Tables,Computer Science,,1,1,1,3
handle collisions and resizing in a hash table.,"In your initial implementation of a hash table, you may have come across the problem: What happens when two keys hash to the same index? We will be discussing two methods of resolving hash collisions: open addressing and linked list chaining.

With both of these methods, the hash table's performance will degrade as it fills up. We will discuss resizing the hash table, including when to resize and how this operation affects the hash table's big-O.","Talk about hash collisions, birthday problem, linked list chaining, open addressing, performance changes, and hash table resizing",We will be discussing various methods to handle hash table collisions,We will be discussing various methods to handle hash table collisions.,Implement linked list chaining in your basic hash table.,u38jSupgQvU,http://youtube.com/watch?v=u38jSupgQvU,https://www.youtube.com/embed/u38jSupgQvU,,Hash Tables,,,Hash Tables,Active,Theory of Computation/Hash Tables,Computer Science,,1,1,1,3
describe what a persona is,Personas remind us that we're designing for real human beings and help us keep the user as our design focus.,,"```“A persona is a composite picture of a collection of users boiled down into one relatable, human profile.”```
 - Leah Buley, *The User Experience Team of One: A Research and Design Survival Guide*

They are statistically and research derived representations of our users. We use statistics to provide demographic context and our research to fill in our understanding of their motivations, desires, and needs. 

We typically will design one persona to represent our primary user archetype, but it pays to be specific. 

```“For example, in designing clinical products, it might be tempting to lump together all nurses as having similar needs. However, if you have any experience in a hospital, you know that trauma nurses, pediatric intensive-care nurses, and operating room nurses are quite different from each other, each with their own attitudes, aptitudes, needs, and motivations. Nurses new to the role look at their work differently than nurses who are veteran to the job. A lack of precision about the user can lead to a lack of clarity about how the product should behave.”```
 - Alan Cooper, *About Face*

So, when creating personas for a product, we need to make sure we design one for each user archetype.",,,,,,,The UX Designer's 5-minute Guide to Lean Personas,,,Creating and Using Personas,Active,"Fundamentals: Defining the Experience, Definition","UX Design Core [v1 deprecated], UX Design Core",,1,,,1
describe what a proto-persona is,"Sometimes we can't conduct enough research to design a proper persona, but we still want to keep our users at the center of our design thinking. We can use proto-personas to solve this dilemma for us.",,"A proto-persona is the same thing as a persona except we do not use statistics or research to create it. Instead, we use our professional experience and stakeholder information to create our best guess of our users’ archetypes. 

```“Proto-personas are less scientific and rigorous than traditional personas, but they can be equally effective for helping a team shift into a more empathetic mindset about users’ needs.”```
 - Leah Buley, *The User Experience Team of One: A Research and Design Survival Guide*",,,,,,,Persona vs. Proto-Persona,,,Creating and Using Personas,Active,"Fundamentals: Defining the Experience, Definition","UX Design Core [v1 deprecated], UX Design Core",,1,,,1
identify when to create a persona in the design cycle,Knowing when to use a persona is just as important as knowing how to use one.,,"In our trusty product design cycle, we’d typically create a persona during the Definition phase as we synthesize all of our research. Creating personas earlier in the process also lets us reap their benefits throughout the rest of the design cycle",,,,,,,,,,Creating and Using Personas,Active,"Fundamentals: Defining the Experience, Definition","UX Design Core [v1 deprecated], UX Design Core",,1,,,1
explain why personas are a valuable tool,Outside stakeholders are often confused about the value of personas. Being able to explain their value will make using them and interacting with your team easier.,,"Personas are valuable because they remind us that we’re designing for real human beings and they force us to distill all of our research into one, usable reference. Not only do they promote this critical empathy, but they also communicate the essential characteristics of our users so we can tailor our design thinking towards their specific needs. 

In other words, they help us prioritize our design solutions so we don’t try to build a product that attempts to please everyone. Additionally, when well-designed and shared correctly, they are a useful tool for facilitating stakeholder buy-in.",,,,,,,Putting Personas to Work in UX Design,,,Creating and Using Personas,Active,"Fundamentals: Defining the Experience, Definition","UX Design Core [v1 deprecated], UX Design Core",,1,,,1
properly utilize them,Personas suffer from the unfortunate dilemma of being created and then never used again. This typically happens because the design team treats personas like a checkbox in their design process and other stakeholders don’t see the value in having a representation of their users. Knowing how to use them alleviates this issue.,,"In our trusty product design cycle, we’d typically create a persona during the Definition phase as we synthesized all of our research. Creating personas earlier in the process also lets us reap their benefits throughout the rest of the design cycle. So, how do we go about using them once they’ve been created?

First, be sure to explain to everyone involved why you’re creating user personas. A lot of non-designers have never heard about or seen a persona, so it takes them a bit of extra time to see the value. They also don’t typically understand the benefits of user-centered or user-first thinking, so this can be another opportunity to reinforce those concepts.

Second, try and make your personas as visible as possible. If you work in a team, make sure they’re posted in a highly visible spot, or print them out and frame them on your desk. If you work remotely, try making it your computer background - if you have multiple, make sure you set them up to rotate. If you have a big stakeholder meeting, print them out and post them on the whiteboard or wall. There are even teams who get life-size cut-outs made too! Keeping them center stage helps keep them at the top of everyone’s minds and more likely to be used.

Third, when you’re talking about a user or your users, try replacing the word “user” with the name of your persona. By using your persona in place of the generic user, you’re consciously making the effort to design with your persona in mind and you’re modeling behavior to your entire team.

Finally, as you continue through the design process, make sure you check in with your persona. As you create user flows, journey maps, wireframes, mockups, etc make sure to remember that you’re creating them for your persona. Keeping them visible will help, but it’s up to you to make the effort and try to design your experience through their eyes.

Used and created correctly, personas are a powerful tool that promotes a shared understanding of who we’re designing for and help us prioritize our design efforts so we don’t build Frankenstein products that please no one. Most importantly, they remind us of the humanity involved in the design process and help us focus on designing solutions for a human being and not some abstract user.",,,,,,,,,,Creating and Using Personas,Active,"Fundamentals: Defining the Experience, Definition","UX Design Core [v1 deprecated], UX Design Core",,1,,,1
create a persona and design a representative document of it using Sketch,Knowing how to create a persona is an essential skill for UX Designers.,,"Creating a persona is a research-driven process. We start by understanding our users and their behaviors and then look for patterns we can extract into personas. While the workflow might vary slightly depending on your team, the following is a robust approach detailed in *About Face* by Alan Cooper.

**Step 1. Group interview subjects by role**

First, review the user research that you've done up to this point. Then, group your users by their roles. For enterprise applications, roles are easy to delineate, because they usually map to job roles or descriptions. Consumer products have more subtle role divisions, including family roles, attitudes or approaches to relevant activities, or interests and aptitudes regarding lifestyle choices.

**Step 2. Identify behavioral variables**

Once you’ve grouped your interviewees by role, list the distinct aspects of observed behavior for each role as a set of behavioral variables. Generally, we see the most important distinction between behavior patterns emerge by focusing on the following types of variables:
- Activities: What the user does; frequency and volume
- Attitudes: How the user thinks about the product domain and technology
- Aptitudes: What education and training the user has; ability to learn
- Motivations: Why the user is engaged in the product domain
- Skills: User abilities related to the product domain and technology

**Step 3. Map interview subjects to behavioral variables**

After you are satisfied that you have identified the set of significant behavioral variables exhibited by your interview subjects, the next step is to map each interviewee against each variable. Some of these variables will represent a continuous range of behavior, such as confidence in using technology. Others will represent multiple discrete choices, such as using a digital camera versus using a film camera.

Mapping the interviewee to a precise point in the range isn’t as critical as identifying the placement of interviewees in relationship to each other.

**Step 4. Identify significant behavior patterns**

After you have mapped your interview subjects, look for clusters of subjects that occur across multiple ranges or variables. A set of subjects who cluster in six to eight different variables will likely represent a significant behavior pattern that will form the basis of a persona. Some specialized roles may exhibit only one significant pattern, but typically you will find two or even three such patterns.

**Step 5. Synthesize characteristics and define goals**

We derive a persona’s goals and other attributes from their behaviors. These behaviors are synthesized from what was observed/identified in the research process as representing meaningful, typical use of the product over a period of time that adequately captures the relevant set of user actions. 

At this point, brief bullet points describing the behavior’s characteristics are sufficient. Stick to observed behaviors as much as possible. A description or two that sharpens the personalities of your personas can help bring them to life. However, too much fictional biography, especially if it includes quirky details, is a distraction and makes your personas distracting. 

Goals are the most critical detail to synthesize from your interviews and observations of behaviors. Goals are best derived by analyzing the behavior patterns comprising each persona. By identifying the logical connections between each cluster of interviewees’ behaviors, you can begin to infer the goals that lead to those behaviors. You can infer goals both by observing actions (what interview subjects in each persona cluster are trying to accomplish and why) and by analyzing subject responses to goal-oriented interview questions.

To be effective as design tools, goals must always relate directly, in some way, to the product being designed. Typically, the majority of useful goals for a persona are end goals. You can expect most personas to have three to five end goals associated with them. Life goals are most useful for personas of consumer-oriented products, but they can also make sense for enterprise personas in transient job roles. Zero or one life goal is appropriate for most personas. General experience goals such as “Don’t feel stupid” and “Don’t waste time” can be taken as implicit for almost any persona. Occasionally, a specific domain may dictate the need for more specific experience goals; zero to two experience goals is appropriate for most personas.

**Step 6. Check for completeness and redundancy**

At this point, your personas should be starting to come to life. You should check your mappings and personas’ characteristics and goals to see if any important gaps need filling. This again may point to the need to perform additional research to find particular behaviors that are missing from your behavioral axes. 

You might also want to check your notes to see if you need to add any political personas to satisfy stakeholder assumptions or requests. For example, you might have to add personas with identical goals but different locales to satisfy branches of the client organization in those locales, that their constituents’ voices were heard and are represented in the design.

**Step 7. Designate persona types**

The next part of persona construction is a key step in the process of turning your qualitative research into a powerful set of design tools. Design requires a target—the audience upon whom the design is focused. The more specific the target, the better. Trying to create a design solution that simultaneously serves the needs of even three or four personas can be an overwhelming task.

What we must do then is prioritize our personas to determine which should be the primary design target. The goal is to find a single persona from the set whose needs and goals can be completely and happily satisfied by a single interface without disenfranchising any of the other personas. We accomplish this through a process of designating persona types. There are six types of personas, and they are typically designated in roughly the order listed here:
- Primary
- Secondary
- Supplemental 
- Customer
- Served
- Negative

**Step 8: Expand the description of attributes
and behaviors**

Your list of bullet-point characteristics and goals arrived at in Step 5 points to the essence of complex behaviors but leaves much implied. Third-person narrative is far more powerful at conveying the persona’s attitudes, needs, and problems to other team members. It also deepens the designer/authors’ connection to and empathy for the personas and their motivations.

A typical persona description should be a synthesis of the most important details observed during research, relevant to this persona. This becomes an effective communication tool. Ideally, the majority of your user research findings should be contained in your persona description. This will be the manner in which your research directly informs design activities.

When you start developing your narrative, choose photographs for your personas. Photographs make them feel more real as you create the narrative and engage others on the team when you are finished. You should take great care in choosing a photograph. The best photos capture demographic information, hint at the environment (a persona for a nurse should be wearing a nurse’s uniform and be in a clinical setting, perhaps with a patient), and capture the persona’s general attitude (a photo for a clerk overwhelmed by paperwork might look harried).

When creating such communication aides, it’s important to remember that personas are design and decision-making tools, not an end in themselves. While power can come from creating a holistic image of a persona, too much embellishment and theater can potentially make personas seem like a fluffy waste of time. This can ultimately reduce their usefulness as user models.

**Step 9. Design the persona**

Once you've finished your research and understand who your persona is, you're ready to synthesize everything into one representative document. Now you can open up Sketch and include all of the important details on a one-page document that can be quickly scanned and shared. It will typically include the following details:
- Goals
- Motivations
- Frustrations
- Persona Type
- Name
- Age
- Image
- Location
- Income Bracket
- Profession
- Bio or description
- Key quote",,,,,,,,,,Creating and Using Personas,Active,"Fundamentals: Defining the Experience, Definition","UX Design Core [v1 deprecated], UX Design Core",,1,,,1
explain what a user flow is and why it is valuable in a design cycle,User flows are a fundamental tool for every user experience designer. Creating them helps designers avoid missing key interaction moments and allows them to clearly articulate how users interact with their products.,,"A user flow is the visualization of a user’s complete path through an application, website, or software. The flow may be non-linear in the sense that they contain decisions nodes, alternate paths, and loops in order to show all possible interactions with the product. 

In other words, they’re essentially flow charts of a user’s movement through an application. We can create them for an existing product by actually observing the paths users take. For a new project, we’ll need to use our research and come up with hypothesized user flows before we can validate them with testing.

We create user flow documents because they help us avoid missing key interaction moments. The process of creating a user flow frequently uncovers all possible scenarios of the users' interaction with the application. It shows us places where we can use usability heuristics to improve the experience, e.g. helping rescue our users, keeping them out of trouble, or providing wayfinding tools to help them get through the flow with less friction.",,,,,,,Creating Perfect User Flows for Smooth UX,,,Documenting and Diagramming a User Flow,Active,"Fundamentals: Defining the Experience, Definition","UX Design Core [v1 deprecated], UX Design Core",,1,,,1
identify when to create a user flow in a design cycle,Knowing when to use a user flow is just as important as knowing how to use one.,,"User flows are conducted at various points throughout the product design cycle because they’re the perfect tool for communicating what needs to happen in order for a user to accomplish something. We typically use them in the Discovery, Definition, Ideation, and Prototyping phases.

In the Discovery phase, we construct user flows during our competitive analysis to better understand how our competitors’ users interact with their products. If we’re working on an existing product, we’ll create user flows for our own experience to map out the existing user interactions. These user flows serve as an invaluable form of documentation that broadens our understanding of the current state of affairs.

During the Definition phase, we’ll create user flows after we’ve synthesized our research into a user journey map. At this point, our user flows can be a bit more generalized than they typically would be in order to translate our big picture user journey map into a more actionable representation of our product. Ideally, we’re trying to articulate the high-level interactions a user needs to accomplish in order to derive value from the product.

These high-level user flows can then be taken over to the Ideation phase. As we brainstorm solutions, we can utilize user flows to map out the implementation details we need to consider in the solutions’ design. By increasing the specificity and fidelity of our user maps, they become incredibly valuable to our design process because they give us a blueprint for our design by mapping out the interactions and interfaces we need to consider.

Finally, in the Prototyping phase, we’ll use our user flows as supporting documentation and continuously improve them as we test solutions. That said, we can still continue to create new user flows as new features and other improvements arise.

Putting this all together, we can see what a versatile tool user flows are in our toolbox. While we’ve discussed how to use them in these parts of the product design cycle, they can be used anytime you need to communicate how a user interacts with your product.",,,,,,,"Why User Flows are Key to Better UX Design,The Biggest WTF in Design Right Now",,,Documenting and Diagramming a User Flow,Active,"Fundamentals: Defining the Experience, Definition","UX Design Core [v1 deprecated], UX Design Core",,1,,,1
document and diagram a user flow,Knowing how to create a user flow is an essential skill for UX Designers.,,"Like with most UX tools, we start creating our user flows by reviewing our research and context. From here, we can then iterate through different representations and create our user flow document.

**Step 1. Understanding the context**

We'll review the work we've done up to this point by asking four questions:
- What solutions have we brainstormed?
- What is the user trying to achieve?
- What are the business objectives?
- What are the points of entry?

We start by reviewing and cataloging our current solutions because we want to design a user flow for each of them. Doing so will allow us to translate the abstract solution into a tangible interface. Then, for each solution, we'll identify what the user is trying to achieve, our business objectives, and how the user would start using the solution. Once we've identified these key points, we can begin to connect the dots in the next step.

**Step 2. Write out the flow**

Before we plunge into ""full design mode"", taking the time to write out our flows lets us rapidly develop and iterate them because it is much easier and faster to change text than a design. To do this, we'll open up Word or Google Docs and we'll write out a flow for each solution as a bulleted list.

In the beginning, we can focus on how our product will connect the user's point of entry to their goal using our solution and meeting our business objectives. As we complete flows for different solutions, we should take time to see if we can add any flows that link different flows and make sure we're not just designing for the ""happy path.""

**Step 3. Design the flow**

Once we're satisfied with our written flows, we can begin to graphically represent them in our design software of choice. To do so, we'll typically represent each bullet as a card or another icon and then draw lines between them to represent how a user can progress through the flow. We can vary the design of the cards and lines to represent different user activities. For example, we could make the ""happy path"" green and the other paths red.

**Step 4. Review the flow**

Once we've finished translating everything into a graphical design, we can take a second to review our work and see if we're missing anything. When all of the connections have been made, it can be easier to spot gaps or flaws in your flows.

**Step 5. Repeat with new paths**

Finally, as the project progress and you iterate through design solutions, be sure to continue updating your user flows so you have detailed documentation about how your users interact with your product.",,,,,,,,,,Documenting and Diagramming a User Flow,Active,"Fundamentals: Defining the Experience, Definition","UX Design Core [v1 deprecated], UX Design Core",,1,,,1
conduct an assumption assessment process with a team,"We all have an impression of how the world works, how people behave and what they expect. In many cases our assumptions are sufficient to help us navigate our daily lives and interactions. However, when we are creating a product that has the potential to be used by or affect thousands or hundreds of thousands of people, our assumptions can’t be relied on as an accurate gauge of how users will respond to or use our application. Some assumptions are riskier than others, so it pays to acknowledge all the assumptions you have and then identify the riskiest ones.","Use the assumption questions from Lean UX as a guide for surfacing assumptions regarding the Gestaffe
USER ASSUMPTIONS
*Who is the user?
*Where does our product fit in their work or life?
*What problems does our product solve?
*When and how is our product used?
*What features are important?
*How should our product look and behave?
BUSINESS ASSUMPTIONS
*I believe that my users/customers have a need to ...
*This need can be solved with ...
*My initial customers will be ...
*The #1 value a customer wants to get out of my service is ...
*The customer can also get these additional benefits ...
*I will acquire the majority of my users/customers through ...
*I will make money by ...
*My primary competition will be ...
*We will beat them in the market due to ...
*My biggest product risk is ...
*We will solve this through ...","You can quickly surface most assumptions about a product by having a quick discussion about the product plan using a list of statements for stakeholders to complete or questions to answer.

For example:
* Who is the user?
* I believe my users have a need to ...
* When and how is this product used?

Take the time to evaluate each assumption. Separate out those assumptions that could have negative consequences for the company if they are wrong. 

Ask: What assumptions does my business hold, that if proven wrong, could cause the business to fail? (Name up to five CLEAR and CONCISE points, avoid paragraphs or sentences) 

Rank most critical assumptions on a scale of urgency.

This list of assumptions can form the basis of your discovery research efforts at the beginning of your design cycle. Create  testable hypotheses for each assumption. Using this list, you'll be able to create hypotheses and experiments or other forms of research that can help validate or invalidate your assumptions.

We'll conduct an assumptions exercise based on a project of building an e-commerce site for Geschaft, a German goods and clothing shop.",,,,,,,,,,Assumptions and Competitive Analysis,,Fundamentals: Discovery,UX Design Core [v1 deprecated],,1,,,1
compile and report the findings of a competitive analysis,"It's important that information gleaned from a competitive analysis get reported in an effective and easily consumed way. Especially for ongoing design efforts, it's important to have a way to share and update information about competitors. UX designers who help conduct a competitive analysis should take care to ensure that they carefully determine what's most useful and relevant to surface for team and stakeholders.","How do I report the findings from a competitive analysis?

A database or spreadsheet with details about each competitor can be helpful, especially as an ongoing collection of information — a living document — for future reference and updating.

Documents and Keynote presentations are generally effective for succinctly presenting key actionable findings.

Be as succinct as possible.

When sharing findings, it’s the analysts’ responsibility to convey just the actionable insights to key decision-makers in a quickly digestible format.

Analyze the data from the competitive analysis and determine what is most important to share. Then, create a document with the most important information and format it for effective scanning.",,,,,,,,,,,Assumptions and Competitive Analysis,,Fundamentals: Discovery,UX Design Core [v1 deprecated],,0,,,0
conduct a competitive analysis,"Competitive analyses are performed for a number of reasons. Business leaders will evaluate competitors’ products, marketing strategies, websites, and content to see what competitors are doing and creating. The analysis of competitors products and marketing allows a business to create a stronger position in the marketplace. 

UX designers can perform a competitive audit of the product or service to see how competitors are interacting with their customers. They can also see what the strengths are of the product and look for weaknesses — holes in their service that could be capitalized on in strengthening their own product or service to position themselves as a desirable alternative to the competition.

A competitive analysis can also give clues to audience differences, allowing you to understand how best to serve your unique tribe. It can also validate your assumptions or call them into question.",,"Identify Competitors—Depending on industry or market, find up to 10 competitors, but focus on at least five direct competitors and 3 indirect competitors. Google search is usually the best place to begin Use various relevant keywords associated with your product or service you are designing for so you capture, not just direct competitors, but also indirect competitors

SimilarWeb or SEMRush can help find hidden competitors if necessary

-Evaluate any relevant marketing
-Websites, Printed collateral, Blogs
-Catalog marketing message and brand essence
-Identify key strengths of marketing messages and strategies
-Identify key weaknesses of marketing messages and strategies
-Evaluate actual product or service
-Purchase if possible to experience and use product
-Sometimes a free trial is available
-Test it out. Do a heuristic evaluation to find strengths and weaknesses.",,,,,,,,,,"Assumptions and Competitive Analysis,Additional Research Methods",,"Fundamentals: Discovery, Discovery","UX Design Core [v1 deprecated], UX Design Core",,1,,,1
explain what information architecture is and why it is valuable in a design cycle,"Information architecture (IA) is the foundational element of any great user experience. By coherently and logically organizing our content according to our users’ mental models, we ensure that our users can understand their surroundings and find what they’re looking for in our products.",,"Information architecture (IA) helps your users understand their surroundings and find what they’re looking for in our products. IA is often one of the first parts of our product that we design. In doing so, we focus:

```“on organizing, structuring, and labeling content in an effective and sustainable way [in order to] help users find information and complete tasks.”```
- Usability.gov

There are opportunity and real costs associated with your IA. As explained in *Information Architecture: For the Web and Beyond* by Peter Morville, these costs include:
- Finding information (What is the cost of frustrating your customers with a poorly organized web site?)
- Not finding information (How many customers do you lose because they can’t find the product they want on your web site?)
- The value of education (What is the value of educating your customers about new products and services related to the ones they’re actively seeking on your web site?)
- Construction (What does it cost to design and build a web site? How much does it cost to redo it six months later because it doesn’t support findability or doesn’t scale?)
- Maintenance (Similarly, what does it cost to ensure that good designs don’t crumble over time? Will the people who maintain your site know where to put new content and when to remove outdated content?)
- Training (For internal, mission-critical information systems that support call centers, for example, what does it cost to train employees to use that system? How much could you save if it wasn’t so complicated to use?)
- The value of brand (No matter how beautiful your web site is, if customers can’t find what they need, your brand loses value in their eyes. How much did you spend on those brand-building TV commercials?)",,,,,,,Information Architecture. Basics for Designers.,,,Intro to Information Architecture (IA),Active,"Fundamentals: Defining the Experience, Definition","UX Design Core [v1 deprecated], UX Design Core",,1,,,1
identify when to create to create an information architecture in a design cycle,Knowing when to build an IA is just as important as knowing how to use one.,,"In the product design cycle, IAs can be worked on at a few different points. For new projects, we’d work on our IAs during the Discovery and Ideation phases. In the Discovery phase, we’d leverage our understanding of IAs to de-construct our competitors’ products to see how their IAs guide their users. Then, in the Ideation phase, we’d work on our IA as we design solutions for our product.

If we’re working on an existing product, we’d also take some time during the Discovery phase to map out our existing information architecture to better understand our current product.",,,,,,,,,,Intro to Information Architecture (IA),Active,"Fundamentals: Defining the Experience, Definition","UX Design Core [v1 deprecated], UX Design Core",,1,,,1
organize content into a usable information architecture,Knowing how to create an information architecture is an essential skill for UX Designers.,,"Designing a coherent, intuitive IA is a challenging process. Before we begin, we need to understand our users’ information-seeking needs and behaviors. Let’s start with their information needs first. To understand them, we need to ask ourselves: when a user comes to a website to find something, what does she really want? What are her information needs?

We can break these down into four distinct seeking rationales.
- Known-item seeking is when the user has a question that can be immediately answered when found.
- Exploratory seeking is when users don’t really know what they’re looking for, so they hope whatever ambles into their search will be good enough.
- Exhaustive research is when users will leave no stone unturned to learn new information about a topic.
- Read later is when users have seen content before, and they’re looking for it again.

Once we understand why they’re looking for information, we can ask ourselves: how do website users find information, or what are their information-seeking behaviors? They might enter queries in search systems, browse from link to link, and ask humans for help (through email, chat interfaces, and so forth). Searching, browsing, and asking are all methods for finding, and are the basic building blocks of information-seeking behavior.

To understand and build our IAs, we rely on card-sorting to keep track of discrete units of our product in order to test different organizational models. Once we understand how users interpret our terminology and groupings, we progress to site mapping and content audits to logically present our product’s IA. Along the way, we can continue to ensure our IAs are usable by conducting evaluations of their efficacy.

Building an IA from scratch or improving an existing one is an enormous undertaking. Not only does it require substantial efforts, but the stakes are also high because it’ll serve as the basis for the rest of your user experience. That said, with a strong understanding of the fundamentals, we can iterate through even the most convoluted systems and design an intuitive information architecture.",,,,,,,Getting Started with Card Sorting,,,Intro to Information Architecture (IA),Active,"Fundamentals: Defining the Experience, Definition","UX Design Core [v1 deprecated], UX Design Core",,1,,,1
describe what content strategy is and why it is valuable,"Content is the most important part of any user experience. If we removed the content from a website, then we’d be left with nothing. Because content is the foundation for every UX, it makes sense that it has its own discipline: content strategy.",,"Content Strategy is another term, like Information Architecture, that escapes a neat tidy definition because it’s a huge, multi-faceted topic that covers all aspects of a business. That said, one of the most well-known “definitions” comes from Kristina Halvorson, the CEO of Brain Traffic and founder of the content strategy conference Confab. 

She defines content strategy as the “plans for the creation, publication, and governance of useful, usable content.” That’s a pretty spot on definition, but Rachel Lovinger brings in some additional clarity when she says, “Content strategy is to copywriting as information architecture is to design.” Content Strategy encompasses all of the thinking, planning, and organizing we do in order to produce good content.

Content strategy is incredibly valuable as Erin Kissane explains in *The Elements of Content Strategy* because it:
- Helps companies understand and produce the kind of content their target audiences really need.
- Allows organizations to develop realistic, sustainable, and measurable publishing plans that keep their content on track in the long term.
- Cuts costs by reducing redundant or extraneous publishing efforts, while increasing the effectiveness of existing assets.
- Aligns communication across channels so that web content, print collateral, social media conversations, and internal knowledge management are toward the same goals (in channel appropriate ways).
- Prevents web projects from being derailed by the often major delays caused by underestimating the time and effort required to produce great content.",,,,,,,,,,Intro to Content Strategy,Active,Fundamentals: Defining the Experience,UX Design Core [v1 deprecated],,1,,,1
explain how content strategy fits into the broader field of UX,"UX isn't the only field that makes use of Content Strategy. So, it's important to understand how it directly applies to the work we do.",,"Content strategy is a foundational aspect of any good user experience. But, how does it fit within the broader context of UX? If User Experience is the all-encompassing, big picture of a user’s entire experience with our product, then Content Strategy is the subset of UX that is hyper-focused on the user’s content experience and how we maintain it over time. While Content Strategy is a subset of UX, it is the most important part - we simply can’t build a UX without content.",,,,,,,,,,Intro to Content Strategy,,Fundamentals: Defining the Experience,UX Design Core [v1 deprecated],,1,,,1
outline a high-level content strategy and use it to design a product,Knowing how to create a Content Strategy is an essential skill for UX Designers.,,"Building a Content Strategy depends on the scope of your project. A simple splash page requires far less effort than a content-heavy publishing platform. Let’s go over how we’d handle a larger project, and then you can pick and choose techniques to use in a smaller project.

**Step 1. Research**

Like always, we'll get the ball rolling with a bit of research. Here we're trying to understand the audience’s content preferences and your stakeholders’ communication goals and content production abilities. We can also perform a competitive analysis to see how our competitors produce content.

*Guiding Questions:*
- Who is our audience?
- What are their content preferences?
- What does our current content ecosystem look like?
  - Competition’s Content
  - Our Existing Content
- What are our communication goals?
- What do are our content production abilities look like?

**Step 2. Strategy**

We'll start by defining the big-picture messages we going to convey and how we know the overall strategy is successful. After we get buy-in on the big picture changes, we can document our strategy as guidelines.

*Guiding Questions:*
- What are our content goals?
- What is our message?
- How will we measure our content?
  - What does success look like?
  - What does failure look like?
- How will we reach our audience?
- What deviations will we be making from our existing content strategy?

**Step 3. Structural Design**

With our guiding strategy taken care of, we can design how the content should be organized and presented to our audience. This step typically overlaps with the information architecture (IA) work for the project.

*Guiding Questions:*
- Where will our content live?
- How will it be organized?

**Step 4. Content Specifications**

For each section of your product, write out high-level guidelines for that section’s content, and define what success looks like.

*Guiding Questions:*
- What are the primary and secondary messages to be communicated in each section’s content?
- What primary audience will be served by each section’s content?
- How will we integrate major new content-related features into the site?
- Are there any recommendations on voice and tone?
- Are there any recommendations on integrating community features (comments, forum, etc)?
- Are there any recommendations on delivery channels for the various kinds of content you’re working with (website vs. email vs. social, etc.)?

**Step 5. Content Templates**

A content template is a simple document that serves as a companion to your website’s wireframe and allows subject matter experts to quickly communicate their knowledge to your content. To build one, follow these steps:
- List each piece of information that must be on the page, followed by optional pieces of information.
- After the name of each chunk of content, note what that content is supposed to accomplish.
- List your specifications for each piece of content: ideal word count, capitalization style, list vs. paragraph vs. heading, and any notes like “avoid jargon” or “include an image if possible”.
- Provide example content for each piece of content on the template.

**Step 6. Plan for Creation**

Your product's content needs to be managed and created long after you've pushed it live. So, it's critical to develop a plan for all of the content creation that your product needs. This can be a simple checklist for stakeholders to follow, or it can be a detailed blueprint for success.

*Guiding Questions:*
- Will we use dedicated creators, internal subject matter experts' (SME’s), or content curation?
- Who will be in charge of maintaining the content?
- What is the content schedule?
- How will we measure success?

**Step 7. Measure**

Once your product is live, you'll need to frequently asses your content according to the success criteria you defined in your strategic guidelines in Step 2. As your product ages, you'll need to continue to update your content and plan for new growth in accordance with your strategy.

*Guiding Questions:*
- Is our content successful?
- If not, what changes do we need to make?
- Do we need to re-evaluate our strategy?",,,,,,,,,,Intro to Content Strategy,Active,Fundamentals: Defining the Experience,UX Design Core [v1 deprecated],,1,,,1
describe and utilize a doubly-linked list,You're already familiar with the linked list. A common variant is the _doubly-linked list_ which adds some additional speed and flexibility improvement in exchange for some additional complexity.,"For the project, a lot of the linked list functionality is provided in the interest of allowing the students to complete the sprint at all.

But at the same time, it's important for them to understand.

If the students are running out of stuff to do on the project, we can ask them to write this code, as well, in the future.","A doubly-linked list is very much like a standard linked list, except the links
go both to `next` and `prev`ious nodes in the list.

In addition to the pointer to the `head` of the list, we also keep a pointer to
the `tail` (last element) of the list.","A doubly-linked list has a number of benefits:

* Traverse the list in either direction.

* If you already have a pointer to any element in this list, you can remove that
  element in O(1) time.

  (With a standard linked list, you need to traverse to keep track of the
  pointer to the previous element, making that an O(n) process.)

Drawbacks:

* There's more pointer manipulation when changing the list (to manage the `prev`
  pointers in addition to the `next` pointers).

#### Use in an LRU cache

When used with an LRU cache, pointers to cache entries in the list are also kept
in a hash table.

This means if you want to move a just-used cache entry to the front of the list,
you can perform the following steps:

1. Look up the entry in the hash table: O(1)
2. Remove the entry from its position in the doubly linked list: O(1)
3. Insert the entry at the head of the doubly linked list: O(1)

","* Research and list the common use cases

* Convert one of your previously-written linked lists into a doubly-linked list.",3e2QbeYxh2c,http://youtube.com/watch?v=3e2QbeYxh2c,https://www.youtube.com/embed/3e2QbeYxh2c,,,,,Web Server II,,Web Server,Computer Science,,1,1,1,3
implement an LRU cache,"Caches help speed access to commonly-used data. 

LRU caches are a simple, common type of caching mechanism that allows cache gets and puts to happen in O(1) time.","For the project, the hashtable is written and a lot of the doubly-linked list code is already there, as well.","A cache is a place that stores copies of commonly-used information for quick
retrieval and lookup. Hitting the cache for a piece of data should be faster
than getting it from the original source.

The idea is that if lots of people want access to this piece of data, you copy
it into the faster cache so they all get it in a more timely manner.

There is a cache on your CPU that keeps commonly-used parts of RAM so the CPU
doesn't have to wait for the slower RAM each time.

Your web browser keeps a cache of web pages and other web data so that it
doesn't have to retrieve it over the network every time you go to a page,
greatly speeding up page load times.

A web server can also cache files so that it doesn't have to go through the
operating systems to get files off disk every time. It can just retrieve the
file from RAM and serve it directly.
","#### LRU Caches

Of course, you can't cache _everything_ _forever_. You'd need a cache as big as
all the stuff you're wanting to store, if you wanted to do that. And a web
server might have access to several terabytes of data, but only have a few
gigabytes of RAM.

So you have to be selective. It makes a lot of sense to have a cache of limited
size, and fill that cache with the most frequently-accessed data. 

One strategy for doing this is called an _LRU cache_. This cache type has a
fixed number of entries (or size in bytes).

In the context of a webserver, when a file is requested by a client, the
following steps occur:

1. Check if the file is in the cache.

2. If it is, serve it. We're done.

3. If it's not in the cache, load it from disk.

4. Save it in the cache.

5. Serve it.

If the cache exceeds its max size, the _least recently used_ entry in the cache
is discarded.

#### How to build an LRU cache

##### Structure

LRU caches are made of two cooperating data structures: a doubly linked list and
a hash table.

* The hash table is used for quick lookup into the doubly linked list.

* The doubly linked list is used to keep track of which entries are
  least-recently used.

  The item at the head of the list is the most-recently used.

  The item at the tail is the least-recently used.

##### Putting items in the cache

The item will be identified by a key (in the case of a webserver, the key should
be a string containing the path on disk to the file in question).

A _cache entry_ will contain copies of all the information needed to serve the
file again if it is retrieved from the cache. For a webserver, this is things
like content MIME type, content length, and the content itself.

Additionally the cache entry should have `prev` and `next` pointers so it can be
used in a doubly linked list.

Finally, it should also contain a copy of the key.

For putting an item in the cache:

1. Construct a new cache entry containing all the required information.

2. Add a pointer to the cache entry to the head of the doubly linked list.

3. Add a pointer to the cache entry to the hash table, indexed by the key.

4. If the cache is larger than its max allowable size, see [LRU
   discarding](#lru-discarding), below.

### Getting items from the cache

1. Look up the cache entry pointer in the hash table with the key.

2. If it's not in the hash table, it's not in the cache. We're done.

3. If it is found, the cache entry is cut out of the doubly linked list.

4. The cache entry is inserted at the head of the list. (Because it's now the
   most-recently used.)

Since every time you get an item from the cache it moves to the head of the
list, it becomes most-recently used. In this way, frequently-used entries tend
to bubble up to the head of the list and less-frequently-used entries tend to
fall to the tail of the list.

##### LRU discarding

If the cache is larger than its allowable max size, the least-recently used
items must be discarded.

This typically happens when an item is inserted in the list that pushes it oversize.

* while size > max_size:
  * get the cache entry at the tail of the list
  * remove it from the tail of the list
  * using its key, remove it from the hash table","* What are some applications of LRU caches?
* How would you add functionality to the cache (in pseudocode) to remove entries that are older than a cutoff age from the cache? O(n) time is OK.
* How would you remove entries as above in O(1) time?",GaibISkdobY,http://youtube.com/watch?v=GaibISkdobY,https://www.youtube.com/embed/GaibISkdobY,,,,,Web Server II,,Web Server,Computer Science,,1,1,1,3
understand MIME types and determine them from file names,"MIME types are widely used in email and the web. Although it's a simple concept, its common use warrants a short, complete description.","This seems of little use to FSW students, but it might be new information to students in other tracks.","_Multipurpose Internet Mail Extensions_ (MIME) was originally created for email,
as its name suggests.

It used to be, back in the day when cavemen were painting their hands on cave
walls, that all email was ASCII text and that was all. If you wanted to include
an image, you had to draw it in ASCII-art.

So in order to pass other kinds of data in email, MIME was invented. It allowed
emails to contain multiple parts, and had a way of identifying the type of data
that was contained within each part.

MIME is still used for email to this day.

But the designers of the web recognized that many of the same problems could be
solved by using MIME with the web, as well.

One of the problems is identifying the type of data that is arriving from the
server.","#### What type is my data?

Bytes are just numbers. So when the web browser receives a stream of bytes from
the server, how can it tell if this is unicode HTML data, binary animated-gif
data, or a JPEG vacation photograph? They're all just streams of numbers!

The server has to tell the browser what type this data is. And it does this by
specifying the MIME type.

Here are some common MIME types:

* JPEG: `image/jpeg`
* GIF: `image/gif`
* PNG: `image/png`
* JavaScript: `application/javascript`
* JSON: `application/json`
* CSS: `text/css`
* HTML: `text/html`
* Plain TXT: `text/plain`
* Non-descript data: `application/octet-stream`

> _Octet_ is another name for an 8-bit value, commonly known as a _byte_.
> (Historically the number of bits in a byte varied, even though today they're
> vitually always 8 bits. An octet is _always_ 8 bits by definition.)

There are [a lot of MIME
types](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Complete_list_of_MIME_types).

#### How to determine the type of data served?

##### Programmatic endpoints

If you have a programmatic endpoint (e.g. an endpoint that generates the data
instead of reading it from disk) then you simply specify the type of the data
you're sending back.

For example, if you return data is:

```json
{
    ""animal_type"": ""goat"",
    ""count"": 37
}
```

then you'll use the content type of `application/json`.

##### File serving

But what if you're reading data from a file and serving it?

If the client requests `http://example.com/foo.png`, we need to reply with a
type of `image/png`. The usual way to do this is to simply map between the file
extension `.png` and its MIME type `image/png`.

1. Isolate the file extension.

   Examples:

   File is `frotz.jpg`, extension is `.jpg`.

   File is `foo.bar.txt`, extension is `.txt`.

2. Map the extension to its MIME type.

   Example: `.txt` maps to `text/plain`

3. If you can't find a mapping for an extension, use `application/octet-stream`.

Comparisons are case-insensitive. Here are some examples:

* `.jpg` or `.jpeg`: `image/jpeg`
* `.gif`: `image/gif`
* `.png`: `image/png`
* `.js`: `application/javascript`
* `.json`: `application/json`
* `.css`: `text/css`
* `.htm` or `.html`: `text/html`
* `.txt`: `text/plain`
* `.ico`: `image/x-icon`

## How is the MIME type returned?

It comes back in the HTTP header in the `Content-Type` field:

```
Content-Type: text/html
```

Whichever library you are using should have a way to set the `Content-Type`
header.

Webservers construct their own HTTP headers so the `Content-Type` is included at
that time.

#### What does a browser (or other client) do with the MIME type?

The browser uses the MIME type of the data to decide what to do with it. If it's
`text/html`, it displays it. Probably the same with `image/*` data. Also
`text/plain`.

The browser can display a number of types of data natively. But what if it gets
one it doesn't know? There are, after all, about 1.2 zillion MIME types.

In that case, it has two options:

1. It can spawn an external viewer to show the file, if it is aware of one.

2. It can simply download the file and let the user deal with it later.","* Besides email and the web, where else are MIME types used?
* Research how MIME _multipart_ works.
* What is the MIME type for a MOD audio file? 
* What is the MIME type for a Commodore 64 floppy disk image file?",emkbJJau--k,http://youtube.com/watch?v=emkbJJau--k,https://www.youtube.com/embed/emkbJJau--k,,,,,Web Server II,,Web Server,Computer Science,,1,1,1,3
write effective interview questions,"Weak questions gather weak responses. By practicing writing effective interview questions, UX designers conducting interviews will be able to more efficiently and effectively gather data from research participants.",,"- Ask open-ended questions.
 - Questions that have a quick binary answer, like yes or no generally don't reveal any useful information.

- Avoid obvious questions.
 - You don't want to ask for something you can easily find an answer to through a quick web search. 
 - Do ask questions you think you know the answer to but haven't been able to find corroborating evidence.

- Don't ""_lead the witness_"" by asking the question in a way that seeks a specific answer. Also, don't suggest an answer. Participants will often respond in agreement with your suggestion. It is OK at times to offer examples of responses to help clarify a question, but be sure you dig deeper on those questions to ensure their answer is legitimate.

- Ask clear questions.
 - Clear questions get clear answers, usually.

You're looking for facts, stories, opinions, feelings, perceptions, values, and attitudes. All these together help paint a better picture of the situation.",,,,,,,"How to Conduct User Interviews,6 Tips for Better User Interviews",,,,,,,,1,,,1
write an interview guide,The purpose of the interview guide is to make sure you remember to cover all the questions that you need to cover in order to understand the scenario.,,"*Write Interview guide*
- Define interview purpose
- Write primary questions
- Write probe questions

Generally, aim for one primary question for every five minutes of interview time, with one or two probe questions that could help you dig deeper. As you get going in an interview, it is often easy to just go with the flow of the conversation, but you must remember you have specific objectives for the interview. Having those objectives and questions in front of you helps keep you on track and not forget anything important.",,,,,,,,,,,,,,,1,,,1
conduct a stakeholder interview,"Stakeholder interviews should be conducted early in the process, to help guide the rest of the design activities. Stakeholders should be consulted whenever a question arises regarding the scope of the project or if new data emerges that would impact the project or raises questions regarding the assumptions being made about the project.","Video to play after discussing question quality: 

https://lambdaschool.zoom.us/recording/detail?meeting_id=C4rE7sHlT%2FiQDfDZAZ9MzQ%3D%3D","- Tell me what the product is. 
- Who is it for? 
- How do they use it?
- What problem is your product trying to solve?
- Who is using the product currently? 
- Is there another audience you would like to use your product that isn't currently using it?
- If there were no problems at all, with everything going smoothly, what would the product look like in two years?",,,,,,,"The General Stakeholder Interview,Understanding the business",,,Stakeholder Interviews & User Recruiting,,Discovery,UX Design Core,,1,,,1
analyze and report the findings of an interview,"The analysis and report document following the user interview process is just as important, if not more important, than the interview itself. Qualitative interview data must be carefully deconstructed, analyzed, and placed back together in a way that makes sense and is usable by all parties involved.",,"Interviews should ideally be recorded and transcribed.

UX researchers analyze data by reading and re-reading, looking for themes. Depending on the time available, this scales from brief overview to thorough analysis. 

As researchers read the data, they begin writing down short names for themes that they see emerge.

Themes can be grouped together under broader categories

The most useful themes usually emerge from:
- Problems or shortcomings of existing software or services.
- Difficulties users or stakeholders face in their day-to-day experiences.
- Workaround solutions they have employed to solve problems in the past.

How does one report the data gathered or findings emerging from a user or stakeholder interview?

Analysts should compile themes in a document. 

Each emergent theme should be accompanied by quotes that help support the theme. 

Each theme can also be contextualized within existing psychological or social-psychological theories or design heuristics.

Hypotheses can be presented as well to help capture possible test ideas for future research.

The document becomes a reference for team members to remind them of the findings from the research that is guiding the design decisions.

Researchers can also prepare a presentation with the gathered themes and associated information that could be presented to stakeholders or other team members as a quick way to share the findings from the research.",,,,,,,Themes Don't Just Emerge,,,User Interviews,,Discovery,UX Design Core,,1,,,1
understand why Objective-C is important,"As you're getting more and more comfortable with Swift, you may be wondering why you should take a break and learn Objective-C. In this objective, you'll learn more about Objective-C's place in the Apple ecosystem, and why it's important for you to know.","The goal of Lambda's coverage of Objective-C is not to make students Objective-C experts. Rather, it's to make them comfortable reading it and writing it at a level that will serve them well as a Swift-first programmer working in a mixed ObjC/Swift codebase. It should also prepare them for further learning should they end up in a job where they're expected to write significant amounts of Objective-C.","#### A Brief History

Objective-C was originally created by Brad Cox and Tom Love in the early 1980s. Cox had been exposed to Smalltalk, which was a groundbreaking object-oriented programming language created and used by engineers at Xerox PARC, where the first true graphical user interface computers were created. Seeing the power and developer productivity provided by Smalltalk's object oriented model, Cox wanted to add object orientation to C. The result was Objective-C.

Cox and Love formed a company called PPI (later Stepstone), to commercialize Objective-C along with reusable software libraries they called ICpaks. The first commercial Objective-C compiler was released by PPI/Stepstone in 1984.

In 1988, Steve Jobs' new company, NeXT, decided to make Objective-C the primary programming language for their operating system, NeXTSTEP. They licensed Objective-C from Stepstone, and used it as the basis of the very powerful development tools on NeXTSTEP, including Project Builder (the predecessor to Xcode), Interface Builder, and the various system frameworks called ""kits"", including AppKit.

NeXT started out as a hardware and software company, but after 5 years of selling hardware, they switched to a software only business, and started selling their operating system and development tools for other hardware platforms.

In 1996, Apple was in dire financial shape, and arguably in even worse shape with regard to their work on a next-generation operating system for the Mac. Seeing NeXT's advanced operating system software and development tools as a solution to their own software problems, Apple bought NeXT. Steve Jobs came back to Apple, eventually became CEO, and needless to say, Apple survived.

But what about NeXT's software? Apple did indeed use NeXT's operating system as the basis of the next major version of the Mac OS, Mac OS X. Mac OS X is a direct descendant of NeXTStep, and iOS, being a descendant of OS X is also full of NeXT technology.

Objective-C is at the heart of that technology. Since the release of Mac OS X in 2001, Objective-C has been the primary language used for writing software on Apple's platforms. With the huge success of the iPhone, and the explosion of iOS developers, Objective-C became one of the most-used programming languages in the world, rising as high as #3 in the [TIOBE Index](https://www.tiobe.com/tiobe-index/). (As of this writing in September, 2018, Objective-C is #10, while Swift is #15.)

#### Today

In 2014, Apple announced their next-generation programming language, Swift. Swift improves on Objective-C in many ways, making it easier to write safe, performant code, while including many advanced programming language features that Objective-C doesn't have. It's clear that Swift is the future.

Still, Objective-C is far from dead, and won't be for a very long time. There are millions of apps containing many billions of lines of Objective-C. There are applications where Objective-C is currently still better suited than Swift. Apple themselves still writes most new code in Objective-C. Even after Swift has matured to the point that Objective-C is not technically the best solution for any problem, there will be huge codebases written in Objective-C that will need maintenance.

As an iOS developer, you are nearly guaranteed to end up working with Objective-C. Whether it's working on an all Objective-C codebase at one of the many companies that haven't yet started using Swift, writing new code in Swift in a mixed codebase, or even just reading Stack Overflow answers and sample code in Objective-C, it's vital that you feel comfortable with Objective-C.

The goal of Lambda's coverage of Objective-C is not to make you an Objective-C expert. Rather, it's to help you get comfortable reading it and writing it at a level that will serve you well as a Swift-first programmer working in a mixed ObjC/Swift codebase. It should also prepare you for further learning should they end up in a job where they're expected to write significant amounts of Objective-C.",-,-,oXHiCs_PD0s,http://youtube.com/watch?v=oXHiCs_PD0s,https://www.youtube.com/embed/oXHiCs_PD0s,,,Why many developers still prefer Objective-C to Swift,,Intro to Objective C,,Objective-C Part 1,iOS Development Core,,1,1,1,3
create an effective research results document using style sheets in Google Docs,"Research results should be available to all members of the design team and stakeholders, including the development team. Anyone who touches the product should have these insights.

For efficiency, it’s best to have a summary of results available to the team in the form of a research results document and to present findings in person to the team.",,"Ideally, to the extent possible, the team should be able to see research first-hand. This is most important in usability studies, but can be useful in any research. But, in lieu of actually observing the research, having access to raw data and recordings/transcriptions is useful.

What are the qualities of an effective research results document?
• Each document will be unique to the scenario of the research interview, but overall, documents should:
• Be easy to scan.
• Have no grammatical or mechanical errors.
• Have consistent layout and structure.
• Avoid jargon or complex terms that remain unexplained.
• Have summaries that allow quick access to the key “take-aways.”
• Contain details about the participant
• Include copy of interview guide in appendix.
• Documents can most effectively be created and duplicated using styles within the document.","Create a research results document based on assumptions exercise, competitive analysis and stakeholder interview.",,,,,,,,,Organizing and Presenting Findings; Building a Portfolio,,Fundamentals: Discovery,UX Design Core [v1 deprecated],,1,,,1
create an effective research results presentation using Keynote,,,"Presentation should: 

• Be brief.
• Be accompanied by a handout with additional details.
• Contain easily digestible information.
• Get to the point quickly.
• Have visual presentation slides to show participants
• Contain no grammatical or mechanical errors.",Create a Keynote presentation. Show some of the features of Keynote and create slides to represent key ideas based on data gathered.,,,,,,,,,Organizing and Presenting Findings; Building a Portfolio,,Fundamentals: Discovery,UX Design Core [v1 deprecated],,0,,,0
present research results effectively in person,"No one likes a boring meeting or a meeting where nothing useful happens. UX designers should make sure that, when they have an opportunity to present findings, people find the meeting valuable and worth their time.",,"Own the room.

How does one best present research results in person?
• Set up a meeting with ample time to review the results. (Usually 1-1.5 hours is sufficient.)
• Invite all stakeholders.
• Set up a screenshare / remote connection if necessary.
• Have necessary handouts.
• Know your material.
• Have confidence.
• Avoid “Um”s and “Ah”s.
• Don’t put too much data on a single slide. Make it visually appealing.",,,,,,,,,,Organizing and Presenting Findings; Building a Portfolio,,Fundamentals: Discovery,UX Design Core [v1 deprecated],,1,,,1
understand the importance of a UX portfolio,"UX managers generally have two tools they use to determine who to hire: the resume and the portfolio. The resume helps give context to the designer's background and experience. The portfolio gives the designer the opportunity to showcase skills in UX design. If the resume and portfolio are not a good experience to read or peruse, they will get skipped over very quickly.",,,,,,,,,,,,Organizing and Presenting Findings; Building a Portfolio,,Fundamentals: Discovery,UX Design Core [v1 deprecated],,0,,,0
explain the attributes of an effective UX portfolio,"An effective UX portfolio should show the hiring manager a breadth of understanding and experience of human problems and how technology can help create solutions. And, it should look nice.",,"The UX design portfolio should focus on the process not the final outcome. We’re not wanting to see a high-fidelity design image, necessarily, we’re wanting to see what you did to solve a design problem.

Your portfolio should help the manager see how you would be an asset to their design team. It should tell a story through case studies.

Each case study should explain the:

- Design problem.
- Barriers encountered.
- Process.
  - Include phases you were a part of.
  - Describe your engagement and impact at all stages of the design process.
  - Your role on the team.
- Final result.
- Lessons learned.

It should be a good balance of images and text to help best convey the story of the project. Images should be legible and should tell the story, not be mere artifacts of beauty. They should represent the whole process, not just the final product.

It could be online, but does not need to be. You can create a PDF version of your portfolio with a page layout software or presentation software like Keynote.

What are hiring managers looking for in a UX portfolio?

- Evidence you will match their company culture and current business needs.
- Examples of critical thinking.
- Ability to follow a systematic process to arrive at design solutions.
- Examples of working well with a team.
- Coherent communication style.
- In some cases, a sense of aesthetics.",,,,,,,,,,Organizing and Presenting Findings; Building a Portfolio,,Fundamentals: Discovery,UX Design Core [v1 deprecated],,1,,,1
write a contract class to store SQL table structure and field constants,,,,,,,,,,,,,Android SQL Implementation,,Data Persistence,Android Development Core,,0,,,0
write a database helper class to manage database creation and upgrades,,,,,,,,,,,,,Android SQL Implementation,,Data Persistence,Android Development Core,,0,,,0
build a database access class to facilitate interactions with the database,,,,,,,,,,,,,Android SQL Implementation,,Data Persistence,Android Development Core,,0,,,0
execute SQL statements to get data from the database,,,,,,,,,,,,,Android SQL Implementation,,Data Persistence,Android Development Core,,0,,,0
work with Cursors to interpret data returned from the database,,,,,,,,,,,,,Android SQL Implementation,,Data Persistence,Android Development Core,,0,,,0
use methods to interact with the database without SQL,,,,,,,,,,,,,Android SQL Implementation,,Data Persistence,Android Development Core,,0,,,0
create a proto-persona and design a representative document of it using Sketch,Knowing how to create a proto-persona is an essential skill for UX Designers.,,"While creating a persona is the gold standard that we strive for, sometimes we don't have enough research to create one. In these cases, we'll design a proto-persona instead to keep the user at the forefront of our design thinking. The process for creating a proto-persona is very similar to the full persona process with a few key differences.

**Step 1. Brainstorm roles**

First, brainstorm a list of roles that you can envision using your product. For enterprise applications, roles are easy to delineate, because they usually map to job roles or descriptions. Consumer products have more subtle role divisions, including family roles, attitudes or approaches to relevant activities, or interests and aptitudes regarding lifestyle choices. In either case, you'll have to rely on your best judgment and understanding of the project to generate the roles.

**Step 2. Identify behavioral variables**

Once you’ve brainstormed the roles, list the distinct aspects of behavior for each role as a set of behavioral variables. Generally, we see the most important distinction between behavior patterns emerge by focusing on the following types of variables:
- Activities: What the user does; frequency and volume
- Attitudes: How the user thinks about the product domain and technology
- Aptitudes: What education and training the user has; ability to learn
- Motivations: Why the user is engaged in the product domain
- Skills: User abilities related to the product domain and technology

**Step 3. Synthesize characteristics and define goals**

We derive a proto-persona’s goals and other attributes from their behaviors. At this point, brief bullet points describing the behavior’s characteristics are sufficient. A description or two that sharpens the personalities of your personas can help bring them to life. However, too much fictional biography, especially if it includes quirky details, is a distraction and makes your personas distracting. 

Goals are the most critical detail to synthesize. Goals are best derived by analyzing the behavior patterns comprising each persona. By identifying the logical connections between each of the roles’ behaviors, you can begin to infer the goals that lead to those behaviors.

To be effective as design tools, goals must always relate directly, in some way, to the product being designed. Typically, the majority of useful goals for a proto-persona are end goals. You can expect most proto-personas to have three to five end goals associated with them. Life goals are most useful for proto-personas of consumer-oriented products, but they can also make sense for enterprise proto-personas in transient job roles. Zero or one life goal is appropriate for most proto-personas. General experience goals such as “Don’t feel stupid” and “Don’t waste time” can be taken as implicit for almost any persona. Occasionally, a specific domain may dictate the need for more specific experience goals; zero to two experience goals is appropriate for most personas.

**Step 4. Designate proto-personas types**

The next part of proto-persona construction is a key step in the process of turning your qualitative research into a powerful set of design tools. Design requires a target—the audience upon whom the design is focused. The more specific the target, the better. Trying to create a design solution that simultaneously serves the needs of even three or four personas can be an overwhelming task.

What we must do then is prioritize our proto-personas to determine which should be the primary design target. The goal is to find a single proto-persona from the set whose needs and goals can be completely and happily satisfied by a single interface without disenfranchising any of the other proto-persona. We accomplish this through a process of designating proto-persona types. There are six types of proto-personas, and they are typically designated in roughly the order listed here:
- Primary
- Secondary
- Supplemental 
- Customer
- Served
- Negative

**Step 5: Expand the description of attributes
and behaviors**

Your list of bullet-point characteristics and goals arrived at in Step 4 points to the essence of complex behaviors but leaves much implied. Third-person narrative is far more powerful at conveying the proto-persona's attitudes, needs, and problems to other team members. It also deepens the designer/authors’ connection to and empathy for the personas and their motivations.

A typical proto-personas description should be a synthesis of its most important details. This becomes an effective communication tool. Ideally, the majority of your analysis should be contained in your proto-persona description.

When you start developing your narrative, choose photographs for your proto-personas. Photographs make them feel more real as you create the narrative and engage others on the team when you are finished. You should take great care in choosing a photograph. The best photos capture demographic information, hint at the environment (a proto-personas for a nurse should be wearing a nurse’s uniform and be in a clinical setting, perhaps with a patient), and capture the proto-persona's general attitude (a photo for a clerk overwhelmed by paperwork might look harried).

When creating such communication aides, it’s important to remember that proto-personas are design and decision-making tools, not an end in themselves. While power can come from creating a holistic image of a proto-personas, too much embellishment and theater can potentially make personas seem like a fluffy waste of time. This can ultimately reduce their usefulness as user models.

**Step 6. Design the proto-personas**

Once you've finished your research and understand who your proto-personas is, you're ready to synthesize everything into one representative document. Now you can open up Sketch and include all of the important details on a one-page document that can be quickly scanned and shared. It will typically include the following details:
- Goals
- Motivations
- Frustrations
- Persona Type
- Name
- Age
- Image
- Location
- Income Bracket
- Profession
- Bio or description
- Key quote",,,,,,,,,,Creating and Using Personas,Active,"Fundamentals: Defining the Experience, Definition","UX Design Core [v1 deprecated], UX Design Core",,1,,,1
explain how short-term and long-term memory’s limitations impact our designs,"If we don’t consider the limitations of memory, our designs will never be usable because they simply can’t be processed by humans.",,"```“Long-term memory evolved to serve our ancestors and us very well in getting around in our world. However, it has many weaknesses: it is error-prone, impressionist, free-associative, idiosyncratic, retroactively alterable, and easily biased by a variety of factors at the time of recording or of retrieval.”```
- Jeff Johnson, *Designing with the Mind in Mind*

```“The capacity and volatility of short-term memory have many implications for the design of interactive computer systems. The basic implication is that user interfaces should help people remember essential information from one moment to the next. Don’t require people to remember system status or what they have done, because their attention is focused on their primary goal and progress toward it.”```
- Jeff Johnson, *Designing with the Mind in Mind*",,,,,,,,,,"Designing for the Human Mind,Designing for the Human Mind",Active,"Fundamentals: Design Principles, Intro to Design Theory","UX Design Core [v1 deprecated], UX Design Core",,1,,,1
explain how the limits of our attention impact our designs,"If we don’t consider the limitations of attention, our designs will never be usable because they simply can’t be processed by humans.",,"```""The human brain has multiple attention mechanisms, some voluntary and some involuntary. They focus our awareness on a very small subset of the perceptions and activated long-term memories while ignoring everything else. That tiny subset of all of the available information from our perceptual systems and our long-term memories that we are conscious of right now is the main component of our short-term memory, the part that cognitive scientists often call working memory. Don’t think of working memory as a temporary buffer where perceptions and memories are brought to allow our brains to work on them. Instead, think of it as the combined focus of attention—the currently activated neural patterns of which we are aware. The number of items in short-term memory at any given moment is extremely limited and volatile.```
- Jeff Johnson, *Designing with the Mind in Mind*

Since our working memory is so limited in capacity, we can quickly overwhelm it by presenting users with too much information at a time. Therefore, we need to be extremely careful about how much information we present at a given point in time.",,,,,,,,,,"Designing for the Human Mind,Designing for the Human Mind",Active,"Fundamentals: Design Principles, Intro to Design Theory","UX Design Core [v1 deprecated], UX Design Core",,1,,,1
explain what universal design guidelines help us overcome the limitations of memory and attention,Knowing the universal design principles that overcome the limits of memory and attention can help you design more usable experiences.,,"While the limitations of memory and attention can seem insurmountable, there are some universal design principles that we can use to ensure that our solutions are designed with the mind in mind. The principles are as follows:

- Accessibility
  - Objects and environments should be designed to be usable, without modification, by as many people as possible. Everyone’s memory is different, so we need to be cognizant of what we’re asking of our users. Designs that serve everyone's memory can be a boon for everyone.
- Archetypes
  - Universal patterns of theme and form resulting from innate biases or dispositions. By using archetypes we tap into shared memories and understanding.
- Chunking
  - A technique of combining many units of information into a limited number of units or chunks, so that the information is easier to process and remember.
- Confirmation
  - A technique for preventing unintended actions by requiring verification of the actions before they are performed. If we’re distracted or not paying attention, confirmation prevents us from doing something we didn’t intend.
- Consistency
  - The usability of a system is improved when similar parts are expressed in similar ways. If everything is consistent, it is easier to learn and remember.
- Constraint
  - A method of limiting the actions that can be performed on a system. The less we have to remember, the less short-term memory required and the faster we pass actions to long-term memory.
- Depth of Processing
  - A phenomenon of memory in which information that is analyzed deeply is better recalled than information that is analyzed superficially.
- Exposure Effect
  - Repeated exposure to stimuli for which people have neutral feelings will increase the likability of the stimuli.
- Forgiveness
  - Designers should help people avoid errors and minimize the negative consequences of errors when they occur. If users are distracted and do something by accident, helping them undo an error is critical.
- Hick’s Law
  - The time it takes to make a decision increases as the number of alternatives increases.
- Inattentional Blindness
  - The failure to cognitively process a stimulus that is presented in clear view, leaving the observer without any awareness or memory of the stimulus.
- Interference Effects
  - A phenomenon in which mental processing is made slower and less accurate by competing mental processes.
- Mental Model
  - People understand and interact with systems and environments based on mental representations developed from experience. Our memories are malleable and we synthesize our understanding into mental models.
- Performance vs. Preference
  - The designs that help people perform optimally are often not the same as the designs that people find most desirable.
- Serial Position Effects
  - A phenomenon of memory in which items presented at the beginning and end of a list are more likely to be recalled than items in the middle of the list.
- Visibility
  - The usability of a system is improved when its status and methods of use are clearly visible.
- Von Restorff Effect
  - A phenomenon of memory in which noticeably different things are more likely to be recalled than common things.",,,,,,,,,,Designing for the Human Mind,,Fundamentals: Design Principles,UX Design Core [v1 deprecated],,1,,,1
de-construct a design’s visual hierarchy,"Visual hierarchy is how we establish priorities and context in a design. Elements that are higher in the hierarchy are more important than elements that are lower. Therefore, de-constructing a visual hierarchy helps you understand what its designer was prioritizing.",,"By practicing de-constructing hierarchies, we’re exposing ourselves to different techniques and ideas, which we can then use in our own designs. Steve Jobs once said, “Good artists copy; great artists steal.” 

What Steve was getting at is that by consuming and reviewing other designs, we can learn and internalize techniques and ideas that we can re-purpose for our own design needs. We’re not trying to go out and copy every single detail in a design, we’re unpacking their essence and re-applying it in our own context. So, practicing deconstructing a hierarchy is one way for us to begin “stealing” or better yet “re-using” ideas from other designers.

While there are a variety of techniques for de-constructing a visual hierarchy, the following is a good baseline approach that you can grow from as you practice.

1.  Identify eye-tracking pattern
  - First, try and understand what eye-tracking pattern is being used here. This way you can understand the big picture layout and the prioritized pieces of the UI.
2.  Evaluate Text Hierarchy
  - Next, we can look at the text hierarchy. Since content is the most important part of any UI, understanding the text hierarchy shows us the most important pieces of content on the page.
3.  Evaluate Compositional Hierarchy
  - Now that we’ve taken a look at our text, we can turn our attention to the composition. Here we're looking at how the rest of the page's layout, iconography, images, and design influences the visual hierarchy.
4.  What’s the point of this UI?
  - Finally, now that we’ve reviewed the hierarchy, we can determine the unique value proposition of this page to see what this page is all about.",,,,,,,,,,"""Visual Hierarchy, Typography, Color Theory""",Active,Fundamentals: Design Principles,UX Design Core [v1 deprecated],,1,,,1
identify the various elements of typography,"As we can recall from our Content Strategy lesson, content is the most important part of our UX. Therefore, presenting that content is also extremely important. The best and quickest way to improve our content’s presentation is to focus on the font.",,"All fonts are unique and have radically different impacts on our content and thus our design. Some fonts convey a lot of personality and can be useful for communicating a brand identity. Other fonts are designed to be incredibly usable and easy-to-read.

In order to use fonts effectively, we need to understand how to talk about them and describe their differences. To do that, we can use the following terminology.

- Typeface: refers to the specific design of the letters, like Times New Roman or Helvetica.
- Font: font refers to a particular style or size of a typeface. For example, 10 point regular or 24 point bold.
- Character: an individual symbol of the full character set that makes up a typeface. It may take the form of a letter, number, punctuation mark, etc.
- Serif: a short line or stroke attached to or extending from the open ends of a letterform. It also refers to the general category of typefaces that have been designed with this feature.
- Sans Serif: the general category of typefaces, or an individual typeface, designed without serifs.
- Italic: refers to a slanted version of a typeface (slants from left to right). A true italic is uniquely designed, more than a tilted version of the upright (a.k.a. “roman”) typeface.
- Font Weight: the thinness or thickness of a font.
- Baseline: the imaginary line where most letters and other characters sit.
- Cap Line: the imaginary line that marks the upper boundary of capital letters and some lowercase letters’ ascenders.
- X-Height: refers to the height of a typeface’s lowercase letters. It’s also what we use to distinguish between ascenders and descenders.
- Descender: a piece of a letter that extends below the baseline.
- Ascender: a part of a lowercase letter that rises above the main body of the letter, or above the x-height.
- Tracking: refers to the uniform amount of spacing between characters in a complete section of text (sentence, line, paragraph, page, etc.).
- Kerning: refers to the horizontal spacing between two consecutive characters. Adjusting the kerning creates the appearance of uniformity and reduces gaps of white space between certain letter combinations.
- Leading: the vertical spacing between lines of text from baseline to baseline.

While there are more terms, these ones will definitely get you pretty far in typography. You don't have to memorize all of them at once. But, as you continue to work with and use typography in your designs you’ll find yourself reaching for these terms to help describe what you’re thinking about. Through that repetition and practice, you’ll pick them up in no time.",,,,,,,,,,"""Visual Hierarchy, Typography, Color Theory""",Active,Fundamentals: Design Principles,UX Design Core [v1 deprecated],,1,,,1
explain how colors influence human emotions,"Understanding the general influences of color on humans can help us design experiences that are better tailored to our brand, audience, and communications.",,"There’s a large body of psychology and scientific literature that examines the impact of color on our thinking and emotions. In fact, there is an entire field called color psychology dedicated to the study of hues as a determinant of human behavior.

Understanding the general influences of color on humans can help us design experiences that are better tailored to our brand, audience, and communications. 

While the following general guidelines are useful, we do have to recognize that context and cultural understanding is important. For example, in South Africa the color red is associated with mourning, but in China it represents celebration, good luck, and prosperity. So, make sure that you understand your users’ context when you’re working with color. Now, here are the colors and their general meanings.

- Red
  - Associated with fire, violence, warfare, love, passion, anger, importance, and danger.
- Orange
  - Associated with earth, autumn, change, movement, creativity, health, and vitality.
- Yellow
  - Associated with happiness, sunshine, hope, and danger.
- Green
  - Associated with new beginnings, growth, renewal, abundance, envy, wealth, and stability.
- Blue
  - Associated with sadness, calm, responsibility, refreshing, friendly, and peace.
- Purple
  - Associated with royalty, creativity, imagination, romance, and luxury.
- Black
  - Associated with power, elegance, formality, evil, death, mystery, and mourning.
- White
  - Associated with purity, cleanliness, virtue, healthcare, weddings, goodness, and mourning (in Eastern cultures).
- Gray
  - Associated with moody, conservative, formal, and sophistication.
- Brown
  - Associated with earth, wood, stone, dependability, reliability, and dull.",,,,,,,"""Color Theory for Designers, Part 1: The Meaning of Color""",,,"""Visual Hierarchy, Typography, Color Theory""",Active,Fundamentals: Design Principles,UX Design Core [v1 deprecated],,1,,,1
understand how to get better at designing,"No one is a great designer overnight. It takes a lot of practice. But, we can speed up the process with a few quality practice techniques.",,"The best way to become a better designer is to practice, practice, practice. Here are some techniques for practicing:

1.  Recreate designs from [Dribbble.com](https://dribbble.com)
  - Trying to recreate other designers’ finished work is an incredible way to get better at design. You’ll learn more about your design tools, how to unpack designs, and learn new ideas.
2.  Work on side projects or fake briefs
  - Sometimes it’s not effective to work on just a design with no context. So, working on a side project or coming up with a “fake” project brief can provide that additional context.
3.  Help non-profits 
  - While you shouldn’t work for free in most cases, helping out a non-profit for some practice and a portfolio piece is generally a win-win. Just be sure to set expectations up front!",,,,,,,,,,"""Visual Hierarchy, Typography, Color Theory""",Active,Fundamentals: Design Principles,UX Design Core [v1 deprecated],,1,,,1
explain what is meant by the phrase “responsive design”,"Responsive design is the gold standard best practice approach for designing interface. So, having an understanding of it is crucial to a UX designer's success.",,"The idea of responsive design can be traced back to an article by Ethan Marcotte called Responsive Web Design. It was published in A List Apart in 2010, and it was the first time the concept of responsive design had been clearly articulated.

Ethan described responsive design like this: 
```“Rather than tailoring disconnected designs to each of an ever-increasing number of web devices, we can treat them as facets of the same experience. We can design for an optimal viewing experience, but embed standards-based technologies into our designs to make them not only more flexible, but more adaptive to the media that renders them. In short, we need to practice responsive web design.“```

Now that we had some terminology to describe this problem we were facing, Ethan went on to describe how we could technically implement a solution using media queries. Prior to media queries, we didn’t have a technically feasible way to make a website responsive. So, even if we had started designing responsively it would have never caught on. But, thanks to Ethan’s technical explanation, responsive design could be easily implemented on the web.

This was a pivotal moment for UX designers. We had an understanding of the challenge we faced and a way to technically solve it.",,,,,,,,,,"""Designing for the Responsive Web, Visual Hierarchy in a Dynamic Screen World""",Active,Fundamentals: Design Principles,UX Design Core [v1 deprecated],,1,,,1
"describe what adaptive and responsive design are, how they differ, and why they’re important to UX designers","These days, we have two primary approaches to design a responsive website. We can either use adaptive or responsive design.",,"According to UXPin, 
```“responsive [design] is fluid and adapts to the size of the screen no matter what the target device. Responsive uses CSS media queries to change styles based on the target device such as display type, width, height etc., and only one of these is necessary for the site to adapt to different screens. Adaptive design, on the other hand, uses static layouts based on breakpoints which don’t respond once they’re initially loaded. Adaptive works to detect the screen size and load the appropriate layout for it.”```


So in responsive design, we don’t try to design for a particular screen size. Instead, we try to have a fluid design that can grow and shrink organically depending on the screen size.

In adaptive design, we’ll pick 3 to 6 screen sizes that the majority of our users use and then try to design a distinct experience at each of those sizes.

Back in the earlier 2010’s, when designers and developers were first implementing responsive design, adaptive design was the first choice for many teams. It allowed them to quickly retrofit existing sites to make them work on multiple devices and page loads were also much faster. 

Over the years, as more and more screen sizes have been introduced, responsive design began to take over as an easier way to respond to these changes. Plus, new technologies have been developed that eliminated much of adaptive design’s performance benefits. These days most sites and designers use a responsive design approach. But, you may run into some legacy projects and older clients who still use an adaptive approach.",,,,,,,,,,"""Designing for the Responsive Web, Visual Hierarchy in a Dynamic Screen World""",Active,Fundamentals: Design Principles,UX Design Core [v1 deprecated],,1,,,1
explain what a mobile-first approach to design entails,"As we’ve designed more responsive websites, we’ve come up with some best practices. The most important of these is a mobile-first approach.",,"To understand a mobile-first approach, we need to first look at the terms progressive advancement and graceful degradation.

Progressive advancement means that when we design a product, we start with the simplest version of the UI, like the mobile screen, and then we add functionality as we iterate towards larger, more complex UIs.

Graceful degradation is the opposite approach, where we start with the most complex version of the UI and then remove features until it’s at its simplest form.

As you may have guessed, in order to follow a mobile-first approach, then you’d need to use progressive advancement. So, mobile-first means that we start the product design from mobile and then expand its features as screens grow.

We take this approach for several reasons.
- First, it makes us prioritize the interface even further. Because space is such a luxury on mobile, we need to really consider what we should be showing on the screen and how users will interact with it.
- Second, mobile phones are now used more than computers to access digital products. So, we should pay extra attention to our mobile designs if the majority of our users are going to be using them.
- Finally, from a technical standpoint, it is easier to code the mobile version first and then add features than it is to do the other way around.

Putting this all together, when we’re designing our responsive products, we should be using a mobile-first approach.",,,,,,,,,,"""Designing for the Responsive Web, Visual Hierarchy in a Dynamic Screen World""",Active,Fundamentals: Design Principles,UX Design Core [v1 deprecated],,1,,,1
design a responsive hierarchy,Being able to design a responsive hierarchy is a critical skill to master.,,"Designing a responsive hierarchy is just like designing a normal one, except we’ll be creating a few different versions. Typically, we usually just create a mobile and a desktop version of a design. But, depending on the scope of the project and the importance of given breakpoints to your users, you might have to create additional interfaces.

Here is a general process that you’ll refine as you practice it.
- Prioritize mobile features - we can’t add everything to a mobile experience, so prioritize the content that is critically important.
- Research the sizing constraints on mobile - your entire visual hierarchy needs to be scaled down, so take some time to understand and experiment with smaller sizes.
- Design the mobile version of your product
- Design the desktop version of your product with all of the features
Identify any edge-cases or specialized views that should be considered when transitioning from mobile to desktop and design them as well.
- Unfortunately, our design tools like Sketch and Illustrator aren’t great at responsive design. So, you’ll need to work closely with the developer implementing the design to ensure it maintains your design direction. Otherwise, the developer is just going to use their best-guess, which might not be the best guess for the product.",,,,,,,,,,"""Designing for the Responsive Web, Visual Hierarchy in a Dynamic Screen World""",Active,Fundamentals: Design Principles,UX Design Core [v1 deprecated],,1,,,1
Explain what Sketch is and why it is a useful vector graphic tool,Sketch is the premier UI design software in the UX space.,,"Sketch is graphic design software that is specifically tailored for UI design. Using Sketch is pretty intuitive and there are lots of great tutorials on how to use the tool. Sketch has become so popular because it directly addresses the needs of UI designers. Before Sketch, there wasn't a world-class design tool dedicated to UI design. But, Sketch stepped in a filled that gap.

We can take a look at UXTools.co’s Design Tools Survey from 2017 to see how just how popular Sketch has become. They had about 2000 designers take their survey. In this first chart, Sketch is the predominant tool for wireframing with 48% of respondents saying that they used it. Moving on to tools designers use to design UIs, 45% of respondents use Sketch.",,,,,,,,,,,Active,,,,1,,,1
Understand the concept of “simple shapes make complex shapes”,"It can be difficult to learn how to translate the ideas in your head into a design on the page if you’ve never used design software before. To make this process easier, we can use a simple concept: simple shapes make complex shapes.",,"With design software, it is very easy to make simple shapes like rectangles, circles, triangles, and lines. Then we can take those simple shapes and put them together to make larger, more complex shapes. This concept might be a little clearer if we take a look at these examples on Dribbble:


- [Turtle](https://dribbble.com/shots/4750592-Turtle-3)
- [Shark](https://dribbble.com/shots/3914419-Sharks)
- [Dog](https://dribbble.com/shots/4302944-Shepherd-Logo-2)
- [Parrot](https://dribbble.com/shots/3402061-Parrot)

Fortunately, when designing a user interface, we’ll rarely need to make shapes that are this complex. We mostly focus on using rectangles within rectangles, which are pretty easy to work with. That said, practicing this technique with complicated shapes will make us better overall.",,,,,,,,,,,Active,,,,1,,,1
Design a wireframe using Whimsical,Designing a wireframe is a foundational skill for a UX designer.,,"#Wireframe Review

Let us begin by reviewing why we create and use wireframes. We know that a wireframe is a low-fidelity design of a digital product. A wireframe has three primary purposes. According to InVision:

1. It presents the information that will be displayed on the page
2. It gives an outline of the structure and layout of the page
3. It conveys the overall direction and description of the user interface

Wireframes are akin to the blueprint of a building. We understand the general structure of a digital product, but not the fine details. Early in the conceptual design phase, the details are not necessary. We can use wireframes as an intermediary step between sketches and high-fidelity designs. While sketches often lack enough detail for us to prototype and test, wireframes make up the difference. We test wireframes to confirm or deny our assumptions about an experience. 

#Why Create Wireframes?

We can create wireframes very quickly, and inexpensively. Wireframes are also impermanent. We create wireframes to gather information about our designs through stakeholder feedback and user research.

#What to Avoid

When we create wireframes, we want to ensure that our wireframes do not include color. We also want to ensure that we keep our font choices to a minimum. We want to leverage the size and placement of elements as much as possible to distinguish visual hierarchy in wireframes. When creating wireframes, we want to use squares and rectangles as placeholder content. For example, we can use a box with an ""x"" through the middle to convey an image. We can also use a sideways triangle in the center of a box to convey a video.

#Design Libraries 

When we create wireframes in Sketch, we can create our elements out of simple shapes as we previously discussed. We can also use design libraries to aid in our design process. Remember, we do not need to leverage design libraries as they are. We are free to change them as we see fit.

#How to Use Wireframes

We have already discussed how wireframes can be used to conduct user research. We also know that wireframes sit comfortably in between sketches and high-fidelity mockups in the design process. How can we ensure that we are asking ourselves and our users the right questions throughout the process of creating wireframes? According to InVision, some of the questions we want to ask are:

What are the intended user and business goals when interacting with this page?
Precisely how can the content be organized to support these goals?
Where should our main message and logo go?
What should the user see first when arriving at the page?
Where is the call to action?
What will the user expect to see on some regions of the page?

Remember, our wireframes are akin to the blueprint of a house. We do not need to focus on fine details at this point. Our main concern is the user experience. How is our user interacting with the design? Is our user able to accomplish his or her goal in the most effective way possible?",,,,,,,Website & App Wireframe Examples for Creating a Solid UX Design,,,Wireframes and Click-through Prototyping,Active,"Fundamentals: Design Principles, Ideation and Collaboration","UX Design Core [v1 deprecated], UX Design Core",,1,,,1
Use InVision to connect screens and share/test a prototype,Being able to click through a wireframe allows us to get valuable usability feedback from users.,,"#Prototype Review

We can think of prototypes as hypotheses. We create solutions with wireframes to show to stakeholders and test with users. Prototypes can also be realistic or hand-drawn. Today we'll be focusing on mid-fidelity wireframes. 

The type of prototype that we create largely depends on our end goals. Do we want to test the usability of the design? Do we want to check our users' sentiment towards the aesthetics of the design? We must decide the goal of our testing before creating a prototype (and therefore the design) before creation begins.

#Prototype Testing Review

Coding a product is expensive and time-consuming. Creating a prototype is cheap and fast. We develop prototypes to test designs before we spend money on coding the product. Arguments exist against building prototypes, of course. According to the NNGroup:

- Waiting for a design to be implemented before you test it means that the design works, and test participants can use it naturally.
- There is no adjustment to be made to the Agile or Waterfall processes to accommodate UX and iterative design.
- Some Lean proponents say that, with no prototype testing, there is no prototype to throw away when it (inevitably) tests poorly, so there is no waste.

When we consider these arguments, we must remember the core reason that we create prototypes in the first place. Testing final products are not only uninformed, but it's risky. 

#High-Fidelity Prototypes

When we refer to high-fidelity prototypes, we're referring to prototypes that look and feel real to the user (with few exceptions). We user high-fidelity prototypes to test visual elements, specific interactivity, and UI components. High-fidelity prototypes provide features that are important to the overall user experience. These prototypes often feel real to the user as well. Because the prototypes feel real, we'll often receive realistic feedback from our users.

#Low-Fidelity Prototypes

Although there are several benefits to testing with high-fidelity prototypes, there are also benefits to testing with low-fidelity prototypes. Low-fidelity prototypes are fast to produce. Changes to low-fidelity prototypes can happen very quickly, and in some unique circumstances, in real-time. When users test low-fidelity prototypes, they are viewing an incomplete design. Low-fidelity prototypes may lead users to be more candid with their feedback. Users may also feel less compelled to be successful when testing a design.

As designers, we feel less attached to low-fidelity prototypes. Low-fidelity takes a short amount of time to produce, and therefore, a short amount of time to edit. When a low-fidelity design doesn't tell well, we're more inclined to throw it away and start over instead of half-heartedly keeping designs because of our emotional attachment to them.

Stakeholders also recognize that low-fidelity designs aren't complete. When we view incomplete designs, stakeholders tend to expect there to be significant changes and updates. When we present high-fidelity designs, it's more likely that stakeholders will push to make the design go live instead of iterating.

UX Prototypes: Low Fidelity vs. High Fidelity. ",,,,,,,"Build an Interactive Prototype in Sketch in Minutes,UX Prototypes: Lo-Fidelity to Hi-Fidelity",,,Wireframes and Click-through Prototyping,Active,"Fundamentals: Design Principles, Ideation and Collaboration","UX Design Core [v1 deprecated], UX Design Core",,1,,,1
create a site blueprint,Site blueprints are one of the most common and useful IA deliverables we can create.,,"While a true information architect would have many deliverables that they can produce, as user experience designers we typically focus on blueprints. 

Blueprints are essentially diagrams of our content and are a tangible representation of our information architecture. They're similar to our user flows, but they take into account context, content, as well as our users.

To create a site blueprint, we'll follow this process:

1. Understand the context
  - By this point, it should come as no surprise that we start by reviewing any UX work done up to this point. In particular, we're interested in reviewing any user research, business objectives, user flows, and existing content. As we review this information, we're trying to understand what the content needs are going to be for the organization, how they currently organize their content, and how our users expect the content to be organized.
2. Organize the content with card-sorting
  - Once you've reviewed everything and determined the current content ecosystem, you're ready to begin developing a new IA for the product. To do that, you'll want to try and categorize all of the existing content and planned content into broad groups. For example, if your company has a bunch of lightbulb products try grouping them into categories based on their size, lumens, 
wattage, or other criteria.
  - After you have some groupings, you can perform a card-sorting exercise. Card-sorting is an exercise that helps us understand how to organize offerings so users know what you have and how to find it. In practice, this means getting a bunch of index cards or post-it notes and writing out all of the features or pages of your website and then having users group the cards as they see fit. This technique helps us understand our users’ point-of-view and how they would expect our website to be organized.
  - To perform a card-sorting exercise, write your groupings on a bunch of index cards. Then, invite users and stakeholders to organize the cards as they see fit. After several iterations, patterns should begin to emerge. These patterns can now inform your site blueprint.
  - It’s important to remember that card sorting is a tool to inform our efforts, so our site blueprint doesn’t need to be an exact match of our card sorting results. Instead, since we have the full picture of the project, we should be comfortable overruling these results when it makes sense.

3. Create a site blueprint
  - While our card sorting helped us organize our content into distinct groups, our site blueprint lets us connect the dots and describe the relationships between our features. 
  - There’s no one way to organize your site blueprint, but this approach works well for any size project. To start, create an Excel document. Then, using your findings from the card-sorting exercise, create a row for each page your product will need. For each page, make sure to add details about the content that will live there, where it sits in the site's hierarchy, unique features/design considerations, and any additional details that are relevant to you. 
4. User test sitemap
  - Finally, you're ready to test your sitemap. The pages and hierarchy you created in the site blueprint are what you'll use for your sitemap. To test it, write each page on an index card. Then on the bottom of each card, write out the links that exist on that page. Next, come up with some user tasks that you'd like users to accomplish on the site. Finally, you can have users start at the first page in your hierarchy and you can test how they'd navigate to different pages to complete the task. This is a great way to see if you're page labeling makes sense and if users can find the content they want.",,,,,,,,,,Intro to Information Architecture (IA),Active,"Fundamentals: Defining the Experience, Definition","UX Design Core [v1 deprecated], UX Design Core",,1,,,1
explain key fundamental considerations of group creativity.,,,"Creativity is an open book. It is idea generation. Creating something from nothing or assembling new things from old things. Absurd ideas are put on the table—welcomed at the table. Creativity is often a solo act. You reach deep inside to crack open whatever is lurking in your subconscious and let it out. The research has shown that individuals can often generate more ideas and more creative ideas than a group can in the same time constraints. 

However, it is becoming increasingly difficult in the modern world to move from creative idea to product independently. You need a team. 

When you add human interaction, creativity suddenly has another dimension of complexity to deal with. Social cues and perceived social hierarchy can affect the flow of creativity. 

One impact of this is that people can begin to bandwagon around a specific idea, fixating on the ideas from the loudest voice or the ideas of the highest authority figure. 

Another impact is that, as ideas get floated, people can begin to defend their territory so to speak as well, conflating their own self worth with the perceived reception of their ideas.

Others in a group hold back their ideas because they’re not the fastest talker or the loudest. They’ll hold back their ideas because others are taking the stage more readily.

Digital design work is almost always done in collaboration with at least one other person and generally requires the ability to work closely and effectively with others to create a great product. Thus it can suffer from the complexities inherent in group creativity. 

Because of the complexity of software and business solutions, it’s not really possible for one person to be the source of creative vision. Sure, one person will need to act as the deciding power on what path to take, but collaborative creativity will be required along the way by all members of the team. The work of the group will be required to refine the creative ideas into workable business solutions. That is, the innovation that moves a business forward.

Most companies are beginning to recognize that innovation is a key to growth in the modern economy. “Win through innovation or lose the game.” Without innovation, products become commoditized. Businesses that don’t innovate tend to fizzle, because the only thing they can compete on is price. Eventually, someone else comes up with a novel way of doing things or adds some other level of quality. Innovation trumps the commodity.

UX design work is one of the primary places companies can create a culture of innovation. UX design as a field has built tools and processes and systems that can help make the messy process of creative collaboration go more smoothly. By involving the full product team in the creative process, UX designers can help increase buy-in from team members for the direction of the project. 
Workshops and activities can help teams shave off the rough edges of their creative efforts to move forward their product design more efficiently.

A UX designer takes a leading role in their organization to advocate for collaborative creativity and practices deliberate and systematic exercises that have shown to help improve collaboration and innovation in organizations.

He or she often facilitates workshops that help promote ideation and help prioritize or clarify direction for a product. This position allows UX designers to build the team’s ability to function together effectively to get the best results for their product.

Facilitating workshops can be part of the creative process to bring all the complexities of group work into harmony leading to quicker solutions to problems, more shared understanding within the group, and overall better designs in the end.

UX design processes and workshops help corral the messy creative process to promote innovation, which is a key to business success.",,,,,,,,,,Group Creativity and Leading UX Workshops,,"Fundamentals: Ideation and Creativity, Ideation and Collaboration","UX Design Core [v1 deprecated], UX Design Core",,0,,,0
explain the model for facilitating UX workshops.,"A UX workshop is really any group activity that is aimed at moving the product design cycle forward, especially as those activities help center the group on user needs and objectives. Examples of UX workshops include brainstorming sessions, affinity diagramming, assumption analysis and prioritization, and design sprints.

A UX designer usually facilitates UX workshops during the ideation phase, but there are workshops UX designers can conduct during discovery and definition phases to help guide those efforts as well. There are also workshops that can last days and that span all phases of the product design cycle. These workshops are often called sprints and are usually facilitated by UX designers. We’ll cover design sprints later in the program.

The UX designer’s role rests at the nexus of business concerns, user interaction, and the technical development. That position offers a convenient rallying point for gathering the disparate parts of an organization together. It becomes an opportunity to help the whole team understand the user who is the beneficiary of the product and help unify the vision of what the team is creating and why it matters. 

Each project and organization is different. It’s good to develop a belt of tools you can use. As you move through the product design cycle, it may be beneficial at almost any point along the process to perform a UX workshop to get the team past a stumbling block that is halting progress.

Who you invite to the group depends on the workshop. You should almost always keep the group at less than 10 people, including facilitator. The team working on the product feature that is being considered in the workshop is always the right group. If you are in ideation mode, bringing in a more diverse group is helpful to get a broader perspective. 

Also, for ideation workshops, avoid bringing in folks too high up in the company hierarchy as that can disrupt creative output. Those folks will be needed to make decisions on proposed ideas eventually, but for the purposes of creativity, keep them out of the room.

The model that follows can be used to facilitate a brief workshop of only 30 minutes or a full-day workshop. 

Note: When facilitating a workshop, you should avoid acting as a contributor or participant of the workshop. As the authority figure of the workshop, your contributions would be given undue weight. Sometimes the size of the group means you would likely need to participate. In that case you can also take turns with others in the group acting as facilitators for individual exercises. ",,"The Nielsen-Norman Group recommend a three-step model for facilitating a UX workshop: Explain, Execute, Examine.


Explain
- Begin with a brief introduction and explanation of the workshop. Keep it brief, but if this is a first-time experience for group members, more detailed explanation might be necessary. The key is to make sure everyone knows the meeting’s purpose and how it will run.
- Introduce the activity.
- Describe how to do the activity.
- Walk through the process and any steps needed to complete the activity.
- Define roles for different group members as necessary. Explain each role.
- Discuss context.
- Why is this activity important?
- Give example of other contexts where the activity might be effective.
- Answer any clarifying questions
- Avoid any biasing types of statements that could influence the outcome of the exercise. For example, don’t suggest what specific things might be learned from the activity. The learnings will emerge from the process. “As a facilitator, you are responsible for establishing a neutral, positive foundation prior to the execution of the exercise.”

Execute
- Start the activities once everyone understands what they are to do. As much as possible, mingle among the groups to offer assistance.
- Unless you were assigned a specific role for the activity, as facilitator, you should attempt to remain out of focus for the duration of the activity. Help move the activity forward if things begin to stagnate or if anyone is not clear on what they are supposed to do. Observe and listen so you can point out any learnings or other important information during the postexercise discussion.
- Facilitators aren’t the subject matter experts. Your role is managing the logistics of the activity and helping participants teach, learn, and contribute. Outcome-specific questions should be reframed and directed back to the group.
- For example, if asked Is this the right direction? You could reply:
How does the team feel about this direction?
What other directions did you consider before choosing this one? Why?
How did you arrive at this direction?
What about this direction gives you concern?
- Track and vocally state time to the room to help the team focus. Common times to announce include: the halfway mark, the 5-minute mark, and a 1-minute final heads up.
- Examine Discussing the outcomes following the activity is done in three parts: present, reflect, and connect.

Present
- Have groups present their outcomes. Follow a predetermined order and time for each presentation.
- Ask questions and invite questions from other groups to help deepen everyone’s understanding of the presented concepts.
- Don’t fear silence. Give people time to think and formulate their comments or questions. Participants are more likely to share if there is a pause in the room (humans naturally dislike silence in conversations and will attempt to fill it).

Reflect
- Synthesize what was learned from the activity by asking participants a series of reflective questions:
- What did you get out of it?
- Where and how did you get stuck? - What was fun/hard/frustrating?
- What did you learn?
- Encourage participants to describe the exercise from their own point of view. If there were multiple roles in the activity, ask participants to explain what happened from the viewpoint of each role. Allowing the participants to reflect on and discuss the activity helps clear the excitement of the activity and lets them start the realization process.
- If you have trouble getting participants to open up, repeat back some of the comments you heard during the activity:
- Did anyone else in the room experience this? How did you overcome it?
- What surprises you about (output A) vs. (output B)?
- What conclusions can we draw from this?

Connect
- Connect the output of the activity to what was previously learned and what’s left to learn. Synthesize the outputs, especially if they will be used in subsequent activities.",,,,,,,"Model for UX Workshop Exercises,Planning Effective UX Workshop Agendas",,,Group Creativity and Leading UX Workshops,,"Fundamentals: Ideation and Creativity, Ideation and Collaboration","UX Design Core [v1 deprecated], UX Design Core",,1,,,1
demonstrate they can facilitate a group UX workshop or exercise.,,,,,,,,,,How to Plan and Run the Perfect UX Workshop,,,,,,,,0,,,0
explain how to facilitate the following group workshops or exercises:,"- Brainstorm
- Affinity diagramming
- Dot Voting
- Mash-up",,"There are numerous workshops and exercises UX designers can facilitate with their teams. Brainstorms are common, but often maligned because of the possibility of ""group think"". We will discuss three workshops, including brainstorms, in order to demonstrate the facilitation model as well as the steps for each type of workshop.","**Brainstorms**
The Osborn model of brainstorming emerged from the advertising industry as a way to produce more creative ideas from the ad team. Osborn was aiming for “ideative efficacy,” which was indicated by—
reduced social inhibitions among group members.
increased idea generation and increased overall creativity of the group.

Osborn found through his work that two principles led to the best creative outcomes:
- Deferring judgment
- Reaching for quantity.

The two principles can be further supported by four guidelines for brainstorming:
- Go for quantity
- Withhold criticism
- Welcome wild ideas
- Combine and improve ideas

By focusing on quantity, it enhances opportunities for more divergent idea production. By focusing on quantity rather than quality, quality actually improves. The greater the number of ideas generated, the bigger the chance of producing solutions that are innovative and effective.

In brainstorming the objective is to not pass judgment on ideas as they are generated. Criticism can come later in the process after ideas have been amassed. Suspending judgment reduces inhibitions in participants. They generally feel more free to suggest unusual ideas.

Wild ideas are encouraged in brainstorms. Wild ideas aren’t necessarily the ideas that end up being the most practical, but rather the new perspectives emerging from wild ideas often trigger new ways of thinking that often result in better, more creative solutions that can be made practical and eventually implemented.

Combine and improve ideas:
- The primary value in group creativity is the synergy derived through considering ideas suggested by others. Building on others’ ideas allows for expanding the creative pool and opens the group to new paradigms of thought or understanding. This can lead to a higher quality of creative ideas.

Shortcomings:
- Blocking—Only one person can share something at a time.
- Collaborative fixation—Groups become fixated on specific domains or ideas rather than taking opportunity to expand beyond those domains. Individuals don’t have the same problem quite as much.
- Social matching—Participants tend to match their production to the rate of the group average. Low-performing groups tend to bring down high performers. But the reverse is also true. High-performing groups tend to bring up low performers.

**Affinity Mapping**
UX teams use affinity mapping for quickly organizing data obtained through research or ideation efforts. It basically consists of capturing ideas, often on sticky notes, and then organizing them into categories and subcategories. Once organized, the ideas or data are prioritized for further work.

For in-person affinity diagramming meetings, you should find a room with walls that have surfaces that can be used to place sticky notes. For an online affinity diagramming experience, using a virtual whiteboard can work—something like Milanote, Lucidchart, Invision Freehand or even a Google Doc. You need some product that allows all participants to edit the document simultaneously. The visual nature of Milanote or Lucidchart will likely be easier for collaborators to interact with, but even just moving text around in a Google Doc can achieve essentially the same purpose.

Prepare the Room: 
- Sometimes you can conduct an affinity mapping exercise immediately following a brainstorm. Other times, you might be organizing notes from a previous exercise or research projects. Whatever notes you’ll be working with, you should have each note written on a single sticky note (or digital card). Place them all on the wall or on the digital whiteboard.

Create Categories: 
- To some extent you want your categories to emerge organically from the data, but in some contexts you might know some common categories that could help people begin to sort through the notes. Write the categories on sticky notes or cards and place them on the wall or board. You can create a “?” category for any notes that are unclear.

Make Sure Essential Tools Are Available:
- Have markers or pens, blank sticky notes available. Make sure participants can access the software you use.

The Exercise Meeting could take up to 2-3 hours depending on volume/complexity of notes 
- Sort into top-level categories 
- Sort categories into sub-categories
- Present and Summarize categories 
- Prioritize categories

Prioritization For Usability Test Findings 
- Each note receives a rating on a scale of high-medium-low severity. Use majority voting from the group for each item.
- Alternatively, use dot voting for marking 3 most important notes in a category or give 3 votes to each individual

**Mash-up**
A variant on brainstorming is the Mashup, a technique used by the design firm IDEO.

To conduct a mash up exercise, you use four basic steps: 
- Frame
- Narrow
- Generate
- Mash up

Frame: 
-State the challenge with “How Might We” phrasing. For example, “How might we design a better German goods online store?” Or “How might we design a better coding bootcamp?”

Narrow: 
- Within that framing, narrow your focus to two broad, unrelated categories, for example online shopping and weather.gov. The categories should not be related to each other, but one should tie in to your “How Might We” statement. Think outside your industry.

Generate:
- This part of the process is like a brainstorm, but less about wild ideas and more about capturing attributes. Take two minutes to start writing down as many elements of each category as you can. Start with one of the categories and then move to the other after about a minute.",,,,,,"Beyond Brainstorming: Mash up,Affinity Diagram,Affinity Diagramming for Collaboratively Sorting UX Findings ...,Brainstorming with IDEO",,,Group Creativity and Leading UX Workshops,,"Fundamentals: Ideation and Creativity, Ideation and Collaboration","UX Design Core [v1 deprecated], UX Design Core",,1,,,1
understand and explain the rules of manual reference counting,"Over time, Objective-C programmers came up with rules to follow to make sure you did memory management correctly. These rules are no longer relevant if you're writing Automatic Reference Counting (ARC) code, because it follows the rules for you, but knowing them will help you understand what ARC is doing.",,"There are five rules for memory management in manual reference counting mode:

```
1. If you get an object from a method that starts with alloc/init, new, copy, or mutableCopy, you own it.
2. Otherwise, call retain to take ownership of an object.
3. If you own an object you must release it (or autorelease it) when you’re done.
4. If you don’t own an object you must not release it.
5. If you need an object to stick around longer than the current method, you must own it.
```

If you follow these rules, your code will do the right thing as far as memory management is concerned.",,,,,,,,,,Memory Management,,Objective-C Part 2,iOS Development Core,,1,,,1
Make a list of weekly/monthly/yearly accomplishments ,,,,,,,,,,,,,Imposter Syndrome Presentation #1,,Tips and Tricks on How to Advance your Life and Career,Principles for Success,,0,,,0
Remember a time when they trusted their instincts and it worked out. ,,,,,,,,,,,,,Imposter Syndrome Presentation #1,,Tips and Tricks on How to Advance your Life and Career,Principles for Success,,0,,,0
"Write down what they're strongest at right now curriculum- wise, as well as what they feel weakest on. Keep practicing and working on all of those things. Knowing your strengths and weaknesses will help eliminate Imposter Syndrome.",,,,,,,,,,,,,Imposter Syndrome Presentation #1,,Tips and Tricks on How to Advance your Life and Career,Principles for Success,,0,,,0
Fill out feedback form: https://goo.gl/forms/Wg6NtIwCRrEHinvm2,,,,,,,,,,,,,Info Session - Principles for Success,,Tips and Tricks on How to Advance your Life and Career,Principles for Success,,0,,,0
Make a list of weekly/monthly/yearly accomplishments,,,,,,,,,,,,,,,,,,0,,,0
Remember a time when they trusted their instincts and it worked out.,,,,,,,,,,,,,,,,,,0,,,0
explain how hand-drawn (sketched) wireframes are beneficial to the product design cycle,"Sketched wireframes are imbued with inherent obsolescence. In other words, the paper version of your product can never be the final version. It always has to be translated to digital. This impermanence provides a psychological foundation that helps a designer be willing to try and fail at ideas. Knowing it is not the final product means that more boundaries will be stretched and ideas considered. No one expects a sketch to be polished.",,"To be comfortable with sketching, you need to practice. You might be asked to sketch a UI concept as part of a hiring interview. You might be asked to sketch concepts with clients as part of working on a site redesign. You might collaborate with a team of designers and developers to create an enhancement to or a new feature for your product. Sketching is a universal skill that can benefit you in many ways in your career. Build confidence through deliberate practice.",,,,,,,UIE — Why Sketch,,,Rapid Sketching; Sketching Interfaces; Paper Prototypes,,Fundamentals: Ideation and Creativity,UX Design Core [v1 deprecated],,1,,,1
feel confident about their ability to quickly sketch interface concepts,,,,,,,,,,,,,Rapid Sketching; Sketching Interfaces; Paper Prototypes,,Fundamentals: Ideation and Creativity,UX Design Core [v1 deprecated],,0,,,0
create a paper prototype of a multi-step interface interaction and present it to others for feedback,,,,,,,,,,"Paper Prototyping Article,UXPin—Paper Prototyping Practical Beginner's Guide",Mozilla Paper Prototype Case Study,,Rapid Sketching; Sketching Interfaces; Paper Prototypes,,Fundamentals: Ideation and Creativity,UX Design Core [v1 deprecated],,0,,,0
explain how a change of venue can impact the creative process,,,,,,,,,,,,,"""Getting Out of Your Head, Getting Out of the Office, Personal Productivity""",,Fundamentals: Ideation and Creativity,UX Design Core [v1 deprecated],,0,,,0
convert between UIImage and CIImage,,,,,,,,,,,,,Core Image,,iOS Media Programming,iOS Development Core,,0,,,0
use the documentation to find and understand available Core Image filters,,,,,,,,,,Core Image Filter Reference,,,Core Image,,iOS Media Programming,iOS Development Core,,0,,,0
apply Core Image filters to images,,,,,,,,,,Core Image Programming Guide,,,Core Image,,iOS Media Programming,iOS Development Core,,0,,,0
connect UI controls to Core Image filter settings,,,,,,,,,,,,,Core Image,,iOS Media Programming,iOS Development Core,,0,,,0
xzcv,,,,,,,,,,,,,,,,,,0,,,0
use AVFoundation’s camera capture APIs to capture video from the camera,,,,,,,,,,,,,Video,,iOS Media Programming,iOS Development Core,,0,,,0
use AVPlayer to play video,,,,,,,,,,,,,Video,,iOS Media Programming,iOS Development Core,,0,,,0
filter video coming in from the camera using Core Image,,,,,,,,,,,,,,,,,,0,,,0
play audio using AVAudioPlayer,,,,,,,,,,,,,Audio,,iOS Media Programming,iOS Development Core,,0,,,0
record audio using AVAudioRecorder,,,,,,,,,,,,,Audio,,iOS Media Programming,iOS Development Core,,0,,,0
store audio on disk efficiently,,,,,,,,,,,,,Audio,,iOS Media Programming,iOS Development Core,,0,,,0
explain what quantifiable data is (and isn't),"Modern computers are capable of processing remarkably complicated input - natural language, pictures, audio, and more. But while this has lead many to believe that computers are ""intelligent"", as data scientists we must understand that at its base quantifiable data is simple and structured, and is the building block that any of these applications starts from.","Main goal here - break down common misperceptions/simplifications, and establish a simple but robust concept for what ""data"" really is. It's not magic, and if it's ill-formed then it's ill-formed to the computer too (or ""unstructured"" at least).","It is widely known that computers are binary - at their base, everything is a number, and specifically a sequence of 0s and 1s. While this is a simplification, it is a useful one for making the critical point that, to a computer, data must be numeric and consistent.

Numeric means ""made of numbers"", and we are certainly allowed to go beyond 0 and 1 (the underlying architecture translates the representation for us). So 2, -0.5, and 3.14 are all fair game - and in most stituations, scientific notation like 7e0 (equivalent to 7 * 10^9) is also allowed. Note that these are all *finite* - some languages can represent infinity (`from math import inf` in Python >3.5). Also in Python, for floating point values (numbers with decimal points) the precision (how many digits they have) is a function of your available memory - so it can be fairly long, but sitll finite (no representing all of pi).

Consistent means that, for any given ""thing"" (aspect of your data usually called features) you're representing, you do it the same way each time. If sometimes you write a number with numerals (3) and other times you spell out the word (""three""), the computer does not know what you mean even though a human would be fine with it. This is a particularly common problem for manually created spreadsheets from laypeople - there is an expectation that computers are ""smart"" these days, but in this situation the only ""intelligence"" is cleaning the data ahead of time with whatever logic to correct inconsistencies.

It's our job to *make* the computer smart - this means feeding it information it can learn from. And doing this well means appreciating that, while computers are much faster than humans, they are not naturally adaptive as we are. As you go deeper in this topic you'll learn about techinques to derive insight from unstructured data, but even then consistency matters and a numeric representation is the usual goal.","In order to start thinking about quantifiable data, it's good to translate ""real-world"" scenarios into data that could potentially be computed with. Consider the following example:

*Joe, Alice, and Sarah are students. Joe is male and 19 years old, Alice and Sarah are female and both 20 years old.*

Suppose we wanted to represent this with Python code. First we should think what the unit of observation is - this is the entity that is describing, the rows of a spreadsheet if we want to visualize it. The sentences are describing three people, but more specifically students.

Next, we need to determine the features - the columns of a spreadsheet, and what we ""know"" about the entities. The text describes their names, gender, and age.

As a basic representation, let's have each student be a dict containing their features, and put all students together in a list. The last step is to figure out how we're representing the features - we want them to be as numeric as possible. Names are difficult to quantify so for now we'll keep those as strings. Age is naturally a number. Gender can be treated (for the purposes of this example) as binary, so let's encode it as `is_female`.

```python
joe = { 'name': 'Joe', 'is_female': False, 'age': 19 }
alice = { 'name': 'Alice', 'is_female': True, 'age': 20 }
sarah = { 'name': 'Sarah', 'is_female': True, 'age': 20 }
students = [joe, alice, sarah]
```

Reproduce this code, and investigate and interact with the `students` object - you'll see it has all the data described in the text, and is in some ways similar (though much less featured) than the dataframes we'll be typically interacting with.","Using Python, write code that quantifies the following data:


Grow Mart, Plant Depot, and Trees'R'Us are gardening stores in a city. Grow Mart and Plant Depot were both founded in 1973, and Trees'R'Us was founded in 1985. Grow Mart has annual revenue of $265k and expenses of $183k, Plant Depot has $302k revenue and $240k expenses, and Trees'R'Us has $123k revenue and $130k expenses.

In addition to describing the above, add a feature `is_profitable`. What sort of feature should this be, and how should it be determined?
Optional stretch goal - you may be familiar with logic puzzles such as these:

![Logic puzzle](https://upload.wikimedia.org/wikipedia/commons/1/1e/Logic_grid.png)

Play a [random logic puzle](https://www.logic-puzzles.org/init.php), and use Python to encode and track the entities as you solve it.",yZihmKNXkkE,http://youtube.com/watch?v=yZihmKNXkkE,https://www.youtube.com/embed/yZihmKNXkkE,,,,"Discuss with a fellow classmate, in your own words:

- What does it mean for data to be quantifiable?
- Why is it important from a perspective of data science?
- Give an example of quantifiable and non-quantifiable data.",A First Look at Data,,Dealing with Data,DS - Statistics Fundamentals,,1,1,1,3
"distinguish between common variable types (continuous/discrete, ordinal/categorical)","In order to represent data appropriate, or fit the right sort of model, one must first know what flavor of data they have. Is it ""soupy"", continuous real values that can essentially be any number? Is it discrete, a specific enumerated set? And if it is discrete, does order matter, or is it purely categorical?

These questions have some different nuances and rules of thumb in data science than they do in pure math, so while it's great to bring any prior understanding you have, keep an eye out for potential differences as well.","This is about relating the bits of math language to the data types folks need to know about - fairly straightforward, but worth being explicit about the various ways to talk about it.","Not all numbers are created equal - and indeed, not all quantifiable things are numbers in the sense a mathematician would define it (though they'll still be represented as numbers internally on the computer).

- Continuous numbers: these are also called ""real"" by mathematicians (we're generally not concerned with [imaginary numbers](https://en.wikipedia.org/wiki/Imaginary_number) in Data Science). Anything that is floating point (e.g. 3.14) is continuous, but for many statistical approaches it can make sense to start considering something continuous as soon as it has ~30 or more ordered equally spaced values. For example, human age is often treated as continuous, even though it is usually encoded in years and so there's only ~120 unique ordered values (ages from 1-120 years old).
- Discrete ordered numbers: the age example as defined is actually discrete, mathematically. Practically for Data Science we're more likely to treat e.g. grade in school (from 1-12) as discrete ordered numbers. Depending on context and the underlying data, these may also be called ranks, scores, or other terms.
- Discrete unordered categories: many things in life can be separated into buckets, but not with a clear universal ordering of the buckets. For example, species - cat, dog, or human. This data could be represented with numbers (e.g. 1, 2, 3) and a codebook (or Python dictionary) that translates to the true value. But more commonly, one-hot encoding is used - for that, see binary variables.
- Binary variables: a special case of discrete categories, where there's only two options. These are then encoded 0/1 (or False/True), and many statistical approaches can be applied to them. In practice, variables with more then two categories are often translated into a collection of binary variables - one for each possible category. For example, a species variable of cat, dog, human may become three binary variables - is_cat, is_dog, and is_human. This is called one-hot encoding, and [sklearn in Python has functionality to facilitate this](http://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.OneHotEncoder.html).

You may be wondering - what about strings? Strings are hard - a computer represents the actual object as a sequence of numbers (bytes corresponding to characters), but the semantic meaning (how we interpret it) is another matter. Later in the course we'll get to techniques to tackle this (natural language processing, vectorization), but for now strings should just be treated as labels. If each observation tends to have a unique entry for a string then it's a label of that entity (e.g. name) - if there are a few recurring strings (e.g. ""male"", ""female"") then it may actually be a categorical variable that you will want to transform or otherwise ensure is treated numerically by the algorithm you feed it to.",Revisit both the lecture notebook and the first notebook from the intro course. We'll be using that notebook to work through the material above and understand how to distinguish between variable types.,"Pick at least one Python DS library, and using documentation/examples reproduce in the lecture notebook something cool. It's OK if you don't fully understand it or get it 100% working, but do put in effort and look things up.",7unI6oGI6_Q,http://youtube.com/watch?v=7unI6oGI6_Q,https://www.youtube.com/embed/7unI6oGI6_Q,,DS Notebook 111 - A First Look at Data,,"With a fellow student, discuss:
- How are continuous and discrete variables in Data Science similar to traditional math definitions? How are they dissimilar?
- Give examples of continuous, discrete, categorical, and binary variables.",A First Look at Data,,Dealing with Data,DS - Statistics Fundamentals,,1,1,1,3
load data from multiple sources into a Python notebook,"There will be various places where you'll want to load data from - your computer, GitHub, and other websites. The data may be compressed or in different formats. You'll need to read documentation and apply problem-solving skills to get your code working in these various situations.",This should be hands-on treatment for what will be a very common task throughout challenges/assignments.,"In order to do Data Science, we need to get the data in the computer - in this case (and quite often), in a Python notebook. But while there are many tools to help, this is often one of the most time-consuming and challenging tasks, especially while new to the field. It's OK for it to be a bit frustrating - but be sure to follow the 20-minute rule and ask for help as needed.


Two techniques to learn:
- [pandas.read_csv](https://pandas.pydata.org/pandas-docs/stable/generated/pandas.read_csv.html) is a much more powerful function than its name implies. It reads CSVs (comma-separated values), but really any sort of consistent text-encoded data (you can specify column separators besides commas). And it can take paths to local files *or* network/URLs (http, ftp, and Amazon S3).
- When in a Python notebook, you can ""shell out"" by using `!`. Try running `!ls` and you'll see it lists the local files. This is often used for e.g. `!pip install`, but another good use is the various Unix toolchain files for getting and cleaning data (wget, unzip, sed, etc.).

We'll practice both of these techniques together, and then you'll work on them yourself. These are skills you'll then be using almost every day you do data science, so it's good to spend some time on them. Explore documentation, experiment, and see what you find. Good luck!",The lecture notebook shows and discusses loading data about the flags of various countries.,Your assignment - pick a dataset and do something like the lecture notebook.,Nq3FJnfste4,http://youtube.com/watch?v=Nq3FJnfste4,https://www.youtube.com/embed/Nq3FJnfste4,,DS Notebook 112 - Loading Data,,"Discuss with a fellow student:
- What challenges did you encounter loading data into a notebook?
- What tricks did you learn that helped?",Loading data from a variety of sources,,Dealing with Data,DS - Statistics Fundamentals,,1,1,1,3
explain what a project brief is and create one,Project briefs help our teams stay aligned throughout the project development process.,Review the project brief section in *The User Experience Team of One: A Research and Design Survival Guide* by Leah Buley,"Project briefs are an invaluable tool for helping our teams stay organized. We use them to succinctly state what the goals and expectations are for a given project. It attempts to 

```“clearly summarize the overall plan for the project: what you’re doing, why you’re doing it, relevant constraints that will drive your work, and what outcomes you expect.” ```
- Leah Buley, *The User Experience Team of One*

```“Often, when a project is beginning, everyone has distinct ideas for what the right outcome looks like. In team discussions, it’s possible for people to express their point of view and think they’re all saying the same thing, but actually have very different ideas of what they expect… [Having a brief] creates an opportunity for everyone to agree or, if not agree, at least have a productive conversating about the focus and goals of the project [or design].“ ```
- Leah Buley, *The User Experience Team of One*

You’ll typically create a project brief when you’re starting a new project or picking up an existing one. In either case, you’re trying to bring clarity and alignment to your team regarding what you’ll ultimately deliver.

Like most UX tools, there’s no right way to go about creating a project brief. But, we can use the following process outlined by Leah Buley in The User Experience Team of One to produce one. 

First, we’ll need to understand the context of our project a bit more. To do that, we can answer the following questions. Note that these questions are just to get you started - you can certainly add or remove questions as they pertain to your project.

- Business needs
  - What business needs are driving this project?
  - If this is successful, what will be the impact on business? If it fails?
  - What is the revenue model for this product?
  - What measurable impact will improving the product have?
- User needs
  - Who are your customers? Are they your users?
  - What are their primary needs?
  - What do you know about them?
  - What don’t you know about them?
  - What assumptions are you making about them that you need to validate?
- Goals
  - What are your team’s goals?
  - What are your personal goals?
  - How will you personally know if you are successful?
- Key Expectations
  - What are they expecting from you?
  - Are there any discrepancies between their picture of your role and yours?
  - What questions might they have?
  - What things should you address prior to kicking off the work?
- General Tips
  - Consider also whether there are softer, but no less important, qualities of the work that are relevant to the overall project mandate. For example, what is the product’s value proposition, and what brand characteristics should the work reinforce or activate?
  - When capturing goals, be careful not to confuse the what with the how. A how might be ‘redesigning your company website.’ The what in this case might be ‘to produce more inbound sales leads through the company’s website.’

Once you’ve answered these questions, and any additional ones relevant to your project, you can organize your answers into a coherent document that can be easily consumed by the rest of the team.

After your document is ready, be sure to share it with your team and get their agreement or input. This can be done in a dedicated meeting or by email if that’s easier. Finally, once everyone has agreed upon the brief, make sure to 

```“revisit it periodically and use it as a framework for communicating how the work is progressing toward the overall high-level goals outline.”```
- Leah Buley, *The User Experience Team of One*","Let’s create a project brief for our Tune.ly project. We’ll be using the process outlined by Leah Buley in *The User Experience Team of One*.

`1.` We’ll start by answering some guiding questions to articulate the project’s context.

- Business needs
  - *What business needs are driving this project?* We need to build the app in order to have a product to sell
  - *If this is successful, what will be the impact on business? If it fails?* If the product is usable, then we will have a viable product. If not, then the whole company fails.
  - *What is the revenue model for this product?* We have free accounts with advertising and paid accounts with no advertising.
  - *What measurable impact will improving the product have?* Since this is a new project, we can ignore this question.
- User needs
  - *Who are your customers? Are they your users?* EDM music lovers aged 16-35. They’re also our customers.
  - *What are their primary needs?* They need a fast, reliable, and personalized music listening experience.
  - *What do you know about them?* We know they’re between 16-35 years old and that they love EDM music.
  - *What don’t you know about them?* We don’t know how they currently prefer to consume their music.
  - *What assumptions are you making about them that you need to validate?* We assume that by personalizing their music experience, they’ll want to use our app.
- Goals
  - *What are your team’s goals?* Build a usable product that exceeds our users’ expectations.
  - *What are your personal goals?* To design a quality user experience.
  - *How will you personally know if you are successful?* If our final user tests are 90% successful.
- Key Expectations
  - *What are stakeholders expecting from you?* They expect me to lead the UX design process and produce a usable interface.
  - *Are there any discrepancies between their picture of your role and yours?* Stakeholders may not be aware of the quantity of work that occurs prior to design and development.
  - *What questions might they have?* What does the overall process look like? How long will this take? What will this cost?
  - *What things should you address prior to kicking off the work?* Ensure that everyone understands the overall process, key milestones, and objectives.

`2.` Next, we can organize our answers into a coherent document.

At Tune.ly, we’re developing the fastest, most reliable and personalized music listening experience for EDM fans between the ages of 16 and 35. While we’re familiar with our target users, we still need to validate how they currently prefer to consume their music and if they want a personalized music experience. We will validate these outstanding concerns during our product development process.

In order to develop the most usable app possible, we will be following a standard UX product development cycle. We’ll start with a Discovery phase to research our user and business goals. Then, we’ll add some structure to our research in our Definition phase as we brainstorm problems to solve. We’ll develop solutions to these problems in the Ideation phase before rapidly iterating through potential designs during the Prototyping phase. Once we have a feasible prototype, we’ll begin our Development process. Finally, we’ll continue to track and measure our success in the ongoing Testing phase.

At the end of each phase, we will have a milestone event where we’ll share the work completed and align everyone for the next phase of work. Following this process will be a significant investment. In doing so, we will save an incredible amount of time and money by following a user-centric approach and validating our assumptions prior to development. This will prevent future rework and allow us to move forward with product development confident that we’ve built a product users will want.

By the end of this project, we will have a viable, usable app that can enter the market. Prior to launch, we will measure its readiness via usability tests. Once our usability tests are 90% successful, we will be ready for development and launch. 

`3.` With our project brief ready, we can share it with our team. Most of the team is on board, but our CEO wants to ensure that we are building the most usable app possible. So, we’ll bump up our usability test success target to 95%.

`4.` With our project brief finished and shared, we can print it out and hang it on our desk so we can reference it throughout the project.","In your own words, explain what a project brief is and why it is valuable. Then, describe the process for creating one and brainstorm 3 additional guiding questions that you might ask in your own projects.",BSSk2hrZ3SM,http://youtube.com/watch?v=BSSk2hrZ3SM,https://www.youtube.com/embed/BSSk2hrZ3SM,,,The User Experience Team of One: A Research and Design Survival Guide,"*What is a project brief?
*When would you create one?
*Why is it a valuable tool?",Writing Project and Design Briefs,Active,Advanced Experience Definition,UX Design Core [v1 deprecated],,1,1,1,3
explain what a design brief is and create one,Design briefs help us articulate our vision for designs and work to be done so we can verify it matches other stakeholders’ assumptions.,Review the design brief section in The User Experience Team of One: A Research and Design Survival Guide by Leah Buley,"Design briefs are powerful tools for articulating and communicating your design intentions.

```“The design brief documents your working assumptions about the optimal design of the product and puts forth your hypotheses for how best to bring that design to like… It seeks to articulate the vision for the user experience and connect the dots on how that vision will be brought to life. The design brief is something you create for your team, for any stakeholders who need to approve the design direction, and for yourself.”```
- Leah Buley, *The User Experience Team of One*

While design briefs are similar to project briefs, they differ in their focus. Design briefs zero in on design specifics while project briefs outline the overall vision for the project.

You’ll typically reach for a design brief when you want to clarify your design intentions to your team and highlight any ambiguous assumptions.

To create a design brief, we can create a document that answers the following guiding questions as suggested by Leah Buley in *The User Experience Team of One*. Note that these questions are just to get you started - you can certainly add or remove questions as they pertain to your design.

- Focus
  - What is the focus of the design work? 
  - What will be created, improved, etc. as an outcome of this work?
- Audience
  - While a design brief is intended to be brief, this is an area where a little more description will enable you to double-check that your assumptions about users - their needs, mindsets, and priorities - match your teammates’ assumptions.
  - Who will the design serve? 
  - Who are the primary audiences or personas that you will be designing for?
- Feature and functions
  - What are the core screens, states, or scenarios? 
  - What pieces of the experience will be central to the product?
- Feeling
  - If you are successful, what will the feeling of the user experience be?
  - This is basically about your brand. When people use the product, will it feel fun and playful, dark and serious, or crisp and professional? 
  - As you’re talking to stakeholders and team members about how they would like to see the product take shape, you will find that in addition to talking about features and functions, people do slip in words that effectively describe the desired feeling of the product. If you notice that language and write it down, put it in the design brief.
- Restrictions and expectations
  - What constraints must be obeyed? 
  - What is most critical to the success of the design? 
  - What parts must you absolutely get right, and what things can you absolutely not do?

Once we’ve answered these questions and finalized our document, we can share it with our team to see if everyone is on the same page.","Let’s create a design brief for our Tune.ly project. In this case, let’s focus on the design we’re creating for the login page. We’ll be using the process outlined by Leah Buley in *The User Experience Team of One*.

`1.` We’ll start by answering some guiding questions to articulate the project’s context.

- Focus
  - *What is the focus of the design work?* We will be designing the login page.
  - *What will be created, improved, etc. as an outcome of this work?* We will create a design for the login page.
- Audience
  - *Who will the design serve?* This will serve all of our users.
  - *Who are the primary audiences or personas that you will be designing for?* Since this is a universal page, it will serve all personas.
- Feature and functions
  - *What are the core screens, states, or scenarios?* The design will require a login form and error states for incorrect data entry.
  - *What pieces of the experience will be central to the product?* Every piece will be central because if a user can’t log in then they can’t use the product.
- Feeling
  - *If you are successful, what will the feeling of the user experience be?* The UX will feel secure and safe yet not too challenging.
- Restrictions and expectations
  - *What constraints must be obeyed?* We must ask for their email and password
  - *What is most critical to the success of the design?* The login form must be easy to use.
  - *What parts must you absolutely get right, and what things can you absolutely not do?* We must make it simple to log in yet still make the user feel secure. We cannot let anyone access a user’s account without their authorization.

`2.` Next, we can organize our answers into a coherent document.

We are designing the login page for Tune.ly. This page will serve all of our users. It will allow them to enter their login credentials and proceed to the application. If they incorrectly enter their credentials, then it will display an appropriate error message.

Users should feel safe and secure on this page. Our tone should be friendly and polite. Repeatedly entering incorrect information can be frustrating, so we don’t want to use overly glib or obnoxious language. Instead, we should calmly present the user with the error and politely ask them to fix it.

It is critical that we ask the user for their email and password. These items represent their login credentials. For this design, we will deliver a user flow, wireframe, mockup, and prototype. Each deliverable will be user tested until it achieves a 95% success rate.

`3.` With our design brief ready, we can share it with our team. In this case, our entire team signed off on it. So, we didn’t need to make any changes.

`4.` With our design brief finished and shared, we can reference it as we work on it.","In your own words, explain what a design brief is and why it is valuable. Then, describe the process for creating one and brainstorm 3 additional guiding questions that you might ask in your own projects.",ubd6WH6UkCU,http://youtube.com/watch?v=ubd6WH6UkCU,https://www.youtube.com/embed/ubd6WH6UkCU,,,The User Experience Team of One: A Research and Design Survival Guide,"*What is a design brief?
*When would you create one?
*Why is it a valuable tool?",Writing Project and Design Briefs,Active,Advanced Experience Definition,UX Design Core [v1 deprecated],,1,1,1,3
Student should be able to explain the difference between a design review and a design critique and the value of each.,Reviews and critiques serve slightly different purposes. It's good to understand the role of each and how to maximize the value of receiving (or providing) feedback in a critique session or review.,,"A review is a meeting where a design is evaluated to ensure it is ready to move forward to the next phase. In this meeting, feedback should usually be aimed at making just saying, this is good to move on or it needs more work or let's start over and take a different approach. The review can be held internally by a team preparing the design to be reviewed by a client or a decision maker in the company. It can also be held with the stakeholder or client. Ideally, the work is at a place where the designer feels it is close to finished for the current phase of work.

Critiques are usually held only internally by the design team working on the project. It could also include designers from other teams. The purpose of the critique is to help the whole team learn from a review of a design.

The critique should be a moderated experience, with a facilitator who helps keep the critique process focussed and productive.

Jared Spool at UIE recommends focusing on one attribute of the design during a critique. For example, the information architecture of a design could be the area of focus. A few lenses of focus Jared recommends include:

• Design Concepts
• The Design Itself
• Design Systems
• Who are the Users
• Business Needs
• Constraints (Technological or otherwise)
• Team Process and Collaboration
• Critique Process

Design critiques should be held regularly and have a specific focus that can change each time a critique is held. It is an opportunity for design teams to get smarter about design collectively. The more people who are able to get involved, the more design  becomes an integral part of an organization's DNA.",,,,,,,Critique: The Secret to Growing Your UX Team Skills,The Silent Critique,,"""Presenting Ideas; The Art of the Critique, to Give and Receive""",,Fundamentals: Ideation and Creativity,UX Design Core [v1 deprecated],,1,,,1
"Student should be able to conduct and participate in design reviews/critiques, by giving and receiving feedback on design work.",Communication is an extremely important skill to hone as a designer. Part of what needs to be communicated are recommendations about design considerations. Part of what needs to be understood is how one's own designs could be improved.,,,,,,,,,,,,"""Presenting Ideas; The Art of the Critique, to Give and Receive""",,Fundamentals: Ideation and Creativity,UX Design Core [v1 deprecated],,0,,,0
Student should be able to explain best practices and demonstrate competency in presenting design work.,No designer should turn over the presentation of their design work to others. It is a key competency to be able to explain the discovery work behind the design and provide the rationale behind design decisions.,,"Designers should present their own work to clients and stakeholders. It shouldn't be done by a project manager, producer, or client services rep. It's part of a designer's job.

You can't rely on your designs to speak for themselves. As much as we'd like our designs to be self-explanatory, there are too many nuances to what we do to be able to leave the stakeholders to respond to the design without guidance.

Clients and employers are expert in the business. Their feedback should represent those concerns. You are the expert in design and should own that part. When presenting, make it clear that they chose you, they hired you to do a job and the job you are doing is designing. Have confidence that your work represents the best solution to solve the problems they hired you to solve. 

Design feedback from stakeholders should not be on aesthetic preferences, it should focus on whether or not the design solves the problem it intends to solve. Does it meet the business goals? Does it adhere to brand tone and style? If not, you as the designer need to hear from the stakeholder how it doesn't align. You can always go back and reformulate a solution based on the feedback. You should avoid letting the client dictate solutions. 

In presenting, have confidence. Talk about the solutions you're providing to the problems articulated at the outset of the project. Talk about the interactions you've had with users that have led to the solutions presented. Don't just do a walk-through of elements on the screen. 

When soliciting feedback, you get the kind of feedback you ask for. Don't ask for preferences. Don't ask, ""Do you like it?"" Keep feedback focussed on the business objectives you were hired to help meet.",,,,,,,Great Designers are Great Communicators,Design is a Job,,"""Presenting Ideas; The Art of the Critique, to Give and Receive""",,Fundamentals: Ideation and Creativity,UX Design Core [v1 deprecated],,1,,,1
describe the Jobs to be Done Theory and how it can be applied,"As UX designers, we often focus on how people use our products - it’s central to our pursuit of usability. But, getting to the heart of why our customers use our product is incredibly valuable because it helps us identify how we can innovate.",,"Customers buy products to get a “job” done. When you spell it out it seems like a painfully obvious concept. But, how do we know what jobs our customers are trying to get done? And, how does that knowledge help us design better products? Business management professors and consultants have been trying to answer this question for decades. Their efforts have culminated in the Jobs to be Done theory (JTBD).

According to Anthony Ulwick, the overarching idea of “Jobs to be Done is best defined as a perspective — a lens through which you can observe markets, customers, needs, competitors, and customer segments differently, and by doing so, make innovation far more predictable and profitable…

Jobs to be Done theory is comprised of a group of principles or tenets that form a foundation for making marketing more effective and innovation more predictable by focusing on the customer’s job-to-be-done. 

The theory is based on the notion that people buy products and services to get a “job” done. A “job” is a statement of what the customer is trying to achieve or accomplish in a given situation. The theory goes on to say that by understanding in detail what that “job” entails, companies are far more likely to create and market solutions that will win in the marketplace.”

The tenets of Jobs to be Done theory are the following:
1.  People buy products and services to get a “job” done.
2.  Jobs are functional, with emotional and social components.
3.  A Job-to-be-Done is stable over time.
4.  A Job-to-be-Done is solution agnostic.
5.  Success comes from making the “job”, rather than the product or the customer, the unit of analysis.
6.  A deep understanding of the customer’s “job” makes marketing more effective and innovation far more predictable.
7.  People want products and services that will help them get a job done better and/or more cheaply
8.  People seek out products and services that enable them to get the entire job done on a single platform
9.  Innovation becomes predictable when “needs” are defined as the metrics customers use to measure success when getting the job done

These tenets have profound implications for how we think about innovation. But, they’re most apparent when we compare the JTBD approach with how we currently try to develop products.

Typically, we innovate by incrementally improving existing products or taking guesses about what people might want and validating those guesses. With existing products, we think that delivering an improved experience will make our customers happy. With new ideas, we might be basing our guesses on research and an understanding of a problem, but we’re essentially taking a shot in the dark and hoping for the best. 

Let’s see this in action by pretending that we’re a power drill company. To innovate our existing drills, we might focus on making the battery life longer or the drilling faster. If we were trying to come up with a new drill, we might just take a look at the competition and try to build a better, cheaper drill than there’s or copy a novel idea that they came up with.

When we try innovating using JTBD, we recognize that we need to identify the job that people are hiring us to do for them. Continuing with our example, through some research we might find that customers are hiring our drill to hang up shelves in their homes. 

Now that we know the job, we can focus our attention on solving the job instead of on our product. So, maybe we can build hooks that are smaller than screws and don’t need a drill for installation. Or, we could come up with an adhesive that they can paint on so they don’t have to make holes in their walls. 

When we focus on the job instead of the product, we don’t lock our thinking into our existing product’s paradigm. We open ourselves up to additional opportunities and larger, better markets.

As we can see, shifting to a JTBD mindset can help us solve the “right” kind of problems, but this seems like a better tool for entrepreneurs and marketers - why does it matter to us as UX designers? Well, if we design products that don’t solve a problem then we’ve failed at the most fundamental part of our jobs: usability.

We typically think of usability in terms of specific interactions or flows, but we also need to think about the product usability as a whole. If a product doesn’t perform a job for users then it is useless. So, we can use JTBD in our Discovery, Definition, and Ideations phases of the Product Development Cycle to understand the jobs our users want to perform and how we’ll design a product that helps them.","There are many different ways to implement Jobs to be Done theory in our work. But, the most fundamental exercise is Job Mapping. According to Anthony Ulwick, ```”The goal of creating a job map is not to find out how the customer is executing a job—that only generates maps of existing activities and solutions. Instead the aim is to discover what the customer is trying to get done at different points in executing a job and what must happen at each juncture in order for the job to be carried out successfully.”```

In order to start job mapping, we need to break down the job that customers want done into the steps needed to complete it. Each job consists of the following eight steps: Define, Locate, Prepare, Confirm, Execute, Monitor, Modify, and Conclude. These steps can be seen in the following graphic from Strategyn.com.

![](https://tk-assets.lambdaschool.com/bf702216-d972-462a-b212-d1344bd2fa41_ScreenShot2018-11-08at2.20.16PM.png)

Once we’ve broken the job down into these steps, we can begin to brainstorm ways to make the steps easier, faster, or even unnecessary. In the following graphic from Stategyn.com, we can see an overview of this process.

![](https://tk-assets.lambdaschool.com/e9f8e239-11c3-4cc5-94b8-dc5ab6f9dfcd_ScreenShot2018-11-08at2.20.05PM.png)

To improve our ability to find innovations, we can think about finding opportunities at the job level or at the specific step level. The following question can help guide our approach.

**Opportunities at the job level**
- Can the job be executed in a more efficient or effective sequence?
- Do some customers struggle more with executing the job than others (for instance, novices versus experts, older versus younger?)
- What struggles or inconveniences do customers experience because they must rely on multiple solutions to get the job done?
- Is it possible to eliminate the need for particular inputs or outputs from the job?
- Is it necessary that the customers execute all steps for which they are currently responsible? Can the burden be automated or shifted to someone else?
- How many trends affect the way the job is executed in the future?
- In what contexts do customers most struggle with executing the job today?
- Where else or when else might customers want to execute the job?

**Opportunities at the step level**
- What causes variability (or unreliability) in executing this step? What causes execution to go off track?
- Do some customers struggle more than others with this step?
- What does this step’s ideal output look like (and in what ways is the current output less than ideal?)
- Is this step more difficult to execute successfully in some contexts than others?
- What are the biggest drawbacks of current solutions used to execute this step?
- What makes executing this step time-consuming or inconvenient?

Let’s walk through this process with our Tune.ly app. To start, we’ll need to identify the jobs our customers want to do. Ideally, in our Discovery user interviews, we would focus on uncovering their jobs. 

So during the interviews, we would be sure to question the users about their motivations for completing their tasks. With Tune.ly, we might ask users to describe how they currently consume their EDM music. As the user describes that story, we want to ask follow up questions or use the five whys technique to probe their motivations and try to uncover their reasoning behind their listening preferences. 

For example, the following transcript highlights how we might probe for more information.

**Researcher:** How do you currently listen to EDM music?

**User:** I go to YouTube and listen to EDM playlists. 

**Researcher:** Why do you listen on YouTube?

**User:** I like how they organize everything into playlists so I don’t have to keep picking a song?

**Researcher:** Why don’t you like picking a song?

**User:** Well, I usually listen to EDM when I’m working out, so I don’t want to keep looking at my phone.

**Researcher:** Why do you listen to EDM when you work out?

**User:** Oh, just because it keeps me in the zone and focused.

**Researcher:** Why does staying in the zone matter?

**User:** I usually lift heavy weights, so if I’m distracted I could hurt myself. And if I hurt myself, I couldn’t keep lifting.

**Researcher:** Why is lifting important to you?

**User:** I’ve been lifting since high school, and it’s just become part of my routine. I guess I just like how I feel and look when I’m done.

In this interview, we’ve uncovered a lot of information about this user’s jobs. First, we learned that they hire YouTube to listen to EDM music because of the playlists feature. Then, they hire EDM music to stay focused and avoid injury in the gym. Finally, they hire the gym to boost their self-esteem and feel good.

Over the course of our research, we can uncover many jobs from our interviews. In that process, we’re looking for patterns. If a lot of interviewees hire playlists to stay focused then we’d be interested in trying to innovate in that area.

During the Definition phase, we’ll consolidate our research findings and begin the job mapping process. Now we’ll pick a job and break it into each step. So for our playlist job, our job map could look like this:

1.  Define
  -  Think about what kind of playlist they want.
2.  Locate
  -  Find a playlist in the YouTube app
  -  Finds headphones
3.  Prepare
  -  Clicks on it so the music starts downloading
  -  Puts on headphones
4.  Confirm
  -  Makes sure that it has buffered enough not to be interrupted
5.  Execute
  -  Listens to the music
6.  Monitor
  -  Do they like the music?
  -  Do they need to change songs?
7.  Modify
  -  Jumps to the next song to avoid a slower tempo
8.  Conclude
  -  Turns off the playlist
  -  Takes off headphones

With Tune.ly, we’re mostly interested in steps 5-7. We think that we can deliver a playlist that they’ll love so we can prevent them from worrying about liking the music and having to change songs. We can also continue to brainstorm other ways we can innovate by reviewing the guiding questions listed earlier.","Think about the last three products you purchased. In a brief paragraph, explain why you purchased them and the need you were trying to solve.",HzufG_M1S38,http://youtube.com/watch?v=HzufG_M1S38,https://www.youtube.com/embed/HzufG_M1S38,,"The Customer-Centered Innovation Map,Know Your Customers’ “Jobs to Be Done”,Jobs To Be Done Theory and Methodology","Why This Opportunity Solution Tree is Changing the Way Product Teams Work,What Customers Want: Using Outcome-Driven Innovation to Create Breakthrough Products and Services,Intercom: Jobs To Be Done,What Is Jobs-to-be-Done?","- What is Jobs to be Done theory?
- How does Job Mapping help us apply JTBD?",Jobs to be Done Theory & Job Stories,Active,Advanced Experience Definition,UX Design Core [v1 deprecated],,1,1,1,3
explain what a job story is and create one,"Job stories zero our attention on the Jobs to be Done and encourage us to focus on context, causality, and motivations instead of assumptions, subjectiveness, and implementations.","For the demo, a slide has a detailed walkthrough on sample job stories but feel free to make your own too.","Job Stories are a simple methodology for implementing Jobs to be Done theory in our work. They are simple statements that we can use to articulate jobs as actionable deliverables from the user’s perspective.

As Paul Adams from Intercom explains, to create a Job Story “we frame every design problem in a Job, focusing on the triggering event or situation, the motivation and goal, and the intended outcome:

When _____ , I want to _____ , so I can _____ .

For example: *When an important new customer signs up, I want to be notified, so I can start a conversation with them.*”

By framing our work in this manner, we can be sure that we’re focusing on the job to be done while including sufficient context to solve the problem. In our UX process, we can use job stories during the Definition phase to articulate the jobs and problems we’ve identified. Then in the Ideation phase, we can use them as jumping off points for our problem solving.

An important thing to remember about job stories is that they’re useful for framing a problem, but they shouldn’t be used to describe a solution. So, be sure to focus on providing as much context as possible when you’re creating them.","Let’s create some job stories for Tune.ly to articulate the jobs we’ve identified. Earlier, we learned that our users hire YouTube to listen to EDM music because of the playlists feature. So, let’s focus on this job to start.

We’ll follow the job story pattern to begin.

When _____ , I want to _____ , so I can _____ .

So, by focusing on the user’s perspective, we can write our job stories like this:

When I listen to EDM music, I want to listen to playlists, so I can avoid picking songs myself.

When I listen to playlists, I want to enjoy all of the music, so I can stay focused on what I’m doing.

When a song comes up that I dislike, I want to change it quickly, so I can get back into my groove.

As you can see, writing job stories helps us break down the big picture job into actionable design problems. We can then use these job stories as user requirements to solve in our design process.","Think about the last three products you purchased, write a job story for each of them.",URbiff3C2gg,http://youtube.com/watch?v=URbiff3C2gg,https://www.youtube.com/embed/URbiff3C2gg,,The dribbblisation of design,JASON FRIED ON USING JTBD AT BASECAMP,"- What is a job story?
- Why do we create job stories?
- How do we create a job story?",Jobs to be Done Theory & Job Stories,Active,Advanced Experience Definition,UX Design Core [v1 deprecated],,1,1,1,3
The initiator is invited to share something they are excited about to the responder,,,,,,,,,,,,,,,,,,0,,,0
"The responder is invited to respond in 1 of 3 ways (professionally): a. Passive constructive, b. Passive destructive, c. Active destructive",,,,,,,,,,,,,,,,,,0,,,0
The initiator is invited to share how the response made them feel,,,,,,,,,,,,,,,,,,0,,,0
The responder is invited to respond in a more “active-constructive” manner,,,,,,,,,,,,,,,,,,0,,,0
Swap roles and repeat.,,,,,,,,,,,,,,,,,,0,,,0
"Start off by choosing to be an initiator or responder. The initiator is invited to share something they are excited about to the responder. The responder is invited to respond in 1 of 3 ways (professionally): Passive Constructive, Passive Destructive, Active Destructive. The initiator is invited to share how the response made them feel. The responder is invited to respond in a more “active-constructive” manner. Switch roles and repeat.",,,,,,,,,,,,,Four Ways to Respond,,Professionalism/Communication,Principles for Success,,0,,,0
Understand how Lambda School builds Employer Relationships,,,,,,,,,,,,,Community Outreach/Outcomes Team Info,,Professionalism/Communication,Principles for Success,,0,,,0
What they need to do to participate in recruiting activities,,,,,,,,,,,,,Community Outreach/Outcomes Team Info,,Professionalism/Communication,Principles for Success,,0,,,0
separate shared code into a framework,,,,,,,,,,,,,App Extensions,,iOS Other Platforms,iOS Development Core,,0,,,0
create an extension target in an existing app project,,,,,,,,,,,,,App Extensions,,iOS Other Platforms,iOS Development Core,,0,,,0
create a today widget,,,,,,,,,,,,,App Extensions,,iOS Other Platforms,iOS Development Core,,0,,,0
create an app group,,,,,,,,,,,,,App Extensions,,iOS Other Platforms,iOS Development Core,,0,,,0
share user defaults between an app and an extension using an app group,,,,,,,,,,,,,App Extensions,,iOS Other Platforms,iOS Development Core,,0,,,0
interpret and select basic plots appropriate for different data types,"Different types of data require different types of visualizations - continuous, discrete, categorical, binary, all of these are different to think about and illustrate.","This is part one of essentially a joint objective, the next part being  actually make them.","How is data visualized? You may hear the phrase ""it's more art than science"" used to describe situations with uncertainty, but in this case you can interpret it a bit more literally - visualizations are an artistic medium, and humans naturally form aesthetic judgments based on them. But there's still a science here - we need to make sure our plots are faithful in their representation, so those judgments formed are accurate.","In class, we will work together to demonstrate the types of visualizations that can be used for the major variable types we learned about earlier in the week. ""Good"" and ""bad"" examples are shown and discussed, also in the prewatch video/slides. Refer to these, and discuss what makes a visualization ""good.""","Explore the documentation linked for Matplotlib, and make your own visualizations for each type of data as demonstrated in class.

Optional stretch goal - also generate comparable plots with seaborn.",VPshhddagaw,http://youtube.com/watch?v=VPshhddagaw,https://www.youtube.com/embed/VPshhddagaw,,"Edward Tufte,seaborn gallery,Matplotlib API",,"Discuss with a fellow classmate:
- What was your favorite plot today?",Basic Data Visualizations,,,,,1,1,1,3
explain what a customer journey map is and create one,Customer journey maps are an excellent tool for building a shared understanding of your customers’ needs and pain points. Learning how to create one is an essential skill for any UX designer.,,"Most organizations have a difficult time understanding how their customer interacts with their business. Oftentimes, information is siloed in different parts of the company and it’s rarely extracted for everyone’s benefit. 

Furthermore, most organizations don’t take a user-centered approach to their daily operations. So, new initiatives and ideas are typically internally sourced and developed with little to no consideration for the user. Yikes!

As UX designers, we need to be able to free up our organization’s information and refocus everyone on solving user needs. Fortunately, we can use a customer journey map to solve these problems.

According to the Nielsen Norman Group (NNGroup), ```”A customer journey map is a visualization of the process that a person goes through in order to accomplish a goal.”``` They combine storytelling and visualization to help teams conceptualize and address customer needs. Their unique format and ability to surface missing details make them excellent tools for defining the high-level customer experience.

Additionally, they help draw out siloed information because they’re created using a collaborative, multi-disciplinary approach. And since we’re focused on the customer’s journey, it refocuses the team on the customer’s needs and pain points.

Like most UX tools, there’s a fair amount of variation in how people design and organize their customer journey maps. However, the NNGroup put together an excellent template below that we can build on.

![](https://media.nngroup.com/media/editor/2016/07/18/deconstruction_of_a_customer_journey_map.png)

**Zone A:** ""The lens provides constraints for the map by assigning (1) a persona (“who”) and (2) the scenario to be examined (“what”).""

**Zone B:** ""The heart of the map is the visualized experience, usually aligned across (3) chunkable phases of the journey. The (4) actions, (5) thoughts, and (6) emotional experience of the user has throughout the journey can be supplemented with quotes or videos from research.""

**Zone C:** ""The output should vary based on the business goal the map supports, but it could describe the insights and pain points discovered, and the (7) opportunities to focus on going forward, as well as (8) internal ownership.""

While there will certainly be some variation across teams, the NNGroup’s customer journey map contains all of the essential elements. These elements are a point of view, the scenario, actions, mindsets, emotions, touchpoints, channels, insights, and ownership. Let’s explore each of these elements in a bit more detail.

**Point of View**
First, we’ll want to make sure that our customer journey map lays out the experience for one “actor” or persona. Keeping our maps focused on one persona prevents us from overcomplicating our designs. If we tried to design for many personas, it would be hard to visually represent and digest all of their information. So, be sure to create a separate map for each persona in order to provide a strong, clear narrative,

**Scenario**
The scenario refers to the specific experience you’re mapping. Ideally, your scenario describes a sequence of events, like using an online shopping cart or flying to Spain. You should also make sure that your scenario has an end goal for the user and that it’s clearly articulated.

***Actions, mindsets, and emotions***
A journey map wouldn’t be very useful without showing what the user is doing, thinking, and feeling during their journey. These details should be found through qualitative research. But, it’s ok to guess if you don’t have any supporting research as long as you validate your guesses in follow-up research.

**Touchpoints and channels**
As NNGroup explains, ```”the map should align touchpoints (times when the [persona] actually interacts with the company) and channels (methods of communication or service delivery, such as the website or physical store) with user goals and actions. These elements deserve a special emphasis because they are often where brand inconsistencies and disconnected experiences are uncovered.”```

**Insights and ownership**
Insights and ownership are paradoxically the most important and overlooked pieces of the customer journey map. The whole point of creating a customer journey map is to discover where you could improve the customer’s experience with your company and product. So, failing to include insights means that all of the other work you’ve done for your map was a waste of time. Since you’ll always include the insights section, you’ll also make sure to assign ownership to your insights so your teammates are empowered to make the changes you need to implement them.

Now that we understand the various elements of a typical customer journey map, let’s cover the process for creating them.

**1. Understand your context**
  - As usual, we’ll need to gather up all of our research insights to serve as the foundation for our customer journey map. In particular, it helps to understand your personas, products, and business objectives. With this information, we’re looking to understand our customers, how/when/why they interact with our products, and what we’re doing as a business to facilitate those interactions.

**2. Plan your mapping event**
  - Once you’ve gathered up all of your research, you can start planning your mapping event. Creating a customer journey map is a collaborative process that should uncover siloed information and lead to insights across the organization. So, you need to make sure you invite other stakeholders to participate.
  - There are two types of stakeholders who you should invite. Ones who understand the customer journey and influencers in your organization. Sometimes they’ll overlap, but in larger companies, they might not. Influencers are typically members of senior management. Their often the farthest from customers, but their decisions carry the biggest impact on the customer experience. Having them attend the event helps them see how their decisions impact the customer experience. In order to do that, you’ll need to have stakeholders who actually understand the full customer journey. Usually, customer support/service staff are excellent stakeholders who understand the customer’s problems very well. Other stakeholders include marketers, salespeople, developers, and other UX designers.
  - Once you’ve identified the stakeholders, invite them to your customer mapping event. Make sure you explain why you’re conducting this exercise and the value it will deliver for them. These events can last all day, but make sure you’ve budgeted at least 90 minutes. Anything past that is often too taxing for teams. It might seem like not enough time to get all of the details, but remember you’re trying to leverage the team’s knowledge to uncover the basic facts and high-level customer journey. You can always follow-up with individuals for more detail later.

**3. Collaborate with your team**
  - When you’ve gathered everyone in a room, you’re ready to start working on your customer journey map. At the beginning, make sure to review what you’re doing, why it is useful, and how it will benefit the company.
  - When you’re ready, start by identifying the persona that you’ll be focusing on. Then, identify the scenario and the principal stages the persona passes through in order to complete it. These stages can vary dramatically, but will typically cover the following:
    - Discovery
    - Research
    - Purchase
    - Delivery
    - After Sales
  - Once you’ve outlined your scenario, you can create a grid on a large piece of paper or a whiteboard. At the top, create a column for each of the stages. On the left side, create a row for the actions, mindsets, emotions, touchpoints, channels, insights, and ownership. 
  - With that set-up, go through the process of filling out the first column with everyone. Make sure you use post-it notes for all of your responses. This makes it easy to reorder items later.
  - Once you’ve finished the first column, you can either continue as a team or break out into smaller groups and have them each work on a column together. Breaking into smaller groups helps keep everyone engaged and speeds up the process.
  - When everything is filled out, make sure you review all of the details together and discuss any contentious points.

![](https://tk-assets.lambdaschool.com/7dfe4e82-6b4e-420a-8666-10f7245b71d5_ScreenShot2018-11-14at9.56.52AM.png)

**4. Refine your map**
  - Now that you have all of the big picture details, you can continue to add more details or you can codify your findings in a deliverable. Customer journey maps come in all shapes and sizes, but make sure you present all of your findings on one page. Keeping everything on one page ensures it is easily digestible and more likely to be used and referenced.

![](https://tk-assets.lambdaschool.com/b5897913-6d82-4ffe-beb6-a2988d5903c8_Tune.lyCustomerJourneyMap.jpg)

**5. Share your results**
  - Once you’ve refined your customer journey map, you’re ready to share it with the rest of your team! Sharing your results is the most important step because it ensures that all of the work you just did doesn’t go to waste. Make sure everyone understands the implications of the customer journey map and any results that they’ll be responsible for because of it.","Let’s create a customer journey map for an EDM music application, Tune.ly. To do that, we’ll follow our process.

**1. Understand your context**
Let’s start by understanding our context. Gathering up all of the research that is relevant to this exercise, we know the following:

- Jackie Miller is our primary persona
- Our business objective is to have users create premium accounts
- Our marketing outreach consists of referral links and SEO
- Since this is a new product, we don’t know our customer’s journey so we’re going to brainstorm one path for them.

**2. Plan your mapping event**
As a small startup, we don’t need to do a ton of work to schedule our mapping event. We decided to block off everyone’s Friday to work on it. We sent everyone a follow up email explaining what we’re doing.

```
Howdy team!

On Friday, we’ll be developing a customer journey map for Tune.ly. A customer journey map is a visualization of the process that our users go through in order to achieve their goals (and ours!). 

Having one will help us align our product understanding and identify opportunities for innovation so we can convert more users into premium subscribers.

We’ll be starting at 9:00 am, so see you then!

Cheers,
Your friendly UX team
```

Notice how we explained the purpose of the event, what we’ll be doing, and tied it back to our business objectives? Emails using this format are highly effective at galvanizing action because they’re short, direct, and goal-oriented.

**3. Collaborate with your team**
Once you get everyone in a room, you’re ready to start mapping! Before we jump into whiteboarding, we’ll take a moment to reiterate what we're doing, why it is useful, and how it will benefit the company.

```Today, we’ll be developing a customer journey map for Tune.ly. A customer journey map is a visualization of the process that our users go through in order to achieve their goals (and ours!). Having one will help us align our product understanding and identify opportunities for innovation so we can convert more users into premium subscribers. Any questions?```

After the preliminary questions are out of the way, start by identifying the persona that you’ll be focusing on - in our case, that’ll be Jackie Miller. Then, identify the scenario and the principal stages the persona passes through in order to complete it. For our case, they will be the following:
- Looking for EDM music
- Finds Tune.ly
- Creates account
- Gets personalized list
- Upgrades to premium
- Sends referral links to friends

Now that we’ve outlined our scenario, we’ll add it to the top of our whiteboard. On the side, we’ll also create a row for actions, mindsets, emotions, touchpoints, channels, insights, and ownership. With our grid set up, our team will work together to fill out the first column with post-its and then break out into smaller groups to finish the rest of the grid.

With all of the grid filled in, we’ll take a step back and make sure everyone agrees with everything and work through any disagreements. Once that’s done, we’ll move onto another scenario or persona and repeat the process until we’re out of time.

**4. Refine your map**
After our mapping event, we need to organize all of the information our team added to our grids. Now, we’ll hop into Sketch, or our graphic design software of choice, and create high-fidelity versions of our customer journey maps. 

With these documents, our goal is to fit all of the information on one page and present our findings in an easily digestible manner.

**5. Share your results**
Finally, we’re ready to share our customer journey map with our team. At Tune.ly, we sent everyone an email with a summary of the map and printed out a large, poster-sized version and hung it up in our office.

```
Howdy team!

Please find attached the final version of our customer journey map. We will be using our map as a reference for all of our future product development efforts. 

In particular, we will be working towards the insights listed on the map with their owners. If you have any questions about the map or your particular responsibilities, please reach out to us!

Cheers,
Your friendly UX team
```",,,,,,"Journey Mapping in Real Life: A Survey of UX Practitioners,How to Create a Customer Journey Map,What is Customer Journey Mapping and How to Start?",The 5 Steps to Customer Journey Mapping,"- What is a customer journey map?
- Why is it a useful tool?
- How do you make one?",Customer Journey Maps,Active,"Advanced Experience Definition, Definition","UX Design Core [v1 deprecated], UX Design Core",,1,,,1
infer and support statements based on data,"Anybody can form an opinion about a situation - it is our goal to build an informed opinion, guided by data. This is a large topic, and not one that can be completely resolved in a day - many of the techniques we learn later on will refine our approach to these situations. But even with the limited tools we currently have, we can already start reasoning in a principled manner about data.","This objective is written generally, but in this context really means ""basic"" - it will obviously be revisited with later techniques.","To draw conclusions from data, it is important to fit the model to the data, and not the data to the model. What does this mean?

We've not learned about formal statistical models, but informally the term can refer to any sort of mental model - an explanation for what is going on. Fitting a model to data means looking at data and choosing a model as appropriate. Fitting data to a model means entering a situation with preconceptions (an existing model you want to believe) and ""massaging"" the data so it works out.

You may think it's obvious that this is a bad thing, but it often occurs in industry and academia - and can be subtle enough that the intents of those involved are perfectly good. After all, they probably have good reasons for wanting to believe their initial model, and what's the difference between data cleaning and a tiny bit of massaging here and there?

There is no solution to this problem - it is a particularly important step of the scientific method, and the only way to preserve integrity in science is with constant vigilance. Practically, it can also be important to ""pick your battles"" - if you join an organization with mixed integrity in its data analysis, don't try to start a revolution overnight. Improve things iteratively, one valid analysis at a time.

So what is a valid analysis? If you truly enter with a fitting-model-to-data perspective, then many techniques are fair game. Most of our time together will be spent learning more tools that are appropriate for this, but a simple suggested flow based on what you already know:

- Load the data and validate that you're loading it accurately/completely
- Check for and fix missing values - are they distributed uniformly, or is there a pattern?
  - If randomly, then if there aren't too many you can drop, otherwise you can try to fill
  - If there's a pattern, your data may have problems and you should consider revisiting the source and seeing if there are better ways to attack
- Look at the distribution and types of values
- Create appropriate univariate and bivariate visualizations
- Based on the bivariate visualizations in particular, suggest hypotheses for possible relationships and explanations/mechanisms

And that's roughly as far as we can get now - notice that last point has the word ""hypotheses"", *not* conclusions. This again ties back to the scientific method, as well as a topic we'll be covering later - statistical hypothesis testing. Once you form hypotheses, it is possible to robustly test them, and then make stronger statements based on those results.

For now, you've been at this a week - congratulations! Hopefully you are feeling like you're building up some momentum, but you have plenty to learn ahead of you.","The prewatch material told a story about a hypothetical health condition where both the drug usage and overall health outcome were related to gender - thus making gender a confounding variable, obfuscating the possible relationship between the drug and the outcome.

Let's use Python (refer to notebook) to generate data that actually behaves in this fashion!","Consider the data in persons.csv (already prepared for you, in the repo for the week). It has four columns - a unique id, followed by age (in years), weight (in lbs), and exercise time (in minutes/week) of 1200 (hypothetical) people.

Try to figure out (in the notebook) which variables are possibly related to each other, and which may be confounding relationships.",UOESfm_XQUc,http://youtube.com/watch?v=UOESfm_XQUc,https://www.youtube.com/embed/UOESfm_XQUc,,DS Notebook 114 - Making Data-backed Assertions,,"Discuss with a fellow classmate:
- What is the scientific method, and how does the topic today relate to it?
- What's a time you or somebody else approached a problem by fitting ""data"" (doesn't have to be quantitative data - any perception) to an existing model?",Making data-backed assertions,,Dealing with Data,DS - Statistics Fundamentals,,1,1,1,3
identify misleading statements not actually backed by the data,"An important part of being a data scientist is recognizing when something less-than-scientific is going on with data. As with the other objective today, this is a big topic, and one that will be continually revisited through your studies.","This should be taught to be ""fun"", perhaps poke a few holes in particularly bad examples/analyses. But I'd encourage caveat-caveating - that is, these things are hard, and while it's fun to tear things down occasionally, it's important to remember that building needs to be the main goal.","A news story reports a poll of American adults with a strong statement - most adults (57% with a ""confidence margin"" of +/- 4.2%) strongly support American military intervention in various countries. Yet at the same time, another news outlet reports a similar poll but with opposite results - 56% (+/- 3.8%) oppose unnecessary involvement of the US government in foreign affairs.

How is this possible? The results oppose each other, well outside the ""confidence margin"" bounds. Is one side simply lying or making up numbers?

Probably not - both polls probably really did collect data and apply statistical techniques. They probably even did their best to randomize their sampling - perhaps random digit dialing of telephone numbers. This still has some bias (legally you can only dial landlines this way, and people with landlines skew older), but that can be adjusted for with weighting.

Curious, you dig into the findings - you look up the research groups that did the polling and find a PDF with their methodology. Which poll do you think asked which version of the question?

- Do you support the United States attempting to bring freedom and democracy to other places in the world?
- Do you believe the United States should engage in unprovoked military action on foreign soil?

Both of these are loaded questions - they frame the issue in a way that naturally pushes a certain perspective and response. The first question puts intervention in a positive light - spreading freedom and democracy, concepts with a strong positive connotation to most American adults. The second uses words like ""unprovoked"" and ""foreign soil"" - emphasizing the negative aspects of such policy, and making intervention sound more petulant and unnecessary.

It's a good exercise to try to think of balanced ways to frame issues, but as data scientists we're not necessarily in the business of designing polls. We're in the business of taking data, from polls or other sources, and making sense of it and hopefully drawing some conclusions from it.


Your goal - recognize when results are being presented in a fashion that suggests there may be more to the story. Are they ""comparing apples to oranges"" when you consider the difference between the data they gather and the conclusion they state?



![Apples and Oranges, Paul Cézanne](https://upload.wikimedia.org/wikipedia/commons/9/98/Paul_C%C3%A9zanne_179.jpg)
There are many sophisticated techniques to diagnosing and quantifying statistical accuracy, and we will dig into them through the course, but for now try to develop an instinct of healthy (but not cynical) skepticism.","Consider the following data-backed situation and conclusion:

An education researcher wants to come up with techniques to improve the teaching of physics to middle schoolers. They argue that existing textbooks treat the topic too abstractly and mathematically, and that homework and exams punish students who have a more physical intuition. They even cite neuroscience literature, showing the link between physically throwing and catching a ball and neural activity related to conception of space, velocity, and gravity.

Based on this, they develop a ""hands-on"" curriculum, involving going outside, throwing and catching balls, trying to build load-bearing structures with sticks and marshmallows, and of course - dropping eggs from roofs. They secure funding to run their curriculum as an immersive 2-week summer program at a local university, and get scholarships to support a variety of students attending and participating.

They run it, and it's a great success! The kids are enthusiastic, and offer glowing testimonials quickly retweeted by the researcher and others. ""This is so much better than how we learned it in class!"" and ""It makes so much more sense now!"" are the recurring themes. And the researcher doesn't simply report qualitative feedback - on the first day of the camp the students take an aptitude test, and it is repeated on the last day. Scores go up (on average) by over 40%!

Armed with the above, the researcher makes the following claims:

- Traditional physics education is broken: it is too quantitative, and not ""fun"" enough to engage students
- The brain needs physical examples to learn topics, and focusing on abstraction only works for a small subset of students
- Overall, we shouldn't make kids do math in physics, we should let them engage with the topic physically

This all sounds good to most people - and even the staunchest statistician would agree that the camp itself had a positive effect on the students involved. But what are some possible issues with the overall methodology and conclusions?

Overall the main issue is a lack of proper control. The researcher is ostensibly demonstrating an improvement over ""traditional"" and ""overly mathematical"" teaching methods - but they are applying a lot more resources than the typical middle school physics teacher has available. If such a teacher had budget to run a bunch of fun physical examples they likely would - and with likely similar positive results.

Another major issue is the sweeping nature of the conclusion - it is clear that these kids had fun, and that it increased their engagement with a subset of physics-related topics. It may even be that, longterm a greater proportion of these kids will go on to engage more with physics, and develop a deeper appreciation of the topics they learned.

But whenever you enter a situation where there's an established way of doing things that you're inclined to discard, you have to ask yourself - why did the existing system develop in the first place? Only by understanding the origin of something can we make accurate comparisons to alternatives and suggest effective reform. This principle is called [Chesterton's fence](https://en.wikipedia.org/wiki/Wikipedia:Chesterton%27s_fence).

In this case, physics is taught with mathematical abstraction because, as the field developed, it began explaining topics that don't have simple physical analogues that can be simulated in a playground. Physics enables us to understand both the incredibly large and small phenomena in our universe, things that no human can directly experience or intuit. And the neurological arguments are almost certainly not strong enough evidence to support a necessary relationship between e.g. physical activity and actually understanding physics - neuroscience is amazing but also *hard* and what little understanding we have is generally at a very high level and with a lot of uncertainty.


Does this mean that we must punish middle schoolers with excessive mathematics just so someday some of them might understand nuclear reactions or black holes? No - but it does mean that math is important to physics and shouldn't be swept under the rug either. Rejecting including any abstraction or mathematics because current approaches are ""too mathematical"" and ""not fun enough"" is a straw man fallacy - designing a curriculum is full of continuous decisions, not discrete ones, and it's possible to envision a balance of math and hands-on physical experiments.

Is such a study hopeless? No - how could it be improved? There are many possibilities, including:

- Giving comparable budget to existing ""traditional"" educators/approaches, to see what results are in that situation
- Consulting with neuroscientists and better caveating neuroscience results
- Not just tracking immediate happiness/test performance, but longterm engagement with and success with physics - how many students go on to become successful researchers, tackling the abstraction that is intrinsic to the field?
Overall, the main point here is that - making statements based on data is hard. Getting into the specifics of a domain (as we did above) is one way to start understanding this difficulty. You can also look at the actual data to see if there are variables being neglected, or errors in the cleaning and processing of data. We will practice these skills, as well as more sophisticated techniques to test hypotheses in the coming weeks.","Consider another data-backed situation and conclusion:


An e-commerce company wants to understand which product recommender system (software that links to similar products on the view page of a given product) performs better for their online store. They have an existing legacy recommender system that they have been using, and want to compare a new alternative. They decide to test them with an A/B test - they divide the traffic they receive and expose them to one system or the other, and compare the total revenue of both groups.

In order to divide, they use a simple approach - they already know which customers have been exposed to the legacy system, as they set a tracking cookie when a user visits their page. So they decide to keep the experience of those users consistent, and continue showing them recommendations with the legacy system.

New visitors (those without an existing cookie) are split randomly - 50% are served recommendations using the new system, and 50% with the legacy system. In both cases the system used is saved in the cookie they are given, and they will continue to receive recommendations from that system if they return to the site later.

They collect data for a month, and compare average revenue per user between the two systems. Their finding - the legacy system performs substantially better, with 30% more revenue per user. The new system is simply not worth switching to.
What are some potential problems with their approach and findings? How could their study of this problem be improved? Think through critically, write your opinions, and share with a classmate.

Optional stretch goal - come up with your own data scenario (perhaps based on a news story or something else you've read), and analyze and discuss.",1aA2eNXbGnE,http://youtube.com/watch?v=1aA2eNXbGnE,https://www.youtube.com/embed/1aA2eNXbGnE,,,Misuse of Statistics,Discuss the challenge question scenarios with a classmate (a different classmate if you already discussed with one).,Making data-backed assertions,,Dealing with Data,DS - Statistics Fundamentals,,1,1,1,3
Finish at least one draft of their blueprint(section 1 and 2),,,,,,,,,,,,,Blueprints of Me: Part 1,,Empathy/Diversity,Principles for Success,,0,,,0
use the product design cycle to create a wireframe click-through prototype.,"Based on your training thus far, you should be able to conduct your own UX design process to result in a recommended solution for a client.",,,,,,,,,,,,Project Week — Design a Publication Platform,,UX Unit 1 Project Week: UX Fundamentals,UX Design Core [v1 deprecated],,0,,,0
take company goals and rewrite and prioritize them as research questions,"There's no point in conducting discovery research if you don't have a way to connect it back to the priorities and objectives of your company or client. Using some of the discovery tools we have discussed in this course, such as stakeholder interviews and UX workshops, you can uncover company goals and issues. Once you understand the goals, you can create a research plan by rewriting the goals as questions which then become the basis of your plan.",,"**Collecting goals is the first step in the process of building your research plan.**

The goals of the company are not always just to make the user's ability to use the product efficient and pleasant. Although that should certainly be a priority, it cannot be placed above other business concerns, like brand recognition, advertising, customer support, etc. All of these things are part of the user experience and so should be considered. 

Gather all stakeholders in a group meeting or reach out to them individually and conduct stakeholder interviews. A meeting is most efficient for the researcher, but can sometimes not be sufficient for discovering all the issues of concern.

Mike Kuniavsky suggests three questions stakeholders should answer:

1. In terms of what you do on a day-to-day basis, what are the goals of the product?
2. Are there ways that it's not meeting those goals? If so, what are they?
3. Are there questions you want to have answered about it? If so, 
what are they?

UX researchers would benefit at this point from also getting the perspective of the user, even though a formal research plan is not in place. This helps orient the research process toward the user at the very beginning and can raise issues to the surface that the stakeholders are not aware of.

List each stakeholder along with the issues raised in your meeting with them.

<table>
<tr>
<th>Who</th>
<th>Goals and Questions</th>
</tr>
<tr>
<td>
John in Sales
</td>
<td>
Increase revenue by 30% by EOY.
</td>
</tr>
<tr>
<td>
Mae in Marketing
</td>
<td>
We want people to know we're a better alternative to Spin.
</td>
</tr>
</table>

**Prioritizing the goals is the next step in making your research plan.**

One way to prioritize all the questions is by giving each a rating from 1 to 5 on importance and another rating on severity.

*Importance*: 5 is ""must-have"", 1 is ""nice-to-have"" but not essential.
*Severity*: 5 is ""bad problem"" affecting profitability, 1 is annoying things or ""nice-to-know"" types of things

You list each of the issues raised in your meetings, rate each on importance and severity, then multiply the importance and severity ratings to get a priority calculation:

<table>
<tr>
<th>Goal</th>
<th>Importance</th>
<th>Severity</th>
<th>Priority</th>
</tr>
<tr>
<td>
Increase revenue by 30% by EOY.
</td>
<td>
4
</td>
<td>
3
</td>
<td>
12
</td>
</tr>
<tr>
<td>
We want people to know we're a better alternative to iTunes/Pandora/Spotify.
</td>
<td>
3
</td>
<td>
2
</td>
<td>
6
</td>
</tr>
<tr>
<td>
Increase use of playlists.
</td>
<td>
5
</td>
<td>
3
</td>
<td>
15
</td>
</tr>
<tr>
<td>
Why aren't new users staying?
</td>
<td>
5
</td>
<td>
5
</td>
<td>
25
</td>
</tr>
</table>

Order the table by the value in the priority column and you now have a list ordered by the most important issues.

A little note about ranking issues and questions for a research plan.

Mike Kuniavsky's recommendation as summarized above is this:

`Make a column next to your list of questions and label it ""Importance."" Go down the list and rate each item on a scale of 1 to 5, where 5 means the feature affected is a ""must have,"" critical to the success of the product, and 1 means it's a ""nice to have,"" but not essential.

Next, make a second column and label it ""Severity."" This will reflect how bad the problem is. Write a number on a 1 to 5 scale here, too. Five represents bad problems (generally ones that are directly affecting the bottom line right now), and 1 refers to problems that are annoyances or information that would be good to know.

Now multiply the two entries in the two columns, and write the result next to them in a third column called ""Priority."" This combines and amplifies the two factors in decending which problems should be investigated when. Ordering the list by the third column gives you a starting order in which to investigate the product's user experience.`

For those who are still struggling to figure out the difference between _severity_ and _importance_, here are some additional thoughts.

*First:* There is no hard-and-fast rule about how you judge the priority of questions to study and answer. This is just an approach that can help you prioritize issues. You can try other methods if this one doesn’t work for you. The important lesson to learn is that you need to know how to work on the right things, rather than the easy things. Being explicit about what is important and what takes priority helps avoid being pulled along by the latest crisis.

*Second:* One way to think about severity is as a wound on the business. Is the question or issue we are talking about an open wound that is losing blood? Is it going to get a big infection if it is not cleaned up? Is it just a scratch? Or a mosquito bite? Do we need to go to the hospital? To a clinic? To mom for a bandaid? Or do we just brush it off? Thinking of severity in this way can help you judge between the different questions.

And that’s another point to raise: Compare severity between different questions/issues. Don’t compare _severity_ to the question’s or issue’s _importance_. In fact, you might want to judge severity and importance at different times and without looking at what you rated each question as for the other category. You’re really wanting to find out if this question will have more dire effects (and/or effects that come sooner) than another question if we don’t figure out how to fix it.

*Third:* You can think about importance in terms of a Batman metaphor: Right now, is it more important to have a body suit or the bat mobile? Which could wait if you had to choose between making one or the other? What is more important, the grappling hook or the bat boomerang? If you had to choose one over the other, which would it be _right now_? If you had to choose between learning karate or jiujitsu, what would be your priority? You can’t do everything at once, so which one will be most beneficial to your safety and prolong your ability to then get to some of the other priorities later?

Hopefully those two metaphors help clarify how to think about them—the severity scale feels more like you’re trying to fix problems and the importance scale feels like you’re looking for opportunities. The important thing to remember is not to compare the importance scores to the severity scores, you compare issues to each other on the importance scale and then compare issues to each other on the severity scale. Once you have a score for each, you can multiply to produce a prioritized list.

It’s not really a science, but this approach makes it more systematic and easier to replicate and justify your proposals and decisions. If you can find a simpler approach, by all means use it. Many times the issues are so few that you can see right off which are most important/severe and which are least important/severe.

**The third step in preparing your research plan is to rewrite the issues as questions.**

*Issue*: We want people to know we're a better alternative to iTunes/Pandora/Spotify.

*Questions*:

- What differences do people perceive between us and iTunes/Pandora/Spotify?
- Why do people choose the music software they do?
- How many people have heard of our app?
- How do users perceive our brand?

Take broader questions and break them down into more specific questions:

*Question*:
Why aren't new users staying?

*Specific Questions*:

- What is the average time on page for new users?
- What page do most new users abandon?
- How quickly do new users abandon?
- What differences can we discern between activities of new users who don't return and new users who do return?
- What job are we failing to solve for new users?

For this issue: 

```Marketing goal: Increase revenue by 30% by EOY.```

The priority in this case is low compared to other priorities, so we might not even try to write questions for researching that issue.

You will likely end up with a large list of research questions which can't all be answered in a single research project,  but the prioritized list of questions will guide how you schedule and structure your research plan.

Tips from Mike Kuniavsky:

- Never go into user research to prove a point, and never create goals that seek to justify a position or reinforce a perspective. The process should aim to uncover what people really want and how they really are, not whether an opinion (whether yours or a stakeholder's) is correct.
- Learn the product thoroughly. Research goals can be framed more precisely if you can understand how the software currently works. Do what you can to become a user; read the documentation, take a training course, and talk with tech support.
- Be prepared to deal with the fundamental questions about the product. If a question comes up during research— even if it's ""should we be in this business at all?""—then there should be a way to deal with it and create research that will answer it (or at least escalate it to a senior stakeholder who can address it).",,,,,,,,,,Making a Research Plan,,Discovery,UX Design Core,,1,,,1
organize research questions into specific projects,Sorting research questions by research method helps keep research overhead to a minimum. We can use a single research project to capture information that will help answer many levels of questions for a variety of stakeholder concerns.,,"When you organize your questions by research technique, it helps you quickly create a rough schedule. 

Affinity mapping is one way to organize the questions. It takes some familiarity with the research methods to begin to quickly be able to recognize which types of questions can be answered with which type of research technique.

You can begin grouping questions by laying out a table of research techniques and a timeline of when they could be started.

<table>
<tr>
<th>What</th><th>When</th><th>Questions</th>
</tr>
<tr>
<td>Analytics</td><td>Immediately</td><td>What is the average time a new user spends on our app?
How many of our new users return at least once to the site within a week?
</td>
</tr>
<tr>
<td>Usability Testing</td><td>Immediately (recruit now, test in two to four weeks)</td><td>How easy is it for people to create a playlist?
How easy is it for people to add songs to a playlist?
How easily can a user find one of their playlists and start listening to it?</td>
</tr>
<tr>
<td>Survey</td><td>Immediately (begin writing, field survey in two weeks)</td><td>How many people have heard of our app?
How does our app rank compared to our competitors?</td>
</tr>
</table>

",,,,,,,,,,Making a Research Plan,,Discovery,UX Design Core,,1,,,1
demonstrate how to schedule projects to support a realistic research plan,"The schedule is an important part of a research plan. Research takes time. A realistic sense of how much time any given research technique takes to accomplish is very useful, but that sense often comes only with experience.

Here is a rough guideline from _Observing the User Experience_ (p. 76):

<table>
<tr>
<th>Task</th>
<th>Time</th>
</tr>
<tr>
<td>Preparation for a single research project (for just about anything other than repeated research)</td>
<td>Ten hours</td>
</tr>
<tr>
<td>Recruiting and scheduling</td>
<td>Two to three hours per person recruited</td>
</tr>
<tr>
<td>Conducting research

- Contextual inquiry/task analysis
- Focus groups
- Usability tests
</td>
<td>

Five hours per person
Three hours per group
Three hours per participant
</td>
</tr>
<tr>
<td>Analyzing results

- Contextual inquiry/task analysis
- Focus groups
- Usability tests
</td>
<td>

Five hours per person
Four hours per group
Two hours per person
</td>
</tr>
<tr>
<td>Preparing a report for email delivery</td>
<td>Twelve hours</td>
</tr>
<tr>
<td>Preparing a one-hour presentation based on report</td>
<td>Six hours</td>
</tr>
</table>",,"To make a research plan schedule, one can take the outline above of likely time needed for each research technique and overlay it, combined with the research technique question cluster, over the upcoming calendar.",,,,,,,,Observing the User Experience by Mike Kuniavsky,,Making a Research Plan,,Discovery,UX Design Core,,1,,,1
name and describe specific research methods one could use in a research plan,"To provide the best discovery, a UX designer should know a variety of research methods and should understand when it makes sense to use each one.",This objective is to help students become familiar with a few research methods. The objective is not to give students a thorough experience with each one in the context of this module. It is to introduce them to the methods and help them understand when it might be useful to use any particular one.,"There are a few discovery methods that are useful in UX design for gathering the type of information you need to move forward with design. We have covered some discovery methods already in this course, including stakeholder and user interviews.

Surveys are useful to help you understand how your user base might be segmented. They give you a chance to model your audience statistically and make generalizations about how your user base compares to the population as a whole. Surveys allow you gather details about your user base that will help inform your decisions about who to recruit for qualitative research.

Contextual inquiry helps you understand people and their behavior regarding your problem space. Observing people in their natural environment helps the researcher study the scenarios their product is meant to assist with to learn more about the users' mental model associated with the problem at hand.

Focus groups can help gauge peoples' priorities and emotional connections to problems or concepts. They can help gauge responses to possible solutions and help raise additional concerns to the surface.

Usability testing can be used in user research to discover interaction problems. They can be used for competitive benchmarking and or a quick way to evaluate solutions in progress.

Analytics can be reviewed to learn actual behavior on a site or app, which can uncover pain points and user inclinations, pointing to areas for further research or investigation.","Surveys are sets of questions that allow you to get information from a large number of people in a structured and useful way. They can ask people about themselves, their interests, and preferences. The results of surveys can be evaluated with statistical tools. That is, with a large enough number of people, you can begin to extrapolate the findings of your survey to the broader population, with mathematical certainty. You can know just how likely you are to be making a mistake if you base your design decisions on data collected from a survey with a large enough sample size. As a rule of thumb, you want to aim for around 350 participants. You might need less if you have a smaller population you want to represent, but having 350 will generally give you enough to extrapolate data to a larger audience. You should generally plan on a survey project taking 4-6 weeks to account for question writing and survey set-up, fielding the survey, and analysis.

Contextual inquiry is a process of observing and studying a few individuals in depth to more fully understand the work practice or life practice of the group of people the individuals represent. It is a great, though labor intensive, way to uncover the problems behind the problems. As Mike Kuniavsky wrote in _Observing the User Experience_: 

```[T]he obvious problem isn't always the real problem. The person who wants a new hammer and smaller nails? Maybe she really just needs a cheap birdhouse, so she's making one. Once she's done, maybe she'll never need the hammer and nails again.```

Observing people directly often helps you discover those real, underlying problems that need a solution rather than the obvious, superficial problem.

A contextual inquiry study can take around four weeks to plan and complete.

Focus groups are generally a structured interview of around eight to 10 people. Focus groups are often conducted in multiple sessions, so you have two to three separate group interviews with a new set of participants in each interview. Focus groups can often require additional planning and recruiting to gather all the necessary participants. Group interviews also have to be carefully moderated to avoid the ""group think"" that is often a hallmark of poorly conducted focus groups. Using focus groups in combination with other research will provide a richer understanding of your user base and their desires, values, motivations and experiences. You can use focus groups to:

- explore the nature of human experience in a specific domain
- prioritize features intended for use by the represented audience
- analyze competitors' products by interviewing their users
- investigate trends to understand the underlying behaviors more closely

Focus groups take approximately three weeks to plan, execute, and analyze.

Usability testing is generally a fast way to avoid launching a product that has ""showstopping usability problems."" You conduct them by interviewing individual users while watching them use your product, ideally in performing specified tasks. Usability tests can be performed at any stage in the product design cycle at any stage of fidelity. They don't need to be reserved for the end of a cycle after development has been completed. You also don't need to perform very many to be useful. Around five interviews is generally sufficient to get the majority of usability problems. A usability study can generally be planned, conducted, and analyzed within two to three weeks.

Site or app analytics can be a great resource of understanding actual user behavior. Most companies now use an analytics platform like Google Analytics or Adobe's Marketing Cloud to track user activity. By gaining access to the analytics product, UX researchers can track things like number of visitors to a specific page, number of clicks or taps on a specific interaction element, time on a page, or even progress through a purchase funnel. These data can be very informative of trends, but are not explanatory. Analytics tracking can be coupled with other research methods to make testable hypotheses for additional research. Analytics can be an ongoing process of review. Exploratory analysis can take much longer than discovering the results of a very targeted query.",,,,,,"The Essential Guide to Writing Effective Survey Questions,Contextual Inquiry - A Primer,Focus Groups",Observing the User Experience by Mike Kuniavsky,,Making a Research Plan,,Discovery,UX Design Core,,1,,,1
generate interesting ideas for data storytelling,"A portfolio isn't worth much if it isn't full of impressive projects. Being able to successfully identify an interesting angle to take with a project can make all of the difference in making your project stand out as original, and skillful. Plus, a big part of the job is framing things in a way that makes them digestible to non-technical stakeholders.",,"### Data storytelling helps students get jobs

For example, when [Jeff Kao](https://www.jeffykao.com/about-me/) was a bootcamp student, he did a data storytelling project that went viral:

_""My [blog post](https://hackernoon.com/more-than-a-million-pro-repeal-net-neutrality-comments-were-likely-faked-e9f0e3ed36a6) about the FCC project unexpectedly went viral! I got some media coverage in the [Washington Post](https://www.washingtonpost.com/news/the-switch/wp/2017/11/24/fcc-net-neutrality-process-corrupted-by-fake-comments-and-vanishing-consumer-complaints-officials-say/), [Fortune](http://fortune.com/2017/11/25/1-million-fake-fcc-comments-net-neutrality-were-probably-fake/), and [engadget](https://www.engadget.com/2017/11/25/over-1-3-million-anti-net-neutrality-fcc-comments-are-fakes/). I was also invited on to [Science Friday](https://www.sciencefriday.com/segments/life-in-the-internet-slow-lane/) to explain my work! I’ve also been interviewed about my data science work in the [New York Times](https://www.nytimes.com/2018/08/08/technology/personaltech/internet-trolls-comments.html) and [Forbes](https://www.forbes.com/sites/janetwburns/2017/12/14/earth-to-pai-those-fake-anti-net-neutrality-comments-used-stolen-identities/#32c94b66c6a9).""_

The experience helped Jeff get great jobs, first as a Machine Learning Engineer at Atrium, then as a Computational Journalist at ProPublica.

Another example: When [Josh Katz](https://www.nytimes.com/by/josh-katz) was a student intern at _The New York Times_, he made an [interactive dialect map](https://www.nytimes.com/interactive/2014/upshot/dialect-quiz-map.html?_r=0), to explore the question, _""What does the way you speak say about where you're from?""_

This data storytelling project became [the newspaper's most popular piece of content in 2013!](https://knightlab.northwestern.edu/2014/01/20/behind-the-dialect-map-interactive-how-an-intern-created-the-new-york-times-most-popular-piece-of-content-in-2013/) Now Josh works there full-time, as a graphics editor. He got a [book deal](https://www.amazon.com/Speaking-American-Youse-Visual-Guide/dp/0544703391/), too.

You could do the same as these students! Why not?

_""**Everything around you** that you call ‘life’ **was made up by people who were no smarter than you.** And you can change it, you can influence it, **you can build your own things that other people can use.**"" —Steve Jobs_

### How to find ideas for your personal portfolio projects

We have a process to help you, which we'll go through together, step by step:

![](https://raw.githubusercontent.com/LambdaSchool/DS-Sprint-02-Storytelling-With-Data/master/module1-find-ideas-and-data/mermaid-diagram-you.svg?sanitize=true)

The process starts with you! What story should you tell? Follow Kurt Vonnegut's first rule for [how to write with style](https://fs.blog/2012/09/kurt-vonnegut-how-to-write-with-style/):

_""**Find a subject you care about** and which you in your heart feel others should care about. It is this genuine caring, and not your games with language, which will be the most compelling and seductive element in your style.""_

Start with what you like and know. You can apply your [domain expertise](https://media.shellypalmer.com/wp-content/images/2015/08/data-science-venn-600px2-compressor.png) from your background before Lambda School. 

For example, [Nathan Cunningham](http://www.nathancunn.com/aboutme/) is a statistics student who's really into _The Simpsons_. So, he's used data to explore multiple questions about the show:

- [Who is the main side character in The Simpsons?](http://www.nathancunn.com/2017-07-16-simpsons-characters/)
- [When did the golden age of The Simpsons end?](http://www.nathancunn.com/2017-10-26-simpsons-decline/)
- [Which is the best/most quotable Simpsons episode?](http://www.nathancunn.com/2018-01-21-best-simpsons/)
- [Why did the golden age of The Simpsons end?](http://www.nathancunn.com/2018-10-21-simpsons-writers/)

Or, what **decisions** do you face? For example, after Lambda School, you'll decide where to work. [Can you use data to compare income vs cost of living by geographic region?](https://twitter.com/AustenAllred/status/1025774659227111424)

What questions could you ask about _your_ topic? 

### Seven templates

To help you brainstorm, here are [seven ""templates"" from Priceonomics](https://priceonomics.com/introducing-priceonomics-content-marketing/), a marketing agency. They _""help companies come up with interesting topics, analyze their data, and turn the insights into great content marketing that spreads.""_

Priceonomics claims, _""We’ve learned a lot about what works and what doesn’t. Virtually every data-driven article we produce follows one of these templates.""_ 

1. _""**Geographic Variation:** A key metric ranked by city, state, or country. For example, if you’re a car rental site, you can rank cities by where rental cars are most expensive.""_
2. _""**Trend related to the news:** What do you know that is relevant to a story or topic dominating the news cycle? For example, do you have some data related to the election’s aftermath?""_
3. _""**Who does that?** A demographic breakdown of how people use your product or engage in an activity you can track.  This is the right template if your product is particularly interesting and its usage is representative of the market.""_ 
4. _""**Secret data answering a question people care about:** These are fun analyses that you could imagine people discussing at a cocktail party. A dating app might explain how many messages, on average, users have to send to get one date.""_
5. _""**Data you have that is valuable to businesses:** If businesses read your article, will they make more money? Can you benchmark conversion rates, things that lead to higher sales or lower costs?""_
6. _""**What’s the most popular X?** Market share rankings and “horse race” data. There is something particularly satisfying about definitive rankings of what is the most and least popular thing in a category people care about. If your company monitors grocery store transactions, what are the most popular cereals?""_
7. _""**Cost/Money rankings:** What is the most expensive? Who makes the most money? If you sell dolls, which brands sell for the most money in the secondary market?""_ 

These templates also fit the examples we've seen so far.
- Dialect map = template #1
- Net neutrality = #2
- Simpsons rankings = #6

### That's interesting

Another framework is found in an unexpected source. In 1971, a research journal published a paper by sociologist Murray S. Davis, about [what makes theories ""interesting""](https://proseminarcrossnationalstudies.files.wordpress.com/2009/11/thatsinteresting_1971.pdf):

_""All of the interesting propositions I examined were easily translatable into the form: **‘What seems to be X is in reality non-X’**. An audience finds a proposition ‘interesting’ not because it tells them some truth they thought they already knew, but instead because it tells them some truth they thought they already knew was wrong.""_

Think about a topic you're passionate about. Do people have any common misconceptions? Do you have a contrarian perspective? Have you changed your mind about something you thought you already knew? Does the data and evidence support your beliefs? Perhaps this will lead you to interesting ideas for data storytelling.

However, you may want to avoid political topics, if you don't want to risk offending potential employers. For a safer example: a data-driven argument for ""why Ringo Starr was really the best Beatle"" could be interesting, contrarian, and also unoffensive.

Stand out from all the boring projects the hiring manager sees. Be true to yourself and to what you see in the data. But also, be conscientious and professional in how you communicate. Show employers the best version of yourself.

### More examples

If you find an example you like, you can:
- Explore a new hypothesis, for the same question. Or, 
- Explore a new question, for the same topic. Or,
- Explore a new topic, but with the same ""style.""

![](https://raw.githubusercontent.com/LambdaSchool/DS-Sprint-02-Storytelling-With-Data/master/module1-find-ideas-and-data/mermaid-diagram-example.svg?sanitize=true)

These sites publish some great data storytelling. What will inspire you?
- [FiveThirtyEight](https://fivethirtyeight.com/)
- [Priceonomics](https://priceonomics.com/)
- [The Pudding](https://pudding.cool/)
- [The Upshot - The New York Times](https://www.nytimes.com/section/upshot)",,Follow the flowcharts to [make a list of possible ideas](https://raw.githubusercontent.com/LambdaSchool/DS-Sprint-02-Storytelling-With-Data/master/module1-find-ideas-and-data/template.md) for your data storytelling project.,,,,,,,,Begin your portfolio,,Data Wrangling and Storytelling,DS - Statistics Fundamentals,,1,1,,2
add emphasis and annotations to transform visualizations from exploratory to explanatory,,,"The data science process often begins with _exploratory_ visualizations, and ends with _explanatory_ visualizations.

We can compare our process to an artist's:
- Exploratory visualizations are like sketches and studies made by painters in their studio before creating larger works.
- Explanatory visualizations are like the final works of art, framed and displayed in the gallery for viewers.

An explanatory visualization communicates insights, explains what the data means, and answers the question, ""So what?"" 

Here's a ""before and after"" example, to show the difference. This is an _exploratory_ visualization:

![](https://r4ds.had.co.nz/visualize_files/figure-html/unnamed-chunk-4-1.png)

And here it's transformed into an _explanatory_ visualization:

![](http://r4ds.had.co.nz/communicate-plots_files/figure-html/unnamed-chunk-4-1.png)

_""The easiest place to start when turning an exploratory graphic into an expository graphic is with good labels. **The purpose of a plot title is to summarise the main finding. Avoid titles that just describe what the plot is,** e.g. “A scatterplot of engine displacement vs. fuel economy”._

— Hadley Wickham ([_R for Data Science_, Chapters 3](https://r4ds.had.co.nz/data-visualisation.html#creating-a-ggplot) & [28](http://r4ds.had.co.nz/graphics-for-communication.html#label))

Examples help us learn. Like the painting metaphor: Some art students reproduce examples from museums to learn technique and composition from the masters.

And, some data journalism sites share their data, so we can reproduce their work and learn by doing. In this module, we will recreate visualizations published by FiveThirtyEight.

Explanatory visualizations will help you tell stories with data and differentiate your portfolio projects.",,"Recreate visualizations from this [FiveThirtyEight article](https://fivethirtyeight.com/features/al-gores-new-movie-exposes-the-big-flaw-in-online-movie-ratings/), using the [open data](https://github.com/fivethirtyeight/data/tree/master/inconvenient-sequel) they have shared.

Optional stretch goal: Recreate more examples from [FiveThityEight's shared data repository](https://data.fivethirtyeight.com/).

For example:
- [thanksgiving-2015](https://fivethirtyeight.com/features/heres-what-your-part-of-america-eats-on-thanksgiving/) ([`altair`](https://altair-viz.github.io/gallery/index.html#maps))
- [candy-power-ranking](https://fivethirtyeight.com/features/the-ultimate-halloween-candy-power-ranking/) ([`statsmodels`](https://www.statsmodels.org/stable/index.html))",,,,,"Strong titles are the biggest bang for your buck,Data storytelling example by FiveThirtyEight",Color Picker,,Make explanatory visualizations,,"Data Storytelling, Data Wrangling and Storytelling",DS - Statistics Fundamentals,,0,1,,1
sequence multiple visualizations,,,"Stretch goals — more techniques:
- [ipywidgets](https://github.com/jupyter-widgets/ipywidgets)
- [Matplotlib animation](https://matplotlib.org/examples/animation/index.html)
- [Connected scatter plots](http://www.thefunctionalart.com/2012/09/in-praise-of-connected-scatter-plots.html)
- [Idyll markup language](https://idyll-lang.org/) for ""scrollytelling""

Sequential data storytelling — more examples:
- [Pudding.cool:](https://pudding.cool/) Scrollytelling
- [Nicky Case:](https://ncase.me/) Explorable Explanations
- [Big Book of Dashboards:](https://www.bigbookofdashboards.com/) Dashboards",,,,,,,"Gapminder Tools,""Hans Rosling's 200 Countries, 200 Years, 4 Minutes""","plot.ly,Bokeh",,Sequence your narrative,,"Data Storytelling, Data Wrangling and Storytelling",DS - Statistics Fundamentals,,0,,,0
use asynchronous communication tools to communicate with their teammates,"While it is expected that there will be times when you don’t respond immediately to a message because you are head down in the code, or have stepped away for a moment, it is important that you remain in constant communication with your teammates. ","Keep an eye on each group's channel.  This is the best way to do the classic ""walking around"" style of management.  Be sure to check each channel regularly, and engage occasionally.  You don't want to appear to be micromanaging, but occasional input can be very effective and regular observation will let you know of impending trouble.","There is almost always a direct correlation between the success of the group and the amount of activity in Slack.  Groups that are doing well have fun, talk to each other often, and regularly use Slack and Zoom.  Those that do poorly often isolate themselves from one another.  ","To help your team stay on track, use your group channel regularly.  Unless you have a good reason, you should always ask questions, talk to your teammates, and report progress in the group channel.  *DO NOT USE DMs* unless absolutely necessary!

By keeping the conversation in a place where the group can see it, the entire group has the chance to be aware of what is happening and help.  There have been many times when your instructors have been present in a physical office discussing a problem that they were stuck on and someone who overheard the conversation knew the solution from a previous project.

With remote teams, our Slack channel works like the office.  Take advantage of it!",The student was available and responsive on Slack and Zoom every day this week between 8am and 5pm Lambda Time.,,,,,,,Review questions for use comms tools,Workplace Objectives,Active,Lambda Labs,Lambda Labs,,1,1,,2
follow a consistent branching strategy using GitHub,"Collaborating in an environment where there are many people working on the same project is difficult.  You must make sure that you regularly share your work, to prevent merge conflicts, overlap, and divergence from one another.  Any task that is too large to complete in a day is simply too large.  Break it down into multiple smaller tasks.  

The expectation is that every student will contribute 6 to 8 meaningful PRs every week.  A meaningful PR is one that implements part of a new feature, fixes a bug, or anything else that you could write half a page explaining what you did, how you did it, and why.  Changing a color or moving a button is not a substantive change and does not count towards this.  ","Students must log their PRs and trello cards daily.  Every student should be having one PR merged a day.  If they are not, it usually means one of several things:
* They are not breaking down their tasks into small enough pieces.  When they try to merge, there will be many conflicts
* They are not actually working, just staying in communication while doing something else
* They are working hard, but not seeking help appropriately
* They are working hard, but are not adequately prepared for labs","Every place you work will have a different process for source control.  This is fine and normal - different shops adapt processes that fit with their infrastructure, culture, resources, and other needs.  

The Lambda process is designed to balance speed and accountability.  Each PR must be certified by the submitter to meet all items in the checklist, then reviewed by a peer before it is merged by the PM.

It is critical that you follow this process and update your local repo regularly.   Otherwise, you will lose time to fighting merge conflicts.  

It is your responsibility to ensure that you do not create merge conflicts and your job to make sure that your code works with that written by your teammates.  ","One of the most important aspects of the workflow in Lambda Labs is that it requires you to break your work down into small, manageable pieces.  You are expected to submit and have merged a minimum of four PRs per week.  If this seems difficult, you are probably not breaking your tasks down into small enough pieces.  If it seems too easy, you are probably breaking them down in to too small of pieces.  

Balance here has the following benefits:
* Pushes features into dev/production as quickly as possible
* Reduce merge conflicts by reducing the amount of code your peers write without pulling down yours
* Prevent unnecessary time spent reviewing trivial PRs
* Allow for accurate project management and accountability of work completed
* Create awareness by reviewing one another's code

The specifics of the GitHub workflow is documented in this video:  https://www.youtube.com/watch?v=LSoeFvLkmFk&index=2&list=PLWX9jswdDQ0X15k6Jg8m5gheoZXb_ySq8&t=0s","The student completed a minimum of 4 successfully merged PRs, including a minimum of 1 front end and 1 back end.  The student reviewed a minimum of 3 of their peers PRs",,,,,,,,Workplace Objectives,,Lambda Labs,Lambda Labs,,1,1,,2
track progress using the kanban(Trello) board.,"Project Management tools are critical for making sure that the team stays on track.  Proper use of these helps your team stay aligned and is critical for helping managers monitor progress.  At any time, it should be visible at a glance exactly what each team member is working on currently, what has been completed recently, and what will be worked on next.","Students must now log their PRs and trello cards daily.  Every student should be having one PR merged a day.  If they are not, it usually means one of several things:
* They are not breaking down their tasks into small enough pieces.  When they try to merge, there will be many conflicts
* They are not actually working, just staying in communication while doing something else
* They are working hard, but not seeking help appropriately
* They are working hard, but are not adequately prepared for labs","Paired with the GitHub workflow is our Project Management process - Kanban.  Essentially, this process is centered around keeping track of tasks and progress on a large board covered with post-it notes that are moved from group to group to indicate their status, such as planned, in progress, complete, blocked, etc.","We use Trello to accomplish this virtually.  Your Trello board will start with a high level overview of what is needed for your project.  It's your responsibility to break these down into the small, granular tasks that you can accomplish in a day or less.  ","For each PR completed by the student, there is one card on the Trello board that has been used to track the assignment, progress, and completion of the task",,,,,,,,Workplace Objectives,,Lambda Labs,Lambda Labs,,1,1,,2
contribute to high quality stand-up and team meetings,"Morning standups are how the team keeps moving in the same direction.  It is your chance to share your accomplishments, learn what others are working on, and contribute to group decisions that can determine the success or failure of the project.  Other meetings, such as check-ins with senior management are often your only chance to make an impression with the leadership that makes important decisions in your company.  ","Attendance is critically important for morning stand-ups.  Groups with members who don't attend are often derailed by that member becoming a cowboy and stepping on other peoples' work.  

Due to the nature of the afternoon check-ins, some flexibility is needed for people who may be late - it is difficult to watch slack all afternoon for a summons.  Help this by giving the order in slack and giving regular updates for where you are.  ","During Lambda Labs, your standup will happen between 8 and 9 AM, Lambda time.  They will happen the same time every day, but this time will vary because your PM has more than one team.  

Required attendees for the team standup are the team members and the PM.  

Before the start of the meeting, complete your daily standup form in Airtable:  https://airtable.com/shrgZfMeNxpC3vOzO","Team standups must occur between 8 and 9 AM, Lambda time.  As some PMs have multiple teams, they will let their team know what time the meeting will start.

Required attendees for the team standup are the team members and the PM.

Before the start of the meeting, team members must complete their daily standup form in Airtable: https://airtable.com/shrgZfMeNxpC3vOzO

At the start time, look in your team Slack channel for a Zoom link. If no one has created a Zoom yet, *it is your responsibility to* *announce to the channel that you are starting one* then do so and paste the link.  

DO NOT WAIT FOR YOUR PM TO CREATE A ZOOM

While waiting for everyone to join, the PM will check the dashboard and remind their team members to fill out their form if they haven’t yet, and remind the team that this should be done before the meeting.

Participants should wait no more than five minutes for all attendees before beginning the meeting. When everyone has arrived, or if the time is up, all participants, including the PM, should present their standup to the group going in alphabetical order by first name.

Taking about five minutes, each developer will:

- Positively affirm that they have pulled from master in the last 24 hours
- Share their screen and show the Trello card for the task completed during the last working day
- Share their screen and show the Trello card for the  task they intend to complete today
- Raise any blockers that may hinder completion of their task

The PM will present:

- Overall project progress
- Confirmation that all team members code from yesterday is live in production or lead a discussion to determine why this is not the case
- Share the number of merged PRs for this team and their other team
- Share the number of merged PRs per person (noting that too many and too few are both concerning)
- Share their screen and update both the teams progress towards weekly milestones and overall completion in the Project Tracking document","The student has attended and participated in all standups and other required meetings, or appropriately notified their PM and received approval to miss before the start of the meeting",,,,,,,,Workplace Objectives,,Lambda Labs,Lambda Labs,,1,1,,2
work with a team to deploy the front and back end servers for their project,"If it isn’t deployed, it doesn’t exist.  Your future employer will not have access to your local branch to see whether or not you can do what your resume says you can.  Your customers won’t be sitting at your desk.  One of the most challenging aspects of development is not only getting your app to work, but getting it to work when it is hosted on a server 1000 miles away.  This task is integrated into development as a best practice to avoid a host of problems.",See the module level for instructor notes for this week.,"Every modern web application will have at least one front end and one back end server.  These are the backbone of your application and the first thing that you will set up and deploy

If it is not deployed, it doesn’t exist!  Your instructors will only review your work on the web from their own computer.

We use a deployment first methodology for several reasons, including:

* By requiring regular deployment, we spread the load of solving environmental factors causing bugs across the timeline, rather than having a stressful and potentially disastrous crunch in the last few days of the project schedule.  
Regular deployment supports best practices with the GitHub workflow.  You must share your work upward to deploy it, which makes it so that your colleagues can more regularly pull your work down to their own machines.  When everyone has the current version of everyone else’s code, merge conflicts are dramatically reduced.  
Your clients will want to see and interact with the work you are doing for them.  Regular deployment allows them to personally experience the progress you are making and will let them more easily and regularly give you feedback.  This will save on development costs.  It is much better to find out that a feature isn’t going to work as implemented when you are 10% done, as opposed to 100% done","As developers, we use iteration to build our work.  We get something functioning at a basic level, then make it bigger, better, add feature, etc.  Starting a web application is no different.  The first task is to get this backbone demonstratively working.  

Please note that this is not a list of tasks for one developer to complete while the others sit idle.  Read the instructions as a group, split out the separate tasks, add them to Trello, and work in parallel.  Divide and conquer!

After working with your team to complete your Technical Design Document, you will have picked your technical infrastructure.  

Using your chosen technology, create a new front end app, build it, and throw some version of “Hello World” on your index.html page.  

Deploy it and make sure it works.  

Set up your chosen back end, including your database solution.  For now, create a table/model/etc. that stores each of your team member’s first name and last name, in separate columns.  Manually add these records.

Set up the REST API, etc. on your back end to return this data.  

Modify the front end, including mobile apps, to pull and display this data.  

Add two new pages, one with a form that allows you to add a new name to the database and one that filters the data to only show either the first names, or last names, depending on user input.",Complete your Development Journal and pass PM review.,,,,,,,,Project Milestones - Start Up,,Labs I - Project Planning,Lambda Labs,,1,1,,2
work with a team to interpret a wireframe to deliver all features in the design specification,"Developers are rarely the person deciding what the application does, or how it works.  But this doesn’t mean that they have no input.  The best developers are those who are able to interpret the intent of a specification and work with their designers to deliver the best possible implementation. ",,,,,,,,,,,,Project Milestones - Feature Complete,,Labs III - Understanding Scope,Lambda Labs,,0,,,0
work with a team to deliver a product that allows an end user to easily access all of the applications functionality without needing to be trained or taught.,User experiences should be intuitive and draw more users into the application. A poorly designed user experience can deter users from becoming regular users of your application.,,,,,,,,,Labs IV - Team Rubric,,,Project Milestones - Presentation,,Labs IV - User Testing and UX Planning,Lambda Labs,,0,,,0
work with a team to deliver a fully polished product,"Perfect is an impossible goal, but we need to get as close as possible.  This is the time where we need to squash all of those stubborn bugs, get rid of any remaining console errors, and be ready to share our work with the world.  This is the difference between what a hiring manager views as a cute student project and what causes them to make a phone call.",,,,,,,,,Labs V - Team Rubric,,,Project Milestones - Polish,,Labs V - Final Polish,Lambda Labs,,0,,,0
work with a team to connect the front end and back end of their project,"A successful app needs to save and display data.  This connection must be stable, robust, and follow industry best practices.  ",,,,,,,,,,,,Project Milestones - Integration,,Labs II - Working with Other Developers,Lambda Labs,,0,,,0
"work with a team to implement OAuth, allowing their users to log in with one of their accounts from a company such as Google or Microsoft.","Secure authentication is one of the greatest challenges faced by developers today.  Breaches make national headlines and can destroy a company.  The trend in the industry is moving strongly towards making use of the resources of a large and powerful, third-party engineering team to securely allow their users to log in and access their data.  ",,,,,,,,,,,,Project Milestones - Integration,,Labs II - Working with Other Developers,Lambda Labs,,0,,,0
 work with a team to implement all APIs and services needed for their application.,"Long gone are they days where a single engineering team can implement an entire product, end-to-end.  Nearly everything on the web is built from combining a collection of APIs and other services in new, unique, and clever ways - with the addition of custom functionality.  ",,,,,,,,,Labs II - Team Rubric,,,Project Milestones - Integration,,Labs II - Working with Other Developers,Lambda Labs,,0,,,0
work with a team to document feedback given by a stakeholder that requires a material change to the project,"Change is constantly present in software development.  Whether due to a rejection by a client, an upgrade sold by the sales team, or changes in technology or security requirements, there is always the need to modify software.  This is a good thing!  Tickets to pull means money in developers pockets!  These changes must be handled with good project management practices. ",,,,,,,,,,,,Change Order,,Labs VI,,,0,,,0
work with a team to complete change order tasks,Pull the tickets and get them done!  There's work to do!,,,,,,,,,,,,Change Order,,Labs VI,,,0,,,0
work with a team to implement user account models,"Users are the center of the development world.  We create sites, applications, and products to satisfy their needs.  As such, it is critical that the user is present at the beginning of development.  Everything must be built around their perspective.  ",See the module level for instructor notes for this week.,"As your users are the most important component of your product, your user model is the most important model in your database.  All other data will be dependent on it’s relationship with your users.  They will in some way, shape, or form, own all of the other data your app stores and uses.  ","You have defined your user model as a part of your Technical Design Document.  Now it is time to implement it.  

Add the model to your database.

Use faker.js, or any appropriate random data generator, to generate 500 users and add them to your database.  

Add a page to the front end that takes user ID numbers and displays the data for that user.  

Add a stub for the model of the next most important set of data - the data that the users themselves will care the most about.  Depending on your app this could be their documents, friends, students, saved videos, customers, contacts, connections, etc.

Generate a set of random information and add it to your users.

Modify the page that displays a user to also display the dataset for that user.",Complete your Development Journal and pass PM review.,,,,,,,,Project Milestones - Start Up,,Labs I - Project Planning,Lambda Labs,,1,1,,2
work with a team to apply an appropriate responsive design to ensure that the features of the application can be accessed regardless of the user’s device,"Users expect their apps to work on any device, without inconvenience or discomfort.  Your site must be built so that it can effortlessly scale to any screen size.  ",,,,,,,,,Labs III - Team Rubric,,,Project Milestones - Feature Complete,,Labs III - Understanding Scope,Lambda Labs,,0,,,0
understand what is expected of them for project week 1,"Congratulations for finishing the first four course weeks of Lambda's iOS program! 

It's time to take the skills you've learned and apply them to an independent project. This is the first time you're asked to work on a project of this scale so we'll give you some guidance to get you into the groove rather than making you select and design a project entirely on your own.

Your project spans an entire week. Your project instructions this week are closer to a Sprint Challenge than an afternoon Challenge in that they are sparse. 

Treat this week like you're building this application at a company. Your client is your instructor. Your project managers (including your section lead) are your main support throughout the week.

The main objective of this week is to develop the minimum viable product (MVP) feature set listed below using the techniques, skills, and technologies you've studied here at Lambda.",,"This project is open-ended. After you finish the requirement set listed below, spend your remaining time debugging and testing your product and implementing extra features, either suggestions listed below or those you come up with yourself. Run your ideas through a PM or your section lead and have them approve it before you get too creative. They're there to help you stay on task, on time, and deliver a product.

Remember: it's more important to deliver a working well-tested product than it is to have flashy but incomplete features.

### Your API

Your project uses the Google Books API. Read this [Google Books Getting Started overview](https://developers.google.com/books/docs/v1/getting_started). It explains how the API works and how you can use it. API documentation discusses data formats and the operations you can perform. The more you understand the API, the better you'll be able to use it. 

### Requirements

You must implement each of these requirements in your application:

- Your model processes records that represent a book volume. Each record contains the following properties at a minimum:
    - A title (sourced from Google's API)
    - An image representing the book cover (sourced from Google's API) that is scaled down to a reasonable size so it does not take up too much space.
    - A `String`-based book review sourced from your application user
    - A property that represents whether or not your user has read this book.
- Your user can search for books with a text query. Matching books are displayed to the user.
- Your user can tag books to categorize them in ""bookshelves"". A single book may exist in more than one shelf. For example, your user might have a ""Favorites"" bookshelf as well as a ""Thriller-Suspense"" one.
- Your user can view a list of all their bookshelves.
- The book records including review, etc, are stored at Firebase and are read into the app whenever the user launches your app.
- Your user can insert, update, and delete books in their bookshelf or move them from one bookshelf to another. This information is stored on their behalf at Firebase and is read in whenever the user launches your application.

### Extra Requirements

After finishing your required app elements, you are not finished with your project. We expect you to implement at least two extra features. You're at liberty to choose the features you'd like to implement. 

These extra requirements (or others you come up with on your own) are not necessarily things you have learned throughout the course. Treat them as if your client adds a feature at a late date that you don't already know how to implement. How will you go about learning how to bring that feature into your product?

A few ideas are as follows:

- Allow more than one user to use the same database without conflicting or overwriting each other's data. The same information must be accessable at each launch of the program, so be sure to use good Firebase hygiene. 
- When you mark a book as read, add it also to a pre-made ""Already read"" bookshelf. Books later marked as unread must be removed from this bookshelf. 
- Share a link to a book (there is one to the Google Play store in the JSON), or your review of it to Twitter, Facebook, etc.
- Create and display a QRCode with a link to the book. Friends with mobile phones can read the QRCode and follow your link.
- Find the book on Amazon and open it in the Amazon app, or on a web browser.
- Print out your review including an image of the cover.
- Add a button to read out your review using a speech synthesizer.
- Create a ""Recently read"" or ""Recently reviewed"" screen that uses the modification time for the ""didRead"" or ""review"" properties to select items to showcase.

### Commit History

Commit your code often and meaningfully. This helps both you (in case you ever need to return to old code for any number of reasons) and anyone you're working with.

**Commit regularly when you've made a complete and quantifiable change to your code.** There is no set amount of time that should happen or amount of code written between commits; simply use your best judgement. Adding new features. Fixing a bug. A good rule to follow is if what you've done can't be summarized in about 50 characters, you **may** have gone too long before committing. If you are committing more than one change at once, you're not committing often enough.

Your PMs will check that you are committing regularly, with clear and understandable commit messages.

### Work Alone

You project week project is an individual effort. Your work is your own and your classmates are responsible for their own project time as well. Your application reflects your proficiency as a developer and your command of the concepts and techniques in the first iOS Unit. 

The twenty minute rule continues to apply. Seek help from your PM or Section Lead if you run into problems that are keeping you from moving forward or leading you towards a mire you'll get bogged down in. Your team is there to help you. Just make sure you give your fellow students the space they need to succeed, too.

### Planning

Design your interfaces and schedule your time carefully. Keep your scope narrow and focused. Even though you have a week to work in, there's a lot of work to do and you need to make sure you're moving forward with good progress with an end in sight and will have a completed application to present.

Thoroughly test and debug your application well before it's time to present it. Stick to your schedule and make sure that testing and refinement is part of that schedule.

Remember: Simpler and working is better than fancy and unfinished.",,,,,,,,,,iOS Fundamentals Project Week Kickoff,,iOS Unit 1 Project Week: Core iOS,iOS Development Core,,1,,,1
,,,,,,,,,,,,,,,,,,0,,,0
understand the role of Xcode and IDEs in application development,"What is this new app _Xcode_ and why is it so important to iOS/macOS development? Why not just use a text editor or word processor or even a notepad for that matter? After all, programming is mostly about typing words and there are hundreds of applications designed to create and format text.",,"Xcode is far more than a simple text editor, as you'll see as you use it more and more to build applications. It's what's known as an _IDE_, or _integrated development environment_. Think of it like Photoshop but for code. It's a specialized tool built specifically for the purpose of building other software. Photoshop can do lots of things well, but it does have a core set of functionality tuned specifically for a particular workflow. You could plan a party with todos and list of guests in Photoshop, but it wouldn't be a very optimized experience. In the same way, a plain text editor or even a word processing application is a place where you could write out all your Swift code, but because they are optimized for different tasks, the experience would be anywhere from mildly to greatly frustrating.

Xcode's purpose is to help you write better code, and therefore build better applications. It runs only on macOS and is used to build iOS, tvOS, watchOS, and macOS applications. It allows code to be written in Swift or Objective-C, the two primary languages used to build the aforementioned app types. It also supports a handful of other languages, but these are used comparatively much less often and are also beyond the scope of this course.",,,,,,,,,,,,,,,1,,,1
"create a new project in Xcode, recognize and explain the basic file types that make up a project, and be able to add and remove files from a project","When opening Xcode for the first time, it will likely seem overwhelming with its many panels and controls. The best way to get familiar with it though is to build a basic project and learn how to navigate the major areas.",,"Let's start by building a brand new iOS project and then we'll take a look at the navigator to see how to switch between files.

Start by opening Xcode (if you don't have it installed, you can download it for free from the Mac App Store).

![Xcode's welcome screen](https://raw.githubusercontent.com/jcgohlke/lambda-resources/master/airtable-images/ios-fundamentals-i/ios-development-tools/xcode-welcome.png)

You'll be presented with this window on launch. It allows you to open recently opened projects on the right, and on the left you can choose to either create a new playground, a new project, or clone an existing project from a git repository. We'll cover git later on in this lesson.

Click the _Create a new Xcode project_ button. You can alternatively go to the menubar and select _file->new->project_ if you don't see the welcome screen.

![New project window, first pane](https://raw.githubusercontent.com/jcgohlke/lambda-resources/master/airtable-images/ios-fundamentals-i/ios-development-tools/xcode-new-project.png)

When clicked, you'll get a new Xcode window and a panel will appear asking for what type of app you wish to create. The _iOS_ tab will likely be selected and under _Application_ you'll see various types of apps that can be created. We'll pick _Single View App_ this time.

![New project window, details pane](https://raw.githubusercontent.com/jcgohlke/lambda-resources/master/airtable-images/ios-fundamentals-i/ios-development-tools/xcode-new-proj-details.png)

When you click _next_, a new window panel will appear. This is where you name your app, and also provide other important configuration information so Xcode can set up your app project appropriately.

Type _Hello_ for the app name, and use an _Organization Identifier_ of `com.lambdaschool`. The _Organization Name_ can be filled in with your name, Lambda School, or you can even leave it blank. Ensure the language is `Swift` and that the 3 checkboxes are _unchecked_.

![New project window, save to pane](https://raw.githubusercontent.com/jcgohlke/lambda-resources/master/airtable-images/ios-fundamentals-i/ios-development-tools/xcode-new-proj-save.png)

When _next_ is clicked this time, a final panel will appear asking you to choose a location to save your project files. Pick an appropriate folder and then click _create_.

![Xcode project window showing file navigator](https://raw.githubusercontent.com/jcgohlke/lambda-resources/master/airtable-images/ios-fundamentals-i/ios-development-tools/xcode-file-navigator.png)

The window that appears is potentially quite overwhelming at first glance, but let's take it one area at a time and understand how items are arranged.

The left panel is called the _navigator_ and it contains several tabs that allow you to explore the various parts of your project. The leftmost tab (the small file folder icon) is called, appropriately enough, the _file navigator_. This tab shows the folder structure of your project and the files contained within each folder. The blueprint icon at the top represents the project as a whole, and the folder just below it is the root folder of your project. Let's take a look at the usual files that are created automatically with a single view application like this one:

* `AppDelegate` - The starting point for your application and where the initial code is stored.
* `ViewController` - The _C_ in the _MVC_ design pattern (controller). This file is responsible to receive events (like when the user taps a control) from the view and do something in response. It's also the file that instructs the view how to create/update itself. Typically an app will have several different view controllers (usually one for each view shown onscreen).
* `Main.storyboard` - A file that contains the views of the app. So the _V_ in _MVC_. This is where the screenfuls of content will live. Each one backed up by a controller.
* `Assets.xcassets` - The asset catalog. A place to store and catalog images and other media used in your app.
* `LaunchScreen.storyboard` - Another storyboard that is specifically used by Xcode to generate launch images for your app. Launch images are shown for a second or so on a fresh launch of the application. Usually these either just display the logo of the app or software company who made it, or they might show some initial state of the UI so as to make the app launch appear faster than it is. NOTE: the launch screens can only contain static content, so no animations are allowed.
* `Info.plist` - A configuration file for the app that contains metadata about the app itself.
* `Products` - a folder where Xcode will store the fully built app file. This folder can be ignored for now.

To navigate to any of these files, simply click the filename in the file navigator. The main editor area of Xcode will change to display the contents of that file, if applicable.

To remove a file from the project, simply click on the filename and press the delete key on your keyboard. It will ask if you want to move the file to the trash or simply remove the reference. Trashing the file will remove it from your project **and** also move that file to the OS' trash can. Removing the reference will make the file no longer part of your Xcode project, but it **will** keep the file in the project's folder hierarchy on the hard drive. Do whatever makes sense, but most of the time, if you're deleting a file you probably want it moved to the trash.

To add a file to your project, simply select file->new->file from the menubar (or [cmd ⌘]+N on your keyboard).",,,,,,,,,,,,,,,1,,,1
"identify the major components that make up Xcode's tools including its editor area, navigator area, debug area, and utilities area and be able to control the presentation of files to be edited",,,"Now that we've seen the basic file structure of an Xcode project and how to move between those files, let's examine the rest of the Xcode interface.

![Xcode project window showing the navigator and the inspector panes](https://raw.githubusercontent.com/jcgohlke/lambda-resources/master/airtable-images/ios-fundamentals-i/ios-development-tools/xcode-overview.png)

As described in the previous section, the lefthand side of Xcode contains the navigator. We've already reviewed the first tab, the file navigator, but let's take a look at the remaining tabs.

1. File navigator - The folder/file structure of the project
2. Source control navigator - A look at the status of the app if under source control
3. Symbol navigator - You can navigate based on symbols, so by class name or method name
4. Find navigator - Project-wide search (can perform both find and replace operations from here)
5. Issue navigator - Shows any build errors or warnings for the project, also shows runtime issues if the app has been run at least once and one or more issues were found
6. Test navigator - Shows unit tests and the status of their last execution, if any
7. Debug navigator - Shows various information on the state of the app when run on the simulator or device 
8. Breakpoint navigator - Shows all breakpoints for the app and allows you to jump directly to them in the code
9. Report navigator - Shows all build and run attempts, essentially a log of activity for building and running the project

The right-hand panel is called the _inspector_. The information displayed by any of the inspector tabs always pertains to the _currently selected item_. When viewing a source code file, like we see in the screenshot above, the inspector provides a _file_ inspector, and a _quick help_ inspector. The quick help inspector is useful if you have your cursor next to a symbol that can be found in the Apple Documentation. In the screenshot, the cursor is next to the method `viewDidLoad` so the inspector provides details on that method.

The inspector is much more detailed when viewing a storyboard. Let's take a look at this app's storyboard below:

![Xcode project window showing storyboard and the storyboard-specific inspector tabs](https://raw.githubusercontent.com/jcgohlke/lambda-resources/master/airtable-images/ios-fundamentals-i/ios-development-tools/xcode-storyboard-inspector.png)

With the storyboard selected in the file navigator, we can see the inspector takes on a whole new look. A label has been selected in the view and the inspector is currently showing all the details of that label. Things like font size and type, how the text is aligned, the font color, etc. are shown in the _attributes_ inspector. When a storyboard is viewed, the inspector tabs will be as follows:

1. File Inspector - Details about the file selected (in this case the storyboard itself)
2. Quick Help Inspector - Information from the documentation about the currently selected item
3. Identity Inspector - Settings for the currently selected item and what class it represents
4. Attributes Inspector - All the attributes that can be modified about the currently selected item
5. Size Inspector - Sizing information and auto layout rules for the currently selected item
6. Connections Inspector - Connections from the currently selected item to other objects (frequently back to the view controller in charge of the view)

When you're ready to run your app, you can click the play button in the upper left corner of the Xcode window. An additional pane of info will appear when executing the app. See below for what this will look like with our project:

![Xcode project window showing the navigator, inspector, and debug panes](https://raw.githubusercontent.com/jcgohlke/lambda-resources/master/airtable-images/ios-fundamentals-i/ios-development-tools/xcode-running-app.png)

The one new area we haven't seen previously is the _debug area_. It contains two additional panes with information about the currently running app we've just built. Our app doesn't do much, so the area is fairly sparse, but with future apps you'll spend quite a bit of time here debugging your app's errors and strange behavior.

Since the actual editor window containing your source code or storyboard canvas can get quite crowded with all these navigators and inspectors open, Xcode provides an easy way to show or hide any one of them at any time. Look at the screenshot above in the upper right corner. There are a series of three buttons that correspond to the navigator, debug, and inspector panes, respectively. Simply click a button to show or hide any of the panes you'd like. It comes in handy when you need to move things out of the way to make more room for the editor.

Many developers like the speed of keyboard shortcuts to accomplish common tasks, so if that describes you, feel free to use the shortcuts below for showing/hiding these panes. Or use the buttons; the important part is that you develop a workflow that works for you.

* To show/hide the navigator: ⌘0 [cmd]+[zero]
* To show/hide the inspector: ⌘⌥0 [cmd]+[option]+[zero]",,,,,,,,,,,,,,,0,,,0
"build a basic Xcode project, deploy it to a simulated iOS device, and use the simulator's basic features to run and explore that application",,,,,,,,,,,,,,,,,,0,,,0
,,,,,,,,,,,,,,,,,,0,,,0
,,,,,,,,,,,,,,,,,,0,,,0
create a portfolio site with GitHub Pages,"To succeed in tech, you need a professional discoverable web presence. Here's how to get started!",,"#### Examples by Lambda DS students

[Brian Behnke](https://brianbehnke.github.io/)  
DS3 PM, GitHub Pages, Beautiful Jekyll theme.

[Chris Luedtke](https://chrisluedtke.github.io/)  
DS2 student. GitHub Pages, [a Bootstrap theme](https://github.com/chrisluedtke/chrisluedtke.github.io/blob/master/README.md) (not Jekyll).

[Daniel Martin-Alarcon](https://danielmartinalarcon.github.io/)  
DS1 student. GitHub Pages, Beautiful Jekyll theme.

[Ray Heberer](http://www.rayheberer.ai/)  
AIMLDS1 graduate. WordPress blog.

[Samir Gadkari](https://samirgadkari.github.io/)  
DS1 student. GitHub Pages, single page, no theme. 

[Trista Paul](https://trista-paul.github.io/projects)  
DS2 student. GitHub Pages, Primer theme.

#### More examples

[Max Woolf](https://minimaxir.com/)  
GitHub Pages, Jekyll. Great format: Image + short description per project. But you don't need so many projects. He moved from QA Engineer to Data Scientist, without going back to school.

[Michael Fogleman](https://www.michaelfogleman.com/)  
Image + short description per project. One of the most amazing portfolios ever, but you don't need so many projects.

[Brad Sliz](http://bradsliz.com/)  
GitHub Pages, ""Beautiful Jekyll"" theme. Image + short description per project. 3 projects (reasonable number). Mid-career data scientist. Ryan Herr worked with him.

[Y Combinator Research — Human Advancement Research Community](https://harc.ycr.org/project/)  
""Beautiful Jekyll"" theme. Image + short description per project.

[Sara Simon](https://smbsimon.github.io/)  
GitHub Pages. Former bootcamp student. Just one page, one photo, two paragraphs, six links. Less is more!

[Robby Kraft](https://robbykraft.com/)  
Simple, beautiful landing page. Uses JavaScript to avoid email harvesting. His educational background: Bachelor's in Philosophy, 2012.

[Ryan Herr](https://rrherr.github.io/)  
GitHub Pages, Jekyll, similar to Primer theme.","#### Option A: How to use the ""Beautiful Jekyll"" theme 

The Beautiful Jekyll theme is better with images than the Primer theme.

[In our recorded video for the ""Beautiful Jekyll"" theme](https://www.youtube.com/watch?v=k0Fed_CrIKI&feature=youtu.be&t=606), we demonstrate this process, step by step:

[Follow the instructions in the documentation](https://github.com/daattali/beautiful-jekyll#build-your-website-in-3-steps):
1. Fork the repository
2. Rename the repository to `yourgithubusername.github.io`
3. Customize your website settings: Edit the `_config.yml` file

Edit `aboutme.md`. Use [Markdown](https://commonmark.org/help/).

Edit `index.html`. Use HTML.

To add a post using GitHub's web interface:
- Go to the `_posts` folder
- Click the ""Create new file"" button
- Name the file with this format: `yyyy-mm-dd-post-name.md`
- Add these lines at the top of the file:  
```
---
title: 
subtitle: 
image:
--- 
```

#### Option B: How to use the ""Primer"" theme

The Primer theme is simpler to start than the Beautiful Jekyll theme. 

[In our recorded video for the ""Primer"" theme](https://www.youtube.com/watch?v=d7ypwpjlBZs), we demonstrate this process, step by step:

**1.** Create a new GitHub repo named `yourgithubusername.github.io`

**2.** Create a new file named `_config.yml` with these two lines:

```
theme: jekyll-theme-primer
title: Your Name
```

**3.** Create a new file named `index.md` with whatever [Markdown](https://commonmark.org/help/) content you want. I suggest you start with something similar to this:

```
### Data Scientist

I'm a data scientist in GEOGRAPHIC AREA. I help DESIRED CLIENTS with DESIRED DATA SCIENCE SPECIALTY.

### Contact
- [Email](mailto:your@email.com)
- [LinkedIn](https://www.linkedin.com/in/your-linkedin-url/)
```

**4.** Visit your portfolio site at `https://yourgithubusername.github.io`","Create a portfolio site with GitHub Pages. Your portfolio must include your name (or pseudonym), and one or more links. 

Links could include:
- Email
- LinkedIn
- Twitter, etc
- Writing, notebooks, projects
- What you're learning. A book you're reading

Stretch Goals:
- Add images
- Add posts
- Experiment with design",,,,,What is GitHub Pages?,StaticGen,,"Begin your portfolio,Begin your portfolio",,"Creating Professional Portfolios, Data Wrangling and Storytelling","DS - Annex, DS - Statistics Fundamentals",,1,1,,2
write a professional biography,"Your professional bio is a great place to make a first impression to visitors to your portfolio site. A good bio helps portfolio visitors (including hiring managers!) be able to see you as more than a 1 page resume, but as a person with both professionalism and personality.",,"### A good bio doesn't have to be long. One or two sentences is a great start.

Your bio should include a hypothesis for your data science “niche”, such as:
- Particular industry
- Particular business problem
- Type of data scientist","Here are a few good example bios from our Lambda School data science program!
- [Audrey Taylor-Akwenye](https://audreyakwenye.github.io/aboutme/), DS3 PM
- [Christopher Tolbert](https://hughjafro.github.io/aboutme/), DS1 student
- [Dakota Pope](https://dpgofast.github.io/aboutme/), DS3 PM
- [Peyton Runyan](https://peytonrunyan.github.io/aboutme/), DS1 student
- [Zach Angell](https://zangell44.github.io/aboutme/), DS1 student

### What kind of data science do you want to do?

What _kind_ of data science do you want to do in your first job? You don't have to decide now, but make a first hypothesis. These links can help you explore the options:
- [Data scientist archetypes](https://brohrer.github.io/data_science_archetypes.html)
- [Type A vs Type B data scientists](https://medium.com/@rchang/my-two-year-journey-as-a-data-scientist-at-twitter-f0c13298aee6)
- [Data Analyst vs Data Scientist: Industry Perspectives](https://mpopov.com/blog/2018/5/24/data-analyst-vs-data-scientist-industry-perspectives)
- [Why you shouldn’t be a data science generalist](https://towardsdatascience.com/why-you-shouldnt-be-a-data-science-generalist-f69ea37cdd2c)
- [The 20 data science projects at the core of every successful business](https://medium.com/applied-data-science/every-arrow-on-this-diagram-is-a-data-science-project-775339e51828)
- [Machine Learning Applications, by Industry (Vertical) and Function (Horizontal)](https://github.com/fastai/fastai/blob/master/courses/ml1/ppt/ml_applications.pptx?raw=true)

Here's a process for how you can [create an irresistible “elevator speech”](https://download.jillkonrath.com/hs-fs/hub/110248/file-673489009-pdf/documents/ebook_attracting_more_customers-1.pdf). This is written for people in sales. _You_ are in sales, because getting a job _is_ sales!

[This copywriter's bio](http://getcoleman.com/) has an interactive slider, from ""Less Hard Sell"" to ""More Hard Sell."" This is a balance! But many data science students should try to sell harder.","Add a biography to your portfolio site. 

Your bio should include a hypothesis for your ""niche"", such as:
- Particular industry
- Particular business problem
- Type of data scientist",,,,,,,,"Begin your portfolio,Begin your portfolio",,"Creating Professional Portfolios, Data Wrangling and Storytelling","DS - Annex, DS - Statistics Fundamentals",,1,1,,2
"write a project proposal with hypothesis, in inverted pyramid style",,,"'- [The Elements of Style](https://en.wikisource.org/wiki/The_Elements_of_Style) — part III, ""Elementary Principles of Composition"", is most relevant to writing concise effective summaries
- [Inverted pyramid](https://en.wikipedia.org/wiki/Inverted_pyramid_(journalism))",,,,,,,,,,Revise your writing,,Creating Professional Portfolios,DS - Annex,,0,,,0
write cold emails or LinkedIn messages to request informational interviews,,,"#### Example messages

Stephanie Hurlburt includes short, simple examples in [the power of the informational interview](https://stripe.com/atlas/guides/networking#the-power-of-the-informational-interview).

Zak Slayback did a brownbag session for Lambda School students: [How to Craft a Killer Outreach Email](https://www.youtube.com/watch?v=2_u-jlty84U). He has [12 Done-For-You Email Scripts](https://zakslayback.com/wp-content/uploads/2018/02/12-Done-For-You-Email-Scripts.pdf). I suggest looking at scripts #1, 4, 5, 10.


#### ""Informational interview"" advice

This advice comes from an unlikely source! [How to Be Better at Parties](https://www.nytimes.com/guides/smarterliving/be-better-at-parties):

_**Be more interested to be more interesting**_

_“If you just talk a lot you might get exhausted, but if you **ask questions and listen** and draw people out, they’ll think you’re a great conversationalist.”_

_“For me it comes down to being aware that I should be more interested than I should be interesting,” Mr. Karia said. He brought up a study in which two researchers from the psychology department at Harvard University found that [talking about yourself triggers the same pleasure sensation](http://www.pnas.org/content/109/21/8038) in the brain as food. **“People would forgo money in order to talk about themselves,”** he said. You can use this to your advantage simply by listening._ 

_Mr. Ford wrote of this in his [Medium post](https://medium.com/s/story/how-to-be-polite-9bf1e69e888c). At one party, he found himself saying: **“Wow. That sounds hard,”** after a stranger told him what she did for a living. It worked brilliantly. “Maybe a hundred times since I’ve said, ‘Wow, that sounds hard’ to a stranger, always to great effect.”_

#### [Questions to ask in an informational interview](https://blog.udacity.com/2014/11/informational-interviews-how-to-find.html)

_To make the most of your meeting, prepare well for it. There are many questions to ask, but **DON’T ASK FOR A JOB.** It puts the person on the spot and is pushy._

_If you’re not sure what to ask, consider this short list of questions:_

- _How did you get started in this career?_
- _What do you love most about this job? What do you find challenging?_
- _What do you do on typical day?_
- _What skills are needed for this job?_
- _What other options are open to someone with those skills?_
- _What do you wish you had known before you started this career?_
- _How do you recommend I start my search?_
- _Is there anyone else you recommend I talk to?_
- _Is there anything I can help you with?_",,"Draft 1 cold email or LinkedIn message to a data scientist from your list.

Checklist for your message:
- Build rapport (with common ground and/or compliment)
- Ask a question, such as: What’s a day in the life like there? / What are the biggest challenges you’re working on? / Would you be free for a 30 minute chat?
- Share your background, in 1-2 sentences. (No self-deprecation.)
- Show enthusiasm! (But no desperation.)

Stretch goal:
- Draft more messages",,,,,,,,Connect with professionals,,Creating Professional Portfolios,DS - Annex,,0,1,,1
write a blog post on a technical topic,,,,,,,,,,,,,Writing and Presentation Skills,,,,,0,,,0
edit writing based on usability research guidelines,,,"'- [Hemingway App](http://www.hemingwayapp.com/)
- [Nation Shudders At Large Block Of Uninterrupted Text](https://www.theonion.com/nation-shudders-at-large-block-of-uninterrupted-text-1819571366)
- [How Users Read on the Web](https://www.nngroup.com/articles/how-users-read-on-the-web/)",,,,,,,,,,"Writing and Presentation Skills,Revise your writing",,Creating Professional Portfolios,DS - Annex,,0,,,0
critique the rhetoric and analysis of data journalism articles,,,,,,,,,,,,,Writing and Presentation Skills,,,,,0,,,0
use Markdown and LaTeX,,,,"[Markdown — Google Colab Notebook](https://colab.research.google.com/drive/1GxE_tFxXrguidU58W-94mpPsb-lQh11w)

[LaTeX — Google Colab Notebook](https://colab.research.google.com/drive/1rd17IhgaKuMNKK-DV4Y-8afgxt4XYBqU)","Stretch Goals:
1. Work on rebuilding the LaTeX equations from [the bottom of the LaTeX notebook](https://colab.research.google.com/drive/1rd17IhgaKuMNKK-DV4Y-8afgxt4XYBqU#scrollTo=2myrzqFd3UXC)
2. Work on some [Project Euler](https://projecteuler.net/) solutions to practice your Python and LaTeX

(Do not work on the stretch goals until you have posted to Medium.)",,,,,,,,Publish blog posts,,Creating Professional Portfolios,DS - Annex,,0,1,,1
create basic plots appropriate for different data types,"Now that you've taken some time to understand the depth and variety of plots, it's time to make your own! Refer to the example code in the lecture notebook, and start making your own visualizations.


Every student should create and share (in the cohort Slack channel) at least one visualization. The suggested flow - look at a graph gallery or documentation for matplotlib, pick an example, and reproduce it. Then, see if you can adjust it!

But of course you don't have to stop there - explore the plotting ecosystem and try playing with more ways to look at data.","This should be a *fun* activity, with people participating in Slack. Be encouraging, but when possible speak to something either being effective or not in portraying the underlying data.","Data visualization is a deep topic (as many of the topics we touch are) - your goal for today is to understand enough to make basic but appropriate choices about plot type and parameters. If you choose to go deeper then that's great! Check out some of the links to other resources, and share what you find or make with your fellow students.","During live-coding in the lecture, we will explore the fun and challenge of making plots.","Explore the documentation linked for Matplotlib, and make your own visualizations for each type of data as demonstrated in class.

Optional stretch goal - also generate comparable plots with seaborn.",D9XVNCeX7UM,http://youtube.com/watch?v=D9XVNCeX7UM,https://www.youtube.com/embed/D9XVNCeX7UM,,DS Notebook 113 - Plotting Playground,seaborn - statistical data visualization,"Discuss with a fellow classmate:
- What was surprisingly challenging about making plots?",Basic Data Visualizations,,,,,1,1,1,3
explain what the Gestalt principles are and how to use them when designing,"The Gestalt principles provide a holistic description of how humans perceive the world. With an understanding of perception, we can create designs that are quickly and easily interpreted by our users.","It helps to have a cheat sheet with the Gestalt Principles quickly listed out. 
- Proximity
- Similarity
- Continuity 
- Closure
- Symmetry
- Figure/Ground
- Common Fate","In the early twentieth century, a few German psychologists wanted to explain how human visual perception works, or how we are able to perceive the world. During their research, they observed many different visual phenomena. 

One of their most crucial findings was that human vision is holistic. In other words, our visual system is extremely adept at imposing structure on visual input so we see whole shapes, figures, and objects rather than disconnected edges, lines, and areas. Since the German word for “shape” or “figure” is Gestalt, the theories they produced became known as the Gestalt principles of visual perception. 

While this was groundbreaking work at the time, today’s psychologists regard Gestalt theory as a descriptive framework instead of an explanatory or predictive theory. That is to say that the Gestalt principles are wonderful tools for describing how we perceive things, but they cannot help us explain why we saw them this way. These days, we rely more on the neurophysiology of the eyes, optic nerve, and brain to explain perception.

However, the recent findings of neurophysiological researchers do indeed support the observations of the Gestalt psychologists. Humans are “wired” to perceive and interpret our environments based on whole objects. Therefore, we can still use the Gestalt principles to describe visual perception and as guidelines for user interface design.

For our work, we can focus on the following seven Gestalt principles: Proximity, Similarity, Continuity, Closure, Symmetry, Figure/Ground, and Common Fate. Let’s take a look at each of these now and how they help us design interfaces.

## Proximity
According to *Designing with the Mind in Mind* by Jeff Johnson, the principle of Proximity states that ```“the relative distance between objects in a display affects our perception of whether and how the objects are organized into subgroups. Objects that are near each other (relative to other objects) appear grouped, while those that are farther apart do not.”```

Let’s take a look at an example of Proximity in action. In the following image, we see two groups of stars. On the left, we can see three rows of stars while on the right we see three columns. These patterns are apparent to us because of the Proximity of the start to one another.

![](https://tk-assets.lambdaschool.com/67d8fdde-7cb1-4869-87c5-9ba656417c37_ScreenShot2018-10-30at8.58.10AM.png)

As you can image, Proximity has obvious implications for how we layout our designs. We can visually group elements and information together simply by placing them together. This allows us to move away from using separators like lines and boxes, which can clutter an interface with too many details.

If we don’t take Proximity into account and our designs are poorly spaced, users will have trouble perceiving them as related. Thus, our software will be harder to learn, remember, and interpret. Following the Proximity principle will dramatically improve the usability of our designs.

## Similarity
Let’s move on to the next Gestalt principle: Similarity. It states that ```“objects that look similar appear grouped, all other things being equal.”``` As we can see in the image below, the bordered stars are perceived as a group relative to the other stars.

![](https://tk-assets.lambdaschool.com/e9ab3964-4234-468d-904d-f0fb25d8b0fc_ScreenShot2018-10-30at9.11.38AM.png)

In our designs, we can use Similarity to group related items when we design forms, controls, and other elements. By keeping elements consistent, we help users perceive them as related and therefore they can take start building a mental model about how they should interact with them.

## Continuity
While the first two Gestalt principles cover our tendency to organize elements into groups, some other principles describe how we resolve ambiguity or missing data so we can perceive whole objects. The first of these is the Continuity principle, which states that ```“our visual perception is biased to perceive continuous forms rather than disconnected segments.”```

In the following image, we can see this Continuity in action. On the left, we see blue and orange lines crossing. We don’t perceive them as four distinct lines or several blue-and-orange V’s. Instead, we perceive that they connect under the circle. Likewise, on the right, we see one sea monster not three pieces of one.

![](https://tk-assets.lambdaschool.com/5b1cabf2-13fd-4623-8a7d-71612e996b40_ScreenShot2018-11-06at8.35.24AM.png)

A common interface example of Continuity are sliders. For example, in the following image, we see a single slider with a handle on top instead of two separate lines split by the handle.

![](https://tk-assets.lambdaschool.com/a7995cc3-39bd-42e5-9bd8-4ba7bf358b65_ScreenShot2018-10-30at9.34.29AM.png)

## Closure
```”Related to Continuity is the Gestalt principle of Closure, which states that our visual system automatically tries to close open figures so that they are perceived as whole objects rather than separate pieces.”``` In the following image, our minds put together the disconnected arcs on the left to form a circle. And on the right, we’re interpreting the blank area in the center as a triangle even though there are only three V-shapes and three “pac-men” shapes. 

![](https://tk-assets.lambdaschool.com/7bbf1a31-9d52-4acc-8b6b-2e168fab9d4a_ScreenShot2018-10-30at9.39.10AM.png)

A common interface example of Closure is using stacks of items to represent a collection. Showing one whole on top and the pieces of another item behind it are enough to make us perceive all the items as a whole stack.

## Symmetry
Next, we have the principle of Symmetry. ```“It states that we tend to parse complex scenes in a way that reduces the complexity. The data in our visual field usually has more than one possible interpretation, but our vision automatically organizes and interprets the data so as to simplify it and give it symmetry.”``` 

In the following image, we interpret the complex shape on the left as two overlapping diamonds, instead of two touching corner bricks or a pinch-waist octahedron with a square in its center. That’s because overlapping diamonds are a simpler explanation for the shape than the other two interpretations because it has fewer sides and more symmetry.

![](https://tk-assets.lambdaschool.com/137c212f-2cbc-44d9-9fa1-63f4c86b7d9b_ScreenShot2018-10-30at9.48.32AM.png)

If you’ve ever created a 3d cube on paper, then you’re already familiar with Symmetry in action. In design, we’ll frequently use Symmetry to represent 3d objects on a 2d plane.

## Figure/Ground
The Figure/Ground principle helps describe how we structure the data we receive. It states that ```”our mind separates the visual field into the figure (the foreground) and ground (the background). The foreground consists of those elements of a scene that are the object of our primary attention, and the background is everything else. The Figure/Ground principle also specifies that the visual system’s parsing of scenes into figure and ground is influenced by characteristics of the scene.”```

In the following image, we interpret that the smaller triangle is on top of the larger circle. So the triangle is the figure while the circle is the ground.

![](https://tk-assets.lambdaschool.com/3735c161-da2a-4e15-be98-c4451f590b9e_ScreenShot2018-10-30at10.00.52AM.png)

That said, the perception of figure and ground also depends on the viewer’s focus of attention. Dutch artist M. C. Escher was famous for using this technique to create ambiguous images where the figure and ground changes as our attention shifts.

![](https://tk-assets.lambdaschool.com/8d9b20fb-9041-4b45-aafc-6d3b46d670fd_ScreenShot2018-10-30at10.03.12AM.png)

In UI design, we’ll typically use Figure/Ground to layer elements and create the perception of depth. We can use it for branding and aesthetic purposes, or we can use it functionally too like when we use a modal.

## Common Fate
While the previous Gestalt principles applied to the perception of static objects, Common fate focuses on movement. ```”The Common Fate principle is related to the Proximity and Similarity principles: Like them it affects whether we perceive objects as grouped. The Common Fate principle states that objects that move together are perceived as grouped or related.”```

In the following image, we can see that the cars moving together appear to be related.

![](https://media.giphy.com/media/10sdHhdORJo8uI/giphy.gif)

We’ll frequently use Common Fate when animating our interfaces. For example, we’ll often animate related data similarly in charting UIs to represent groupings.

![](https://tk-assets.lambdaschool.com/d3326ff2-3eeb-4bc8-8717-1b708e2a8c89_charts.gif)

## All Together Now
While understanding each of the Gestalt principles in isolation is useful, in practice we’ll often employ some or all of them at once in an interface. Sometimes this can lead to unexpected visual relationships in the design. So, it is often a best practice to review your designs and focus only on one principle at a time. This way you can identify any relationships between elements that you did not intend.

*Please note that the quotes in this content and the descriptions of the Gestalt principles come from **Designing with the Mind in Mind: Simple Guide to Understanding User Interface Design Guidelines** by Jeff Johnson. This book is an incredible resource for understanding these concepts further and is a great addition to any UX designer’s library.*","When we’re designing, we typically have two reasons to use the Gestalt principles. We’re either reviewing a design to see if we can improve its usability or we’re working on a new design and are trying to make it usable from the start. Let’s cover how we’d approach each of these scenarios.

## Gestalt and New Designs
As we create new designs, we should be cognizant of what our goal is for the design and how the Gestalt principles can help us achieve that goal. With this in mind, let’s walk through how we might design a sign up page.

The goal of the page is to make it as easy as possible for users to sign in to our website. So, we’ll need to include a form with four fields for their first name, last name, email, and password. Now that we understand our goals, we can design with the Gestalt principles in mind from our starting point pictured below.

![](https://tk-assets.lambdaschool.com/22686ea3-951b-475e-82d2-6616c6927cb1_Desktop.png)

To start, we can use the Proximity principle by keeping the labels and inputs close together to show that they are related. We also want to stack the labels on top of the inputs to follow [form usability best practices](https://www.nngroup.com/articles/form-design-white-space/). We’ll then add a bit more spacing between the fields to show that they’re related but also distinct from each other.

![](https://tk-assets.lambdaschool.com/57f74335-1be2-4257-8506-3139a6cca497_Desktop.png)

Next, we can make sure that all of the labels and inputs have the same design treatment. Doing so invokes the Similarity principle and further demonstrates their relatedness.

![](https://tk-assets.lambdaschool.com/798a13b4-d6e7-421c-8e4f-3696b2aedec9_Desktop.png)

We’ll also want to communicate that the first name and last name fields are more related than the email and password fields. So, we can make use of the Symmetry principle and place those fields next to each other on a horizontal line. This alignment is also beneficial because we can expand the email and password fields and create an affordance that they can support longer content.

![](https://tk-assets.lambdaschool.com/d6913996-76df-4855-96ee-e00a6f07723e_Desktop.png)

Now, we’ll need to distinguish our form’s title and button from the rest of the form elements. To do that, we’ll try and make them as dissimilar as possible, or basically use the opposite of the Similarity principle. Doing so will make the header and appear as distinct elements that deserve their own attention.

![](https://tk-assets.lambdaschool.com/4371ad69-0f57-4713-af6b-872555de9a79_Desktop.png)

Now that our elements are ready to go, we can use the Figure/Ground principle to bring more focus to everything as a whole. To do that, we’ll group our form in a white rectangle and apply a shadow to create the illusion of depth. Then, we’ll add a very light color to the background to further distinguish our ground from our figure.

![](https://tk-assets.lambdaschool.com/e8b7d3b3-de78-44ae-9c3a-7b8a709a61b9_Desktop.png)

Lastly, we’ll once again apply the principle of Symmetry to align our form in the middle of the page. This design will focus the user’s attention to the form because it eliminates the whitespace imbalance.

![](https://tk-assets.lambdaschool.com/628a4be8-c81d-4900-8a2e-12c6768dff6d_Desktop.png)

Now that we’ve finished our design, we can review everything to make sure we didn’t accidentally override our use of one principle with another. In our case, the button’s text looks very similar to our labels. While that’s not the worst thing in the world because the button is related to the fields, we can make a quick fix to reduce their relatedness.

![](https://tk-assets.lambdaschool.com/5d63d62a-305d-4caf-85b8-51f3c06060b9_Desktop.png)

And just like that, we’ve used the Gestalt principles to design an interface. However, you may have noticed that we didn’t use all of the principles. That is perfectly alright. We’ll rarely use every principle in the same design. So be sure to mix them up and use the ones that make the most sense for your design.

## Gestalt and Existing Designs
Reviewing an existing design with the Gestalt principles is just like the design check we do at the end of creating a new design with them. We carefully go over each principle and see how the design uses it and if there are any violations.",Review the last three digital products you used with the Gestalt principles in mind. Identify three or more instances where they used the Gestalt principles to design for your perception.,8u-M5UDbX1c,http://youtube.com/watch?v=8u-M5UDbX1c,https://www.youtube.com/embed/8u-M5UDbX1c,,Gestalt principles in UI design,Designing with the Mind in Mind: Simple Guide to Understanding User Interface Design Guidelines,"- What are the Gestalt principles used for?
- What are the seven Gestalt principles for designing UIs?","Designing for the Human Mind II,Designing for the Human Mind",Active,"Advanced Experience Definition, Intro to Design Theory","UX Design Core [v1 deprecated], UX Design Core",,1,1,1,3
explain what universal design guidelines help us design for perception,Knowing the universal design principles that help you adhere to the Gestalt principles can improve your designs’ usability.,Make sure you spend time explaining how each guideline connects to a Gestalt principle.,"While the memorizing how to use all of the Gestalt principles can seem overwhelming, there are some universal design principles that we can use to ensure that our solutions are designed with the mind in mind. The principles are as follows:

- Accessibility
  - Objects and environments should be designed to be usable, without modification, by as many people as possible. Using the Gestalt principles lets us tap into how most humans perceive structure, but not all humans perceive the same. Make sure that you follow accessibility guidelines to deliver an accessible experience.
- Alignment
  - The placement of elements such that edges line up along common rows or columns, or their bodies along a common center. Using alignment is one of the fastest ways to implement many of the Gestalt principles.
- Area Alignment
  - Alignment based on the area of elements versus the edges of elements. Sometimes aligning to edges doesn’t quite work, so area alignment can help us implement the Gestalt principles.
- Chunking
  - A technique of combining many units of information into a limited number of units or chunks, so that the information is easier to process and remember. Chunking elements consistently is a great way to employ the Similarity and Symmetry principles.
- Cognitive Dissonance
  - A tendency to seek consistency among attitudes, thoughts, and beliefs. Just like the Gestalt principles demonstrate that we perceive structure, our minds desire a certain level of structure and consistency as well.
- Comparison
  - A method of illustrating relationships and patterns in system behaviors by representing two or more system variables in a controlled way. Using the Proximity, Continuity, and Symmetry principles, we can present information for comparison.
- Constancy
  - The tendency to perceive objects as unchanging, despite changes in sensory input. Constancy is frequently used with Common Fate during animations to persist an understanding of an entity.
- Five Hat Racks
  - There are five ways to organize information: category, time, location, alphabet, and continuum. Once our information is organized, we can use the Gestalt principles to present our grouped information.
- Hierarchy
  - Hierarchical organization is the simplest structure for visualizing and understanding complexity. Hierarchies tend to use the Gestalt principles in reverse to demonstrate the differences between the elements.
- Horror Vacui
  - A tendency to favor filling blank spaces with objects and elements over leaving spaces blank or empty. Sometimes, we can go a bit overboard with our elements. It pays to add some whitespace to help defuse accidental Gestalt inferences.
- Layering
  - The process of organizing information into related groupings in order to manage complexity and reinforce relationships in the information. Layering leverages the Figure/Ground and Similarity principles to group information.
- Orientations Sensitivity
  - A phenomenon of visual process in which certain line orientations are more quickly and easily processed than other line orientations. This phenomenon also plays into Common Fate and has implications for the directions we move elements in an animation.","When we want to invoke a Gestalt principle to structure our design’s perception, we’ll frequently reach for one of these guidelines. As we first start to learn these guidelines, we will often be very deliberate about the guidelines we choose and why we’re using them. However, as we build a base of understanding, these guidelines will become more intuitive and our designs will benefit from their almost subliminal application.

To practice applying these guidelines, we can either review existing interfaces and analyze their applications of them, or we can purposefully implement them in our own designs. Both techniques are useful for strengthening your recognition of the guidelines, but actually implementing them is a better way to practice improving your own work. ","Pick two guidelines and explain how they help us implement the Gestalt principles. Then, review the last digital product you used and identify its usage of any guidelines.",gohcdNppVgs,http://youtube.com/watch?v=gohcdNppVgs,https://www.youtube.com/embed/gohcdNppVgs,,,"""Universal Principles of Design, Revised and Updated: 125 Ways to Enhance Usability, Influence Perception, Increase Appeal, Make Better Design Decisions, and Teach through Design""","- What’s the difference between Alignment and Area Alignment?
- Explain how a guideline of your choice helps us implement the Gestalt principles.",Designing for the Human Mind II,Active,Advanced Experience Definition,UX Design Core [v1 deprecated],,1,1,1,3
combine qualitative anecdotes with quantitative aggregates,,,,,,,,,,"Skewness,A Data Point Walks Into a Bar: How Cold Data Can Make You Feel Things",Pareto distribution,,Sequence your narrative,,"Data Storytelling, Data Wrangling and Storytelling",DS - Statistics Fundamentals,,0,,,0
remove clutter from visualizations,,,,,,,,,,Remove to improve (the data-ink ratio),,,Make explanatory visualizations,,"Data Storytelling, Data Wrangling and Storytelling",DS - Statistics Fundamentals,,0,,,0
publish a blog post on Medium,,,"#### Tips for good Medium posts
- Listicles and cheat sheets get reads but do they showcase your skill properly? Don't fall into those traps too often.
- Write multiple titles (at least 5) before choosing one.
- Don't have huge blocks of text: break it up with whitespace, images, lists, etc.
- Don't write as if you were going to submit to an academic journal. In data science it will be very important to be able to communicate to non-technical stakeholders and it will expand your potential audience.
- Estimated read time should not be longer than 10-12 minutes. If it's longer than that, split it into multiple posts.
- Share your post everywhere you can think of: Linkedin, Twitter, Reddit, Quora, data.world, Kaggle, etc.
- If you don't get invited to a publication within a few days, start submitting to them: [Towards Data Science](https://towardsdatascience.com/), [Lambda School](https://medium.com/lambda-school-machine-learning)   
- Follow lots of people in the same niche on Medium and you'll get a fair amount of follow-backs.
- Always be searching for that golden visualization that tells your story at a glance.
- Record a Youtube video and add it to your post
- Link to other helpful resources
- Reach out to influencers to help share your work. Veterans love helping juniors in the community and you might even get some great advice/contacts. Hustle!
- Respond to commenters when possible.

#### Should I post to Medium or a personal blog?
- Post to Medium first because it has better distribution/syndication
- Post to your blog as well as long as you can be sure that you are using Canonical Links Correctly to [avoid a duplicate content penalty](https://help.medium.com/hc/en-us/articles/217991468-SEO-and-duplicate-content).

#### Advice for what to write about
- Include unique projects that distinguish you from other candidates (See [The 4 fastest ways not to get hired as a data scientist](https://towardsdatascience.com/the-4-fastest-ways-not-to-get-hired-as-a-data-scientist-565b42bd011e))
- Do not include common ""toy"" data science problems - Titanic, MNIST, Iris Dataset, etc.
- Do not include ""homework"" projects unless it is exceptionally polished, and you have made it uniquely your own in some creative way.  
- Do whatever you have to do to provide PUBLIC EVIDENCE OF YOUR DATA SCIENCE SKILLS
- Portfolios are Iterative: your portfolio might start out pretty meager, but over time can become a powerhouse resource for you.
- If you find yourself googling something more than 3 times. Write a blog post about it documenting the solution for yourself (and others) so that you can easily find the solution later on without having to dig back into old notebooks. I promise that if you are running into that problem, then hundreds of others are on a daily basis.
- If you write a cheat sheet for yourself, don't let it sit in a notebook. Turn it into HTML or Markdown and put it online where it can benefit you in multiple ways.

#### Medium posts by AIMLDS1 grads
- [Jake Huneycutt](https://medium.com/@hjhuney/latest)
- [Joanne Martinez Jordan](https://medium.com/@joanne.k.m.jordan/latest)
- [Ray Heberer](https://medium.com/@rayheberer/latest)

#### Examples by Ryan Allred
- [Image Augmentation for Deep Learning using Keras and Histogram Equalization](https://towardsdatascience.com/image-augmentation-for-deep-learning-using-keras-and-histogram-equalization-9329f6ae5085)
- [Data Science Glossary](https://www.dsglossary.com/)

#### Additional Links
- [How to Build a Data Science Portfolio](https://towardsdatascience.com/how-to-build-a-data-science-portfolio-5f566517c79c)
- [Chris Albon](https://chrisalbon.com/)

**Q.** We’ve put a lot of emphasis on how we should build public stuff and make as many people see it as possible.  Sounds like jobs come to those who are popular on the internet. Is this unique to data science, or is all of programming now driven by social media presence?

**A.** You don’t need to be popular or famous. You just need 1 job. But people hire people who they know and like. People hire people who they can picture doing the job. Portfolios and blogging can help. The tactics are new, but the problem isn’t, it’s how the world has always worked: signaling & networking.",,"Your assignment today is to write and post an article to Medium. It doesn't have to be the greatest thing since sliced bread, lets just get you familiar with the platform. If you would like, request that your article be published to the [Lambda School Machine Learning Publication](https://medium.com/lambda-school-machine-learning)!

If you can't think of anything to write use this as your prompt: **“What are your goals for data science?”**",,,,,,,,Publish blog posts,,Creating Professional Portfolios,DS - Annex,,0,1,,1
,,,,,,,,,,,,,,,,,,0,,,0
"find target employers, hiring managers, and practitioners",,,"[Even the most-qualified job applicants may only get interviews ~ 10% of the time](https://talent.works/blog/2018/11/27/the-science-of-the-job-search-part-vii-you-only-need-50-of-job-requirements/). 

But, Ryan Herr increased his interview rate to 100%, by using [this one weird trick](https://twitter.com/patio11/status/770807498802540544):

_""Do not send in a job application before you have an actual human being who has expressed enthusiasm for reading or forwarding it.""_

So, [getting a data science job is not about stacking up prerequisites and hoping someone picks you](https://www.youtube.com/watch?v=oPqtCkAfYkY). 

That's one reason to start connecting with professionals now, by doing ""informational interviews"" — a fancy phrase that just means having a conversation, in any medium: in-person, video chat, phone call, LinkedIn, social media, email.

Another reason is just to *learn* — about what different data scientists do, figure out what _you_ want to do, and get advice about how to get there:

[The power of the informational interview](https://stripe.com/atlas/guides/networking#the-power-of-the-informational-interview)

_""An informational interview has a simple theme and intent: **Person 1 asks Person 2 to coffee or a video chat, and Person 1 spends that time asking questions and learning from Person 2.** It is not a direct sales call. Neither party expects immediate business as a result of the meeting; it is just about learning._

_It is also how I learned what not to do and what I didn’t want, to my surprise. I’d sometimes ask someone I really admired out for coffee, and realize that a path they went down or a decision they made was not as ideal as it seemed. One-on-one conversations are much more candid and authentic than the more polished, selective view you get from reading interviews.""_


[Why Applying Online Won’t Land You Your Dream Job (& What To Do Instead)](https://cultivatedculture.com/applying-online/)

_""If we want a job on Google’s Account Management team that focuses on the Financial Services vertical, who better to know than someone currently working on (better yet, managing) that team._

_Finding these people is simple. All you need to do is **head over to LinkedIn and search** using this formula: Company Name + Job Title""_


[How to Get Your Job Application Noticed Every Time](https://medium.com/@RaghavHaran/how-to-get-your-job-application-noticed-every-time-2ac39b1bf3f5)

_""First, go on some job boards and find a few companies that are hiring for the role that you’d like to have. Next, find someone at the company who’s working in the role you’re interested in, and reach out to them via email to chat._

_This way, you can:_
_1. Make a strong impression by asking smart questions_
_2. Understand the day to day projects they’re working on, and their problems_
_3. Later prove to them that you can solve those problems""_",,"For your assignment, you will:
- List your target geographic areas
- List your target industries
- List 10 companies in your target geographic area or industry
- Find 5 data scientists who have mutual connections with you, or work in your target geographic area, or work in your target industry / company. List their URLs (to LinkedIn profile or other online presence), and something interesting about each person and/or their company.

Stretch goal:
- Find more companies, managers, and data scientists",,,,,,,,Connect with professionals,,Creating Professional Portfolios,DS - Annex,,0,1,,1
find data sources for ideas,There are *many* potential sources of data for projects. How can you find one that is manageable but unique and not overused. What are common sources of datasets for portfolio projects. Sometimes tracking down a dataset is the most challenging part. ,,"Avoid overused datasets, like these:
- [Kaggle competitions](https://www.kaggle.com/competitions?sortBy=numberOfTeams)
- [UCI repository](http://archive.ics.uci.edu/ml/index.php)

These are awesome for learning skills, but not for differentiating yourself from all the other data science students competing for jobs.

For example, [there are over 4,000 GitHub repositories with ""Titanic"" Jupyter Notebooks](https://github.com/search?utf8=%E2%9C%93&q=language%3A%22Jupyter+Notebook%22+titanic&type=Repositories)!

Could you get unique, real-world data? Is there a real business or non-profit organization you know? If you can help them with a real need, and share the results, that's a win-win!

![](https://raw.githubusercontent.com/LambdaSchool/DS-Sprint-02-Storytelling-With-Data/master/module1-find-ideas-and-data/mermaid-diagram-real-client.svg?sanitize=true)

But if not, don't worry — and don't make up an imaginary client.

Instead, just start with your own personal topic, question, and hypothesis, and then search for public datasets you can use.

In addition to Google, these sources may be helpful to search: 
- [Spreadsheet of 600+ datasets](https://docs.google.com/spreadsheets/d/1wZhPLMCHKJvwOkP4juclhjFgqIY8fQFMemwKL2c64vk/edit#gid=0) curated by the [Data Is Plural](https://tinyletter.com/data-is-plural) email newsletter. Most of the datasets would work well for data storytelling.
- [Awesome Public Datasets](https://github.com/awesomedata/awesome-public-datasets). A comprehensive meta-repository.",,Begin to search for data for the possible ideas you've listed.,,,,,"Article on Free Data Sources,Data.gov,Awesome Public Datasets",,,Begin your portfolio,,Data Wrangling and Storytelling,DS - Statistics Fundamentals,,1,1,,2
determine the target audience for the product research,"Research projects have specific needs that require a refined sub-audience from the product audience. It’s important for UX researchers, when recruiting, to ensure they get people who will provide the best data to inform the product designs.",,"Before recruiting you need to create a research profile to guide the recruiting process. Typically, you will have a general sense of your target audience. Sometimes you will have gathered data to help support the creation of a persona. Sometimes the marketing department will already have a target audience they create marketing campaigns for. You can reference this information in order to have a foundation for your research profile. 

You might start with demographic information—census data, essentially: age, gender, education, income.

Next would be a technology and web-use or application-use profile helping give definition to the type of experience your audience has with the technology of your product.

Then ask yourself what specifically you need in your audience that is different from the target market per se. Find factors that can help you hone in on an ideal **research** audience.

- Which market segments are most affected by the research?
- Is there a single group or multiple groups?
- Which factors most affect this research?
- What are desirable characteristics? What are undesirable?

Don’t make your research audience profile so narrow that you can’t find anyone that fits. Sometimes you’ll have multiple audiences you need to research for, so create separate profiles for each.",,,,,,,,,,Stakeholder Interviews & User Recruiting,,Discovery,UX Design Core,,1,,,1
find a representative member of the target audience that meets the needs of the specific research project being recruited for,"Your research data will only be as good as the sources it comes from. If you get someone who is not a part of the intended audience, your data will be suspect. ",,"Commercial recruiters have their own database of thousands of people from a variety of circumstances and matching a wide set of different demographics. They can perform queries on their databases to find individuals who map to your requirements.

Recruiters will help you build what is called a screener. The screener is a set of questions that helps the recruiter find the type of person you’re looking for.

A good practice for ongoing research is to set up your own database for recruiting purposes.

Set up an email address specific to recruiting—something like research@lambdaschool.com.

Start with the social networks of your company employees.
Build a database of participants by sending out a message through the network asking for people to submit their information.

*Potential sources of participants*
- Corporate neighbors
- Social groups, mailing lists
- Users
- New employees
- Past research participants
- Ads
- Traditional methods

*Create a screener*
A screener is a script that helps filter out people who will be the best source of information for your research.
- Less than 20 questions
- Be brief, clear, and specific
- Avoid jargon
- Ask for exact dates, times, quantities
- Ensure every question has a purpose
- Begin general and get more specific
- Don’t “lead the witness”
- Explain what the research format will consist of
- Be flexible with response ranges

*Incentives*
You usually try to provide an incentive of some sort to help persuade people to participate in research.","Example recruiting email message: 

https://docs.google.com/document/d/10SEyEDz0TwrT1W50dcp4dYvCdem_0TJVCNuBhKrn7r0/edit#

Example research profile:

",,,,,,,,,Stakeholder Interviews & User Recruiting,,Discovery,UX Design Core,,1,,,1
understand when to perform a contextual inquiry,Contextual inquiry helps uncover the big problems people face when trying to accomplish a task. Understanding the problems allows product teams to develop the best solution to those problems.,,"Most projects worked on for digital products begin with an idea of what problems need to be solved. Teams often also have a rough idea of how to solve the problems. Contextual inquiry can add clarity, uncover false assumptions, and show how problems are solved by the users currently. It allows designers and developers to learn the exact situations in which the problems occur. 

Contextual inquiry is ideally done before the first steps are taken to design or develop a solution is begun. It is part of the discovery process. It can also be done between development cycles or before a redesign of an existing product. It is the perfect complement to an assumptions exercise, helping to clarify the circumstances around the use of a product.",,,,,,,,,,Contextual Inquiry and Task Analysis,,Advanced Discovery,UX Design Core [v1 deprecated],,1,,,1
conduct a contextual inquiry,"A clear understanding of the process of contextual inquiry allows you to be thoroughly prepared for running such a personal and intimate type of research. Being able to plan, conduct and analyze a contextual inquiry project can prove extremely valuable in UX design work.","Read the chapter on Contextual Inquiry in Mike Kuniavsky’s book, _Observing the User Experience_",,"'
- Define your target audience.
- Recruit someone to participate.
- Schedule the interview.
- Learn the domain.
- Develop scenarios.
- Prepare for actual interview.
 -Make a list of all needed items
 -Have any release forms necessary.
 -Have incentives (if you need the cash/physical cards)
 -Know how to operate equipment",,,,,,,,,Contextual Inquiry and Task Analysis,,Advanced Discovery,UX Design Core [v1 deprecated],,0,,,0
analyze data from a contextual inquiry,,,,,,,,,,,,,Contextual Inquiry and Task Analysis,,Advanced Discovery,UX Design Core [v1 deprecated],,0,,,0
conduct preference tests,Sometimes in design you have two paths you can take with your designs. Getting quick feedback from users can be useful to allow you to confidently move down one direction or another.,"At the time of this writing, usabilityhub.com is a good place to go to demonstrate these tests.

An example preference test: https://app.usabilityhub.com/do/890ee788ca52/338c ","Preference tests are essentially just a quick way to gauge how well people like one version of a design compared to another. You can conduct a preference test with any level of fidelity, but it's often a good test for designs at a higher-level of fidelity to get an emotional response rather than an intellectual response to something like a wireframe or sketch.","To conduct a preference test, you can use any tool to display a design to a user. Then show another version or more versions of the design. You have to be careful to avoid bias—often the first and last shown designs tend to be remembered more than designs shown in the middle. Showing the images simultaneously will allow a person to compare more effectively, but can also be overwhelming. Allowing the user to view the designs multiple times can help avoid the complexity and biases.

Ask follow-up questions to help find the information you're seeking:

- Which design does a user prefer?
- Which design looks the most trustworthy?
- Which design looks the most modern?
- Which design looks the easiest to use? ",,,,,,Introduction to preference testing,,,Additional Research Methods,,Discovery,UX Design Core,,1,,,1
know the strengths and weaknesses of online user testing,"Online user testing offers significant cost savings compared to traditional, in-person testing, but the savings in money can come with other costs. It's good to understand the differences.","Good source of info about online user testing:

https://www.nngroup.com/articles/unmoderated-user-testing-tools/

Loop11 has some video examples you can show when you create an account.
https://www.loop11.com/","Remote usability and other user research can be very handy. Many tools exist to provide a platform for remote testing. 

Remote testing can provide quick turnaround, so you can use online, asynchronous tests to move rapidly through your design process. Remote testing can also be especially useful for testing a single specific feature. When your target audience is widely dispersed and you might not have good subjects readily available where you work, turning online can be a major boost to your effectiveness as a designer. 

The problem with some online tools is that the typical study participant might not actually match your user research profile. Many of the tools have a panel of users they send your projects to, and sometimes you can request specific demographics. As you request more unique individual the cost goes up. There is built in bias because the people performing the study often have performed usability studies before and could be considered not-typical users. 

Sometimes you can send your study link to your own participants that you have recruited, but there is often a difficulty with the technology—ensuring they have a webcam and recording device, for example.",,,,,,,Pros and cons of remote usability testing,,,Additional Research Methods,,Discovery,UX Design Core,,1,,,1
conduct first-click tests,"Generally speaking, you want your users to take specific actions when they come to your site or open your app. A click test is a simple way to find out if people understand your intent for them on your product.","At the time of this writing, usabilityhub.com is a good place to go to demonstrate these tests.

Example click test: https://app.usabilityhub.com/do/869a6bbbf684/6aa ","First click tests offer a way for you to evaluate the success of your visual hierarchy and the effectiveness of your designs at getting people to take your preferred actions. These tests can be done at any level of fidelity, but would likely need to be conducted again at the high-fidelity level to ensure any successful actions at a wireframe stage were not disrupted by the addition of color, refined size, typography, etc.","First-click tests can be done with an online tool like usability hub or Invision or can be conducted on a live site. 

The process is to define tasks you want your participant to accomplish, for example:

You would like to find out how much ...
You are hoping to learn where to ...


Ensure you have documented the correct or ideal path to compete each task. Depending on the format, you may need observers to watch what the user clicks on. With some tools, the click path can be recorded automatically for you. Defining the task will make note taking simpler.

Track each click.

Time how long it takes the user to make their first click. Taking a long time to make a first click suggests a possible lack of clarity on navigation or page layout.

First-click tests can be coupled with navigation tests that observe the full process of trying to complete a task. In a navigation test, you assess the ease or difficulty of completing each task by monitoring and quantifying the number and timing of clicks.

After conducting the test, you can ask questions about the users' experiences. You can use response scales when asking about their experience with the site and tasks. For example: 

How easy was it for you to complete you task? 
- Not at all easy
- Somewhat easy
- Easy
- Very easy
- Extremely easy

Scales can help make analysis simpler, but using free response questions can help make richer data. Ask something like:

What could have made this experience simpler for you?

Free-response questions take longer to analyze, but can help you learn more about the experience.",,,,,,"First-click test guide,First-click testing how-to",,,Additional Research Methods,,Discovery,UX Design Core,,1,,,1
conduct 5-second tests,Web users especially tend to leave a site if they don't understand it quickly—usually within five seconds—so this test is designed to help your designs be clear and understandable so that people stick around and interact with your application in a reasonable time frame.,"At the time of this writing, usabilityhub.com is a good place to go to demonstrate these tests.","Five seconds is generally long enough for a design to convey its primary message. Digital consumers have a lot competing for their attention. To win the attention competition, your designs should speak clearly and quickly the main point and value proposition of the site. They should also convey the right emotive meaning immediately so your intended audience will resonate with the design.

Five-second tests can help you see how quickly people catch the main purpose and options available on your site or application. It is a good way to force yourself to begin to remove unnecessary cruft from your designs. It helps you understand how successful you have been at connecting with your intended user.

","To conduct a five-second test, you explain to the participant the format of the test. You explain that you will show them a design for five seconds. Following the display of the design, you will ask them a few questions about the design to learn from them what they remember about the site, its purpose and what you can do on the site or app.

Once the participant understands, you show them a design for five-seconds. Then ask the following (or similar) questions:

- What is the purpose of the design you just saw?
- What are the main parts of the page you can recall?
- Who do you think is the intended audience of this site (or application)?
- Did the design appear trustworthy?
- What was your impression of the design?",,,,,,"5-second test description,5-second test article",,,Additional Research Methods,,Discovery,UX Design Core,,1,,,1
understand Design Thinking processes and terminology,"Design Thinking is a term that has become a buzzword. As Jared Spool has suggested, there is nothing inherently new in Design Thinking—it follows roughly the same process we have talked about all along in our course and follows the same steps most successful companies use to design products—but what Design Thinking does do, is help others outside the design industry recognize that design is not just making things pretty. It is a way to orient all creative efforts toward a human centered, problem solving approach to design. It is useful to be familiar with some of the terminology and activities associated with Design Thinking.","Read Jared Spool’s article: https://medium.com/user-interface-22/ssh-dont-tell-them-there-s-no-magic-in-design-thinking-b95f33867656

Here is some material from Stanford D.School:
https://dschool.stanford.edu/resources/design-thinking-bootleg
https://dschool.stanford.edu/resources/a-virtual-crash-course-in-design-thinking

Interesting artifact of early Design Thinking instruction: https://static1.squarespace.com/static/57c6b79629687fde090a0fdd/t/590133396a4963a462c680cd/1493250903831/Design+Process+and+Creativity+B+Roth+Small.pdf 

What is Design Thinking? https://www.ideou.com/blogs/inspiration/what-is-design-thinking 
Design thinking webinar","Design Thinking aims to find the overlap of three attributes for the solution to any design problem. Those attributes are: Feasibility, Desirability, and Viability.

Feasibility refers to whether an idea is technologically possible to build, either within the time and budget constraints or at all.
Desirability refers to whether or not people want or need the idea—if it has the potential for any sort of adoption.

Viability refers to the economic or business prospects of the idea—will money be made such that the product could survive?
The convergence of these three ideas is the sweet spot of innovative product design.

<img src=""https://drive.google.com/uc?export=view&id=14VYkNCH_6CA9OJnkF4TOyk5-ed_JD0A3"" 
alt=""Venn diagram of feasibility, desirability, and viability as circles with the overlap of all three being labeled innovation sweetspot."">

All of the processes of Design Thinking are aiming for a product that hits the sweet spot.

Much like the product design cycle we’ve described in our course so far, <a href=""https://www.ideou.com/pages/design-thinking"">IDEO</a> espouses a series of iterative steps one goes through to design a product or experience. The steps include:

- Frame a question
- Gather Inspiration
- Generate Ideas
- Make Ideas Tangible
- Test to Learn
- Share the Story

<img src=""https://cdn.shopify.com/s/files/1/0838/5825/t/5/assets/IDEOU_DT_Framework_Horizontal_2000px_V1.jpg?530267673492630901"">

The Interaction Design Foundation espouses a similar process:

<img src=""https://public-media.interaction-design.org/images/uploads/401261ba5cae057e1e039ae3ea1e056a.jpg"">

While most of the design thinking frameworks tend to follow the same general process we have been teaching, it’s worth noting a couple of concepts:

*Frame a question*

How you frame the guiding question can influence how creative the solutions are. If I am wanting to know how to get to the result of ten and I already know that part of what I want is 5, I ask: What plus 5 = 10? There is only one obvious answer: 5. Someone with a creative mindset might say something like, 2.5*2 plus 5 = 10. But, it would be unusual to have anyone answer something other than 5.

But, still knowing that we want ten, and realizing we have 5 as part of the equation, we can still frame the question differently to open it up for possible answers we haven’t thought of. We could ask: “What numbers can we sum to equal 10?” This opens the question to more possible answers and frees potential creativity. Each question is seeking the same answer, but by framing the second question broadly, innovative solutions have greater potential to emerge. 

The impact of reframing and looking at things in a broader context can be huge: 
Consider the case of <a href=""http://www.integratedbrands.org/brands/shreddies/diamond-shreddies/rebranding-of-shreddies-from-square-to-new-diamond-shape"">Shreddies</a>. 

Shreddies reframed people’s perception of the cereal and sales jumped by 18%. That might not have ended up as a _lasting_ bump in consumption, but it represents the idea of how reframing ideas can capture people’s attention. In ideation, we try not to overly constrict the framing of the problem we’re trying to solve. By being open minded we invite innovation.

*Make Ideas Tangible*

Prototyping is the fastest way to learning. It allows you to see problems in your ideas earlier. The quicker you are able to move from idea to prototype, the sooner you’ll know whether or not you need to change course.

Not all of the work you do in UX will require multiple iterations. Sometimes you’ll have to satisfice and get to the fastest solution and move on to the next problem. But, a willingness to try things and fail builds your confidence to make progress on any project.

*Test to Learn*
The only value of a prototype is in its ability to allow you to test your concept on other people—or even on yourself. There are times you have what you feel is a stellar idea. You will design it out, create a prototype and then try it yourself and realize immediately that it falls short in some spectacular way that makes your idea completely worthless. Usually, it won’t be that dramatic, but as you show your prototypes to others you will pick up on nuances of difficulty you couldn’t see without testing the prototype on others. 

Each of those problems that emerges doesn’t mean you’re a bad designer. No one nails it the first time. Those problems actually mean you’re a good designer because you’re using the process right and discovering flaws early. A bad designer thinks they know the end from the beginning and designs something without testing it out. Then, their designs flop in the real world, causing big headaches and financial distress.

*Share the Story*
We’ll talk more about sharing the story next. But here’s a thought from an IDEO designer:

```As renowned business strategist Roger Martin has said, “it’s not possible to prove analytically that a new idea is a good one in advance. If an idea is new, there’s no data about how it will interact with the world.” Which means no amount of data can take the place of a great story. So, tell a great story, and people will be more willing to go out on a limb for you and your idea.```",,,,,,,No magic in Design Thinking,,,Design Thinking and Beyond,,"Advanced Ideation and UX Leadership, Ideation and Collaboration","UX Design Core [v1 deprecated], UX Design Core",,1,,,1
tell an effective product story,"As mentioned above, in design, you are creating something new. There is no way to prove something will work. There is no data that explicitly justifies the design you are creating, nothing that says: _this is going to make the company lots of money_. You need a great story that helps convince stakeholders so they are willing to take the risk.

In design, our objective is to create supportive evidence for our designs’ value. We create our prototypes and test them to show suggestive evidence. If we have been thorough with our design process and honest with ourselves in the interpretations of our research findings, we should have ample material to pull from to make a case for the design we are espousing.

It is important, once we have a direction and a plan for developing our designs more fully—investing in the more expensive process of production work, high-fidelity design and technical development—that we convey clearly and with confidence the story of our product and its value to a paying audience.

Humans respond to stories emotionally. Specifically, stories about humans build empathy and connectedness between people and ideas. Gaining full support of stakeholders can be much more easily earned through compelling storytelling that connects the product design ideas to the human beings the product is intended to serve and help.",,"Here are some steps to take when telling a product story:
Your story should have a point—some objective to share. What is the story you’re trying to tell really about? What’s the point of your product? Pick one thing, one big idea you want people to take away and make sure all your evidence and material help support that key idea. 

Connect the product to people. Using your personas can be a great way to help illustrate how a product relates to your customers' everyday lives. Businesses are built on solving a problem for someone. Show how your product solves problems. The user should be the hero of the story, the product should be a supporting character.

Empathize with your audience. Understand who will be hearing your story. Know what is important to them. What drives them? Is it the bottom line? Is it fewer service calls? Is it less time at the office? Couch your story in terms that relate to their objectives. Make sure that your description of the people you are helping is also tied into how helping those people achieves the business goals or emotional aspirations of your audience.

Prototype and test out your story. Your story is your product, too. You can create drafts and share them on others. Pull in a colleague, friend or family member to listen to your presentation. Send out a draft via email to get response from a friend. Go to a bar or restaurant with your friends and share your concept with them in a relaxed environment. Watch where they seem to get bored, where they seem to perk up. 

You can also try creating different forms for the story. Try different media—can you create a video? A powerpoint presentation. Can you tell your story with a single image? Do you need a long document?

This is a typical story spine:

- Once upon a time...
- And every day...
- Until one day...
- Because of that...
- And because of that...
- Until finally...
- And ever since that day...
- And the moral is... [your one big idea]

You can use those initial prompts to construct your story. But, you wouldn’t actually use the stems in your final presentation. The story spine prompts are removed, like training wheels, once your story is constructed. You are left with a compelling and relatable story featuring your product and its users.",,,,,,,Advice on Giving Presentations,,,Design Thinking and Beyond,,"Advanced Ideation and UX Leadership, Ideation and Collaboration","UX Design Core [v1 deprecated], UX Design Core",,1,,,1
be able to derive Bayes' theorem from the Law of Conditional Probability,"Bayes Theorem - it's not a magic spell, it falls out quite quickly from the law of conditional probability. That law itself is fairly transparent too, and so spending time thinking about both and their connection is important and valuable for a deeper understanding of the power and generality of Bayesian approaches.",This sounds cool but is actually really simple - which is exactly why it can be a good motivating and empowering example.,"Bayes' theorem possesses a near-mythical quality - a bit of math that somehow magically evaluates a situation. But this mythicalness has more to do with its reputation and advanced applications than the actual core of it - deriving it is actually remarkably straightforward.

### The Law of Total Probability

By definition, the total probability of all outcomes (events) if some variable (event space) $A$ is 1. That is:

$$P(A) = \sum_n P(A_n) = 1$$

The law of total probability takes this further, considering two variables ($A$ and $B$) and relating their marginal probabilities (their likelihoods considered independently, without reference to one another) and their conditional probabilities (their likelihoods considered jointly). A marginal probability is simply notated as e.g. $P(A)$, while a conditional probability is notated $P(A|B)$, which reads ""probability of $A$ *given* $B$"".

The law of total probability states:

$$P(A) = \sum_n P(A | B_n) P(B_n)$$

In words - the total probability of $A$ is equal to the sum of the conditional probability of $A$ on any given event $B_n$ times the probability of that event $B_n$, and summed over all possible events in $B$.

### The Law of Conditional Probability

What's the probability of something conditioned on something else? To determine this we have to go back to set theory and think about the intersection of sets:

The formula for actual calculation:

$$P(A|B) = \frac{P(A \cap B)}{P(B)}$$

We can see how this relates back to the law of total probability - multiply both sides by $P(B)$ and you get $P(A|B)P(B) = P(A \cap B)$ - replaced back into the law of total probability we get $P(A) = \sum_n P(A \cap B_n)$.

This may not seem like an improvement at first, but try to relate it back to the above picture - if you think of sets as physical objects, we're saying that the total probability of $A$ given $B$ is all the little pieces of it intersected with $B$, added together. The conditional probability is then just that again, but divided by the probability of $B$ itself happening in the first place.

### Bayes Theorem

Here is is, the seemingly magic tool:

$$P(A|B) = \frac{P(B|A)P(A)}{P(B)}$$

In words - the probability of $A$ conditioned on $B$ is the probability of $B$ conditioned on $A$, times the probability of $A$ and divided by the probability of $B$. These unconditioned probabilities are referred to as ""prior beliefs"", and the conditioned probabilities as ""updated.""

Why is this important? Scroll back up to the XKCD example - the Bayesian statistician draws a less absurd conclusion because their prior belief in the likelihood that the sun will go nova is extremely low. So, even when updated based on evidence from a detector that is $35/36 = 0.972$ accurate, the prior belief doesn't shift enough to change their overall opinion.","There's many examples of Bayes' theorem - one less absurd example is to apply to [breathalyzer tests](https://www.bayestheorem.net/breathalyzer-example/). You may think that a breathalyzer test that is 100% accurate for true positives (detecting somebody who is drunk) is pretty good, but what if it also has 8% false positives (indicating somebody is drunk when they're not)? And furthermore, the rate of drunk driving (and thus our prior belief) is 1/1000.

What is the likelihood somebody really is drunk if they test positive? Some may guess it's 92% - the difference between the true positives and the false positives. But we have a prior belief of the background/true rate of drunk driving. Sounds like a job for Bayes' theorem!

$$
\begin{aligned}
P(Drunk | Positive) &= \frac{P(Positive | Drunk)P(Drunk)}{P(Positive)} \\
&= \frac{1 \times 0.001}{0.08} \\
&= 0.0125
\end{aligned}
$$

In other words, the likelihood that somebody is drunk given they tested positive with a breathalyzer in this situation is only 1.25% - probably much lower than you'd guess. This is why, in practice, it's important to have a repeated test to confirm (the probability of two false positives in a row is $0.08 * 0.08 = 0.0064$, much lower), and Bayes' theorem has been relevant in court cases where proper consideration of evidence was important.","Notice that $P(A|B)$ appears in the above laws - in Bayesian terms, this is the belief in $A$ updated for the evidence $B$. So all we need to do is solve for this term to derive Bayes' theorem. See if you can figure it out! We'll also go over it in the lecture, so come with questions.",LdlBnZHZOXY,http://youtube.com/watch?v=LdlBnZHZOXY,https://www.youtube.com/embed/LdlBnZHZOXY,,,,"Describe a real-world data situation and distinguish the three elements (prior, posterior, and likelihood) of a Bayesian approach to it.",Introduction to Bayesian Inference,,Statistical Tests and Experiments,DS - Statistics Fundamentals,,1,1,1,3
participate in Gen-Synth pair design,"Being able to design in tandem with another person can help improve both the product being designed and your capacity for design thinking in the future.

Pair design can help create a more effective design through the power of an immediate response to design ideas as well as a second mind interpreting and pushing a design further. 

There are multiple approaches to pair design. We will primarily describe and practice an approach to pair design pioneered by Cooper: Generator-Synthesizer pair design.",Cooper discusses Generators and Synthesizers in About Face (p. 147). Review that section for understanding some of the thought behind it.,"Cooper hires specifically for the two roles of Generator and Synthesizer. They argue that generation and synthesis are two sides of a creative spectrum.

Generation <----------------------------->Synthesis

Each of us has skills and propensities that align us more toward one side of the spectrum or the other. Some of us tend toward the middle. Some are strongly Generators or Synthesizers. Cooper suggests complicated design problems benefit from having the balance of two designers with complementary strengths: A strong synthesizer and a strong generator can pair to create a simple, elegant and delightful solution to their design problem.

Generators tend to be creative and latch too soon and dive too deep on their first idea. They're generally the person who first grabs the whiteboard marker to start sketching out a concept. They often can get lost, spending too much time in a brainstorm and casting about for new concepts.

Synthesizers help narrow in and focus the generator. They ask questions and start conversations with the team in searching for solutions. They tease out values and the intent of proposed ideas. They try to clarify ill-formed concepts. 

The synthesizer:
- Makes lists
- Asks questions
- Clarifies
- Tells stories

The generator:
- Sketches ideas
- Imagines possibilities
- Invents solutions

Here’s a sample conversation from an imaginary project as shared in Cooper's _About Face_ (p. 149):

Generator:
> _I have an idea for adding something new to the list. 
> (Begins drawing the screen on the whiteboard.) It’s a gesture.
> When you’re in the main list, you pull down, and you start to see the control for adding a new thing. It’s just an empty field._

Synthesizer:
> _Great. It might feel sort of hidden, though. 
> In Jeff’s scenario, he only adds a new thing every few weeks, right?_

Generator:
> _Yeah, true. He might forget it’s there._

Synthesizer:
_I like the idea of keeping the focus on information rather than UI widgets, though._

Generator:
> Hmmm. 
> How about we show the field with the help text “Add a new thing” when this main screen loads, and then the screen snaps up to cover it? 
> So you see it, but then you focus on the list.

Synthesizer: 
> I like it. 
> It might get annoying if it happens a bunch of times in the same session, but I think we can come up with some rules.

As a design meeting progresses, the Generator and Synthesizer work together to explore solutions and develop ideas. The Synthesizer should help shape the discussion, gently tightening the depth of field. The conversation usually begins with a wide-angle discus- sion of the problem and from there drills ever tighter into the details of a solution.

As Cooper says, ""Most ideas are bad."" The partnership of _generator_ and _synthesizer_ is formed to help catch bad ideas before they waste too much time and money. Generators lead out in ideation, giving a concept a direction. Synthesizers give the control of the ideation to the generator, allowing them to take the reins of the project. But synthesizers are responsible to course correct. Generators have to trust the synthesizers and to evaluate and critique concepts early. There will be disagreements. Sometimes teams hit a wall. When there is a stalemate or lack of progress for 15 minutes, it is good to bring in a third designer or participant to participate. The team briefs the newcomer, who probes for details and clarification. Usually, this type of conversation can bump the team over the hump.",,,,,,,"Three models of pair design,What does pair design look like?,O'Reilly ideas on pair design",,,"Pair Design,Design Thinking and Beyond",,"Advanced Ideation and UX Leadership, Advanced Ideation and UX Leadership, Ideation and Collaboration","UX Design Core [v1 deprecated], UX Design Core [v1 deprecated], UX Design Core",,1,,,1
calculate Bayesian confidence intervals,"Bayes is a powerful and general tool - we will consider one particular application, to confidence intervals. You are then encouraged to explore beyond to the many further topics that can be approached from a Bayesian perspective.","This is a simple but effective Bayesian approach that is built into scipy.stats, as introduced this week. PyMC3 is cooler and more powerful but predictive - revisit later, or leave as a stretch goal.",,,,EvcKiUKA0Bk,http://youtube.com/watch?v=EvcKiUKA0Bk,https://www.youtube.com/embed/EvcKiUKA0Bk,,"Bayes Factor,scipy.stats.bayes_mvs",PyMC3 Bayesian Estimation Notebook,,Introduction to Bayesian Inference,,Statistical Tests and Experiments,DS - Statistics Fundamentals,,0,,1,1
deploy a simple static (front-end) A/B-instrumented webpage,"Understanding the basics of how a real web experiment is deployed and analytics tracked allows us as data scientists to better appreciate the sources of our data, and anticipate and diagnose possible problems with it.","If you've not done this before it's suggested you watch one of the previous live lectures, and spend time playing with Google Analytics and GitHub Pages.","Science is empirical and experimental - how can we apply that to statistics and the web? With A/B experiments!

An A/B experiment is when you have separate treatment groups, and compare the outcomes of some variable or event of interest across the groups. The convention of calling it A/B doesn't limit the number of treatment groups - you can have A/B/C or more groups, and you can also combine treatments to multiply the number of groups.

Of course, more groups requires more data - more observations in order to slice and compare effectively and with high statistical significance. The actual math is what you've learned earlier this week - hypothesis testing, often t-tests or similar - so remember that more data may also give you statistical significance in situations where the real-world impact (the *substantive* significance) is trivial.

Caveats aside, A/B experiments are a powerful approach, as (when properly split - treatment is *randomly* assigned and not correlated with anything else) it gives a tool with results you can really believe in. It allows statistics and studies of real ""messy"" things like behavior to have a similar sort of confidence that science can have with controlled laboratory experiments.

And experiments will likely always need a human touch - predictive modeling may be commoditized, but experiments are always domain-specific and need a bit of intelligence to put together.","View a [live demo of the A/B experiment you'll be deploying](https://lambdaschool.github.io/AB-Demo/) - try refreshing it, clearing cache/cookies, using different browsers/machines, and see how it behaves.


You should be seeing two different ""treatments"" - versions of the page. [The source code](https://github.com/LambdaSchool/AB-Demo) is quite simple (this is a minimal example) - check out `index.html`. Even if you're unfamiliar with HTML and JavaScript, try to read and follow what is going on.

In general, a live web A/B experiment has the following pieces:
- Front-end - the UI of the application, and also some of the tracking and splitting logic
- Back-end - the database or service that receives logs of impressions and treatment groups, and decides and tells the front-end what data (treatment) to serve
- Dashboard/analysis - what you're likely to work the most with, the actual results, ideally cleaned up a bit from the raw back-end database
We will set up Google Analytics and GitHub pages live in lecture, so come with questinos, and ready with accounts to follow along!","Write a hypothetical proposal to a small business with a webpage pitching them on running an A/B experiment. Describe specifically what you would test, how, and why.",tgNQ75vbDnU,http://youtube.com/watch?v=tgNQ75vbDnU,https://www.youtube.com/embed/tgNQ75vbDnU,,"ABalytics,Google Analytics Help,What is GitHub Pages?","Alternatives to Optimizely,Optimizely",,Real-world Experiment Design,,Statistical Tests and Experiments,DS - Statistics Fundamentals,,1,1,1,3
connect an instrumented A/B test to Analytics profile(s),,,,,,,,,,,,,,,,,,0,,,0
explain what atomic design is and how to use it,"Atomic design is a widespread methodology for creating interfaces in a systematic manner. It emphasizes designing the smallest UI elements, or atoms, first and then outlines how we can put them together to form larger interface patterns.",,"The early 2010s was an exciting time for the design field. Responsive design was becoming more popular and design systems were gaining traction as a way to organize our design efforts to make everything more consistent. During that time, a designer named Brad Frost began to develop a methodology for creating design systems, which he called atomic design.

According to him, “atomic design is a methodology for creating design systems.” He articulated the idea of atomic design in a [groundbreaking article](http://bradfrost.com/blog/post/atomic-web-design/) in 2013, and he further refined the concept in his book: [Atomic Design](http://atomicdesign.bradfrost.com/table-of-contents/).

Atomic design was revolutionary for the time because it allowed designers to shift our collective mental model away from thinking about web design as building pages. Instead, we began to think in terms of elements and components. This shift has had far-reaching ramifications for designers and the web industry at large. 

For example, if you look at the latest JavaScript frameworks, they all embrace component driven interfaces because that’s how we design and develop products now. And several approaches to CSS, such as BEM and Utility-First frameworks, are built on atomic design principles.

As you may have guessed from its name, atomic design borrows heavily from chemistry and biology to provide a mental model that we can use to interpret web elements. Within atomic design, there are five distinct levels that can be designed: atoms, molecules, organisms, templates, and pages.

Each of these levels represents the size of an element that we design, with atoms being the smallest and pages being the largest. When we’re designing, we’ll start by focusing on the atoms we need and then we’d use them to construct our molecules. From, there we’d use molecules to construct organisms, and organisms to build templates. Templates and pages actually have the same overall design, but pages are specific instances of a template filled with content. These relationships are highlighted in the image, from Brad Frost’s Atomic Design article, below:

![](https://tk-assets.lambdaschool.com/ec7d3781-090b-48d7-8a95-84fbcb02effd_atomic-design.png)

Now, let’s take look at each level individually starting with atoms.

### Atoms
Atoms are the basic, most fundamental building blocks of our interfaces. As we can see in the following image, they can include elements like form labels, headers, buttons, inputs, etc. 

![](https://tk-assets.lambdaschool.com/8fc88ffd-ec9d-405a-9dbe-a1d61f36b265_atoms.jpg)

Additionally, they can also represent more abstract elements like colors, type families, animations, etc. On their own, atoms are great for a big picture view of all of the various styles that you’re using throughout your product. But, they start becoming really useful when you put them together to create molecules.

### Molecules
Molecules are the backbones of our designs, and they’re typically the smallest elements that we’ll codify in something like a pattern or component library. They’re formed from groups of atoms that come together to form larger pieces of our interfaces. 

As Brad explains, “Building up to molecules from atoms encourages a “do one thing and do it well” mentality. While molecules can be complex, as a rule of thumb they are relatively simple combinations of atoms built for reuse.”

Like we can see in the image below, in practice we could create a search bar molecule by putting together some label, input, and button atoms.

![](https://tk-assets.lambdaschool.com/17ee02c6-77c4-467c-9827-f5bd18a9449d_molecule.jpg)

### Organisms
Once we have some building block molecules, we can begin to put them together to form organisms, which represent relatively complex, distinct sections of our interfaces. This is when our designs begin to take shape, like so:

![](https://tk-assets.lambdaschool.com/291ebac7-0524-448b-b93e-1cca7af27a26_organism2.jpg) 

There are no hard and fast rules for creating organisms. They can be built with different molecules, or they can just be built using one molecule that’s been repeated a bunch. Think of the navigation example above that uses many different molecules to build the final organism vs. something like a product gallery that might just be a bunch of product molecules in a grid.

### Templates
Once we have a few organisms, we’re ready to combine them to create templates to really form our pages. Templates are full representations of the page layout and help provide context to all of the other elements that we’ve used to build them. Below, we can see several organisms come together to form a template.

![](https://tk-assets.lambdaschool.com/3befd2b0-d467-44df-aa07-18374245fa05_template1.jpg)

Since there are no real rules for what constitutes an organism, there could be between four to six organism used to build this template. How many do you count?

### Pages
Finally, pages are actual, specific instances of templates that hold real content. As Brad explains, “Pages are the highest level of fidelity and because they’re the most tangible, it’s typically where most people in the process spend most of their time and what most reviews revolve around.

The page stage is essential as it’s where we test the effectiveness of the design system. Viewing everything in context allows us to loop back to modify our molecules, organisms, and templates to better address the real context of the design.

Pages are also the place to test variations in templates. For example, you might want to articulate what a headline containing 40 characters looks like, but also demonstrate what 340 characters looks like. What does it look like when a user has one item in their shopping cart versus 10 items with a discount code applied? Again, these specific instances influence how we loop back through and construct our system.”

By practicing atomic design, we seek to focus in on the smallest elements of our designs first and then use them like lego pieces to construct the rest of our interfaces. We may have done this subconsciously in the past, but atomic design provides us with a clear framework for communicating our design intentions and executing our ideas.",,,,,,,"Atomic Design,Building Design Systems with Atomic Design",The Book of Atomic Design,"- What is atomic design?
- Why was it a revolutionary way of thinking?
- How do we implement it in our designs?",Introduction to Creating and Using Design Systems,Active,"Advanced Design: Design Systems and UX In Practice, Prototyping","UX Design Core [v1 deprecated], UX Design Core",,1,,,1
explain what a design system is and create one,"At many companies, design systems are becoming increasingly popular. Learning how to work with and build one from scratch is an incredibly useful skill set for any designer today.",,"As companies and design teams have grown over the years, they’ve begun running into the same problem: bespoke design doesn’t scale. When you simply add more and more designers to a project without any planning then interfaces rapidly devolve into inconsistent fiefdoms that take forever to change and maintain. 

Take this example from InVision’s **Design Systems Handbook**. During a UI audit, this company found it was using a multitude of different designs for its buttons.

![](https://tk-assets.lambdaschool.com/f7c2c57a-7f74-484f-9368-3560aadc43a3_UIaudit2.png)

When designers are given free-range to execute their visions, the overall product suffers because there is no unifying identity. As this issue became more problematic, designers realized that they could use design systems to standardize their work and, as InVision explains, “enable teams to build better products faster by making design reusable.”

So, what is this magical tool to help us solve this fundamental design problem? Well, as Audrey Hacq explains and illustrates in **Everything you need to know about Design Systems**, “I keep hearing various definitions, so let me start by saying what a Design System isn’t: it is not a Sketch library, no more than a Style guide or a Pattern Library… Actually, it’s all of this and so much more! A Design System is the single source of truth which groups all the elements that will allow the teams to design, realize and develop a product. So a Design System is not a deliverable, but a set of deliverables. It will evolve constantly with the product, the tools and the new technologies.”

![](https://tk-assets.lambdaschool.com/5e421e90-ca85-4222-8576-2eb76d93216d_1_vI3VLuqj0NPUjI6MX25RuQ.jpeg)

Audrey makes several important points here. In particular, she points out that we frequently conflate deliverables like style guides and pattern libraries with a design system. Instead, those deliverables can be part of a much bigger design system. So, what else does a design system cover besides those deliverables?

At a high-level, design systems lay out the big picture vision and standards that designs should follow and then provide the written and contextual documentation necessary to achieve that vision. Since this is such a broad description, design systems tend to differ widely between companies. But, they typically share the following pieces.

1. Purpose, Shared Values, and/or Vision
2. Design Principles
3. Brand Identity/Style Guide
4. Components & Patterns
5. Best Practices

### Purpose, Shared Values, and/or Vision
Before anything else can happen, we need to align our teams around a shared target. Articulating what our overall goals and strategy are for our design systems helps guide our work over time and ensures that we stay focused on activities that deliver value to our teams.

### Design Principles
Once we’ve aligned our team around a shared vision, we can develop design principles that help us execute our vision by guiding our design choices. This will help our team make design decisions that further advance the objectives of our product. 

For example, one of Medium’s design principles is “Direction over choice.” as Audrey explains, this help guide Medium to design a simple text editor “that allows the author to focus on the content of his article rather than on its visual aspect” instead of your standard [WYSIWYG](https://en.wikipedia.org/wiki/WYSIWYG) editor.

![](https://tk-assets.lambdaschool.com/70ab9abc-a060-4903-8d79-71de29c9fa33_1_OndP9otWR3o5dlGu0TPEzA.png)

As we can see, Medium’s design principles helped guide their design choices towards a solution that aligned with their overall vision for the product.

### Brand Identity/Style Guide
Now we’re starting to get into the details of our design system. Our brand identities should articulate the various facets of our visual communication system. According to Alla Kholmatova, this can include:

- Colors
- Fonts
- Spaces
- Icons
- Illustrations
- Photographs
- Animations
- Voice and tone
- Sounds

These pieces then come together to form the letters of our brand’s alphabet. However, we can’t just stop here. Just like we can’t speak Spanish by learning the alphabet, we can’t use our design system with just these letters.

So, we need to take things a step further and communicate the grammar of our design system by providing examples and do’s and don’ts for how our design language can be used. In doing so, we’re ensuring that our design teams use the appropriate combinations.

For example, in Atlassian’s design system, not only do they define the colors that they’d like to use, but they also provide additonal guidance on when and where the colors should be used.

![](https://tk-assets.lambdaschool.com/8a1a9b2e-2b4a-47f2-ae22-3f0f7b093b1b_Color-Usage-system.png)

As we can see, it isn’t enough to just define a color palette and call it a day. By providing some additional guidance, we can help our design teams consistently use colors across our products. 

### Components and Patterns
Once we have our visual communication sorted out, we can begin to bring our language together to create interface components and patterns. We can think of the components as the lego blocks we use to build up our designs, and of patterns as the instructions that allow us to use our components consistently.

As Nathan Curtis explains in **Patterns ≠ Components**, “Components are how something DOES work, inclusive of tradeoffs and constraints realized through a build process. Patterns describe how something SHOULD work under preferred conditions and suggestions of how to cope with tradeoffs. Components are an interface chunk to be added to an overall layout. whereas patterns may be UI or a variety of other things, like a behavior, flow, application motif or something else. Completed components exhibit a visual language in polished, precise detail, yet patterns are independent of any particular skin and flexibly adapts across any visual language.”

![](https://tk-assets.lambdaschool.com/14ea1571-6462-4723-b19d-1538ec9f6eb0_1_tTjXTME68mGKnN7hW-bW1g.png)

As we define our common components and patterns, we begin to see tangible value from our design systems. These components help our teams design consistently, prototype faster, iterate quicker, and improve usability and accessiblity.

### Best Practices
Finally, just like we provided additional context for our visual language, we can also help our teams use and implement our design system through best practices. These guidelines not only help our teams use our design systems, but they help us onboard new designers and level up junior ones by codifying our collective design experience.

Like we mentioned earlier, these are only some of the parts that teams choose to include in their design systems. Some teams use more and others need less, so it’s important to recognize your team’s context when creating and using your design system.","Creating a design system is usually an enormous undertaking. However, like all daunting projects, we can break it down into smaller pieces and tackle them one at a time. We’ll be using InVision’s process for creating a design system outlined in their **Design Systems Handbook**.

They start by breaking this huge process into the following steps:

1. Identify who should be involved
2. Choose a team model
3. Interview users
4. Conduct a visual audit
5. Articulate your vision
6. Create a visual design language
  - Colors
  - Typography (size, leading, typefaces, and so on)
  - Spacing (margins, paddings, positioning coordinates, border-spacing)
  - Images (icons, illustrations)
  - Visual form (depth, elevation, shadows, rounded corners, texture)
  - Motion
  - Sound
7. Conduct a UI inventory
8. Create a pattern library
9. Outline best practices

Let’s cover all of these steps for Tune.ly. Before we start, it is important to note that a startup like Tune.ly doesn’t usually invest the time to create a design system. There are simply too many other fundamental concerns that need to be addressed. Instead, design systems are typically created at companies that are growing rapidly and need a way to scale their designs along with the rest of the organization. That said, Tune.ly will still help us understand the process.

## Identify who should be involved
Before we get to work, we’ll need to identify and gather all of the stakeholders we need to make our design system a success. This means we can’t just work with other designers and force the design system on the rest of the organization. Instead, we need to be proactive about curating a team of designers, marketers, engineers, subject matter experts, leaders, and other stakeholders.

Obviously, your teammates will vary widely depending on the size of your organization. If you’re working at a 2 person startup, congrats! You’ve found the team. If you’re working at a huge fortune 500 company, you’ll need to spend some more time identifying useful participants.

Since Tune.ly is a startup, our team will consist of the entire company: Sarah, Tim, and us.

## Choose a team model
Almost as important as building your time is determining the best way to organize and run it. Fortunately, design systems expert Nathan Curtis has been developing design systems for a long time, and he’s identified the three most common approaches.

- The solitary model: an “overlord” rules the design system.
- The centralized team model: a single team maintains the design system as their full-time job.
- The federated model: team members from across the company come together to work on the system.

As the **Design System Handbook** explains, “There are strengths and weaknesses in each of the above models. A solitary model is fast and scrappy, but with 1 person in charge of so much, the “overlord” can become a bottleneck to the completion of many tasks. A centralized team, on the other hand, keeps the system well maintained, but the group may not be as connected to the customers’ needs as they may be less involved in user research. Finally, a federated team has great insight into what’s needed for all the product features and user needs, but this group can be quite busy working on those areas outside of building the system. Many teams are moving away from the solitary model to the centralized or federated model. As Curtis mentions in his article, overlords don’t scale. The centralized or federated models are usually much better for scaling a design system.”

In our case, we’ll be using the solitary model and we’re the “overlord.” While it isn’t the best choice for scaling purposes, as a startup we’ve got a long way to go before that becomes an issue. Plus, having a single person in charge of the design system frees up our other stakeholders from having to make design decisions.

## Interview Users
With our team in place, it’s time to interview our users. In this case, our users are us! But, at a bigger company, we’d want to understand who will be using our design system and how they’re planning to use it. This helps us determine how our design system can fit into their workflow, so they’re much more likely to use it!

We also want to take the time to interview executives, leaders, and management. They’re the ones funding this project, so we need to make sure we understand what their concerns they have. Once we’ve gathered their concerns, we can use them as actionable goals and metrics to achieve via our work.

For Tune.ly, we briefly interviewed Sarah and Tim. They emphasized that the design system should make shipping features requests faster, improve our product’s usability, and enhance our accessibility. We’ll use these concerns as our goals for this project.

## Conduct a visual audit
When we’re developing a design system for an existing product, we’ll need to review all of the current elements of the visual language. In particular, we’re interested in how frequently we use different colors, fonts, and other elements of our visual language. Looking at the discrepencies helps us identify areas for alignment. 

For example, Facebook uses 38 different text colors. Maybe there are some opportunities for them to standardize their visual language and improve their consistency.

![](https://tk-assets.lambdaschool.com/528fed45-54cd-4681-9876-8a1272bc9a6a_cssstats-facebook-V2-min.jpg)
In our case, we can skip this step for Tune.ly because we’re starting from scratch.

## Articulate your vision
After we’ve conducted all of our research, we can articulate the vision for our design system. Again, this can vary widely for different teams, but we generally want to develop a few sentences that describe our high-level intentions for our design system. 

To do so, you can conduct an affinity mapping exercise with your team to identify everyone’s core design and UX values. From here, you can converge to the five most repeated values and then develop a vision from here.

With Tune.ly, we came up with these values: user-first, accessibility > wow, and grow towards best. So, we’ve decided that our designs must always be driven by user needs; should prioritize accessibility over any sort of wow-factor, and can start out ok as long as we iterate on them towards their best realization.

Putting that all together, we have the following vision:

Tune.ly’s design system will support designs that:
- Are driven by user needs
- Prioritize accessibility over any sort of wow-factor
- Iteratively evolve towards perfection

## Create a visual design language
Building a visual design language is a probably the most fun part of this entire exercise. As designers, we get to flex our creative muscles and think about color theory, typography, layout, and a bunch of other exciting design topics. 

As we keep saying, depending on your context, you can spend tons of time working on a visual language or quickly wrap it up in a few days. Etiher way, you’ll need to focus on the following areas to build up your visual langauge:

### Colors
When you think about it, UIs tend to use a lot of colors. We’ll have 1-3 brand colors for some personality, then a variety of feedback colors (like red and green) to indicate errors and other events, and then we’ll typically need some sort of neutral grayscale for backgrounds and other subtle elements. Put all those together and you quickly end up with 15+ colors!

Determining the colors that work for your design system is a mix of trial and error, reviewing existing designs, and borrowing existing colors from the brand. The important part of this process is to ensure that they’re all organized and that there is some guidance about when and how to use them. Also, be sure to use a color contrast checker to ensure that your colors are accesible when used together. If two colors don’t work together, make sure you explain that in your supporting guidance.

For Tune.ly, we’ll be using our primary brand color for the important elements. Then we have a red, yellow, and green selected for UI interactions. Finally, our grayscale has a bit of a bluish hue leans toward the darker side of the brightness scale to support our aesthic.

### Typography (size, leading, typefaces, and so on)
Generally speaking, your typography is a bit easier to figure out than your colors. You really only have to worry about picking 1-2 font families and you’re good to go. 

Once you’ve selected a font family, you can then work on developing your type scale for your text hierarchy and the leading you’d use to improve your font family's aesthetic and legibility.

For Tune.ly, we’ll be sticking with our primary brand font. 

### The rest
When you work on a design system, understanding the needs of your current context helps keep you on the right track and focused on value-generating activites. So for Tune.ly, we don’t have to worry about diving into detail about the rest of our visual language. But, if you’re interested in learning more about the considerations for these details, be sure to check out [Chapter 2](https://www.designbetter.co/design-systems-handbook/designing-design-system) of InVision’s **Design Systems Handbook**.

## Conduct a UI inventory
Earlier, we discussed conducting a visual inventory, “which looked at the visual qualities of elements, such as color, spacing, and typography.” Since we’re working on a new project, we skipped that step. We’re also going to skip this one for the same reason. 

However, let’s quickly cover what it is so you can conduct one in the future. As InVision explains, a UI inventory “[looks] at the actual pieces of UI—like buttons, cards, lists, forms, and more. Where visual language is all about the visual approach and how things look on a global visual level, a user interface library (otherwise known as a pattern library) looks at actual components of a UI… Take a look at each of these design elements and the role they’ll play in your design system. Take stock of all interface elements in production to see just how much design debt you need to address and what elements are most commonly used. Warning! This can get a bit depressing, as most companies have an intense amount of inconsistency in their UIs. To create an interface inventory simply open all products in production at your organization, screenshot all buttons, forms, various type styles, images, and collect them in a slide deck or on big posters where the whole team can see.”

## Create a pattern library
Once you’ve researched your existing UI inventory, it’s time to consolidate your components into a pattern library. Now, you’ll leverage your visual language to create reusable building blocks that you can put together to build up your products.

For Tune.ly, since we don’t have an existing UI to consolidate, we’d focus on building our pattern library as we develop the product. So as we’re designing, we’d start to identify reusable building blocks, document them, and catalog them in our pattern library.

## Outline best practices
Finally, we’re ready to start recording our best practices. This is where you can document how your team has successfully utilized and implemented the design system in their own work. A good place to start is documenting how one team started using the design system and then successfully embedded it into their daily workflow. Now, you have a blueprint for other teams to follow to start using the design system.

At Tune.ly, we recognize that our design system and best practices will evolve rapidly as we grow - good thing that’s part of our vision! So, we’ve decided that our first best practice is to hold monthly design reviews where we record feedback from the team about how they’re using the design system. If we identify any patterns there, we’ll be sure to add them as best practices or update our design system as needed.

Remember, design systems aren’t one-and-done projects. They’re living documents that will evolve as you use it. So, make sure you have a plan in place to keep it up-to-date.","Find a design system for a company you like. In a quick paragraph, explain why you think it is an effective tool for them.",,,,,"A comprehensive guide to design systems,Everything you need to know about Design Systems,How to Create Nested Symbols in Sketch,Unleashing the Full Potential of Symbols in Sketch","Building a Visual Language,Design Systems Handbook","- What is a design system?
- What challenges do they help alleviate?
- How would we create one?",Introduction to Creating and Using Design Systems,Active,"Advanced Design: Design Systems and UX In Practice, Prototyping","UX Design Core [v1 deprecated], UX Design Core",,1,1,,2
prototype with libraries in Sketch,Sketch libraries make it easy to share and implement design systems in your own work. Learning how to use this feature will save you tons of time when using Sketch.,,"Design systems cover a wide-ranging array of deliverables. So, how will we use them in our day-to-day work? We’ll typically be pulling components from a pattern library to construct new interfaces and designs. This used to be a fairly tedious process, but new tools like Sketch have made this process much easier.

Sketch has a feature called Libraries. According to the Sketch documentation, “A Library is just an ordinary Sketch document that contains Symbols, Text Styles and Layer Styles, which you can then use in any other Sketch document. If you update any of the Symbols or styles in your Library file, documents containing instances of those Symbols, or any of your predefined styles, will receive a notification telling you that they can be updated.”

Building your visual language and pattern library into Sketch will save an enormous amount of time and energy because we don’t have to recreate each element whenever we want to use it. Instead, all of our components are easily injectable right in the Sketch UI.","Let’s create a Sketch library for Tune.ly. In particular, we’ll include our text hierarchy and a button component.

We’ll start by opening up Sketch and creating a new file. Now, we can create our text hierarchy and button component as usual.

![](https://tk-assets.lambdaschool.com/79fa94fc-2f8c-439e-bfc4-e25ca7ee679d_ScreenShot2018-11-26at2.34.38PM.png)

From here, we’ll need to turn our text hierarchy into Sketch text styles and our button into a symbol. 

To create text styles, we can select the text we want to make into a style and then in the “Appearance” section of the right menu we can select the “No Text Style” dropdown and click “Create new text style”.

![](https://tk-assets.lambdaschool.com/f308be6e-2918-4115-8e84-865b1fb53cdf_ScreenShot2018-11-26at2.39.40PM.png)

To create a symbol, we can select the element we want to make into a symbol and then select “Create Symbol” in the upper left part of the main navigation bar.

![](https://tk-assets.lambdaschool.com/30731710-9717-4c3d-a961-6e8f541cbc8c_ScreenShot2018-11-26at2.40.46PM.png)

Once we’ve finished converting everything, we can head to the “File” menu and select “Add as library”.

![](https://tk-assets.lambdaschool.com/4536e351-66c7-40ef-8241-0ebec9b03911_ScreenShot2018-11-26at2.45.00PM.png)

Now, we can access our library styles and symbols when we open up new Sketch documents.

![](https://tk-assets.lambdaschool.com/fe2ae222-24ab-48a6-a0ba-8d5268f85be0_ScreenShot2018-11-26at2.46.10PM.png)

If we update any of our symbols our styles in our original library document, then those changes will cascade through all of our Sketch files that use this document.",Check out the default libraries that come pre-installed with Sketch. What are they?,,,,,Sketch Libraries,,,,Active,,,,1,1,,2
explain what the iOS Human Interface Guidelines are and how to use them,"In order to deliver a consistently excellent user experience for iOS users, Apple has developed iOS Human Interface Guidelines for designers to use. Leveraging Apple’s design system allows us to improve the external consistency of our iOS apps and deliver a better user experience.",,"The [iOS Human Interface Guidelines](https://developer.apple.com/design/human-interface-guidelines/ios/overview/themes/) is Apple’s design system for iOS or mobile devices. Not only does it detail specific application patterns, but it also provides additional guidance about the design principles to follow in order to deliver a consistent user experience. 

By providing these guidelines, Apple is trying to improve the quality of apps on its mobile platforms and help them maintain their reputation for quality. While we could certainly disregard their advice for a compelling research-backed reason, we’ll almost always want to follow it. In doing so, we’ll deliver an experience that users will quickly adopt and thrive in.

As you start designing iOS experiences, frequently reviewing the guidelines will help you recognize when to use suggested patterns and when you’ll need to develop your own designs. 

For example, oftentimes we’ll use a Tab Bar to switch between different sections of our app, like in this example from the guidelines:

![](https://tk-assets.lambdaschool.com/fad3f930-6406-4a3a-b689-dd74ce8368e3_TabBar.png)

This is a very common UI pattern, so we should definitely follow the guidelines. However, if we were working for Uber and needed to design their map experience, then we would use the guidelines as a starting point and add in our specific functionality.

Knowing when to use the guidelines and when to design your own solutions comes with familiarity and practice. To build up your understanding, start by reading the guidelines in their entirety. This will help you recognize scenarios when a guideline could help. Then, as you begin to design new iOS interfaces, try to break the screens into their component pieces.

For example, if you’re designing an app to share images then we’ll most likely need some sort of navigation and a way to view images. With our components in mind, we can review the documentation and figure out the [common navigation](https://developer.apple.com/design/human-interface-guidelines/ios/bars/tab-bars/) and [image presentation](https://developer.apple.com/design/human-interface-guidelines/ios/views/image-views/) patterns. If we reviewed the guidelines and there wasn’t any guidance, then we can start coming up with our own solution.","Before we start working with the [iOS Human Interface Guidelines](https://developer.apple.com/design/human-interface-guidelines/ios/overview/themes/), make sure you review them in their entirety. You can’t use them if you don’t know them!

Apple has made it pretty easy for us to start incorporating the guidelines into our designs. If we check out their [design resources](https://developer.apple.com/design/resources/#ios-apps), we can download a Sketch library that they’ve put together. There’s also the default iOS library that comes pre-installed with Sketch. Both of these libraries will help us design apps that leverage the iOS design language! 

Once you’ve followed the directions to install Apple’s library, then you can find it in your Sketch symbols like this:

![](https://tk-assets.lambdaschool.com/ddb0440f-acdf-41ad-986c-30b3f2ba04bc_ScreenShot2018-11-27at1.30.59PM.png)

Now, instead of trying to recreate the iOS components we can use these symbols to ensure we’re designing consistently.","Take a look at an iOS app and pick out 3 examples of their implementation of the guidelines. If you don’t have an iOS device, then find the UI of the iOS version of your favorite mobile app and complete the exercise.",,,,,iOS Human Interface Guidelines,Apple Design Resources,"- What are the iOS Human Interface Guidelines?
- How do they help us design better user experiences?","""iOS Human Interface Guidelines, Material Design, and Android Considerations""",Active,Advanced Design: Design Systems and UX In Practice,UX Design Core [v1 deprecated],,1,1,,2
explain what Material Design is and how to use it to design for Android devices,"Material Design is a design system built by Google that supports the best practices of user interface design. While we can use Material Design with any digital product, we frequently use it to design Android apps.",,"As its documentation explains, “Material Design is a visual language that synthesizes the classic principles of good design with the innovation of technology and science.” It seeks to elevate user experiences across platforms by helping teams design tailored experiences that leverage a consistent and unified system. In other words, it’s Google’s own design system that can be used on the web, for apps, and any other medium.

If you’re familiar with Gmail, Google Drive, or other Google products then you’ve seen Material Design in action. It’s also used to design Android apps as well. 

While the Material Design guidelines do focus on the big picture design considerations, it also includes an extensive pattern library and various tools to help us implement Material Design in our work. Leveraging these assets can help us complete our Android designs faster and maintain our external consistency.

As you start designing Android experiences, frequently reviewing the guidelines will help you recognize when to use suggested patterns and when you’ll need to develop your own designs. 

For example, oftentimes we’ll use a Tab Bar to switch between different sections of our app, like in this example from the guidelines:

![](https://tk-assets.lambdaschool.com/a2fabdd2-715b-4baa-9261-eb9f913c7587_mio-design2Fassets2F1PrVPyUvR5HvW5KcvIIy9s3T52Vy9jwN92Fbottom-app-bar-intro.png)

This is a very common UI pattern, so we should definitely follow the guidelines. However, if we were working for Uber and needed to design their map experience, then we would use the guidelines as a starting point and add in our specific functionality.

Knowing when to use the guidelines and when to design your own solutions comes with familiarity and practice. To build up your understanding, start by reading the guidelines in their entirety. This will help you recognize scenarios when a guideline could help. Then, as you begin to design new Android interfaces, try to break the screens into their component pieces.

For example, if you’re designing an app to share images then we’ll most likely need some sort of navigation and a way to view images. With our components in mind, we can review the documentation and figure out the [common navigation](https://material.io/design/components/app-bars-bottom.html) and [image presentation](https://material.io/design/components/image-lists.html) patterns. If we reviewed the guidelines and there wasn’t any guidance, then we can start coming up with our own solution.","Before we start working with [Material Design](https://material.io/design/), make sure you review it in its entirety. You can’t use it if you don’t know it!

Google has made it pretty easy for us to start incorporating the guidelines into our designs. If we check out their [Material theme editor](https://material.io/tools/theme-editor/), we can download a Sketch plugin that they’ve developed. 

After downloading the plugin, you will be able to find it in the plugin menu.

![](https://tk-assets.lambdaschool.com/841cab11-b54d-4f9c-88b9-c59650bf8a5a_ScreenShot2018-11-27at1.42.48PM.png)

Once you’ve found it, select “Open Theme Editor…” and you will have a little dialog pop up. Here we can select one of the pre-built Material themes to customize. To modify the default Material theme, select “Baseline” and then press “Start with the Baseline theme”. After saving your theme, Sketch will open a new file for your Material library.

![](https://tk-assets.lambdaschool.com/5e6cd306-6b5b-403e-a28b-ebf168173e87_ScreenShot2018-11-27at1.45.58PM.png)

Here you can customize the color palette in the popup and adjust any of the other details to fit your implementation of Material. As we can see, this approach lends itself to much more customization.

Once you’ve finished adjusting everything, you can save this file. Now, it will appear in your symbols so you can quickly add Material components to your designs.

![](https://tk-assets.lambdaschool.com/793a7f8c-d037-4117-96b6-0b0407e78a6e_ScreenShot2018-11-27at1.49.16PM.png)","Take a look at an Android app and pick out 3 examples of their implementation of the guidelines. If you don’t have an Android device, then find the UI of the Android version of your favorite mobile app on Google and complete the exercise.",,,,,"Design for Android,Material Design",Material Theme Editor,,"""iOS Human Interface Guidelines, Material Design, and Android Considerations""",Active,Advanced Design: Design Systems and UX In Practice,UX Design Core [v1 deprecated],,1,1,,2
transition mid-fidelity wireframes to high-fidelity designs,Transitioning mid-fidelity wireframes to high-fidelity designs allows designers to continue to test new aesthetics of the user interface as well as prepare design deliverables for development.,,"We can begin the process of converting mid-fidelity wireframes to high-fidelity designs by opening our tool of choice, creating an artboard, and getting our style library in place. If we do not yet have a style library, now is the time to create one. We want to ensure that we set up our document correctly and make smart, incremental updates to our high-fidelity designs over time. As our high-fidelity designs are tested and vetted with users and stakeholders, we want to feel confident that we can make stylistic changes easily without the need to update every design.

After you have your style library in place, it's time to start designing. Expect the first few pages to be a little rough as you get used to using the styles you created. You will also likely need to tweak some of the styles that you've created. Also, expect to generate additional styles and symbols for things you haven't yet considered. Remember, this is all expected and necessary. The more time you spend setting up your symbols and styles correctly, the easier it will be for you to continue designing and updating your designs as you move forward.

As you create copy in your designs, try to be smart about the verbiage you use. If you have the website copy available, use it! You want your designs to be as realistic as possible. If you don't have copy available, go with good 'copy direction.' In other words, don't make titles that say 'Title.' Give the viewer a sense of the type of information that would go there, even if it isn't final.

In the same vein, don't create repeating styles that contain the same content. For example, change the content within lists. Don't have the same name and phone number repeating throughout the list. Use a plug-in or something similar to generate unique and exciting content. Unique content will give your designs a more realistic feel and help your users and or stakeholders better understand the vision of the product.

As important as it is to design correctly, it's equally as important to know when to stop creating. For example, if specific details of a design aren't available, it's best to leave them to a later date. You may not have access to the final copy or images. You may not have the exact icon that will be needed to show a specific button state. That's okay! Feel comfortable creating what's possible, and know when it's the right time to stop. The details will eventually come to light, and you may add those details at a later date.",,"Take 15 minutes and download a style library (not material) from https://www.sketchappsources.com/ or any other reputable source online. Once you have your style library installed, create an Android artboard with an 8pt grid and columns following the specifications of the design on https://material.io/design/layout/responsive-layout-grid.html#.   Raise your hand in Zoom when you're finished.",,,,,"7 Rules for Creating Gorgeous UI (Part 2),7 Rules for Creating Gorgeous UI (Part 1),How to Master the Design Grid",,,Transitioning from Wireframes to High-Fidelity Design,,"Advanced Ideation and UX Leadership, Prototyping","UX Design Core [v1 deprecated], UX Design Core",,1,1,,2
recreate existing designs using a digital design tool,"It's important to increase your skills in the tools of the trade. Not all UX designers need to produce high-fidelity final designs, but being able to talk intelligently about design principles and understand what it takes to create a final high-fidelity design, will add to your value as a UX designer.",,We will demonstrate the use of Sketch in creating a high-fidelity design for a mobile application.,Follow along as we recreate existing designs based on screenshots of other mobile apps.,,,,,,,,,High-Fidelity Design Practice,,Advanced Ideation and UX Leadership,UX Design Core [v1 deprecated],,1,,,1
conduct user research as a UX team for a client,It's often important to work collaboratively with another designer or researcher to gather user data. Use the skills and tools you have learned to collect information from people who are or could reasonably be potential users of your product. The key is to gather as much relevant data as is feasible within your time constraints.,,"Use material from our <a href=""https://learn.lambdaschool.com/ux/module/recjwoxl4gq8uym1a"">class</a> on user interviews and making a [research plan] (https://learn.lambdaschool.com/ux/module/rectptccu1qubev4t) to help you in your research process. Also, the lessons from <a href=""https://learn.lambdaschool.com/ux/module/recqgpk7cohy9dybz"">Additional Research Methods</a> could be helpful.",,,,,,,,,,Discovery,,Design in Practice: Group Project 1 week 1,"UX Design Core [v1 deprecated], UX Design Core",,1,,,1
gather requirements from a stakeholder,Determine the questions to ask and be prepared to thoroughly gather the information from stakeholders that will allow you to understand the technical and social constraints associated with the project you are being asked to do.,,"Consult these <a href=""https://learn.lambdaschool.com/ux/module/rec7yk0vhmx69xjes"">lessons</a> and the material from [Kim Goodwin] (https://boxesandarrows.wpengine.com/?p=3611) for reminders of how to conduct an effective stakeholder interview: ",,,,,,,,,,Discovery,,Design in Practice: Group Project 1 week 1,"UX Design Core [v1 deprecated], UX Design Core",,1,,,1
conduct a competitive analysis based on information gathered from stakeholder research,Competitive analyses allow you to understand the current marketplace your product will be entering. Evaluate direct competitors and indirect competitors to determine the relative strengths and weaknesses of their offerings to allow you to improve upon their products or find a niche where the product you are designing can solve a new problem in the space.,,"Review <a href=""https://learn.lambdaschool.com/ux/module/recqgpk7cohy9dybz"">Competitive analysis</a> lesson for material on competitive analysis.",,,,,,,,,,Discovery,,Design in Practice: Group Project 1 week 1,"UX Design Core [v1 deprecated], UX Design Core",,1,,,1
consolidate user research into documentation for use in the design process,User research should always end up as documentation of some kind to help everyone on the team to be well grounded in the research. Data from user interviews and surveys can become personas and user journey maps. Competitive analysis and user research can be combined to help define user flows and information architecture.,,"Consult the <a href=""https://learn.lambdaschool.com/ux/sprint/recnrhfznmibs01ze"">Definition</a> lessons from the course for a reminder of ways to help define your experience.",,,,,,,,,,Define the Product,,Design in Practice: Group Project 1 week 1,"UX Design Core [v1 deprecated], UX Design Core",,1,,,1
outline product goals for the team and the user,"Articulating the goals of the project is an important step. The goals become an important focal point of all design and development moving forward. By referencing the goals, you can assure the project stays on track or it can be intentionally shifted based on new data.",,,,,,,,,,,,Define the Product,,Design in Practice: Group Project 1 week 1,"UX Design Core [v1 deprecated], UX Design Core",,0,,,0
work collaboratively to create viable concepts for product direction that solves user needs,This project is a team project. You can use pair design as a way to work through some solutions to your design problems. Collaborate to create concepts that you can use in your final product.,,"Refer to the lessons on <a href=""https://learn.lambdaschool.com/ux/sprint/rect2lxo4stxdkulq"">ideation, creativity</a>, and <a href=""https://learn.lambdaschool.com/ux/sprint/recnwj3qebyqawbb3"">pair design</a> for a reminder of what you can do to effectively generate ideas.",,,,,,,,,,,,,,,1,,,1
create multiple low-fidelity prototypes of the product concepts,"Low-fidelity prototypes help us evaluate our solution ideas and assumptions. The goal here is to not focus on the design but on the overall user interaction. If users respond well to the concept, then you’re ready to iterate to the next level of fidelity or move on to another solution.",Review the [Rapid Sketching; Sketching Interfaces; Paper Prototypes](https://learn.lambdaschool.com/ux/module/recmzhhkcg634kasd) and [Wireframes and Click-through Prototyping with Sketch & InVision](https://learn.lambdaschool.com/ux/module/recbt5kjngbolulkw) modules for a refresher on these concepts.,,,,,,,,,,,Prototyping and Testing,,Design in Practice: Group Project 1 week 2,"UX Design Core [v1 deprecated], UX Design Core",,0,,,0
evaluate prototype effectiveness by testing on real users,"If you haven’t tested a solution on users, it’s just a good guess. Testing, validating, and iterating is how you polish a good guess into a valuable part of your product.",Review the [Additional Research Methods](https://learn.lambdaschool.com/ux/module/recqgpk7cohy9dybz) module for a refresher.,,,,,,,,,,,Prototyping and Testing,,Design in Practice: Group Project 1 week 2,"UX Design Core [v1 deprecated], UX Design Core",,0,,,0
design a representation of your final product in high-fidelity,"A high-fidelity MVP is an incredibly important deliverable to master. It’s frequently the only deliverable that business stakeholders are interested in seeing. Therefore, it should be well-designed, tested, and validated.",Review the [Fundamentals: Design Principles](https://learn.lambdaschool.com/ux/sprint/recvnwpeq3ghlm5sh) and the [Advanced Ideation and UX Leadership](https://learn.lambdaschool.com/ux/sprint/recnwj3qebyqawbb3) sprints for a refresher.,,,,,,,,,,,High Fidelity MVP,,Design in Practice: Group Project 1 week 2,"UX Design Core [v1 deprecated], UX Design Core",,0,,,0
test high-fidelity designs with real users,"In order to ensure that your high-fidelity additions don’t negatively impact the user experience, you’ll need to continue to test them. Additionally, further testing can help you refine the experience with high-fidelity design considerations, such as color.",,,,,,,,,,,,High Fidelity MVP,,Design in Practice: Group Project 1 week 2,"UX Design Core [v1 deprecated], UX Design Core",,0,,,0
deliver a compelling presentation to client with final concepts using storytelling,"Any UX designer can do some user research and put together a high-fidelity mockup, but great designers can consolidate all of their work into a coherent presentation that drives home the value of their work to other stakeholders.","Review the [Presenting Ideas; The Art of the Critique, to Give and Receive](https://learn.lambdaschool.com/ux/module/recofhz6oyglwqnos) module for a refresher.",,,,,,,,,,,Client Presentation,,Design in Practice: Group Project 1 week 2,"UX Design Core [v1 deprecated], UX Design Core",,0,,,0
provide final design summary document with supporting material,"Whether you’re working as a consultant, at a startup, or a huge enterprise, you will always need to document and summarize the work you’ve done for others.",,,,,,,,,,,,Client Presentation,,Design in Practice: Group Project 1 week 2,"UX Design Core [v1 deprecated], UX Design Core",,0,,,0
explain what Agile project management is and how to use it,"Agile project management emerged in the early 2000s as a way for software teams to rapidly develop products. Since then, agile practices have spread to various other fields including UX! Understanding agile will help you quickly join teams and start working effectively.",,"Back in 2001, a group of 17 project management and software development experts gathered for a three-day retreat in Utah. They represented all of the various project management philosophies of the day, such as Extreme Programming, SCRUM, DSDM, Adaptive Software Development, Crystal, Feature-Driven Development, Pragmatic Programming, and others. When they emerged from their retreat, they had collectively developed and signed the following [Agile Manifesto](http://agilemanifesto.org/principles.html) that sparked the agile revolution.

### Manifesto for Agile Software Development

We are uncovering better ways of developing software by doing it and helping others do it.

Through this work we have come to value:

**Individuals and interactions** over processes and tools
**Working software** over comprehensive documentation
**Customer collaboration** over contract negotiation
**Responding to change** over following a plan

That is, while there is value in the items on the right, we value the items on the left more.

### Principles behind the Agile Manifesto

We follow these principles:

- Our highest priority is to satisfy the customer through early and continuous delivery of valuable software.

- Welcome changing requirements, even late in development. Agile processes harness change for the customer's competitive advantage.

- Deliver working software frequently, from a couple of weeks to a couple of months, with a preference to the shorter timescale.

- Business people and developers must work together daily throughout the project.

- Build projects around motivated individuals. Give them the environment and support they need, and trust them to get the job done.

- The most efficient and effective method of conveying information to and within a development team is face-to-face conversation.

- Working software is the primary measure of progress.

- Agile processes promote sustainable development. The sponsors, developers, and users should be able to maintain a constant pace indefinitely.

- Continuous attention to technical excellence and good design enhances agility.

- Simplicity--the art of maximizing the amount of work not done--is essential.

- The best architectures, requirements, and designs emerge from self-organizing teams.

- At regular intervals, the team reflects on how to become more effective, then tunes and adjusts its behavior accordingly.

While the original manifesto was mostly focused on software development, the values it articulates are universal. Especially the notion that we should take an iterative approach to software development instead of betting everything on a “big bang” launch.

With the manifesto as its foundation, the concept of agile has evolved over the years. Today, according to Atlassian’s [Agile Coach guide](https://www.atlassian.com/agile), we can define agile as “an iterative approach to project management and software development that helps teams deliver value to their customers faster and with fewer headaches. Instead of betting everything on a ""big bang"" launch, an agile team delivers work in small, but consumable, increments. Requirements, plans, and results are evaluated continuously so teams have a natural mechanism for responding to change quickly… 

Open communication, collaboration, adaptation, and trust amongst team members are at the heart of agile. Although the project lead or product owner typically prioritizes the work to be delivered, the team takes the lead on deciding how the work will get done, self-organizing around granular tasks and assignments.

Agile isn't defined by a set of ceremonies or specific development techniques. Rather, agile is a group of methodologies that demonstrate a commitment to tight feedback cycles and continuous improvement.”

Today, many product, UX, and development teams use these agile principles as their guiding project management philosophy. However, since agile is a set of principles and not a prescriptive framework, they typically use more structured systems, like Kanban and Scrum, to actually manage their work. Regardless of their preferred system, the agile principles provide a solid mental model for working effectively as a team.","Since agile is a set of principles instead of a prescriptive system for managing work, it’s difficult to put into practice. That said, you can periodically review the principles and compare your work processes to their ideals. Over time, you’ll be able to gauge how closely your workflow follows agile practices and make adjustments better align with them.

For example, in the early days of Scoot, the team spent a lot of time trying to come up with a plan for executing their product vision. However, as they started working on it, they realized that they were constantly tweaking the plan. Furthermore, they weren’t responding to new pressing needs because they hadn’t been included in the original plan. 

After reviewing the agile practices for guidance, they realized they should be favoring “Individuals and interactions over processes and tools.” Now, the team spends less time trying to plan every conceivable event years into the future and instead focuses on planning a month in advance while leaving plenty of room for unexpected circumstances.","Reflect on your personal project management process. Then, in a few sentences, answer the following question: how could you use agile practices to improve your productivity?",,,,,"Agile Project Management,The Agile Manifesto",,"- What is agile project management?
- How is it different from the waterfall approach?","UX Project Management,UX Project Management",Active,"Advanced Design: Design Systems and UX In Practice, UX Processes",UX Design Core [v1 deprecated],,1,1,,2
explain what the Kanban approach is and how to use it,"The Kanban system was originally developed by Toyota to implement just-in-time production techniques in their work. Around 2004, Microsoft used these Kanban principles to develop software, and today it is one of the most popular ways for teams to implement agile in their project management.",,"According to the Atlassian Agile Coach, “Kanban is a popular framework used to implement agile software development. It requires real-time communication of capacity and full transparency of work. Work items are represented visually on a kanban board, allowing team members to see the state of every piece of work at any time.”

The Kanban method was originally developed by Toyota to implement just in time processes in order to streamline their car-building operations. Then in 2004, Microsoft began applying the Kanban approach to their software development. Today, it has blossomed into one of the most popular agile project management approaches.

It’s wide-spread appeal can be attributed to its simplicity and emphasis on continuous delivery. It focuses on remaining flexible to incoming requests and lets teams quickly adapt to changes in priority. This flexibility stems from the heart and soul of the Kanban approach: the Kanban Board.

![](https://tk-assets.lambdaschool.com/fc2068ec-17e5-4f30-98d4-d78de3779006_cb33df099b6a908ca11ec8b47dc3e067.png)

A Kanban Board is comprised of three basic elements: board, list, and card.

- **Board:** The board itself encapsulates a particular project or workflow. So, we might have a board for an entire product, or we could have a focused one for all of our Discovery efforts.
- **List or Lane:** A lane is a grouping of cards. They indicate the stage that cards are at in our process. This helps us keep track of how our work is coming along.
- **Card:** Cards represent an item of work or task to be accomplished. By representing work as a card on the board, team members can easily track the progress of work through its workflow in a highly visual manner. Cards also feature critical information about that particular work item, giving the entire team full visibility into who is responsible for that item of work, a brief description of the job being done, how long that piece of work is estimated to take, and so on.

Once you’ve set up a Kanban board, there’s only one simple rule to follow: each list can only have a certain number of pre-determined cards in it at a given point in time. By limiting the number of cards in a list, Kanban seeks to prevent us from multitasking and “nearly” finishing our work. It also encourages us to complete work that is close to being done so we can “pull” cards across our entire board. Finally, it helps teams identify bottlenecks and areas of inactivity so they can better optimize their workflows.","Let’s create a Kanban board for Scoot. We’ll be using [Trello](https://trello.com) for this exercise.

To start, we’ll create a new board in Trello that will serve as the Kanban board for Tune.ly’s design process. We’ll start by pressing “Create new board…” and then fill in the details about our board.

![](https://tk-assets.lambdaschool.com/598413c7-d15a-4574-a59e-6180034ec70c_ScreenShot2018-12-04at3.19.32PM.png)

![](https://tk-assets.lambdaschool.com/134594b4-048d-481d-98a3-36c8680dc765_ScreenShot2018-12-04at3.19.49PM.png)

Trello will automatically create some lists for us, we can go ahead and remove them so we can add our own workflow. Our design workflow looks like this: ideas, research, prototyping, mockup, and handoff.  Our ideas list serves as our backlog, so that’s where we can record new initiatives, features, fixes, and improvements. The other lists denote various stages of our work. Finally, the handoff list holds all the completed work that we passed along to the dev team. 

On the board, we’ll create a list for each stage in our process. In the title, we’ll also add the maximum number of cards that can be added to that list at a time.

![](https://tk-assets.lambdaschool.com/7175899f-db25-4778-b836-7af928ddc872_ScreenShot2018-12-04at3.26.50PM.png)

Now that we have our process set up, we can begin adding cards. These cards represent various features that we’re adding to our product.

![](https://tk-assets.lambdaschool.com/5e629c1b-add7-49b0-89ec-9d7b70cad693_ScreenShot2018-12-04at3.54.22PM.png)

Notice how we can see all of our work at a glance? This is the power of Kanban. Additionally, we don’t need to organize our work into Sprints or scheduled releases. Instead, we simply select a card from our ideas backlog and keep moving. 

However, at this point in time, we couldn’t move a new card into our research list because we’ve reached the maximum amount of cards for that list. We’d need to wait for some other work to move through our workflow before we can begin working on something new. 

![](https://tk-assets.lambdaschool.com/d36cd033-e38b-4034-ad34-994a23a61aca_ScreenShot2018-12-04at4.12.13PM.png)

Kanban is an endlessly adaptable approach to agile project management. It can fit any workflow and quickly show us what we’re working on, where we’re experiencing bottlenecks, and what needs to happen next.",Try organizing your personal to-do list into a Kanban board. What do your lists look like? Where are you experiencing bottlenecks?,,,,,"Kanban 101: How to Use Kanban Boards to Manage Your Next Project,""Taking off the agile training wheels, advance agile project management using Kanban"",Atlassian Agile Coach: Kanban","The Toyota Way: 14 Management Principles from the World's Greatest Manufacturer,Toyota Production System: Beyond Large-Scale Production","- What is the Kanban method?
- How can we use it to manage our work?","UX Project Management,UX Project Management",Active,"Advanced Design: Design Systems and UX In Practice, UX Processes",UX Design Core [v1 deprecated],,1,1,,2
explain what the Scrum approach is and how to use it,"The most popular agile framework today is Scrum. Therefore, learning how to use it will help prepare you for a design role at many companies.",,"As the Atlassian Agile Coach explains, “Scrum is one of the most popular frameworks for implementing agile. So popular, in fact, that many people think scrum and agile are the same thing. (They're not.) Many frameworks can be used to implement agile, such as kanban for example, but scrum has a unique flavor because of the commitment to short iterations of work.”

Scrum has more structure, ceremonies, and roles than other approaches. While this may seem like a drawback, it’s actually the source of scrum's strength and popularity. People like being able to point to a process to justify their work, and with scrum, they can point to an efficient one that helps them get their work done faster.

Let’s break down how to use the scrum framework. According to Michele Sliger in *Agile project management with Scrum*, the scrum process looks like this. 

![](https://tk-assets.lambdaschool.com/e0429c95-69bb-4c95-9f80-8a4bb917d0e0_image01.jpg)

Here we can see that each “project begins with a clear vision provided by the business, and a set of product features in order of importance. These features are part of the product backlog, which is maintained by the customer or customer representative referred to as the Product Owner. 

A time box commonly referred to as an iteration or sprint, is the set amount of time that the team has to complete the features selected. Sprints are generally from one to four weeks in length, and that length is maintained throughout the life of the project so as to establish a cadence. The team selects items from the product backlog that it believes can be completed in the sprint, and creates a sprint backlog consisting of the features and tasks as part of the sprint-planning meeting.

Once the team has committed to a sprint backlog, the task work begins. During this time in the sprint, the team is protected from interruptions and allowed to focus on meeting the sprint goal. No changes to the sprint backlog are allowed; however, the product backlog can be changed in preparation for the next sprint.

During the sprint, the team checks in daily with each other in the form of a 15-minute meeting known as a scrum. The team stands in a circle and each member states what they did yesterday, what they plan to do today, and what is getting in their way.

At the end of the sprint, the team demos the work they have completed to the stakeholders and gathers feedback that will affect what they work on in the next sprint. They also hold a retrospective to learn how to improve. This meeting is critical, as its focus is on the three pillars of Scrum: transparency, inspection, and adaptation.”

Within this framework, there are three critical roles that must be fulfilled: the product owner, the scrum master, and the team. The Atlassian Agile Coach breaks each of these roles down.

### The Product Owner
“Product owners are the champions for their product. They are focused on understanding business and market requirements, then prioritizing the work to be done by the engineering team accordingly. Effective product owners:

- Build and manage the product backlog
- Closely partner with the business and the team to ensure everyone understands the work items in the product backlog
- Give the team clear guidance on which features to deliver next
- Decide when to ship the product with the predisposition towards more frequent delivery 

Keep in mind that a product owner is not a project manager. Product owners are not managing the status of the program. They focus on ensuring the development team delivers the most value to the business. Also, it's important that the product owner be an individual. No development team wants mixed guidance from multiple product owners.”

### The scrum master
“Scrum masters are the champion for scrum within their team. They coach the team, the product owner, and the business on the scrum process and look for ways to fine-tune their practice of it. An effective scrum master deeply understands the work being done by the team and can help the team optimize their delivery flow. As the facilitator-in-chief, they schedule the needed resources (both human and logistical) for sprint planning, stand-up, sprint review, and the sprint retrospective.

Scrum masters also look to resolve impediments and distractions for the development team, insulating them from external disruptions whenever possible.

Part of the scrum master's job is to defend against an anti-pattern common among teams new to scrum: changing the sprint's scope after it has already begun. Product owners will sometimes ask, ""Can't we get this one more super-important little thing into this sprint?"" But keeping scope air tight reinforces good estimation and product planning–not to mention fends off a source of disruption to the development team.

Scrum masters are commonly mistaken for project managers, when in fact, project managers don't really have a place in the scrum methodology. A scrum team controls its own destiny and self-organizes around their work. Agile teams use pull models where the team pulls a certain amount of work off the backlog and commits to completing it that sprint, which is very effective in maintaining quality and ensuring optimum performance of the team over the long-term. Neither scrum masters nor project managers nor product owners push work to the team (which, by contrast, tends to erode both quality and morale).”

### The scrum team
“Scrum teams are the champions for sustainable development practices. The most effective scrum teams are tight-knit, co-located, and usually 5 to 7 members. Team members have differing skill sets, and cross-train each other so no one person becomes a bottleneck in the delivery of work. All members of the team help one another to ensure a successful sprint completion.

As mentioned above, the scrum team drives the plan for each sprint. They forecast how much work they believe they can complete over the iteration using their historical velocity as a guide. Keeping the iteration length fixed gives the development team important feedback on their estimation and delivery process, which in turn makes their forecasts increasingly accurate over time.”

When you put all of these roles and processes together you have scrum! Teams appreciate scrum’s focus on producing tangible work in short, iterative cycles. Plus, when a scrum team gets good at working with scrum it becomes much easier for them to forecast their future output. Therefore, management appreciates the planning capacity that scrum affords.","Let’s create a Scrum process for Scoot. We’ll be using [Trello](https://trello.com) for this exercise.

To start, we’ll create a new board in Trello that will serve as a board for Scoot's design process. We’ll start by pressing “Create new board…” and then fill in the details about our board.

![](https://tk-assets.lambdaschool.com/598413c7-d15a-4574-a59e-6180034ec70c_ScreenShot2018-12-04at3.19.32PM.png)

![](https://tk-assets.lambdaschool.com/134594b4-048d-481d-98a3-36c8680dc765_ScreenShot2018-12-04at3.19.49PM.png)

Trello will automatically create some lists for us, we can go ahead and remove them so we can add our own workflow. Our scrum workflow looks like this: product backlog, sprint backlog, in progress, review, blocked, done. 

![](https://tk-assets.lambdaschool.com/6947d0b2-25cd-40e1-8a2d-aac46643d89d_ScreenShot2018-12-04at7.22.01PM.png)

Our product owner is in charge of setting up our product backlog. Here they create a prioritized list of all the work to be done. Then the team will select tasks it believe it can complete in the sprint and move them to the sprint backlog.

![](https://tk-assets.lambdaschool.com/14aa11c6-d3b8-493c-b871-e15f3ab20856_ScreenShot2018-12-04at7.24.28PM.png)

Once the work has been added to the sprint backlog, the team will work on for a sprint. They will check in every morning at a stand up to see if there are any blockers and to get a status update from everyone. If they ever get stuck on something during the day, they can add the task to the blocked column so it is quickly resolved.

After the sprint is over, the team will have a shippable piece of functionality and they will hold a retrospective to analyze their process.",Try organizing your personal to-do list using Scrum. Does this approach work for you? How long are your sprints?,,,,,"The Beginner’s Guide To Scrum And Agile Project Management,Agile project management with Scrum,Atlassian Agile Coach: Scrum",Scrum: The Art of Doing Twice the Work in Half the Time,"- What is SCRUM?
- How can we use it to manage our work?","UX Project Management,UX Project Management",Active,"Advanced Design: Design Systems and UX In Practice, UX Processes",UX Design Core [v1 deprecated],,1,1,,2
explain what working as a UX designer is like,"The day-to-day realities of a UX designer is an ever-changing whirlwind of projects, iterations, and learning. Understanding what the role entails will give you a better perspective on the career you’re starting. ",,,,,,,,,,,,Working as a UX Designer,Active,Advanced Design: Design Systems and UX In Practice,UX Design Core [v1 deprecated],,0,,,0
explain the value of UX to business stakeholders,"Educating your peers and organizations about the UX process is part of the job. Just like we might not know all of the details of marketing or software development, other stakeholders don’t know everything about UX. Being able to quickly educate them about the UX process will help you grow in your career and improve the UX outcomes at your organization.",,,,,,,,,,,,Working as a UX Designer,Active,Advanced Design: Design Systems and UX In Practice,UX Design Core [v1 deprecated],,0,,,0
explain how UX designers are also UX educators,"Oftentimes, business stakeholders are stuck in the past and don’t realize the tremendous value UX has for their business. Understanding how to communicate that value will make you a more effective designer and ignite your career growth.",,,,,,,,,,,,Working as a UX Designer,Active,Advanced Design: Design Systems and UX In Practice,UX Design Core [v1 deprecated],,0,,,0
"conduct discovery activities, define your problem space, generate ideas for solutions, prototype your concepts, create high fidelity designs",UX students should have enough training and experience to determine what techniques and tools they can use to complete a design project within the tight schedule of a project week. ,,,,,,,,,,,,Project Week — Design a Lambda School Application,,UX Unit 2 Project Week,UX Design Core [v1 deprecated],,0,,,0
conduct expert interviews as part of a design sprint,"Interviewing the experts helps set the stage for the design sprint. It gives you an opportunity to learn all you need to know about the product or situation to make forward progress in the design sprint. In our course so far, we have often referred to this type of information gathering as stakeholder interviews. In the sprint method, you simply discuss the product as a group, rather than conducting individual interviews.",,"At the beginning of the morning during a design sprint, you want to set the stage and help bring everyone into alignment on understanding the problem space and the objectives. You also want to help keep everyone fully interacting in the meeting to ensure you get quality input from the whole team. There are a couple of steps you can take to help make sure it is effective. First is to help get the team to align on the purpose and the problem space. The second step is to ensure engagement with ""How might we ..."" questions.

First, get people on the same page. When working as an agency, you really want to ensure your design team understands the product and the environment the product lives in. If you're on an in-house team, it's often true that members of the team view the product differently. So, to start, it's good to get the product team talking about what the product is, who the target audience is, and how the product is used. A facilitator can launch the discussion by asking a few questions. For example, you can say something like this:

- Tell me what the product is. Who is it for? How do they use it?
- What problem is your product trying to solve?
- Who is using the product currently? Is there another audience you would like to use your product that isn't currently using it?
- If there were no problems at all, with everything going smoothly, what would the product look like in two years?

You generally try to run an expert interview discussion for about 20 minutes. If people are still fully engaged and wanting to discuss more after 20 minutes, set another timer for 10 minutes to let the discussion continue. Try not to go beyond 30 minutes for the expert interviews.",,,,,,,,,,Google Sprint 2.0 — Monday: Map and Sketch,,Design in Practice: Google Sprint,"UX Design Core [v1 deprecated], UX Design Core",,1,,,1
"use ""How might we"" questions to define a design challenge in a design sprint","The other focus of the facilitator is to help keep all attendees fully participating in this meeting. (People who can't be—or don't want to be—fully engaged shouldn't be invited). To help keep people engaged you can use the ""How might we ..."" form of note taking. ""How might we ..."" questions are used heavily by IDEO in their _design thinking_ process. They help the team focus on opportunities rather than problems. To facilitate this form of note taking, ensure everyone has their own pad of sticky notes. Then instruct each participant to write ""HMW"" in the upper left of the top sticky note. Those are the initials of the ""*H*ow *m*ight *w*e ..."" question. 

As you introduce the expert interview portion of the meeting, ask participants to write down any ideas or thoughts they have in the form of the ""How might we ..."" question as the discussion ensues. Each time they write a new question, they should peel off the sticky note and place it on the table in front of them. Invite each participant to write as legibly as they can. By the end of the meeting, each participant could have somewhere between 10 and 15 notes, maybe more. Each of these notes will help contribute to the furthering of the discussion later.

At the conclusion of the expert interview, have everyone place their sticky notes on a wall, window or other flat, smooth surface. Then give each participant three dots, with the stakeholder receiving four dots. Conduct dot voting to find out what people's priorities are.

After everyone has voted, take the top voted note and put it at about eye level on an open part of the wall or whiteboard. Then start building underneath it in the form of a pyramid with the next highest priority below, like this: 

![Image of sticky notes stacked on top of each other. The top note has nine colored dots on it. It also contains the text: HMW Attract a wealthier demographic? The next row of stickies has two notes, each of which has four colored dots. The labels are: HMW Reach more plumbers? AND HMW Improve snack offerings? The last row has three stickies visible. The left and right are cut off at the edge of the frame. Two of the three visible cards have one colored dot each. The labels are: HMW Gather better user feedback? AND HMW Retain talent pool?](https://drive.google.com/uc?export=view&id=1NsNJNSSZn-o_5hosK0iEUuV0vuxmG8Ox)

This gives an easily interpreted priority list of important questions that can guide the rest of the process. ","Instruct students to peel sticky notes across the pad rather than up from the bottom. When you peel up, it curves the paper so the note doesn't lie flat against the white board. If you peel it sideways, the stickiness of the note keeps the sideways curl from affecting how it lies against the board. By doing this, notes are much easier to read.",,,,,,,,,,,Google Sprint 2.0 — Monday: Map and Sketch,,Design in Practice: Google Sprint,"UX Design Core [v1 deprecated], UX Design Core",,0,,,0
use the map technique within a design sprint,"The map is a simple diagram that captures the essence of the challenge you are addressing during the sprint. It helps form the skeleton of the sketches and prototyping done later in the week. Unlike other maps used in UX (journey map, affinity map), the Sprint map should be simple, with fewer than fifteen nodes. ","Chapter 5 in _Sprint_ by Jake Knapp contains a description and examples of the map process.

Also, you can watch this video for additional ideas: https://www.youtube.com/watch?v=JTqCR84fzeg&list=PLxk9zj3EDi0X5CgoFckoheIFAx-uT2i7j&t=8s&index=6","The map helps set the stage and scaffolding for the unfolding design work that happens over the course of the sprint. It is done by listing all the actors in a column on the left side of your whiteboard or screen. The actors are anyone who would touch the product or interact with the user while they are using the product.

You then write the end goal, what the user will have accomplished in using the product.

Lastly, build a bridge between the actors and the goal, using words and arrows, much like a user flow, but at a higher level and less granular.

As you are building this map, use the team as a clarifying resource. Have them help you determine if there are any missing pieces—actors or important steps in a process or other interactions.

The mapping should generally take less than an hour.","To produce a map work with the members of the team to list the players in the product journey and add the goal.

Example:
<img src=""https://drive.google.com/uc?export=view&id=1OQpGw0Trvq666WCZ3Elq_2-vG2VU-EjB"" 
alt=""Partial map showing players and goal in the journey.""> 

Then, list out the steps in the process and complete the journey until the goal is reached.

Example:
<img src=""https://drive.google.com/uc?export=view&id=1v6oxmHa0XDgaeeLffm8YH2O3-I8qIpAT"" 
alt=""Partial map showing players and goal in the journey, but now steps in the process have been added.""> 

Example:
<img src=""https://drive.google.com/uc?export=view&id=1dgv6l7avloBoD-ZytR4Gf3iCV2NLByf-"" 
alt=""Partial map showing players and goal in the journey.""> 

It can be a very simple map. No need to worry about all the side details for this process, just capture the players and the primary steps in the flow.",,,,,,,,,Google Sprint 2.0 — Monday: Map and Sketch,,Design in Practice: Google Sprint,"UX Design Core [v1 deprecated], UX Design Core",,1,,,1
launch and moderate a design sprint,"Much like other UX workshops we have covered in the past, the design sprint uses a moderator or facilitator to ensure the sprint goes smoothly and keeps on track. 

Preparing adequately for the sprint will make the biggest impact on how well it goes.",,"The design sprint 2.0, as described by AJ&Smart, is a 4-day workshop aimed at defining, building a prototype for, and testing a concept of a product. The first day of the sprint—usually a Monday—is essentially the discovery, definition, and ideation phases of the product design process rolled into a single workday.

Because three important processes are condensed into such a short amount of time, it's important to have your sprint well planned. You should have all supplies needed. If necessary, have the room scheduled and readied in advance. The moderator should also emphasize the importance of moving forward with the sprint efficiently and be prepared to help facilitate that forward movement.","To set up a design sprint, the facilitator should ensure a room is available and has the space necessary for the size of group they will have. If conducting a sprint remotely, the facilitator will try to ensure the participants have access to technology and software that will allow them to participate in the sprint.

In a live setting, the room will ideally have multiple whiteboards. Whiteboard markers should be available (and working—if a whiteboard marker dries up, just throw it away). Stacks of sticky notes should also be available in a variety of colors and sizes. Dot stickers are also useful for dot voting during the sprint process.

At the beginning of the meeting, the moderator needs to clarify who the ""decider"" is. The decider is the person with decision making authority who would be able to green-light a project or pull the plug at the end. That person is usually a CEO of a small start-up or a vice president or product manager of a larger organization. Once the room is set up and roles established, the meeting can commence.","Answer the following questions:

- What supplies are needed for a design sprint?
- What types of environments make for an effective design sprint?
- How can you prepare as a moderator/facilitator for the meeting?",,,,,When to Conduct a Design Sprint,AJ&Smart — Before You Sprint YouTube Playlist,,Google Sprint 2.0 — Monday: Map and Sketch,,Design in Practice: Google Sprint,"UX Design Core [v1 deprecated], UX Design Core",,1,1,,2
understand what is expected of them for project week 1,"Congratulations for finishing the first four course weeks of Lambda's Android program! 

It's time to take the skills you've learned and apply them to an independent project. This is the first time you're asked to work on a project of this scale so we'll give you some guidance to get you into the groove rather than making you select and design a project entirely on your own.

Your project spans an entire week. Your project instructions this week are closer to a Sprint Challenge than an afternoon Challenge in that they are sparse. 

Treat this week like you're building this application at a company. Your client is your instructor. Your project managers (including your section lead) are your main support throughout the week.

The main objective of this week is to develop the minimum viable product (MVP) feature set listed below using the techniques, skills, and technologies you've studied here at Lambda.",,"This project is open-ended. After you finish the requirement set listed below, spend your remaining time debugging and testing your product and implementing extra features, either suggestions listed below or those you come up with yourself. Run your ideas through a PM or your section lead and have them approve it before you get too creative. They're there to help you stay on task, on time, and deliver a product.

Remember: it's more important to deliver a working well-tested product than it is to have flashy but incomplete features.

### Your API

Your project uses the Google Books API and Firebase data stores. Read this [Google Books Getting Started overview](https://developers.google.com/books/docs/v1/getting_started). It explains how the API works and how you can use it. API documentation discusses data formats and the operations you can perform. The more you understand the API, the better you'll be able to use it. 

### Requirements

You must implement each of these requirements in your application:

- Your model stores records that represent a book volume. Each record contains the following fields at a minimum:
    - A title (sourced from Google's API)
    - A path to an image file representing the book cover (sourced from Google's API) that is scaled down to a reasonable size so it does not take up too much space.
> Save this image as a file. Remember, you can set a quality level when saving a bitmap to a file.
    - A `String`-based book review sourced from your application user
    - A data member that represents whether or not your user has read this book.
- Your user can search for books with a text query. Matching books are displayed to the user.
> For more information on performing a search, go [here](https://developers.google.com/books/docs/v1/using#PerformingSearch)
- Your user can tag books to categorize them in ""bookshelves"". A single book may exist in more than one shelf. For example, your user might have a ""Favorites"" bookshelf as well as a ""Thriller-Suspense"" one.
- Your user can view a list of all their bookshelves.
- The book records including review, etc, are stored in SQLite and are read into the app whenever the user launches your app.
- Your user can insert, update, and delete books in their bookshelf or move them from one bookshelf to another. This information is stored in SQLite and is read in whenever the user launches your application.

### Extra Requirements

After finishing your required app elements, you are not finished with your project. We expect you to implement at least three extra features. You're at liberty to choose the features you'd like to implement. 

These extra requirements (or others you come up with on your own) are not necessarily things you have learned throughout the course. Treat them as if your client adds a feature at a late date that you don't already know how to implement. How will you go about learning how to bring that feature into your product?

A few ideas are as follows:

- Use firebase to create online storage for the bookshelves (counts as 2 features)
  - Allow more than one user to use the same database without conflicting or overwriting each other's data. The same information must be accessible at each launch of the program, so be sure to use good Firebase hygiene. 
- When you mark a book as read, add it also to a pre-made ""Already read"" bookshelf. Books later marked as unread must be removed from this bookshelf. 
- Allow users to select a light or a dark theme
- Share a link to a book (there is one to the Google Play store in the JSON), or your review of it to Twitter, Facebook, etc.
- Create and display a QRCode with a link to the book. Friends with mobile phones can read the QRCode and follow your link.
- Find the book on Amazon and open it in the Amazon app, or on a web browser.
- Print out your review including an image of the cover.
- Add a button to read out your review using a speech synthesizer.
- Create a ""Recently read"" or ""Recently reviewed"" screen that uses the modification time for the ""didRead"" or ""review"" properties to select items to showcase.

### Commit History

Commit your code often and meaningfully. This helps both you (in case you ever need to return to old code for any number of reasons) and anyone you're working with.

**Commit regularly when you've made a complete and quantifiable change to your code.** There is no set amount of time that should happen or amount of code written between commits; simply use your best judgment. Adding new features. Fixing a bug. A good rule to follow is if what you've done can't be summarized in about 50 characters, you **may** have gone too long before committing. If you are committing more than one change at once, you're not committing often enough.

Your PMs will check that you are committing regularly, with clear and understandable commit messages.

### Work Alone

You project week project is an individual effort. Your work is your own and your classmates are responsible for their own project time as well. Your application reflects your proficiency as a developer and your command of the concepts and techniques in the first iOS Unit. 

The twenty minute rule continues to apply. Seek help from your PM or Section Lead if you run into problems that are keeping you from moving forward or leading you towards a mire you'll get bogged down in. Your team is there to help you. Just make sure you give your fellow students the space they need to succeed, too.

### Planning

Design your interfaces and schedule your time carefully. Keep your scope narrow and focused. Even though you have a week to work in, there's a lot of work to do and you need to make sure you're moving forward with good progress with an end in sight and will have a completed application to present.

Thoroughly test and debug your application well before it's time to present it. Stick to your schedule and make sure that testing and refinement is part of that schedule.

Remember: Simpler and working is better than fancy and unfinished.

## Repo
The github repo for this project can be found [here](https://github.com/LambdaSchool/Android_ProjectWeek1_GoogleBooks). Be sure to fork and create a pull request immediately then commit regularly.",,,,,,,,,,Android Fundamentals Project Week Kickoff,,Android Unit 1 Project Week: Android Fundamentals ,,,1,,,1
conduct lightning demo exercise,"The lightning demo is a way for people to share examples of solutions to similar problems that you're dealing with, big ideas from multiple sources.","Useful reference video: https://www.youtube.com/watch?v=1iH9jkJHbs4&index=6&list=PLxk9zj3EDi0X5CgoFckoheIFAx-uT2i7j

Also, Chapter 8 of _Sprint_ goes over the process as well.","When designing, it is valuable to get inspiration from external areas. Innovation happens often when an existing product or tool is used for a new purpose. In _Sprint_ Jake Knapp tells the story of the woman who invented the paper coffee filter. She saw blotting paper her son was using for school for absorbing excessive ink. She used it to filter her coffee and discovered its usefulness. 

Similarly, the Elixir guitar string was invented by engineers who were creating coatings for industrial cables and, after using guitar strings as a testing material, realized the strings might benefit from a coating to prevent corrosion. (https://www.guitarcenter.com/Elixir/)

The lightning demo is a quick and powerful way to generate ideas that could help spur innovation. ","To conduct a lightning demo, have everyone in the group contribute ideas for a list of products or services to examine for potential ideas. Think outside the industry of your current project to find products or services to review. Generate the list within five minutes, then set a timer for 25 minutes. Use the 25 minutes to have everyone in the group evaluate two or three of the products on the list. 

After 25 minutes, each member of the group takes three minutes to present the attribute of a product or service they found. The moderator takes notes (they could be in word or sketch format), writing down the key information about the attribute—the big idea that could be used later while sketching ideas.

After each group member has shared one or two of their ideas, the lightning demo is completed.",,,,,,,,,Google Sprint 2.0 — Monday: Map and Sketch,,Design in Practice: Google Sprint,"UX Design Core [v1 deprecated], UX Design Core",,1,,,1
conduct 4-part sketching exercise,"The 4-part sketching exercise from the sprint consists of ... you guessed it, four parts: Notes, ideas, crazy 8s and solution sketch.","This <a href=""https://www.youtube.com/watch?v=TK-94QiEFgw"">video</a> covers the basics.","The notes portion of the sketching exercise is meant to help people get their brains flowing and their pens moving. For twenty minutes the participants will go around the room and copy down notes from the stickies and other items posted on the walls. 

When working on this with a remote team, you'd want to have captured all the information in a shareable board, like Milanote so that participants can review all the material independently and make their own notes.

The ideas section is a time for quick sketching of concepts based on the notes participants have taken. Each participant is working individually. They will review their notes and simply sketch concepts of what any idea they have captured in notes might look like as a physical interface or product. These are not final renderings, they can be simple and quick. This is just an exercise building a foundation for later refined work—it is more-or-less throwaway material. But the ideal is for there to be a large stack of ideas at the end of the 20 minutes devoted to the _idea_ part of the 4-part sketch exercise.

Crazy 8s is a speed-drawing exercise that helps loosen up the participants and remove blockers. It's a brainstorm of sorts. Each person sketches eight one-minute versions of their ideas.

In the solution sketch, participants create a more detailed, three-step solution that is totally self explanatory. Four principles you can follow for the final sketch:

Give it a name. Since these ideas will be posted up on the wall and shared anonymously, you want to have a name that will help people reference the idea when talking about it.

Ugly is OK—we're not judging on sketching ability here. We're trying to create a clear and understandable representation of the idea. Don't get hung up on whether or not your sketches look like a finished product, it just needs to be neat enough to clearly represent the idea.

Words are important. Use post-its to help clarify and explain things that you would want to be able to explain if you were standing up and describing the interaction in person.

Focus on one big idea. You don't want to try to cram dozens of concepts into this sprint. We're trying to get to a potential solution that we prototype within a day. Your idea needs to be simple.

The solution sketches are posted up around the room _facing the wall_ so that no one can see the solution. Solutions will be reviewed the following day during the _art museum_ phase of the sprint.",,,,,,,,,,Google Sprint 2.0 — Monday: Map and Sketch,,Design in Practice: Google Sprint,"UX Design Core [v1 deprecated], UX Design Core",,1,,,1
conduct the five-step process to facilitate a decision,"On the second day of a design sprint, you begin the day by honing in on a specific solution that the team (more specifically, the decider) can get behind and run with for the prototyping and testing phases.",AJ & Smart video: https://www.youtube.com/watch?v=YW2ifUTVd_E&t=69s,"The second morning, we begin by showing the final solution sketches from the previous day. People are given an opportunity to explore each of the options and then will vote on which version of the product they recommend moving forward with. The decider will take those recommendations and make a final decision.","*Reveal the concepts—the art museum*
To begin, turn over all the final solution sketches made by the team members so everyone can view them. Make sure to space out the sketches so there is room to cluster around them individually and to place sticky notes above, below and to the side of them as necessary.

*Create heat maps*
_20 minutes_
After revealing the solution sketches, give each participant a sheet of dot stickers. The participants should understand that they have an unlimited number of dots and can place them wherever they'd like. Wherever they see an interesting feature or part of the application concept, they should place one or many dots. The more interesting or the more they like the feature, the more dots they should place.

People are sometimes reluctant to place multiple dots as they become accustomed to the traditional dot voting with a limited number of dots. But this exercise is meant to act as a heat map, where more popular or interesting features can be immediately recognized by the number of dots around them. If there appears to be some dot reticence in the room, the facilitator can model use of dots by placing multiple dots at a few features early on to help set the tone of dot generosity. 

The facilitator should also instruct participants to write any questions they have about a sketch or feature on post-it notes and place the notes below the sketch. This should be done to avoid disrupting the flow of the heat map exercise. The questions will be addressed later.

*Speed critique*
After the 20 minutes allocated to the heat map exercise, the facilitator should review each concept one at a time, summarizing the idea for the group. In the review, they should focus on features where the dots are most concentrated. Set a timer of three minutes for each critique. To help the critique unfold more effectively, facilitators should take time during the heat map exercise to focus on the big ideas of each concept. Taking notes on the big ideas will help the facilitator better summarize the sketches when presenting each concept.

While presenting each sketch, the facilitator should also address any questions posted at the bottom of the sketch during the heat map exercise. Because it is important to keep the ideas' authors anonymous to the extent possible, if there are questions the facilitator can't fully articulate, team members can provide additional insight, couching their language in terms of ""I interpreted the sketch in this way ..."" etc., to help add clarity where necessary. This way, if the author of a concept is sharing their thoughts, they are using the same language as anyone commenting who is not the author and anonymity can be maintained.

Someone other than the facilitator should be designated to take notes during the speed critique. They capture the big ideas on sticky notes which are placed on the wall above the sketch. Usually there are just a handful of ""big ideas"" for each solution sketch—maybe three or four.

*Straw Poll*
_5 minutes_
Following the presentation of the final solution sketches, take five minutes to make final vote on the concepts. The facilitator should remind participants to base their decision on the sprint goal and questions articulated the previous day. Ideally those goals and questions are still on the walls and available for everyone to see. If they aren't, provide a reminder of those goals and questions to the team before starting the vote.

Give each participant—except the designer—one dot sticker and have them write their initials on the dot. They can walk around the room and review the concepts. Then they place their dot next to the concept they think the group should move forward with.

Once a participant has voted, they should write down why they chose the concept they chose on a sticky note. Following the vote, each participant is given _one minute_ to present their reasoning for their vote.

*Super Vote*
The super vote is the culmination of the two days' exercises thus far. It is also the reason we encourage having the decider in the room for Monday's and Tuesday morning's activities. By having the decider in the room for these two days, it becomes a much easier job for them to make the decision to move forward with one of the ideas emerging from the melee. 

To initiate the super vote, the facilitator sets the timer for 10 minutes, giving the decider that time to use however he or she wants. They can consult with the participants or just review the recommended designs.

They are given two stickers. They can choose to place both stickers on one concept or they can choose to place the sticker by one concept and the other by a feature of another concept. (They can also choose two whole features, but as that is a heftier task for the team to tackle over the next two days, we'll focus on the first two options.)

Once they've placed their stickers, the team can move forward with the storyboard process.",Name and describe the five steps of the decision process we just discussed.,,,,,,,,Google Sprint 2.0 — Tuesday: Decide and Story-board,,Design in Practice: Google Sprint,"UX Design Core [v1 deprecated], UX Design Core",,1,1,,2
storyboard a design concept,"Once you have settled on a direction, the next step is to organize the flow of the experience your test subjects will have when they try out your prototype. The storyboard helps keep the sprint on track and gives team members a way to set up the prototype for success.",AJ&Smart video: https://www.youtube.com/watch?v=y5pSBgQUezQ&list=PLxk9zj3EDi0X5CgoFckoheIFAx-uT2i7j&index=5,"The storyboard is a collection of the steps in your product's flow. It expands on the chosen solution sketch, usually taking the three-panel idea and expanding it into from 10 to 15 panels that are tied together in a tight narrative.","To help align participants and keep the sprint moving forward, you can start the storyboarding phase with a user test flow exercise.

*User test flow*

_Write action steps._ Every team member should write six action steps—write each action on its own post it note. The first and last action steps can be derived from referencing the map as well as the sprint questions. Once you have an action step at the beginning and at the end, fill in the middle four steps to get from the beginning to the end.

_Share action steps._ Each participant takes a turn to post their six action steps on the white board, reading through each step. The decider can go first or last so they can focus on all the other steps.

_Dot vote on steps._ Each participant gets one vote. Decider gets two votes. Place dot on the row that is the strongest foundation for the prototype. Decider can also vote for some other action step that can be brought into the final steps.

_Circle the base user test flow that won the vote._

Use the sticky notes from the winning user test flow to seed the panels in the storyboard.

*Storyboard*

To start the storyboard, draw a large grid of 15 panels on a whiteboard. Each panel should be approximately the size of two sheets of paper. Jake Knapp recommends using masking tape to create the grid if drawing straight-ish lines intimidates you.

Starting in the top-left corner, begin sketching the flow. Someone other than the facilitator can be designated as the scribe—the person who will capture the thoughts of the group on the storyboard. Artistic skills are not required, just the ability to capture the basics of a wireframe sketch, like lines, rectangles, squiggly lines, and ovals.

The first panel should represent the user's first contact with the product. It could be the app store for an app, a newspaper article, an ad on Facebook, wherever the customer is likely to encounter the product for the first time.

From _Sprint_:

>The trick is to take one or two steps upstream from the beginning of the actual solution you want to test.

You can use the first sticky note from the test user flow to initiate the storyboard, but sometimes you need to take one step back to find a better starting point.

Some possibilities:

- Web search with website nestled in the results
- Magazine with advertisement for service
- Store shelf with product next to competitors
- App store displaying app's icon
- News article mentioning service or product and possibly competitors
- Facebook, Twitter, or other social feed with mention or ad of your service or product

Build out the concept one frame at a time. Each frame is illustrated by the scribe as the group discusses that step in the process. Use sticky notes and other information from the selected solution sketch and the test user flow. When you reach a gap that the solution sketch doesn't explain, only add it to the storyboard if it is essential that the gap be filled in order to test the prototype. Dead ends that aren't part of the critical path will likely not be a problem in the test.

Some tips from _Sprint_ for finishing the storyboard on time:

- Work with what you have
  - Don't try to invent new ideas. Work with the material you've already generated earlier in the sprint.
- Don't write together
  - Don't spend time trying to perfect copy during this phase. Group copywriting generally doesn't work for final copy, so don't fret about it for now.
- Include just enough detail
  - Don't try to be super specific on every element in the experience. Just try to answer sufficiently that when building the prototype, people don't have a lot of questions, like ""What happens next?"" or ""What goes here?""
- The decider decides
  - To keep things moving forward, the decider has to be ready and willing to make a call when there's a critical juncture. `Don't dissolve back into a democracy.`
- When in doubt, take risks
  - The sprint is best for testing bold ideas with a potentially big payoff. Don't spend a lot of time perfecting small details that are no-brainers. Use the sprint to test the hefty, risky propositions.
- Keep the story less than 15 minutes
  - Estimate each frame in your storyboard as taking approximately one minute of test time. Aim for 15 minutes for the test. There will be time during the interview to conduct the test and ask follow-up questions and dig deeper on some features. Keeping the limit at 15 minutes also helps force the team to focus on the meatiest problems.",,,,,,Article on user test flows from AJ&Smart,,How does creating a user test flow influence the process of making a storyboard?,Google Sprint 2.0 — Tuesday: Decide and Story-board,,Design in Practice: Google Sprint,"UX Design Core [v1 deprecated], UX Design Core",,1,,,1
develop a prototype mindset,"Jake Knapp in _Sprint_ advocates for a ""fake-it"" mentality—a 
_prototype mindset_. Many times in product design, we want to create something perfect, but to test big ideas, your objective is to get to the test as quickly and inexpensively as possible. To get over the self-imposed hurdle of designing things completely and thoroughly, we adopt a prototype mindset and accept ""good enough""—for now.",,"A sprint facilitator should endeavor to build a prototype mentality for the whole team. Here are four principles that make the prototype mindset:

- You can prototype anything
- Prototypes are disposable
- Build just enough to learn, but not more
- The prototype must appear real","Stay optimistic. There's almost always a way to create a prototype for any type of product or service. 

Be ready to throw away your work. If your team keeps this in mind, you are going to avoid the temptation to be ""perfect"". 

You can optimize your time to make sure you build just what is necessary to answer the questions of the sprint. 

Even so, you do have to create a prototype that users can believe is real. You're looking for _reactions_ to a potential product not _feedback_ on a design concept.

Jake Knapp in _Sprint_ says:

>This distinction between feedback and reaction is crucial. You want to create a prototype that evokes honest reactions from your customers. You want it to be as real as possible, while sticking to your one-day timeline.",,,,,,,,"- What are the four attributes of a prototype mindset?
- Why are reactions to your product more useful than feedback?
- In what ways are prototypes disposable?
",Google Sprint 2.0 — Wednesday: Prototype,,Design in Practice: Google Sprint,"UX Design Core [v1 deprecated], UX Design Core",,1,,,1
facilitate the prototyping session of a design sprint,The facilitator must set up the conditions for the prototyping session to help facilitate the hefty work required to create a prototype in a single day. ,,"As the facilitator, you set the tone of the prototyping session. AJ&Smart suggests the following tips to help make the process go more smoothly.


- Find a quiet room
- Prioritize the sketches from the storyboard
- Time-box your efforts—plan your day
- Set check in times
  -Just before lunch
  -Mid afternoon
- Prototype: The thing we build to test our idea, not the full featured product

A quiet, out of the way place is ideal because it can allow the team to focus without the common, constant interruptions so common in the modern workplace.

Setting a correct priority on screens or experiences to design and build will help you know how to schedule the day. 

Scheduling the day in advance can give you a clear picture of how much time you can spend on any given feature. 

Setting check-in times gives you some working deadlines and also will allow time for coworkers to come get answers to pressing matters and allow for deciders who don't need to be involved with the full day on Wednesday to come weigh in and ascertain progress. Well-timed check-ins can allow the team to make necessary adjustments prior to the close of the day.

Remember—you are not trying to create the full product, just the portion of the product necessary to test the big idea of the sprint and get feedback to decide whether or not it's worth pursuing the project fully.

Finally, prototype day should still end at a reasonable hour if at all possible. Try to get the team to work toward that goal.

Every prototype will be different. There's no cookie-cutter approach to this process, but following a simple framework can help. 

The following four steps are a great foundation for building your prototype quickly and efficiently:

- Pick the right tools
- Divide and conquer
- Stitch it together
- Do a trial run","*Step one: Pick the right tools*

The tools you use for your prototype will depend on the actual project you are working on. A service product would need something different than a mobile phone app and a desktop website might require something else as well.

In the book _Sprint_, Jake Knapp recommends using Keynote on a Mac (or Powerpoint on a PC) to simulate virtually any digital product. Since the book was published, he has mentioned using Sketch and Invision to create a working prototype.

Have a discussion with the team to determine the best way to present the prototype to the users. We'll use Sketch and Invision.

*Step two: Divide and conquer*

Jake Knapp recommends five roles:
- Makers (2 or more)
- Stitcher (1)
- Writer (1)
- Asset collector (1 or more)
- Interviewer (1)

_Makers_ design the individual components that will be used in the prototype. Designers or engineers are good choices for this role. The duties of the maker will usually take the most time during the prototype creation, so having at least two will be important.

The _stitcher_ collects the pieces of the prototype from the makers and combines it to a cohesive whole. Choose the stitcher based on the needs of the project and the format of the final product. Usually a designer or engineer is a good choice for this role as well.

The _writer_ helps make the prototype realistic through effective copywriting. It's even more important in specialized fields that have technical jargon or other specialized language. It's great to have someone with domain knowledge take this role.

_Asset collectors_ gathers photos, icons, fonts, or any sample content you'd rather not make from scratch. They help make the process go more quickly by allowing the makers to do their work without having to scour the internet for the things they need. This is a key role in keeping the prototype phase to a single day.

The _interviewer_ will begin writing the interview script for the test the next day. Keep the interviewer off the prototype creation so they can have a less biased position when going into the interviews.

Divide up the storyboard between the makers (and writers or other roles if you have more than one person in each). Once everyone knows which piece of the puzzle they are working on, jump in!

*Step three: Stitch it together*

The stitcher helps provide continuity across the various pages or steps in the prototype. This important role creates the cohesive experience that will make the prototype feel realistic. Little inconsistencies can take a research participant out of the flow, reminding them they are looking at a prototype, which can influence their reaction to the product. The stitcher checks for consistent names and labels across all the pieces. As other roles finish their work, they can help the stitcher finish off the full prototype.

*Step four: Do a trial run*
Shoot for a trial run to start around 3 p.m. Taking time to run through the prototype will ofter show you errors you overlooked in the creation and stitching processes. Starting at 3 gives you time to fix errors before the day is over. 

The interviewer should be the primary audience for the run-through. Because they have not been directly involved with the prototype creation, they have a fresh eye that can catch things the team has missed. He or she will also become familiar with the product so they will have a better context for the project while conducting the interviews the following day. You can also bring in the decider at this point to observe the trial run and see that it is all going according to their expectations.",,,,,,,,"- What are the four steps of the prototype day in a design sprint?
- What are the recommended roles participants take in the prototype process in a design sprint?
- What are the activities each of the roles participates in?",Google Sprint 2.0 — Wednesday: Prototype,,Design in Practice: Google Sprint,"UX Design Core [v1 deprecated], UX Design Core",,1,,,1
"describe the purpose and value of a portfolio, and what types of projects should be highlighted.",,,"* Describe the purpose of a portfolio.
* Describe what types of people will look at the portfolio, and what they'll be looking for.
* Explain how the portfolio will directly help them get a job.
* Based on understanding how portfolio will be used, explain the types and levels of projects that belong in your portfolio (ie. real projects that demonstrate skills, not throwaway demo projects for practice)","* Pause, and think about what questions you have about this. ","* Direct message your Project Manager and Career Coach a description of the value of a portfolio, and why you are building one. ",,,,,,,,Building a Portfolio Website,,,,,0,1,,1
use SQLite Studio manage SQLite database,"Before we an store any data in a database, we need to create it using the command line or a graphical tool.

There are several graphical tools available to manage SQLite databases. We will use **SQLite Studio**, a free application that runs on multiple platforms and makes it really easy to create and manage SQLite databases.",,Watch the video for a demonstration of how to manage a database using SQLite Studio.,,Use SQLite Studio to create an SQLite database.,tyePovufEI4,http://youtube.com/watch?v=tyePovufEI4,https://www.youtube.com/embed/tyePovufEI4,,SQLite Studio,,,Introduction to Relational Databases and SQL,Active,Adding Data Persistence to Web APIs,Full Stack Web Development Core,,1,1,1,3
use SQLite Studio to open an existing SQLite database,"There are several graphical tools available to manage SQLite databases. We will use **SQLite Studio**, a free application that runs on multiple platforms and makes it really easy to create and manage SQLite databases.",,Watch the video for a demonstration of how to open an existing SQLite database using SQLite Studio.,,"Use SQLite Studio to Open an existing SQLite database, if you don't have one, watch the video on how to create one and then practice opening it.",,,,,,,,,Active,,,,1,1,,2
understand the implementation and performance of the Selection Sort algorithm.,"As we begin to explore different sorting algorithms, we'll begin with Selection Sort. Understanding how it works is a good first step towards becoming more comfortable with more complex sorting algorithms.",,"***Selection Sort*** is an algorithm that many of you have actually used before. Imagine that you have several playing cards you need to put in order. You start off by looking for the lowest card, and when you find it, put it at the front of your hand. Then, you look for the second lowest card and insert it directly behind the first card. You repeat this process, selecting the next lowest card and moving it behind the most recently placed card, until you have moved all cards into the right place. This is ***Selection Sort***.  

An example of this algorithm being applied to an array with 10 numerical elements can be seen in the video below.

One of the drawbacks of this algorithm is its efficiency. Regardless of the starting order of your elements (random, mostly sorted, reverse sorted, etc.), this algorithm will always have a runtime of **O(n²)**. This is because each pass requires us to check **every** element of the *unsorted* part of our list or array.","The main steps of this algorithm are as follows:

```
1. Start with current index = 0

2. For all indices EXCEPT last:

    a. Loop through elements on right-hand-side 
    of current index and find smallest element

    b. Swap element at current index with 
    smallest element found in above loop
```","1. Is ***Selection Sort*** a comparison sorting algorithm?
    <details><summary>Answer</summary> Yes, since to <i>select</i> the desired element, we compare a current value to the rest of the ""unsorted"" segment of our list or array.
    </details>

2. Why do we end our loop before processing the item in the last index of an array when performing ***Selection Sort***?
    <details><summary>Answer</summary> By the nature of how this algorithm works, if all other elements have been sorted, the last element will have been moved to the correct index.</details>   

3. When using ***Selection Sort***, what is the difference between the order or arrangement of elements in *best case* versus *worst case*?
    <details><summary>Answer</summary> None, since the same number of operations will be performed <b>regardless</b> of how elements are ordered.
    </details>  

4. Show how the array **[4, 8, 3, 1, 9, 6]** changes as it is being sorted using ***Selection Sort***. To do this, write out the contents of the array after each pass of the algorithm. (_hint...we should only need n-1 passes to sort the array, where n is the size_)
    <details><summary>Answer</summary> <pre><samp>[1, 8, 3, 4, 9, 6]  
   [1, 3, 8, 4, 9, 6]  
   [1, 3, 4, 8, 9, 6]  
   [1, 3, 4, 6, 9, 8]  
   [1, 3, 4, 6, 8, 9]  </samp></pre></details>",1beRSW0Jb7M,http://youtube.com/watch?v=1beRSW0Jb7M,https://www.youtube.com/embed/1beRSW0Jb7M,,,,,,,,,,1,1,1,3
understand the implementation and performance of the Insertion Sort algorithm.,"Insertion Sort is another sorting algorithm that will typically perform as well as Selection Sort. However, due to a few differences between the two algorithms, there are a few special cases where we begin to see improvements in the runtime of our sorting algorithm.","```
# sample implementation
def insertion_sort( arr ):
  for i in range(1, len(arr)):
    temp = arr[i]
    j = i
    while j > 0 and temp < arr[j - 1]:
      # shift left
      arr[j] = arr[j - 1]
      j -= 1

    arr[j] = temp

  return arr

# try it out
my_arr = [1,4,7,2,3,8,5,6,9,10,14,12,11]
print( my_arr )
my_arr = insertion_sort( my_arr )
print( my_arr )
```","***Insertion Sort***, like Selection Sort is an iterative sorting algorithm. However, it improves slightly on the performance of Selection Sort. Imagine you lay out several playing cards in a line on a table. Consider the first card to be a *sorted* subarray of lengh = 1. Pick up each card (in this case, from left to right) and insert it into the correct position in the *sorted* subarray. Shift other cards to the right to make room for the card you are inserting as you go.  

The manner in which we process elements when performing ***Insertion Sort*** means that, depending on the original order of elements, on each pass of the array, we may only have to do 1 comparison to determine if an element is in the right position. However, in a worst-case scenario, we will perform just as many comparisons as with Selection Sort, meaning the runtime of this algorithm is also O(n²).","The main steps of this algorithm are as follows:

```
1. Separate the first element from the rest of the array. Consider it a sorted list of one element.

2. For all other indices, beginning with [1]:

    a. Copy the current item into a temp variable

    b. Iterate to the left until you find the correct index in the ""sorted"" part of the array at which this element should be inserted  
    - Shift items over to the right as you iterate

    c. When the right index is found, copy temp into this position
```","1. Is ***Insertion Sort*** a comparison sorting algorithm?
    <details><summary>Answer</summary>Yes, since to find the correct index at which we ""insert"" the current element we are sorting, we compare it to the rest of the ""sorted"" segment of our list or array.
    </details>
2. When using ***Insertion Sort***, what is the difference between the order or arrangement of elements in *best case* versus *worst case*?
    <details><summary>Answer</summary>When performing <i><b>Insertion Sort</b></i>, the algorithm runs more efficiently if the elements are already mostly sorted. When the original array is close to sorted order, fewer comparisons are required to sort it.  But if the array is in reverse-sorted order, the number of comparisons that need to be done increases significantly.  

    For example:  `[5, 4, 3, 2, 1]`  

    When inserting the 1 into the correct part of the array, we have to compare it with *every* other number. While this is not such a big deal in an array with 5 elements, it gets ***very*** costly as that array becomes bigger.
    </details>
3. Show how the array **[4, 8, 3, 1, 9, 6]** changes as it is being sorted using ***Insertion Sort***. To do this, write out the contents of the array after each pass of the algorithm. (_hint...we should only need n-1 passes to sort the array, where n is the size_)
    <details><summary>Answer</summary> <pre><samp>[4, 8, 3, 1, 9, 6] (comparison done, no swap made)
   [3, 4, 8, 1, 9, 6]
   [1, 3, 4, 8, 9, 6]
   [1, 3, 4, 8, 9, 6] (comparison done, no swap made)
   [1, 3, 4, 6, 8, 9]</samp></pre></details>",mLkRFBiDDaI,http://youtube.com/watch?v=mLkRFBiDDaI,https://www.youtube.com/embed/mLkRFBiDDaI,,,,,,,,,,1,1,1,3
understand the implementation and performance of the Merge Sort algorithm.,Merge Sort is the first of two recursive sorting algorithms we will examine. It uses the *divide and conquer* strategy to sort more efficiently than the iterative algorithms we explored previously.,,"*A divide-and-conquer algorithm works by recursively breaking down a problem into two or more sub-problems of the same or related type, until these become simple enough to be solved directly.  
-Wikipedia*

This approach can be very useful when sorting. By breaking up our original data set into subsets and recursively sorting each subset, we can obtain significant performance gains. There is a unique property of singular lists that this algorithm takes advantage of - they are already sorted! In ***Merge Sort***, we are recursively dividing up our array until we have many subarrays of length 1. Then, we merge the sorted pieces back together.

When considering the runtime of this sorting algorithm, we must consider both the divide and merge sub-algorithms. 

First, as we divide our array into singular elements, the number of recursive calls that will need to be performed to do this division is typically much smaller than the number of elements. So this part of the algorithm has a runtime of O(log(n)).

Then, as we merge these sorted subarrays back together again within our main, recursive `merge_sort()` function, we utilize a `merge()` helper function that has a runtime of O(n).

Since the `merge()` operation takes place _within_ the recursive calls, we obtain the final runtime by multiplying  these two value together, giving us an overall runtime of **O(nlog(n))**.","The main steps of this algorithm are as follows:
```
1. Recursively divide original array or list in half until both pieces have a length of 1.
2. Starting with these singular subsets, merge sorted pieces back together.
```","1. What are some languages that use ***Merge Sort*** in their built-in `sort()` function?

2. Can you explain why ***Merge Sort***'s runtime is the same in the best, average, and worst cases?

3. What is the *space* complexity of merge sort?

4. Show how the array **[4, 8, 3, 1, 9, 6]** changes as it is being sorted using ***Merge Sort***. To do this, write out the contents of the array after each pass of the algorithm. (_hint...we should only need n-1 passes to sort the array, where n is the size_)
   <details><summary>Answer</summary> <pre><samp>           [4, 8, 3, 1, 9, 6]       // divide
                /            \
          [4, 8, 3]       [1, 9, 6] 
            /     \         /     \
         [4, 8]   [3]    [1, 9]   [6] 
         /    \    |     /    \    |
        [4]   [8] [3]   [1]   [9] [6]   // merge
         \    /    |     \    /    |
         [4, 8]   [3]    [1, 9]   [6]
           \      /       \       /
          [3, 4, 8]       [1, 6, 9]
              \               /
              [1, 3, 4, 6, 8, 9] </samp></pre></details>",RaNLB4XOOIs,http://youtube.com/watch?v=RaNLB4XOOIs,https://www.youtube.com/embed/RaNLB4XOOIs,,,,,,,,,,1,1,1,3
understand the implementation and performance of the Quick Sort algorithm.,"Another recursive sorting algorithm is Quick Sort. However, as you'll see below, its name is a bit misleading.","For afternoon assignment:
- option 1) implementing Quick Sort with pivot as *last* element (slightly easier)
- option 2) implementing Quick Sort with pivot as *middle* element (slightly harder)","Another recursive sorting algorithm is ***Quick Sort***. In this algorithm, we move smaller elements to one side of the array and larger elements to the other side of the array by comparing them to a ""pivot"" element, which can be chosen in a few different ways. This *divides* our original array into two subarrays that are closer to being sorted. We then recursively call ***Quick Sort*** on each subarray until we are down to singular elements (which by their singular nature, must be sorted).

The runtime of ***Quick Sort*** can vary dramatically depending on the pivot that is chosen. Optimal performance occurs when the pivot divides an unsorted segment into two balance pieces. In this best case scenario, ***Quick Sort*** has a runtime of Ω(nlog(n)). However, in an unbalanced, worst case scenario, this sorting algorithm can be as inefficient as the iterative algorithms we explored earlier, with a runtime of **O(n²)**

> In case you're wondering, where that *Ω* symbol came from, it should be noted we only use Big O notation when talking about runtime in the *worst case*. We use Big Ω to describe best case and Big Θ to talk about average case.","The main steps of this algorithm are as follows:
```
While the data set has a length >= 1:
1. Select pivot (typically first, last or middle)
2. For each item in data set:
- if item < pivot AND not on LHS of pivot, move to appropriate side of data set
- else if item > pivot AND not on RHS of pivot, move to appropriate side of data set
3. Recursively Quick Sort LHS and RHS of pivot
```

Let's try tracing how the array **[2, 7, 5, 4, 0, 1]** changes as it is being sorted using ***Quick Sort*** by writing out the contents of the array after each pass of the algorithm. (_assume the pivot will be the first index)
```
   [2, 7, 5, 4, 0, 1]  // pivot = 2  
   [0, 1, 2, 4, 7, 5]  
   // Quick Sort LHS of 2
   [0, 1, 2, 4, 7, 5]   // LHS pivot = 0
            ✓                
   [0, 1, 2, 4, 7, 5]   // LHS pivot = 0
    ✓      ✓           
   [0, 1, 2, 4, 7, 5]   // LHS done, RHS pivot = 1 (single element)
    ✓      ✓    
   [0, 1, 2, 4, 7, 5]   // Quicksort RHS of 2
    ✓  ✓ ✓        
   [0, 1, 2, 4, 7, 5]   // Quicksort RHS of 2, pivot = 4
    ✓  ✓ ✓ ✓        
   [0, 1, 2, 4, 5, 7]   // Quicksort RHS of 4, pivot = 7
    ✓  ✓ ✓        ✓
   [0, 1, 2, 4, 5, 7]   // Quicksort LHS of 7, pivot = 5 (single element)
    ✓  ✓ ✓ ✓ ✓ ✓            
```","1. In ***Quick Sort***, if the leftmost element of an already sorted array is chosen as the pivot, this leads to worst case performance. Explain why.

2. Show how the array **[4, 8, 3, 1, 9, 6]** changes as it is being sorted using ***Quick Sort***. To do this, write out the contents of the array after each pass of the algorithm. (_assume the pivot will be the first index)
   <details><summary>Answer</summary> <pre><samp>[1, 8, 3, 4, 9, 6]  // pivot = 1  
   [1, 8, 3, 4, 9, 6]  // LHS done ✓
    ✓  
   [1, 3, 4, 6, 8, 9]  // Quick Sort RHS, pivot = 8
    ✓             ✓    
   [1, 3, 4, 6, 8, 9]  // Quick Sort LHS of 8, pivot = 3
    ✓  ✓        ✓   
    [1, 3, 4, 6, 8, 9]  // Quick Sort RHS of 3, pivot = 4
    ✓  ✓  ✓     ✓   
    [1, 3, 4, 6, 8, 9]  // Quick Sort RHS of 4, pivot = 6 (single element)
    ✓  ✓  ✓ ✓ ✓    
    [1, 3, 4, 6, 8, 9]  // Quick Sort RHS of 8, pivot = 9 (single element)
    ✓  ✓  ✓ ✓ ✓ ✓    
</samp></pre></details>",,,,,,,,,,,,,1,1,,2
explain the course expectations,"Before we start learning about UX, let’s make sure we’re all on the same page by reviewing what this course is all about and what it takes to succeed.",,"Lambda School’s UX design course is an incredible introduction to the world of user experience. It is designed to take anyone and turn them into a hireable UX designer. But, how exactly do we do that?

The course is broken into three major sections: UX Core, Intro to Web Development, and Labs. The UX Core section is a multi-disciplinary course that teaches you how to design interfaces with the latest graphic design software. In the course, we leverage psychology and design theory to create usable products, and teach cutting-edge UX techniques for validating, testing, and designing digital products. While you learn these UX fundamentals, you will also be preparing yourself for a career in UX and gaining real-world, practical experience as a UX practitioner.

After the UX Core, you will progress to Intro to Web Development to learn the basics of HTML and CSS. This won’t turn you into a developer, but will help you become more useful in the real world because you’ll be able to more effectively collaborate with developers. 

Next, you’ll move into Labs, where you’ll work with other Lambda students to produce a real product from scratch. This product will form the centerpiece of your portfolio, so be sure to make it count! After Labs, you’ll move back into the UX Core to reflect on everything you accomplished in Labs and learn advanced UX topics.

Finally, you will wrap up your time at Lambda with another Labs cycle to further immerse yourself in user research, testing, and design, while mentoring the incoming UX students. Doing so will refine the practical skills that will help you stand out in the job market.

## Units, sprints, and modules
Each of these sections will be broken up into *units*, *sprints*, and *modules*. A unit is a five-week period that focuses on a broad topic. Units are composed of four one-week sprints that cover a specific range of topics, and a final sprint called a *project week* that is a practical assessment of everything you’ve learned up to that point.

Sprints have five modules. The first four modules are dedicated to instruction time, while the final module, called a *sprint challenge*, is reserved for a larger practice assignment. Every day, we’ll spend the morning learning about a particular topic. Then, in the afternoon, you will practice your new skills in an assignment.

## Instructional staff
Along the way, you’ll interact with instructors, section leads, project managers, and your fellow Lambda students. Instructors are the folks teaching the courses. They are experts in their fields, with tons of real-world experience. They also love teaching and helping students, like you, become hireable professionals.

The UX instructors are Christijan Draper, Nick Basile, and TBD. Christijan is also the UX Program Director. They have both worked professionally as UX designers for many years, and they also have some developer experience too!

Project managers (PMs) are like teacher’s assistants, or TAs, from college. They help the instructors teach the course, answer questions, and organize all of your work. A section lead is the head project manager. They work directly with the instructors to coordinate the work of all of the PMs and students.

## Students
Finally, as you may have guessed, there are lots of other students here at Lambda from all walks of life. Getting to know your peers is a great way to facilitate your learning, make new friends, and network. You are all in this together and working towards the same goal, so be sure to treat everyone respectfully and professionally. 

In fact, be sure to treat everyone you meet at Lambda School in that manner, and remember that any form of harassment will not be tolerated. Think of this as practice for the workplace—if it wouldn’t fly at work, then it won’t fly here.

## Slack and Zoom
On a day-to-day basis, the vast majority of our interactions will happen over Slack and Zoom. On Slack, we’ll coordinate our class, field questions, and share interesting UX articles or ideas in our own dedicated Slack channel. We’ll have our lectures, 1:1s, and any other video conversations on Zoom.

## Assignments
As we mentioned earlier, you will be working on an assignment every module, a sprint challenge every sprint, and a project week every unit. This work is designed to assess your learning of course material and challenge you to master concepts. Assignments should be completed in a professional manner—pretend like we are your future employer. 

We will provide detailed instructions for how we expect each assignment to be completed. But, as a general rule, we expect every submitted assignment to be professionally written, designed, and presented. Not only is this good practice for the future, but it ensures that you continue to push yourself towards excellence. 

## Training Kit
Training Kit is the source of truth for all of the educational content at Lambda School. Every Unit, Sprint, and Module has its content here. You can find summaries of the content taught during the lecture, your assignments, links to additional learning resources, and video content. If you can’t find a link to something discussed in the lecture, make sure you review Training Kit before you ask a PM or Instructor for help.",,,,,,,,,"- What is the big picture UX course structure?
- How do we organize our weeks and days?
- Who are the Instructors?
- How should we treat our peers, PMs, and Instructors?",Intro to UX,Active,UX Fundamentals,UX Design Core,,1,,,1
"learn the ""Lambda Way""","There’s no way to sugar coat it - the Lambda curriculum is intense. We will cover a ton of material in a very short amount of time to prepare you for the real world. That said, if we work on learning the “Lambda Way” then this process becomes much easier.",,"Lamba School is no walk in the park. The curriculum has been designed to be challenging because it is the best way to prepare you for the rigors and professional expectations of the real world. The Lambda School [Code of Conduct](https://docs.google.com/document/d/1FMR0QtWYpnbw0QdWbrfJ4zPM2Jn8gKgGg8vrniS9drw/edit?usp=sharing) outlines many guiding principles for success, but there are a few more that we’d like to cover in detail.
- **Eye on the Prize**
  - You are here to accomplish an amazing goal. You have taken the initiative to enter an entirely new field and pursue an incredible new career in just a few months. Everyone here at Lambda School is here to help you achieve that goal. So, in the middle of the curriculum, when everything feels overwhelming, when you're frustrated because things aren’t clicking, when you feel like there’s no way this going to happen—pause, take a deep breath, and remember why you are here. It will be hard and it will take a tremendous effort on your part, but the end result is so worth it.

- **Attendance + Effort = Success**
  - Lambda School isn’t magic. If you’re not attending classes; if you don’t put in the work; if you don’t reach out when you do need help, if you don’t participate in class, then you won’t succeed. This is not a course where you can show up on the first and last days, read a few textbook chapters, and ace the final. Lambda’s curriculum is deep, fast, and intense. So, you need to be here and put in a solid effort to learn.

- **Learning to Learn**
  - While we’re here to teach you the technical skills you need to land that job, we’re also going to teach you how to learn. The most successful people are continuously learning. When Inc Magazine writes about how [Elon Musk reads for 10 hours a day](https://www.inc.com/peter-economy/why-elon-musk-used-to-read-10-hours-a-day-and-how-you-can-do-less-still-gain-success.html) or how any other famous person [reads 50 books a year](https://www.blinkist.com/magazine/posts/most-ceos-read-60-books-per-year), they’re missing the point. Yes, they’re consuming a lot of content, but they’re not just picking up random books to read. They’re making a conscious effort to figure something out, hear a different perspective, or learn a new topic. 
  - Now, you don’t have to read a gazillion books on top of your Lambda education to do this. Instead, when you get stuck or can’t figure something out, try your best to get unstuck before you ask for help. Sometimes you won’t be able to do it, and that’s ok. But, you are learning to learn every time you help yourself figure something out. So, don’t cheat yourself out of that incredible skill by rushing to get help from a PM or Instructor. Instead, give it a good “Lambda Try” and if you’re still stuck after 20 mins, then ask for help. 

- **Forget about Failure**
  - We all learn at a different pace. Some of us are better at some things, while the rest of us are better at other things. We all know this to be true, yet we love to compare our own weaknesses to others’ strengths. When you’re in the middle of the curriculum, it’s so easy to look at other students’ work and feel like you’re failing. You are not failing—you are learning. 
  - While you’re at Lambda School, you can forget about failing. We know that some concepts are easier for some folks and harder for others, and we’re here to help you when that’s the case. The only way any of us can fail at Lambda is if we send you out in the real world unprepared to land a job. So, if you’re putting in the work, we will do everything in our power to help you get back on track and turn your “failures” into learning opportunities.

- **Go Beyond**
  - You can’t make a diamond without a lot of pressure. The Lambda curriculum is challenging by design because we want to push you to excel. While there will certainly be times where the curriculum is challenging enough on its own, other times you might find yourself whizzing through things. In both of those moments, push yourself to “Go Beyond” and fight to do more than you thought possible. You’ll be amazed at how far you can go. Plus, you’ll be in a much better position when your ready to start your job hunt.

If you follow these principles, you won’t just be able to graduate Lambda. You will have a solid foundation that sets you up for a lifetime of success.",,,,,,,Lambda User Manual,,- How can you learn the “Lambda Way”?,Intro to UX,Active,UX Fundamentals,UX Design Core,,1,,,1
"explain and conduct a ""five-act"" interview","The ""five-act interview"" described in _Sprint_ is just one approach to a user interview, but it has a simple structure that is easy to remember and replicate.",,"The five acts in the ""five-act interview"" are:

- A friendly welcome
- Context questions
- Introduction to the prototype
- Detailed tasks within the prototype
- Quick debrief","The five acts of the interview follow in more detail. The interviewer is not expected to memorize these steps and questions, but will follow this general outline as they prepare a script during the day prior to the interviews. The script will help the interviewer follow a consistent pattern for each interview.

*Act One _A friendly welcome_*

Set the stage early that this interview should be comfortable and that the participant should be able to share freely their thoughts and feelings regarding the product. Help them understand the team is not testing them, they are testing the prototype. The participant should feel at ease.

_Sprint_ suggests language something like this to get the interview started:

```Thanks for coming in today! We're always trying to improve our product, and getting your honest feedback is a really important part of that.

This interview will be pretty informal. i'll ask a lot of questions, but I'm not testing you—I'm actually testing this product. If you get stuck or confused, it's not your fault. In fact, it helpus us find problems we need to fix.

I'll start by asking some background questions, then I'll show you some things we're working on. Do you have any questions before we begin?
```

Be sure to get permission to record the session and then begin the recording.

*Act Two _Context questions_*

Start with small talk. Introduce yourself and ask find-out questions of the participant. Ask about their life, their job, their interests, their family. These questions are not just small talk, as they add context to aid your analysis of the interview. Gradually transition away from general questions to more specific questions about the domain of interest for the application or product you are testing. The answers will help inform your understanding of the particular participant's experience with other products or with the problem space in general. This information can also influence your future design work within your product domain.

Ensure your questions are open-ended and practice good interviewing techniques as we have discussed previously in class.

*Act Three _Introduce the prototype_*

In _Sprint_, the authors suggest asking permission to start the participant looking at the prototype. By asking something like, `""Would you be willing to look at some prototypes?""` reinforces the relationship with the participant and the interviewer. The participant is doing us a favor. It places them in a position of greater relative power, empowering them to make more honest responses to what they are seeing.

The interviewer should also help the participant to realize the prototype will have some dead ends or other non-working features. The hope is that the user still becomes engrossed in the prototype as though it is real, but giving them a heads up that parts won't be working will make any interaction with those parts of the prototype less jarring. It will also prime them to provide ""blunt"" feedback, realizing that it is a work in progress, not a polished product.

Some other recommendations from _Sprint_:

- Help the participant remember you are testing the product, not the user: `You can't do anything wrong here.`
- Let them know you don't have any emotional investment in the product, so speak freely: `I didn't design this, so you won't hurt my feelings or flatter me. Your frank feedback will be most helpful.`
- Remind the participant to think out loud: `Share with me the things you're trying to do. Tell me what you're doing and how you think you can do it. If you get confused or don't understand something, please tell me.`

*Act Four _Tasks and nudges_*

Open-ended tasks make interviews more interesting and useful. If you get too prescriptive with tasks, they are boring for the sprint team and participant and don't yield data of sufficient quality to be useful. Create tasks that explain to the participant a specific outcome and ask them how they would accomplish the outcome with the prototype. 

*Act Five _Quick debrief_*

_Sprint_ suggests some questions to ask that help the participant lead you to the most important material you covered during the interview:

```How does this product compare to what you do now?
What did you like about this product? What did you dislike?
How would you describe this product to a friend?
If you had three magic wishes to improve this product, what would they be?```

If reviewing multiple prototypes ask these questions as well: 

```How would you compare those different products? What are the pros and cons?
Which parts of each would you combine to create a new, better version?
Which one worked better for you? Why?```

After the debrief, provide the gift card (or reassure participants they will receive the gift card later).",,,,,,Interview example from Jake Knapp,,,Google Sprint 2.0 — Thursday: Test,,Design in Practice: Google Sprint,"UX Design Core [v1 deprecated], UX Design Core",,1,,,1
define UX and why it is valuable,"If you’re reading this then you’ve probably decided to learn how to be a UX designer. Before we jump into that, let’s figure out what the heck UX means in the first place.",,"Look around yourself right now. Chances are you’ll see a computer or a mobile device. Maybe there’s a pencil and some paper nearby. You could be in a coffee shop or sitting at your desk at home. Regardless of where you are or what you’re seeing, everything around you has been designed. 

The way we sleep, the way we eat, the way we think, the way we communicate, all of this has been designed. In fact, **everything** you have ever used and every experience you have ever had has been designed. 

As user experience (UX) designers, we’re in the business of designing everything. We try to understand why people behave the way they do, what motivates them, and how to change their behaviors and provide an experience that delights and engages them. This pursuit is what user experience is all about.

We can apply UX to any field, any discipline, or any human endeavor to design a better experience and outcomes. While we can apply UX design processes to anything, since we’re pursuing careers as UX designers, we’ll focus our UX efforts on creating products or services for businesses, non-profits, or any other economic entities.

In this context, the Nielsen Norman Group (NNG) explains that “user experience encompasses all aspects of [an] end-user's interaction with [a] company, its services, and its products.” Frequently, we’ll see UX used interchangeably with terms like “user interface” or usability. While these are important aspects of UX design, they are subsets of it. Instead, UX is about the **entire** experience of a product.

Don Norman, the inventor of the term user experience, clarified this point when he said, “No product is an island. A product is more than the product. It is a cohesive, integrated set of experiences. Think through all of the stages of a product or service – from initial intentions through final reflections, from first usage to help, service, and maintenance. Make them all work together seamlessly.”

By focusing on the entire product experience, UX designers deliver value to an organization by identifying areas where the experience is below their users’ expectations. We then seek to remedy that situation by designing a better experience through research, ideation, prototyping, and other techniques.

In other words, we’re essentially detectives trying to uncover our product’s who, why, and what. Who are our product’s users? What should we build for them? And, why would they want it? Answering these questions and then translating those answers into actionable designs that our teams can build is at the core of what we do.",,,,,,,"What is User Experience (UX) Design?,The Definition of User Experience (UX)",,"- What is UX?
- Why is it valuable?",Intro to UX,Active,UX Fundamentals,UX Design Core,,1,,,1
set up for interviews the final day of your sprint,Ensuring your facility is set up for the interviews will help the day go smoothly.,,"In live interview scenarios, you'll want to have two rooms available for the day. The sprint team will occupy the room they've been using for the rest of the week. The interview will take place in a smaller room and will be streamed to the sprint room.","*In the interview room*
Use a laptop and webcam to stream video to the sprint room. It's often good to be able to record and stream both the participant's face and the screen they are using, but if you are testing a mobile device, sometimes you have to just show the screen using the webcam so we don't get to see the user's reactions.

Try to help the interview participant feel at ease. Make the room feel friendly rather than like a laboratory.

*In the sprint room*
Make sure to have sticky notes available for everyone so they can take notes. You can use different color notes for positive notes vs. negative or neutral notes.

The sprint room should be a place where the team listens and watches closely. During the interview is not the time for discussion or debate or problem solving. There will be time for that later. During the interviews, have everyone on the team engaged with the video stream, observing and taking notes. The notes will help make the analysis process go much more smoothly.",,,,,,,,,Google Sprint 2.0 — Thursday: Test,,Design in Practice: Google Sprint,"UX Design Core [v1 deprecated], UX Design Core",,1,,,1
analyze notes from interviews,"Once interviews have been conducted, it is important to analyze and distill the notes into actionable findings that direct the team what next steps to take.",,"Steps in the analysis:

- Look for patterns
- Review initial sprint questions
- Discuss patterns in relation to sprint questions
- Make plans for next steps","*Look for patterns*

Have everyone participating in the sprint post their sticky notes in a grid like this one.

*Review initial sprint questions*

*Discuss patterns in relation to sprint questions*

*Make plans for next steps*",,,,,,,,,Google Sprint 2.0 — Thursday: Test,,Design in Practice: Google Sprint,"UX Design Core [v1 deprecated], UX Design Core",,1,,,1
understand and explain Codable's data types,"Codable is actually a combination of the Encodable and Decodable protocols. Encodable turns your model object's values into a different format such as JSON or a Plist, while Decodable does the opposite. Each protocol has just a single method. These methods will get called when you call `encode` or `decode`. Before we look at how to implement these methods ourselves, you will need to understand a few data types.",,"Looking at both Encodable's `encode(to encoder: Encoder) throws` and Decodable's `init(from decoder: Decoder) throws` on a surface level, we see that they have an `Encoder` and a `Decoder` argument respectively. They are both protocols, which are then adopted by `JSONEncoder/Decoder` and `PropertyListEncoder/Decoder`, and any custom encoder and decoder that you may create. Both encoders and decoders have essentially the same properties and methods. We'll look at the `Decoder`'s properties and methods below:

Properties:
- `codingPath`: Allows you to see the current path in the decoding. It isn't used in the implementations of `Codable`'s methods, but will show up in any errors thrown by the methods.
- `userInfo`: Allows you to pass some information into this dictionary to use when decoding data. This is not often used but can be useful for more advanced implementations.

Methods:

Each of these methods will return a different kind of ""container"". A container represents a level or node of the JSON, property list, etc.

- `func container<Key>(keyedBy: CodingKey.Protocol) -> KeyedDecodingContainer<Key>`: A keyed container essentially represents a group of key-value pairs. This You can think of the container holding values in the same way as a **dictionary**. You'll also notice that it has an argument that conforms to the `CodingKey` protocol. That means if you are going to use a keyed container, you **must** make an enum for your coding keys.
- `func singleValueContainer() -> SingleValueDecodingContainer`: A single value container simply represents a **single value**, such as a string, number, etc.
- `func unkeyedContainer() -> UnkeyedDecodingContainer`: An unkeyed container contains a group of values without keys, so this closely mirrors an **array**.

Using these containers, we are able to navigate through the data and decode it in the same way that it is formatted. Or if we are using `Encoder`'s version of these containers, we can encode our model objects in any format we choose.",,,,,,,,,,Intermediate Codable,,Intermediate Swift,iOS Development Core,,1,,,1
implement encode(to:) and init(from:) methods to customize encoding and decoding,"Up to this point you have likely used Codable by simply conforming to the protocol and letting magically it do the work for you. While there is nothing wrong with this, let's look at why you may want to implement Codable's methods yourself.
",,"When working with nested JSON and letting Codable do most of the work for us, we have to format our model objects in a specific way, like having multiple nested structs or classes inside of each other:

```
struct Building: Codable {

    struct Floor: Codable {

        struct Room: Codable {
            var numberOfChairs: Int
        }

        var rooms: [Room]
    }

    var floors: [Floor]
}
```

While there is nothing wrong with doing this, it isn't commonly done besides when using Codable. When implementing Codable ourselves, have the ability to flatten out the information into a single model object. We'll also look at another reason to implement it ourselves in the next objective as well.

### Decoding Example

Let's now look at some simple JSON and how to decode it ourselves. Let's say we have this JSON:

```
{
  ""name"": ""John Johnson"",
  ""age"": 30
}
```

Our model object would look something like this to begin with:

```
struct Person: Codable {
    var name: String
    var age: Int

    init(name: String, age: Int) {
        self.name = name
        self.age = age
    }
}
```

Before we add the `init(from decoder)` initializer, we need to look at the JSON and think about which values we want from it. For every value we want, we need to add its key to a coding keys enum. In this case, we'll want the `name` and `age`:

```
enum CodingKeys: String, CodingKey {
    case name
    case age
}
```

As a refresher, there is nothing special about the enum's name `CodingKeys`. We could call it `PersonCodingKeys` or whatever else we wanted to.

Now that we have the coding keys, we can implement `init(from decoder)`:

```
init(from decoder: Decoder) throws {

    // 1
    let container = try decoder.container(keyedBy: CodingKeys.self)

    // 2
    let name = try container.decode(String.self, forKey: .name)
    let age = try container.decode(Int.self, forKey: .age)

    // 3
    self.name = name
    self.age = age
}
```

- 1: We create a container from the decoder argument.
- 2: We then call the container's `decode` method. When using a keyed container, it has `type` and `key` arguments. There are many different variations of this method that allow you to choose the type the value should be decoded as, then you choose the key from the coding keys you passed into the `container(keyedBy:)` method from step 1. This method throws, so remember to call `try`. There is no need to set up a do-try-catch block since the initializer itself that we are in throws. If we think of the keyed container as a dictionary, then `decode` is the way that we get values out of it with a key.
- 3: We now have the name and age decoded, so we can finish the initializer by setting the instance variable's values. Alternatively, you could call the `Person`'s `init(name: String, age: Int)` to accomplish the same thing.

Let's add another level to the JSON:

```
{
  ""name"": ""John"",
  ""age"": 30,
  ""favoriteNumbers"": [
    42,
    10,
    13
  ]
}
```

Make sure to add a new case to the CodingKeys enum for the ""favoriteNumbers"" key-value pair. Once that is done, we can add to the the init(from decoder:) from above:

```
// 1
var favoriteNumbersContainer = try container.nestedUnkeyedContainer(forKey: .favoriteNumbers)

// 2        
var favoriteNumbers: [Int] = []

while !favoriteNumbersContainer.isAtEnd {
    let number = try favoriteNumbersContainer.decode(Int.self)
    favoriteNumbers.append(number)
}
```

- 1: Again, for each new ""level"" of JSON, we need to create a new container of some kind. This new level of JSON is an array, so we'll make an **unkeyed** container. A couple things to note here are that the container must be a variable, which we'll come back to in step 2. The other thing is that we call the `nestedUnkeyedContainer` method on the container we made previously. This is important to remember. We don't always get containers from the decoder, just the top level of the data. From there, you are able to get ""nested"" containers from other containers. This allows you to drill down into each level of the data.
- 2: There are a few ways that you can decode the data from an unkeyed container. The important thing to remember is that every time you call `decode` in an unkeyed container, that value also gets removed from it, which is why the container needs to be a variable. In the example above we are using the container's `isAtEnd` property to see if the container is empty or not. Until it is empty, the while loop will keep decoding the `Int`s in it.

If we try use `decode` to decode a value that doesn't exist the method will throw an error and the model object will not get initialized at all. Now what if you have some key-value pairs in your JSON that are only there sometimes? Luckily, there is a sibling function called `decodeIfPresent` that works the same as decode, but when it tries to decode the value it won't throw an error if there isn't one. **When using `decodeIfPresent` the value will be returned as an optional**.

### Encoding Example

Now that you've seen decoding JSON, encoding is very similar. One thing to take into account is that if you are encoding your JSON back to an API, it is going to expect the JSON to be structured in a specific way. More often than not, it will be structured like it was when you fetched it. So if you are ""flattening"" out the JSON into a single model object when you're decoding, but need to send that information back to the API, we need to encode it back to its original format (or whatever format is required by the API).

Let's take the `Person` model object and implement `Encodable`:

```
func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: CodingKeys.self)

        try container.encode(name, forKey: .name)
        try container.encode(age, forKey: .age)
        try container.encode(favoriteNumbers, forKey: .favoriteNumbers)
    }
```

We begin similarly by creating a keyed **encoding** container using our `CodingKeys` from earlier. From there, we just need to tell the encoder to encode each value with a given key. Note that for encoding arrays, you can also use a for-in loop to go through the contents of the array and encode them individually if you want. In this case, the outcome is identical.

Just like `Decodable`'s `decodeIfPresent` method, there is a parallel `encodeIfPresent` method for encoding optional values without throwing errors if the value is nil.

At this point, that is about everything you need to know about implementing `Encodable` and `Decodable` yourself. Obviously you will see more complicated, nested JSON than this. When you do, you will just make a new container of the correct kind for each level until you are able to access and encode and/or decode the information that you need for your model object.

There is one situation that is slightly more involved in order to decode, however. We'll look at it in the next objective.",,,,,,,,,,Intermediate Codable,,Intermediate Swift,iOS Development Core,,1,,,1
use a custom init(from:) method to decode objects whose properties contain both the key and value from a json dictionary,"Sometimes you will come across JSON with irregular keys; keys that do not have a static name such as ""name"" or ""user"", etc. Instead the key appears to be some unique identifier. We will run into a problem because each one is different and there is no way to effectively make a coding key for every identifier in order to decode it.",,"Let's say we have a social networking app with a basic model object representing a user profile that has a username and their bio. The JSON could look like this:

```
{
  ""-LTurQ1JOOrdH6sWNw3b"" : {
    ""username"" : ""Bill"",
    ""bio"" : ""Insert witty bio here""
  },
  ""-LTurQ5STtM66lhpx8hp"" : {
    ""username"" : ""Stan"",
    ""bio"" : ""Excelsior!""
  },
  ""-LTurQ5Mce055e0Two8G"" : {
    ""username"" : ""Edgar"",
    ""bio"" : ""Quoth the raven""
  }
}
```

Each of these 3 profiles has another piece of information which is the unique identifier key containing the profile. It is essentially a part of the profile's information, and we will need to know what the user's identifier is in order to access it, for example to update their bio or username. Let's create a model object to represent this information:

```
struct UserProfile {
    let username: String
    let bio: String
    let identifier: String
}
```

We need to make a generic set of coding keys that are able to be created when the decoding container is created:

```
struct GenericCodingKeys: CodingKey {
    var stringValue: String
    var intValue: Int?

    init?(stringValue: String) {
        self.stringValue = stringValue
    }

    init?(intValue: Int) {
        self.intValue = intValue
        self.stringValue = ""\(intValue)""
    }
}
```

The `CodingKey` protocol requires a property and initializer for both string `String` and `Int` values. What we're doing here is simply setting both properties' value. The best part of this is that we can create a keyed container with this `GenericCodingKeys` struct and it will automatically make a key for each key-value pair, even if it is a key like the JSON above has that is impossible to know beforehand.

Another thing we need to do is create a parent data type for the `UserProfile` that we can use to implement `init(from decoder:)`:

```
struct UserProfiles: Decodable {

    enum CodingKeys: String, CodingKey {
        case username
        case bio
    }

    var profiles: [UserProfile]
}
```

We've got a basic struct that has an array of `UserProfile` objects, which is mirroring the structure of the JSON, along with a `CodingKeys` enum for the statically keyed key-value pairs. 

You may have noticed that the `UserProfile` struct isn't conforming to `Codable`. That's because we're going to decode each profile in `UserProfiles`' `init(from decoder:)`. Let's add that initializer:

```
struct UserProfiles: Decodable {

    enum CodingKeys: String, CodingKey {
        case username
        case bio
    }

    init(from decoder: Decoder) throws {
        // 1
        let container = try decoder.container(keyedBy: GenericCodingKeys.self)

        var profiles: [UserProfile] = []

        // 2
        for key in container.allKeys { // [""-LTurQ5STtM66lhpx8hp"", ""-LTurQ5Mce055e0Two8G"", ""-LTurQ1JOOrdH6sWNw3b""]

            // 3
            let profileContainer = try container.nestedContainer(keyedBy: CodingKeys.self, forKey: key)

            let username = try profileContainer.decode(String.self, forKey: .username)
            let bio = try profileContainer.decode(String.self, forKey: .bio)

            // 4
            let profile = UserProfile(username: username, bio: bio, identifier: key.stringValue)

            profiles.append(profile)
        }

        self.profiles = profiles
    }

    var profiles: [UserProfile]
}
```

- 1: In the first step, we begin by creating a keyed decoding container, but we are using the `GenericCodingKeys` struct instead of `CodingKeys`.
- 2: Once we have the container, we can get each key by looping through it's `allKeys` property. Each key in this case would be each unique identifier.
- 3: We are then able to drill down a level into the JSON by using the key provided by the loop to decode the profile's username and bio using the normal `CodingKeys` enum.
- 4: We can now initialize the individual `UserProfile` with the decoded values and the identifier key.

It can be a bit confusing to see how this all works. You shouldn't run into many situations where this is applicable, but you should keep knowledge of it handy in case you do have to deal with it.",,,,,,,,,,Intermediate Codable,,Intermediate Swift,iOS Development Core,,1,,,1
"write a blog post or record a YouTube video then publish on ""What I Learned at Lambda School""","##Requirements
*Suggested length: 500-1000 words or 2-3 minutes
*Personal yet professional voice
*Focus on skills, not tools
*Free from typo and grammatical errors

##Topic Suggestions
Explain how you:
*Learned how to think like a developer
*Approached planning and problem solving
*Successfully worked in a team remotely
*Worked with different personalities, to accomplish a common goal
*Overcame trials
*Cultivated persistence, grit, and consistency
*Saw personal and professional growth, and how it's beneficial to your future 

##What to Avoid
*Listing off languages or frameworks you've learned
*Linking to any Lambda School curriculum
*Naming specific students/staff without their permission

##Examples
*(https://medium.com/@d.timothy.freeman/the-lessons-i-learned-at-a-coding-bootcamp-62d19926516c ""The Things I Learned at a Coding Bootcamp (Besides How to Code)
*(https://42hire.com/a-career-change-at-37-are-you-crazy-8e5ab8a7dc41 ""A Career Change at 37, Are You Crazy?)
*(https://hackernoon.com/heres-what-i-learned-from-700-hours-in-a-coding-bootcamp-d92cb4e8afc1 ""Here's What I Learned from 700+ Hours in a Coding Bootcamp)",,,,,,,,,,,,"""""""What I Learned at Lambda School"""" Publication""",,Next Week I,Lambda Next,,0,,,0
build a professional portfolio website,"##Requirements
*Create your own website set-up, no Wix or Squarespace!
  *Options: Jekyll, Gatsby, or from scratch in React
*URL: firstnamelastname.com is ideal, get as close to that as you can
*Every page completed, all links active
*Add website link to each of your public channels (LinkedIn, GitHub, social media) and your resume
*Appropriate spelling, grammar, capitalization
*Include all content items listed below
*Mission Statement must be approved by Career Coach
*Have completed website proofread - every inch - by at least one peer
*Absolutely do NOT include: stock photos, ads, affiliate links, your bad mixtape, links to your personal social media accounts, political opinions, religious content, or any potentially offensive content

##Content
*Profile picture
  *Professional looking
  *Solo headshot 
*No hats, sunglasses, or distracting clothes/background
*Full name
  *No nicknames or gamer tags
*Contact information
  *Email and phone number easily accessible
*Resume
*Personal Mission Statement
*Links to at least 3 projects, with code easily accessible. 
*Links to your blog posts.
  *Keep this updated as you publish content
*Remember that this is your public facing portfolio. Think “What would I want my future boss/coworkers to know about me?”

##Examples
*http://findmatthew.com/
*http://ejosue.com/
*http://www.adhamdannaway.com/",,,,,,,,,,,,Build a Portfolio Website,,Next Week I,Lambda Next,,0,,,0
"write a blog post or record a YouTube video then publish on ""how I contributed to a code base that was new to me""","##Topic Suggestions
Explain how you:
*Familiarize yourself with a new code base before identifying problems or making changes
*Got a foreign project running locally in development mode on your machine
*Determined which feature(s) to add 
*Navigated the code related to your new feature(s)
*Added tests to ensure your new code introduced no breaking changes
*Updated the project documentation with the things you learned while setting up the project and adding your new feature

##Tips
*When writing this post, consider the audience you’re writing for. You want hiring managers to see this post and gain confidence in your ability to join their team and contribute to their own code base. 
*Be Professional in the way you document your process
*Avoid disparaging the original authors of the project you’re working on - that would indicate that you will speak poorly about your future coworkers and their code. Don’t waste time being critical. Focus on being helpful. 
*Be thorough. When describing WHAT you did, include WHY you made each decision and any trade offs you considered. 
*Add Tests! And include examples of things you tested and why. 
*You want to sound competent and humble. Show that you can work on a project that isn’t yours to create meaningful progress. Be a multiplier. 


",,,,,,,,,,,,"""""""How I Contributed to a Code Base That Was New to Me"""" Publication""",,Next Week II,Lambda Next,,0,,,0
contribute to a new code base ,"##Instructions
*Select a project you would like to work on from the Lambda Labs Github (ignore projects currently in flight).
*Identify a feature you would like to add to this project. You may check the list of open issues in GitHub for inspiration. 
*If you choose a feature that is not currently an open issue, you must open an issue describing your proposed changes in detail. 
*Fork the project to your own GitHub.
*Get the project running locally. 
*Make your changes. 
*Deploy your fork to Heroku or Netlify. 
*Open a pull request to the main repository with your changes. 

##Requirements
*Your deliverable this week is a link to your PR and/or a link to a deployed version of your fork. The free tier of Heroku will satisfy this requirement. 
*Your feature should span the full-stack of the application; User Interface, Backend API, Database
*You must preserve original functionality - do not make fundamental changes
*You must include Unit Tests for you new code
*You must update the API Documentation to reflect your new changes
*Your Pull Request must contain a thorough description of your changes and the checklist must be completed. 
*Simple UI tweaks will be insufficient to satisfy the requirements of this week’s project. 
",,,,,,,,,lambda labs github,,,Contribute to Code Base That Is New to You,,Next Week II,Lambda Next,,0,,,0
"write a blog post or record a YouTube video then publish on ""how I learned a new tool/language/framework in 1 week""","##Topic Suggestions
Explain how you:
*Identified which tool you would spend time learning this week. 
*Configured your environment to be productive
*Found resources to help you learn
*Experimented with the tool to get a feel for it
*Used it to build something
*Deployed that thing to the web where it could be shared with others.

##Tips
*When writing this post, consider the audience you’re writing for. You want hiring managers to see this post and gain confidence in your ability to join their team and learn new things on the job. 
*Be Professional in the way you document your process
*Avoid disparaging remarks when evaluating new technology. You never know who in the room likes it. 
*Be thorough. When describing WHAT you did, include WHY you made each decision and any trade offs you considered. 
*Be thoughtful. Point out things in your new tool that are familiar to things you already know, and what things are new. 
",,,,,,,,,,,,"""""""How I Learned a New Tool/Language/Framework in 1 Week"""" Publication""",,Next Week III,Lambda Next,,0,,,0
"select and learn a new tool, language, or framework ","##Instructions
*Identify a new thing to learn. This could be a programming language, a framework, or a major tool. 
*Use that new thing to build a functional application. You can follow an online tutorial if you wish, but make the application your own. Be creative.
*Deploy the thing you’ve built to the web. Add it to your portfolio site. 

##Requirements
*Your deliverable this week is a link to a GitHub repo of your new project and a link to a deployed instance of your app. The free tier of Heroku will satisfy this requirement. 
*Your application should be full stack. Backend, Front End, Database.
*The language/tool/framework you select must not be covered in the Lambda School Full Stack Web Curriculum

##Ideas
*Ruby/Rails
*Elixir/Phoenix
*C#/ASP/.NET
*Java/Spring
*Vue/Angular/Ember/Backbone/Marionette/Sails/Meteor etc… JS *Framework
*Crystal Lang / Amber
*Scala
*Go
*PHP
*Swift
*Kotlin
*React Native / Ionic / some other cross platform mobile framework

##Have Questions?
Contact
*Brian Doyle
*Ryan Holdaway

",,,,,,,,,,,,"""learn a new language, tool, or framework""",,Next Week III,Lambda Next,,0,,,0
"write a blog post or record a YouTube video then publish on ""how I contributed to my first open source project""","##Topic Suggestions
Explain how you:
*Found a project to contribute to.
*Identified an issue to solve.
*Navigated the process of contributing for the first time. 
*What you learned along the way. 

##Tips
*When writing this post, consider the audience you’re writing for. You want hiring managers to see this post and gain confidence in your ability to join their team and contribute to their own code base. 
*Be Professional in the way you document your process
*Avoid disparaging the original authors of the project you’re working on - that would indicate that you will speak poorly about your future coworkers and their code. Don’t waste time being critical. Focus on being helpful. 
*Be thorough. When describing WHAT you did, include WHY you made each decision and any trade offs you considered. 
*Add Tests! And include examples of things you tested and why. 
*You want to sound competent and humble. Show that you can work on a project that isn’t yours to create meaningful progress. Be a multiplier. 



",,,,,,,,,,,,"""""""How I Contributed to My First Open Source Project"""" Publication""",,Next Week IV,Lambda Next,,0,,,0
contribute to an open source project,"##Instructions
*Find an open source project that you would like to contribute to. Lambda School has a partnership with the GatsbyJS team, so their list of open issues (https://github.com/gatsbyjs/gatsby/issues) would be a good place to start. You can also get in touch with Shannon Soper from the Gatsby team in the Lambda School Slack Organization if you need help. 
*Identify an issue that you can solve. Check the “Open Issues” tab on your project of choice for inspiration. Look for things that have been tagged “Good First Issue” or similar. 
*Read through the contribution instructions for the project to familiarize yourself with the requirements and process followed by the team. Most will require tests and a CI of some kind in order for a PR to be eligible to be merged. Contact the maintainers of the project if you have any questions at this step. 
*Fix your issue. Document your solution. Type up a thorough description for your PR. 
*Open a Pull Request
*Work with the maintainers to get your pull request merged (optional). This last step can take a very long time if you’re working on a large project.

##Requirements
*Your deliverable this week is a link to your PR. 

##Resources
*https://youtu.be/2hl1OV_RYEo
*https://www.firsttimersonly.com/
*https://github.com/MunGell/awesome-for-beginners

##Have Questions?
Get technical guidance from:
*Brian Doyle
*Ryan Holdaway",,,,,,,,,,,,Contribute to an Open Source Project,,Next Week IV,Lambda Next,,0,,,0
describe the state of the UX industry,"The UX industry has been rapidly developing and evolving over the last 30 years. Understanding where it came from, where it is today, and where it is going will help you identify where you want to work.",,"The field of user experience, as we know it, began to emerge in the early 1990’s from the disciplines of user-centered design and human computer interaction. As personal computers and the internet were becoming popular, a few people building products began to recognize that the interactions between users and their products mattered. 

In particular, Don Norman who was working at Apple at the time, was especially interested in this issue. In looking for an answer, he coined the term “user experience” and began defining it for our industry In collaboration with many other pioneers.

Since then the field has grown tremendously. UX is no longer focused solely on computer-based products. Instead, we consider a multitude of product media, like mobile apps, voice apps, chat bots, physical products, and more. 

Not only has the nature of our products evolved, so to has the appreciation of UX as a discipline. In the early days, most companies were skeptical of the value that UX could offer. But today, many recognize the strategic advantage a good user experience delivers and the value a user experience designer brings to the table. 

As more companies started recognizing the value of UX, they began hiring more UX designers. As UXPin reports in its 2017-2018 UX Industry Report, job prospects continue to improve as more companies grow their UX teams and the industry expands.

While the UX field has matured, UX designers are becoming more experienced. The majority of UXPin’s survey respondents reported that they had at least 5 years of experience in the field. These additional years of experience are translating into higher wages and more opportunities to work at huge, established  companies. Interestingly, they noted that at around the 3-year mark, UX designers begin to move into these large organizations with increasing frequency.

Overall, the UX industry continues to grow and evolve rapidly. As more companies seek to improve their products’ user experience, they’ll continue to hire UX designers to help them. Furthermore, with advancements in technology such as driverless cars, AI, brain-machine interfacing, and more, UX designers will be needed to help create these new digital experiences.",,,,,,,The State of UX in 2019,Enterprise UX Industry Report 2017-2018,"- Who coined the term “user experience?”
- Why is the UX field growing?
- What does the future of UX look like?",Starting Your UX Career,Active,UX Fundamentals,UX Design Core,,1,,,1
explain what it’s like to work as a UX designer and the various UX specializations available,Understanding what the day-to-day life of a UX designer looks like and what specializations are available can help you choose your path in this profession.,,"Working as a UX designer is a challenging yet rewarding career path. The day-to-day realities of a UX designer is an ever-changing whirlwind of projects, iterations, and learning. While individual experiences are incredibly varied, there are a few common patterns in our work habits that are worth sharing.

The two biggest influences on what you’ll be working on are the size of your organization and where you are in the product design cycle. At larger organizations, you will typically be more focused on one part of the UX puzzle. That means you can find yourself working on similar problems or tasks. In smaller organizations, you’ll typically be more of a generalist. Therefore, you’ll be working on a larger variety of problems and tasks.

There are several distinct sections within the product design cycle that require different UX techniques and approaches. Early in the cycle, you can find yourself working more on research, idea validation, and defining problems. In the middle, you’re typically focused on ideation, prototyping, and design. Towards the end, you can find yourself working on user testing, analytics, and additional design refinements.

Putting together the size of your organization and where you are in the product design cycle is a good indication of what you’ll be doing, but it’s not perfect. Your day-to-day activities can also vary depending on the size of your team, your job title, your seniority, and the value your organization places on UX.

As you can see, with an ever-growing list of variables it’s difficult to pin down what a typical day will look like. But, that’s also one of the big perks of being a UX designer! Your work can be as varied as you want it to be. If you like doing a bit of everything, then that’s perfectly alright. If you like one part of the product design cycle, then you can specialize in it.

In fact, a multitude of specializations have arisen as the UX industry has matured and designers have figured out areas they wanted to pursue. The following list outlines some common UX specializations and what these roles focus on.

- *Content Strategist*: Focuses on the content strategy and overall content structure for a product.
- *Information Architect*: Responsible for the structural design of a product, especially large or complex websites.
- *Interaction Designer*: Concerned with user interactions, motion, and animations and how they impact the user experience.
- *UI Designer*: Focuses on designing user interfaces for products.
- *Unicorns*: UX generalists who can do everything. They are called unicorns because they are incredibly rare.
- *User Researcher*: Research users and how they perceive problems that products try to solve.
- *Usability Tester*: Test products to ensure they are usable.
- *UX Architect/Strategist*: Focused on the big-picture user experience and guides the team towards a unified product vision.
- *UX Designer*: Responsible for designing a comprehensive user experience for a product.
- *UX Engineer*: Can refer to engineers who focus on implementing user experiences, or UX designers who can also implement their own designs in code.
- *UX Writer*: Focuses on writing copy and content for products that matches a user’s understanding.

UX is a huge field and there are many different avenues that you can pursue in your own career.",,,,,,,"UX Roles are Getting More Nuanced — and That’s a Good Thing,What are the UX Roles Within the User Experience Field?",,"- What does a typical day look like for a UX designer?
- What are some common UX specializations?",Starting Your UX Career,Active,UX Fundamentals,UX Design Core,,1,,,1
"prepare themselves for a successful career in UX with a portfolio, blog, and social media presence","In order to have a successful UX career, you need to land your first UX job! The fastest way to a great job in this field is with a high-quality portfolio and by being active in the community.","Be prepared to share your own experiences with your portfolio, blogging, and social media.","While it is possible to land a UX job with just your education, you can maximize your chances by having a portfolio, blog, and social media presence. Having them signals to potential employers that you are a motivated individual who possess the skills required to excel at your job. So, let’s break down what it takes to develop each of them.

## Portfolio
A portfolio is a curated collection of your work that demonstrates your competency as a UX designer. Besides your resume, this is the most important piece of your UX job hunt. Every employer wants to see one because it is a tangible representation of your skills, and it helps them assess your abilities. Because employers look so closely at your portfolio, it is a fantastic opportunity for you to present your best self and differentiate yourself from other applicants.

A typical portfolio presents who you are, how to contact you, and 2-3 case studies of work you have completed in the past. While it can be tempting to add everything you’ve ever worked on to a portfolio, highlighting your best work is a better approach. Your resume already covers the breadth of your experience, so think of your portfolio as an opportunity to deconstruct your UX process and demonstrate how talented you are as a designer.

Creating a portfolio can be a difficult process because it is hard to talk about yourself! However, we can break everything into smaller, actionable steps that make this easier.

### How to build a portfolio

#### 1. Prep
Before you dive into the nitty-gritty of building your portfolio, it helps to take a minute to think about what you want to build. In particular, you should try to identify the type of role you’re seeking and the industry you’d like to work in. 

This might seem impossible at the beginning of your UX career because you don’t have the experience to make an informed decision. But, without a target to shoot for, it’s impossible to measure your success. 
So, even if it’s just a guess, pick a role and an industry that interests you. As you gain more exposure and experience, it’s perfectly normal for your interests to change. When that happens, be sure to review your site and make any updates that better reflect your new priorities.

#### 2. Research
Now that you’ve identified your target role and industry, it’s time to do some research to understand who your portfolio’s audience will be and how your competition is presenting itself to employers. 

To do that, identify five companies where you’d like to work. Then, look them up on LinkedIn and try and find who works on their UX and HR teams. As you review these profiles, notice how they describe themselves. What language (tone, voice, grammar) are they using? What skills do they highlight?

When you create your portfolio, you will want to emulate the language they use and highlight how you have the skills they’ve identified as important. This way, you’ll be subtly speaking directly to their experiences.

Once you’ve researched your audience, spend some time looking at other designers’ portfolios. You can find a bunch of examples on [dribbble.com](https://dribbble.com/search?q=portfolio), [behance.net](https://www.behance.net/search?field=132&content=projects&sort=appreciations&time=week&search=portfolio), and [awwwards.com](https://www.awwwards.com/websites/portfolio/).

While there are tons of examples out there, try and focus on the portfolios of designers who are in your target industry or role. Notice how they present themselves through their portfolio’s content and visual design. What language do they use? What design patterns make sense? How creative are they?

You can use this research as inspiration when you design your own portfolio. Don’t outright copy someone else’s portfolio, but feel free to take a pattern from one and weave it together with a different pattern to tell your story.

#### 3. Your Story
Now that you’ve done your homework, you’re ready to begin your portfolio. Before you start worrying about how it will look, you’ll need to come up with your narrative and content. 

You can have the best design in world, but if there’s no content then no one will know anything about you! Therefore, focusing on the content first without the distractions of the aesthetics will help you hone a better narrative. Plus, you’ll already know your content requirements when you’re ready to design. So, your content can inform your eventual design decisions.

To start your content, the first thing you’ll want to define is your Unique Value Proposition (UVP). Your UVP is a sentence that communicates what makes you special as a designer. It should be a high-level explanation of how your experience and skills deliver value in your target role and industry. It will probably take a lot of brainstorming and iterations, but your UVP will serve as the focus of your portfolio’s narrative.

In your UVP, you’re essentially making a claim about who you are that you need to support with the rest of your portfolio. For example, if your UVP is:  “I’m a UX artisan” then the rest of your portfolio needs to back that statement up. The best way to prove your value is to provide tangible evidence of your abilities. This is where your case studies come in.

Your case studies are how you communicate your design process, approach, and results. To do that, you can construct a narrative around your best work that explains your process and ties back to your UVP.

Since this is the second day of the Lambda UX course, you probably don’t have any UX work to draw from yet. That’s ok! Throughout the course, you will have the chance to produce work that you can use in your portfolio. You can also start practicing the UX techniques you’re learning to redesign existing products, create new prototypes, or solve other problems you identify. If you can identify a problem and solve it with your UX skills, then employers want to hear about it.

Once you have some work to turn into a case study, you can write up a short essay that explains what you produced, why you made it, and how you did it. Throughout your explanations, try to use the language you discovered in your research and be sure to tie everything back to your UVP.

#### 4. Build it
Once you’ve outline all of your content, you’re ready to start building your portfolio. As you learn more UX and development skills, you’ll eventually be able to design and build your own portfolio from scratch, if you want to. Until then, you can leverage a portfolio generator to build your portfolio for you.

There are a variety of options out there, but a good first option is [Behance.net](https://www.behance.net). You’ll be able to upload all of your case studies, showcase your UVP, and connect with other designers.

## Blogging
Maintaining a blog is an incredible way to boost your chances of landing a job. It shows that you’re motivated; that you can dedicate consistent time to a project; that you can write and communicate well, and that you’re interested in your field. A blog isn’t necessarily required to land a job. But, it will certainly help you stand out compared to other applicants — especially if you can build an audience along the way.

A lot of people are intimidated by blogging because they don’t know what to write about. Coming up with ideas can be a bit tricky, but throughout this course we will provide prompts to spark your writing. Plus, you can blog about new concepts you’re learning in class and how you’d apply them in your own design process.

The biggest trick to building a successful blog is publishing on a consistent schedule. You’ll want to produce blog posts at a maintainable rate that works for you. But, you also don’t want to produce them so infrequently that nobody reads them. 

A good starter schedule is writing one post every two weeks. If you can write more, then go for it. If that’s too hard, try writing a post a month. Regardless, by the time an employer looks at your blog, you’ll have a whole bunch of posts demonstrating your commitment to practicing UX.

## Social Media
These days we all spend a lot of time socializing on the internet, and UX designers are no different. Cultivating your social media presence can help you make connections and engage with the UX community. The biggest social media platforms for UX designers are Twitter and LinkedIn, while more niche ones include dribbble.com, behance.net, awwwards.com, angel.co, and producthunt.com.

At a minimum, you’ll want to make sure that your social accounts look presentable to employers. So, be sure to remove any unprofessional photos and posts. If you’d be embarrassed to share something from your social accounts with the instructors at Lambda, then that’s a good indication that you should remove it from your profile. 

Also, taking care of your social accounts now instead of right before you start job searching will make it harder for future employers to look up past versions of your social accounts to see what’s been removed.

Once your accounts are professional, you’re ready to start networking. The trick to building a network on social media is that you have to be social! You can use hashtags to find people who share similar interests, like #ux, #ui, #LambdaSchool, etc. 

After you’ve found topics and people you’re interested in, start interacting with them. Leave comments on their posts, engage with their content, and post about your own UX thoughts. As long as you stay kind, considerate, and professional, you’ll be amazed how quickly your network can grow!",,,,,,,"Portfolios on Awwwards.com,Portfolios on Behance.net,Portfolios on Dribbble.com",The $1.80 Instagram Strategy to Grow Your Business or Brand,"- What is a portfolio, and why is it important?
- Why is blogging important?
- Why is your social media important?",Starting Your UX Career,Active,UX Fundamentals,UX Design Core,,1,,,1
understand the effect of sorting data on search operations,,,,,,,,,,,,,,,,,,0,,,0
work with a team to analyze a technical specification and plan an approach to meeting it.,Planning is one of the most important stages of any project.  You cannot successfully meet a set of requirements if you don't understand them and haven't thought out a technical approach to satisfying them.  ,,"You first task on any project, before you write a single line of code, is to do some planning.  The old adage that ""you just traded 15 minutes of planning for 8 hours of work"" is a very real risk in software development.  

Taking time to understand the purpose of your app and who your users are will help you implement a solution that best meets their needs.  You need to think about how people will interact with your application so that you can best structure your architecture, tech stack, and data models.  ","Take a look at this template:

https://docs.google.com/document/d/1W85xlvjqS1MyeIH8lG_MWipkQdVbns5gKbk0VD3EH8w/edit

You will be given a version of this document with the information marked with <<>> filled out by the designer of your product.  Your goal in the first two days of Labs is to complete an analysis of your specification and answer the questions in the remainder of the document.  
",Complete your Product Canvas and have it approved by your instructor.  ,,,,,Labs I - Team Rubric,,,Project Milestones - Start Up,,Labs I - Project Planning,Lambda Labs,,1,1,,2
demonstrate their ability to use the Lambda School Git Workflow to submit an assignment to your Project Manager,At Lambda School we're doing everything we can to get you to practice what it's like to work in a real-world environment. This git/GitHub workflow will expose you to various ways that companies commonly use git to collaborate on their software. ,,"## The Lambda School Git Flow
-   Student will create OWN version of Repo (Fork)
-   Student will add PM as a collaborator
-   Student then will Clone Repo
-   Student will then create a branch (on which the student will implement the project)  `git checkout -b 'firstName-lastName'`
-   Student will then submit their PR into the new branch.
    -   Student will use their own student fork as the base (compare across forks).
    -   Student will add their PM as a reviewer on the PR
-   PM then will count the HW as done by merging the HW back into master “STUDENT FORK”.

### Why would you learn _this_  flow?
-   You will work in a specific environment when you go out and get a job as a software developer.
-   Learning a broad approach to different git strategies will help you thrive in any specific environment.
-   Some strategies you will see in the real world are:
    -   Forking
    -   Branching
-   By learning this flow, you will become a master of both forking and branching.
-   Also, here at Lambda School, we have hundreds of students working with dozens of PMs every day. This flow will help you all collaborate on your work together.
-   We will have a firm understanding of where you’re at with your skills and abilities as you continue to progress.","## Git-Flow-Practice

The following is taken from [this repository on GitHub](https://github.com/LambdaSchool/Git-Flow-Practice)

This project is designed for one to practice the Git/Github workflow here at Lambda School. You will use this assignment to demonstrate your ability to work within this flow. Follow along with the instructions listed below to complete the assignment.

## Directions to complete this assignment

1.  Create  **YOUR OWN**  version of Repo ---> (Fork)

2.  Add your PM as a collaborator

    **on GitHub:**  
    _`Settings`_  ->  _`Collaborators`_  ->  _`Add Collaborator`  (use your PM's handle)_  
    _(I'd suggest grabbing the invite tag and DM it to your PM on Slack at this point)_

3.  Clone  **YOUR**  Repo

    **back on your machine:**  
    `git clone <your-repo-address>`

4.  Create a branch (the one you are going to be working on)

    `cd <repo directory>`  
    `git checkout -b 'firstname-lastname'`


5.  Push your new branch up to GitHub and make all future pushes to that branch

    `git push -u origin firstname-lastname`

    **on GitHub:**  
    `Compare & Pull Request`  ->  `Base: YOUR MASTER`  (Not the Lambda Master)  
    compare fork:  **`YOUR FORK`**


6.  Add your PM as a reviewer on the Pull Request

    On the  _'`Open a Pull Request`'_  page click on  _`Reviewers`_. If your PM has accepted your invite, then you should be able to select them here. If not, then they haven't accepted the invite, and come back later...

    **Your PM**  will merge the work into  **YOUR**  Master fork when they have reviewed and approved it.- [ ] Create your own version of this repo - Fork
- [ ] Add your PM as a collaborator
- [ ] Clone this repo
- [ ] Create a branch `git checkout -b 'firstName-lastName'`
  - [ ] Add your name to the list of names below.
  - [ ] Run your usual git commands or adding/committing and pushing **Be sure to push to your branch**
- [ ] Create a Pull-Request to submit your work
  - [ ] Use your own student fork as the base (compare across forks, base-fork -> master).
  - [ ] Add your PM as a reviewer on the Pull-Request
- [ ] PM then will count the Assignment as done by merging the HW back into master ""STUDENT FORK"".",Now that you have demonstrated your ability to work within this flow. Use this flow to turn in your afternoon assignment today and for the rest of your time here at Lambda School.,cSoHP7WSsEg,http://youtube.com/watch?v=cSoHP7WSsEg,https://www.youtube.com/embed/cSoHP7WSsEg,,,,,Git for Web Development,,Introduction to User Interface and Git,Full Stack Web Development Core,,1,1,1,3
explain the differences and similarities between UX and UI,"User Experience (UX) is frequently confused with and mistaken for User Interface (UI) design. While the terms are related, there are some clear differences that you should be familiar with as a UX designer.",,"One of the most confusing topics for people who are new or unfamiliar with UX to understand is the difference between UX and User Interface (UI) design. Let’s define each of these terms and then look at how they relate to each other.

## User Experience (UX)
As Don Norman explained when he coined the term, “User experience encompasses all aspects of the end-user’s interaction with the company, its services, and its products.” Therefore, user experience focuses on the entire experience a user has with a product from how they interact with various features to why they used the product in the first place and more. So, UX is the all-encompassing umbrella term that we use to describe a user’s interaction with a product.

## User Interface (UI)
A user interface is anything a user physically or digitally interacts with to use a product or service. For example, the keyboard on a computer is considered part of its user interface because it is what we use to interact with it.

## UX and UI
The reason that UX and UI get confused so easily is that UI is a subset of UX. If we think of a product like the iPhone, the UI is the phone itself. While this is an incredibly important part of the UX, it is not the entire picture. Instead, the UX not only takes into account the phone’s UI but also how the phone’s software works with its hardware, why we need a phone in the first place, how the phone interacts with charging cords, etc. So, while the UI is extremely critical to the overall UX, it isn’t the only consideration.",,,,,,,"UI vs. UX: What’s the difference between user interface and user experience?,The Difference Between UX and UI Design - A Layman’s Guide",,"- What is UI design?
- How is UI design similar to UX?
- How is UI design different from UX?",Common UX Misconceptions,Active,UX Fundamentals,UX Design Core,,1,,,1
explain the differences and similarities between Customer Experience (CX) and UX,"These days, there’s a lot of confusion between User Experience (UX) and Customer Experience (CX). As a UX designer, you should understand what similarities and differences these terms share.",,"Another confusing topic in the UX field is understanding the difference between UX and Customer Experience (CX). Let’s define each of these terms and then look at how they relate to each other.

## User Experience (UX)
As Don Norman explained when he coined the term, “User experience encompasses all aspects of the end-user’s interaction with the company, its services, and its products.” Therefore, user experience focuses on the entire experience a user has with a product from how they interact with various features to why they used the product in the first place and more. So, UX is the all-encompassing umbrella term that we use to describe a user’s interaction with a product.

## Customer Experience (CX)
As the Interaction Design Foundation explains, “Customer experience (CX) refers to a customer’s experience with a company or brand, at all touchpoints. A touchpoint is any way by which a customer can interact with a brand, such as when purchasing or using a product or through seeing commercials featuring it. CX design focuses on creating an optimal experience for customers at all such touchpoints.”

## UX and CX
UX and CX are confusing terms to differentiate because they effectively mean the same thing! They both try to label the big picture experience of a user’s interactions with a product or service. However, we can begin to see some nuance when we look at who uses these terms and when they use them. 

UX is typically used by designers, developers, product managers, and other product focused people to refer to the experience users have with a single product or service. Even though the term was originally coined to capture the entire experience, in practice it has been used to specifically target specific product experiences.

Meanwhile, CX is generally used by marketers, brand experts, and business-oriented stakeholders to refer to a customer’s entire experience with a company across products, services, and interactions.

So, as we see in the following graphic from UXPin, UX focuses on the product experience while CX encapsulates UX and the entire company experience.

![](https://tk-assets.lambdaschool.com/2033824a-08a0-4d9a-811d-e3ad61b6637c_Screen-Shot-2016-01-11-at-5.49.30-PM.png)

As a UX designer, understanding the broader CX that the product you’re designing operates within is critically important to delivering a good UX. For example, an airline’s CX includes their advertising, website, bag check kiosks, customer service interactions, etc. If we’re working as UX designers for them, we might only focus on the UX for the bag check kiosks. But, if we don’t understand how we fit into the broader CX, then even if we deliver an exceptional kiosk UX we might still fail because we haven’t prepared our users for the next step in their journey. For instance, if our kiosk makes it super-easy to check-in but we print their boarding passes on bananas, then we’re setting our users up for failure within the broader context of our CX.",,,,,,,"Customer Experience vs. User Experience: Why the Difference Matters,User Experience (UX) vs. Customer Experience (CX): What’s the Dif?,Customer Experience (CX) Design",,"- What is meant by Customer Experience?
- How is CX similar to UX?
- How is CX different from UX?",Common UX Misconceptions,Active,UX Fundamentals,UX Design Core,,1,,,1
explain the differences and similarities between Product Management and UX,"These days, there’s a lot of confusion between User Experience (UX) and Product Management. As a UX designer, you should understand what similarities and differences these terms share.",,"Another confusing topic in the UX field is understanding the difference between UX and Product Management. Let’s define each of these terms and then look at how they relate to each other.

## User Experience (UX)
As Don Norman explained when he coined the term, “User experience encompasses all aspects of the end-user’s interaction with the company, its services, and its products.” Therefore, user experience focuses on the entire experience a user has with a product from how they interact with various features to why they used the product in the first place and more. So, UX is the all-encompassing umbrella term that we use to describe a user’s interaction with a product.

## Product Managment
As UX Planet explains, “Product management is to organizing as UX is to executing. Digital product managers are responsible for the successful delivery of high quality digital products, focusing on product success over the entire product lifecycle. Their role involves guiding cross-functional teams in the creation of products, providing deep product knowledge and making strategic product decisions.” As to be expected, *management* is the critical facet of product management. As with all management roles, this involves a significant amount of strategy, planning, and organization towards a shared product vision. So, while a UX designer iterates towards a product vision, the product manager sets what that product vision should look like.

## UX and Product Management
The confusion around UX and Product Management stems from an overlap in responsibilities. A good UX designer should be intimately involved in setting the product direction for a company because they have the first-hand research and knowledge of user needs. In small startups and companies, this is often the case! So, the UX designer also serves as the Product Manager.

However, in larger organizations, this set up is no longer sustainable as the amount of organization and planning required to set the product direction expands. So, dedicated product managers step in to fill that gap and allow the UX designer to focus on building the product.

Since these positions have a good amount of overlap, there can be some tension between the UX and Product Management teams. Both of them should be familiar with the user research and needs, and thus feel a level of ownership over the product’s direction. While the Product Management team should have the final say over the direction, they can work to alleviate this tension by including the UX team in product vision discussions and by using their fundamental research to help steer the product.",,,,,,,"What is the role of a product manager?,What UX designers need to know about product management,UX & product management: What’s the difference?",,"- What is Product Management?
- How is Product Management similar to UX?
- How is Product Management different from UX?",Common UX Misconceptions,Active,UX Fundamentals,UX Design Core,,1,,,1
understand that a UX design job isn’t a “desk job”,"As with most tech jobs, there’s a common perception that UX design is a “desk job” where you don’t have to interact with people. But, we’ll certainly need to step away from our desks as UX designers to meet our users.",,"When we think about UX designers, it’s tempting to picture a well-mustachioed hipster tapping away at a MacBook Pro in a glass room surrounded by post-it notes. While this mental image is easy to poke fun at, the fact is that UX designers come from diverse backgrounds and work in extremely different environments.

If we focus a bit more on the environments we work in, it’s easy to assume that UX designers are like your typical tech worker and that we mostly work in open-plan offices. While that’s certainly true, we also spend a significant amount of time outside of the office. 

If we’re researching users, we need to be where they are! So, we might visit where they work or even recruit users in coffee shops to get a better understanding of how they organically use our products. Other times, we might need to pitch a new design to a client or a new process to internal leaders. Then, we could find ourselves traveling to their conference rooms and delivering presentations.

As you can see, UX designers are by no means bound to their desks in order to accomplish their work. Of course, this varies greatly depending upon a designer’s specialization. For instance, user researchers will spend more time “in the wild” observing users, while UI designers will spend more time at their desks working on mockups.

So, you can definitely minimize your exposure to other people if you’re more introverted. That said, anyone looking to start a career in UX should be prepared to develop their interpersonal skills and be ready to interact with others. For example, while the UI designer we just mentioned can spend most of their time working on mockups, they still need to be able to present their work to others and convince them that their approach works for the user and product.",,,,,,,,,"- Does a career in UX mean you'll have a desk job?
- Where do UX designers work?",Common UX Misconceptions,Active,UX Fundamentals,UX Design Core,,1,,,1
describe the differences between Linear and Binary Searching algorithms,"To get a better understanding of *WHY* it is useful to sort data, we'll take a look at two different approaches to a very common operation, searching data.",,"Regardless of the type of application you are using, it is likely that this application will utilize some sort of search operation at some point. You might search Contacts on your phone for a particular person. Maybe as you prepare for a trip, you need to search your email for a flight or hotel reservation. Or possibly you need to search your favorite online retailer for the latest and greatest book, video game, etc. that was just released. Because these searching operations are done frequently, it is important that we do them *efficiently*. Two common approaches to searching are ***Linear (Sequential) Search*** and ***Binary Search***.

In ***Linear Search***, we simply start at the beginning of our data set and iterate through each item until we either i) find what we were searching for or ii) reach the end and conclude the item being searched for is not in the set. While this approach is pretty straightforward, it can be very time consuming. Imagine a website with millions of users. If you search for someone who *isn't on the site*, it could take a very long time before this result is actually returned to you.

Luckily, a better approach exists. ***Binary Search*** takes an ordered set of data and starts searching in the *middle*. If the middle element is what we were looking for, great! That means we're done. If the middle element is *smaller* than the target, we can eliminate the *entire left-hand side* of our data set and repeat this process on the right-hand side. If the middle element is *larger* than the target, we similarly eliminate the *entire right-hand side* of our data set and repeat this process on the left-hand side. Since we are eliminating half the data set with each pass of the algorithm, this approach is much more efficient. But we can't use binary searching ***unless the data is sorted!***","Let's try searching the same set of data with both approaches. Consider the following array of integers:
arr = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]

If we are searching for the value **15**, this is what will happen.
- Linear Search:  

```
arr[0] = 15?   # nope, check the next index
arr[1] = 15?   # nope, check the next index
arr[2] = 15?   # nope, check the next index
arr[3] = 15?   # nope, check the next index
arr[4] = 15?   # nope, check the next index
arr[5] = 15?   # nope, check the next index
...
arr[14] = 15? # yes! we can return the index where the target value can be found

# Kind of tedious, even when we only had to perform 15 checks...
```

- Binary Search:  

```
middle = len(arr) / 2 = 20 / 2 = 10
arr[10] = 15? # nope, check if greater than or less than
arr[10] > 15? # nope, eliminate LHS of array, continue searching RHS
middle = len(arr[11: ]) / 2 = 9 / 2 = 4 .  # integer division
arr[11 + 4] = 15? # yes! we can return the index where the target value can be found

# MUCH faster!
```","1. Try writing a Python function to perform a ***linear search*** on a set of data.

2. Try writing a Python function to perform a ***binary search*** on a set of data.

3. Can you rewrite the above function so that it uses *recursion*?",a1oLy-ft8o8,http://youtube.com/watch?v=a1oLy-ft8o8,https://www.youtube.com/embed/a1oLy-ft8o8,,,,,Sorting,,Algorithms,"Computer Science, DS - Computer Science",,1,1,1,3
scrape and parse web pages,,,"Read these sections in [Automate the Boring Stuff with Python, Chapter 11](https://automatetheboringstuff.com/chapter11/)
- Downloading a Web Page with the requests.get() Function
- Using the Developer Tools to Find HTML Elements
- Creating a BeautifulSoup Object from HTML
- Finding an Element with the select() Method",,,,,,,,,,Scrape and process data,,,,,0,,,0
,,,,,,,,,,,,,,,,,,0,,,0
use list comprehensions,,,Read [Python List Comprehensions: Explained Visually](https://treyhunner.com/2015/12/python-list-comprehensions-now-in-color/),,,,,,,,,,Scrape and process data,,,,,0,,,0
select rows and columns with pandas,,,"Review these sections in the [Pandas Cheat Sheet](https://github.com/pandas-dev/pandas/blob/master/doc/cheatsheet/Pandas_Cheat_Sheet.pdf)
- Subset Observations (Rows)
- Subset Variables (Columns)

Read these sections in the _Python Data Science Handbook_
- [Chapter 3.1](https://jakevdp.github.io/PythonDataScienceHandbook/03.01-introducing-pandas-objects.html), Introducing Pandas Objects
- [Chapter 3.2](https://jakevdp.github.io/PythonDataScienceHandbook/03.02-data-indexing-and-selection.html), Data Indexing and Selection",,,,,,,,,,Scrape and process data,,,,,0,,,0
concatenate data with pandas,Concatenating dataframes with Pandas is a vital data wrangling skill. This involves appending a dataframe to another either by row or by column. Often a significant amount of reshaping must occur before the two dataframes are ready to be concatenated. The need for concatenating dataframes often occurs when datasets are given as separate CSV files or when trying to re-combine a subset of a dataframe with the original.,We will concatenate `order_products_prior` and `order_products_train` by row -they have the same column structure.,"Read _Python Data Science Handbook_ [Chapter 3.6](https://jakevdp.github.io/PythonDataScienceHandbook/03.06-concat-and-append.html), Combining Datasets: Concat and Append",Review this Chis Albon documentation about [concatenating dataframes by row and by column](https://chrisalbon.com/python/data_wrangling/pandas_join_merge_dataframe/),"We'll work with a dataset of [3 Million Instacart Orders, Open Sourced](https://tech.instacart.com/3-million-instacart-orders-open-sourced-d40d29ead6f2)!",,,,,,,,Join and Reshape Data,,Data Wrangling and Storytelling,DS - Statistics Fundamentals,,1,1,,2
merge data with pandas,Whenever two dataframes hold different kinds of information about the same item but share a common feature/column we can use the linking feature as an index and merge two dataframes together based on the common column. To accomplish this we can use either the `.merge()` or `.join()` operations.,,"Review this section in the [Pandas Cheat Sheet](https://github.com/pandas-dev/pandas/blob/master/doc/cheatsheet/Pandas_Cheat_Sheet.pdf): Combine Data Sets: Standard Joins

Read _Python Data Science Handbook_ [Chapter 3.7](https://jakevdp.github.io/PythonDataScienceHandbook/03.07-merge-and-join.html), Combining Datasets: Merge and Join",Review this Chis Albon documentation about [concatenating dataframes by row and by column](https://chrisalbon.com/python/data_wrangling/pandas_join_merge_dataframe/),"Recreate the following table using the open source Instacart data that has been provided. ![Instacart Table](https://cdn-images-1.medium.com/max/1600/1*vYGFQCafJtGBBX5mbl0xyw.png)

Inspect the different CSVs provided from the open-sourced Instacart data. Look at each of the CSVs individually in order to determine which ones have useful columns and then use the `.concate()`, `.merge()` and `.join()` operations to recreate the table.",,,,,,,,Join and Reshape Data,,Data Wrangling and Storytelling,DS - Statistics Fundamentals,,1,1,,2
understand tidy data formatting,Tidy data sets are arranged such that each variable is a column and each observation is a row. Tidy data formatting can be especially helpful when trying to visualize datasets using libraries like Seaborn.,,"Review this section in the [Pandas Cheat Sheet](https://github.com/pandas-dev/pandas/blob/master/doc/cheatsheet/Pandas_Cheat_Sheet.pdf): Tidy Data

Read about [Tidy Data](https://en.wikipedia.org/wiki/Tidy_data) on Wikipedia",,"Read [Hadley Wickham's paper on Tidy Data Formatting](http://vita.had.co.nz/papers/tidy-data.pdf). What is different about Tidy data formatting compared to how we typically organize dataframes with Pandas?

After understanding the differences take the following table of data and change it to have ""tidy"" formatting:

|              | treatmenta | treatmentb |
|--------------|------------|------------|
| John Smith   | NaN        | 2          |
| Jane Doe     | 16.0       | 11         |
| Mary Johnson | 3.0        | 1          |",,,,,,,,"Reshape data,Join and Reshape Data",,Data Wrangling and Storytelling,DS - Statistics Fundamentals,,1,1,,2
melt and pivot data with pandas,We can use the `melt()` and `pivot()` functionality from pandas in order to transform our data back and forth between the common tabular format and tidy format.,,"Review this section in the [Pandas Cheat Sheet](https://github.com/pandas-dev/pandas/blob/master/doc/cheatsheet/Pandas_Cheat_Sheet.pdf): Reshaping Data

Read these sections in the _Python Data Science Handbook_
- [Chapter 3.8](https://jakevdp.github.io/PythonDataScienceHandbook/03.08-aggregation-and-grouping.html), Aggregation and Grouping
- [Chapter 3.9](https://jakevdp.github.io/PythonDataScienceHandbook/03.09-pivot-tables.html), Pivot Tables",,"Take the appropriate `subset `of the Instacart data and then use either: `merge`, `crosstab`, `pivot`, or `melt` in order to recreate this visualization using Seaborn:

![Seaborn Instacart Visualization]('https://cdn-images-1.medium.com/max/1600/1*wKfV6OV-_1Ipwrl7AjjSuw.png')",,,,,,,,"Reshape data,Join and Reshape Data",,Data Wrangling and Storytelling,DS - Statistics Fundamentals,,1,1,,2
understand the purpose of feature engineering,,,Read about [Feature Engineering](https://en.wikipedia.org/wiki/Feature_engineering) on Wikipedia,,,,,,,,,,Make features,,Dealing with Data,DS - Statistics Fundamentals,,0,,,0
work with strings in pandas,,,"Read _Python Data Science Handbook_ [Chapter 3.10](https://jakevdp.github.io/PythonDataScienceHandbook/03.10-working-with-strings.html), Vectorized String Operations ",,,,,,,,,,Make features,,Dealing with Data,DS - Statistics Fundamentals,,0,,,0
work with dates and times in pandas,,,"Read _Python Data Science Handbook_ [Chapter 3.11](https://jakevdp.github.io/PythonDataScienceHandbook/03.11-working-with-time-series.html), Working with Time Series",,,,,,,,,,Make features,,Dealing with Data,DS - Statistics Fundamentals,,0,,,0
implement and describe how high-level array functions work down to the memory level,"Arrays are common in every programming language, yet their high-level implementations usually hide a lot of complexity that could cause massive performance costs if the developer is unaware. It's important to understand exactly what's going on with arrays and this lays the groundwork to talk about hash tables.",,"Arrays are the most common and perhaps the simplest data structures. Are they really so simple though? High-level languages like Python, JavaScript, Swift and Java all have built-in ""magic"" that hides the complexity of many array functions. Although the complexity is hidden, you still have to pay the performance costs of that complexity.

For this assignment, you will be implementing high-level array functionality from the ground up. You will construct methods from memory and pointers to create, destroy, read and write arrays. Then, you will write code to add and remove elements from your array. Sounds simple, right?

By the end of this assignment, you will gain much appreciation for the magic of high-level coding languages as well as a deeper understanding of the costs associated with their functionality.",,,e8tSdmh_u_0,http://youtube.com/watch?v=e8tSdmh_u_0,https://www.youtube.com/embed/e8tSdmh_u_0,,,,,Theory of Computation,,Theory of Computation/Hash Tables,Computer Science,,1,,1,2
retrieve custom attributes for use in the custom view,,,,,,,,,,,,,Custom Views,,Android User Interface,Android Development Core,,0,,,0
create custom attributes for the view,,,,,,,,,,,,,Custom Views,,Android User Interface,Android Development Core,,0,,,0
add a XML layout to a custom view,,,,,,,,,,,,,Custom Views,,Android User Interface,Android Development Core,,0,,,0
create simple shapes in canvas,,,,,,,,,,,,,Custom Views,,Android User Interface,Android Development Core,,0,,,0
create and use a basic custom view,,,,,,,,,,,,,Custom Views,,Android User Interface,Android Development Core,,0,,,0
communicate between fragments and activities,,,,,,,,,,,,,Fragments,,Android User Interface,Android Development Core,,0,,,0
work with two fragments on larger screens,,,,,,,,,,,,,Fragments,,Android User Interface,Android Development Core,,0,,,0
show fragments in a dialog window,,,,,,,,,,,,,Fragments,,Android User Interface,Android Development Core,,0,,,0
build and add a fragment programmatically,,,,,,,,,,,,,Fragments,,Android User Interface,Android Development Core,,0,,,0
add a fragment to an activity using XML,,,,,,,,,,,,,Fragments,,Android User Interface,Android Development Core,,0,,,0
write a fragment class,,,,,,,,,,,,,Fragments,,Android User Interface,Android Development Core,,0,,,0
use animated vector drawables in apps,,,,,,,,,,,,,Animated Images,,Android User Interface,Android Development Core,,0,,,0
create animated vector drawables,,,,,,,,,,,,,Animated Images,,Android User Interface,Android Development Core,,0,,,0
work with simple vectors in inkscape,,,,,,,,,,,,,Animated Images,,Android User Interface,Android Development Core,,0,,,0
create an animated drawable object,,,,,,,,,,,,,Animated Images,,Android User Interface,Android Development Core,,0,,,0
use animated gifs in apps,,,,,,,,,,,,,Animated Images,,Android User Interface,Android Development Core,,0,,,0
use shared elements between activities,,,,,,,,,,,,,Layout Animations,,Android User Interface,Android Development Core,,0,,,0
animate transitions between activities,,,,,,,,,,,,,Layout Animations,,Android User Interface,Android Development Core,,0,,,0
animate items in a RecyclerView,,,,,,,,,,,,,Layout Animations,,Android User Interface,Android Development Core,,0,,,0
automatically update layout changes,,,,,,,,,,,,,Layout Animations,,Android User Interface,Android Development Core,,0,,,0
use watchers to show information without modifying source code,,,,,,,,,,,,,Debugging Tools,,Android Code Quality,Android Development Core,,0,,,0
debug a physical device wirelessly on a local network,,,,,,,,,,,,,Debugging Tools,,Android Code Quality,Android Development Core,,0,,,0
use Android Studio’s variables view to inspect the current value of variables,,,,,,,,,,,,,Debugging Tools,,Android Code Quality,Android Development Core,,0,,,0
use the Android Studio debugger’s controls to move through code being debugged,,,,,,,,,,,,,Debugging Tools,,Android Code Quality,Android Development Core,,0,,,0
debug exceptions using an exception breakpoint,,,,,,,,,,,,,Debugging Tools,,Android Code Quality,Android Development Core,,0,,,0
set and manage breakpoints in code,,,,,,,,,,,,,Debugging Tools,,Android Code Quality,Android Development Core,,0,,,0
demonstrate understanding what is to be expected of the services of the Careers team at Lambda school.  ,"It's important that we align expectations of Lambda School staff and students. The Career Services team is a portion of your curriculum that we take very seriously, so having a firm understanding of the services provided will help in gauging your expectations throughout your time here at Lambda School. ",,"### Who Are We? 

 - The Career Services team is comprised of a team of professional Career Coaches here to arm you with the skills needed to secure a job in the tech industry. 

### What is it that we provide?

- We review your LinkedIn, resume and associated artifacts

- We provide feedback during interview prep

- We provide guidance in job offer negotiations

- We hold open office hours every day of the week

- We support you through your job search by leading you through the Lambda Next program


### What is it that we don't provide?

- 24/7 access to Career Coaches

- Guaranteeing or providing you a job

- We will be the hero you need, not the hero you deserve. We are not going to do the hustle and work for you. We'll be your coach and confidante, but you will have to do the task.","Now that we know who the Career Services team is, the services that we provide, and services we don't provide. We are going to a fun exercise together. 

At this time, go ahead and open up Slack. Let's select a Career Coach in Slack and send them a `wave` emoji. ","Now that we have said hi to a Career Coach and reviewed what the Careers team provides and doesn't provide. Now we are going to have you re-state what you've learned. 

- Write a 2-3 sentence paragraph about what the Careers Team provides, naming 2 Career Coaches currently at Lambda. 

- Include one sentence that describes what is not provided. 

- Submit this paragraph to your PM in Slack. ",,,,,,,,,,,,,1,1,,2
can demonstrate understanding of the ownership they have in their job search by accepting and signing the Careers contract,"While the Careers team is here to help support you through your journey, it is important to understand that you will be leading the charge in your own job search. ",,"### What we expect of you during your professional development and job search process

- Create a gmail.com account using the following format: firstname.lastname@gmail.com

- A gmail account is the most accepted email service, and we will be requiring that resumes are created in Google Docs. 

- We expect that you will incorporate feedback and follow instructions as directed from the Career Coaches 

- Adhere to deadlines set by Career Coaches 

- Maintain contact with your assigned Career Coach. At minimum, bi-weekly. 

- Alert your Career Coach on any job offer that you receive

- Remain coding throughout the entire job search process. At minimum, 4 days a week. Any longer stretches will need further explanation. ",,,,,,,,,,,,,,,1,,,1
demonstrate firm understanding of the tech landscape,"We'd like to show what the current landscape is for jobs in tech, and where you fit into that landscape. We'll be going over what to expect at a startup, mid-size, and corporate size company as a new hire. That way you'll know what companies you'd like to apply to when you complete your curriculum. ",,"## What to expect at different size companies

### Startup

-  1-50 employees

- You will have the opportunity to learn by doing in this environment. 

- Tasks need to be completed, and everyone's positions are not clearly defined. Although, there is usually more opportunity for quick advancement. 

- Employees typically wear many hats, and you'll probably be doing more than just what's in your job description and you'll learn many aspects of the company. 

- Be ok not working set hours, or working overtime as these are typically smaller teams working together to quickly complete a task. 

- Startups tend to be smaller teams, more flexible, and a more casual environment. At a tech startup, you'll most likely find a ping pong table, great PTO, and a Coca-Cola machine. 

- Job stability and security is a little more risky at a startup. 

- Startups are typically funded or are bootstrapping. 

- Salaries are usually lower, but you will gain a great amount of varied experience. 

- Personality wise you will need to be a self-starter, adaptable to a fast-paced environment, and willing to juggle many projects at one time. 

- Be prepared for equity and stock options to come up in salary negotiations. 

### Mid-size

-  50-500 employees

- Typically more structured and have processes in place than a startup. More shared responsibility. 

- Mid-size companies typically have better systems in place and benefits offered to their employees. (Health benefits and programs, 401k, time off is granted easier)

- Clear path for promotion and career growth within the company. 

- More mentorship opportunities, a larger range of Junior-Senior positions, and usually a good size team to work with. 

- Reasonable salary, will likely not be offered equity in place of partial salary. 

- A more secure option than a startup. 

- Work culture is dependent on location and speciality. 

### Corporate 

- 500+ employees

- More likely to get lost in the shuffle. You won't be able to make as large of an impact within the company. 

-Salary will most likely be higher, and great employee benefits. 

- Typically have earn and accrue PTO. 

- Hiring process is typically longer for larger companies. 

- Once you have solidified yourself at the company, then opportunities for a flexible schedule or working from home become more available. 

- Environment is very structured, with strict hierarchies. 

- There is a very clear path for promotion, and jobs constantly opening. Opportunities to move to different positions. 

- Larger demographic and more diverse. Lots of varied personal and professional backgrounds. 

- Usually more office politics 

- Great opportunities for mentorship, as there is a big range of experience within the company. 

- Name recognition, a great company name to have on your resume that can help in creating legitimacy. 

- Larger companies are harder to break into. Each company has their own levels of expectations and ideas for the ideal employee. 

## Setting realistic expectations for yourself 

- Your first job will NOT BE YOUR DREAM JOB. It is a stepping stone to the next opportunity!

- You need to be open for a wide range of opportunities. Internships can lead to permanent positions.

-  Are you open to re-location for the right position? What is your personality and what size company best lends to that?

- Being willing to re-locate will open up more doors for your career. 

-  Do research on companies you are interested in. See if you are a good fit and what they expect of their employees. 

- Go into a job with the intent of staying for at least 6+ months. Too many short-term stints will be a red flag for future hiring managers. Exceptions include: specific term contracts, internships/apprenticeships, and freelance. 

- Rejections will happen, but that's part of the journey. Maintain momentum throughout your job search process and you will land at something that is right for you. ","

","- Write a 2-3 sentence paragraph about what matters to you most within a company and why. 

- Is it location, mentorship opportunities, flexibility, autonomy, stability, remote opportunities, health insurance, employee benefits, recognition, etc? 

- Submit this paragraph to your PM. 



",,,,,,,,,,,,Tech Landscape.png (https://dl.airtable.com/.attachments/42a890c489f856d8821ba1bbacbbac84/0a04bb71),1,1,,2
express and explain the intuition and interpretation of Logistic Regression,"A model is only as useful as its predictive value, and getting at that requires knowing how to interpret it. Thankfully logistic regression is fairly straightforward and interpretible (you can actually ""see"" everything, as compared to e.g. neural networks) - but there's still a few tricks to it that are different than linear regression.","There are other mathematical distinctions to be made, but it is suggested to focus on coefficient interpretation as the single most important difference. The rest can be described as optional/stretch goals for the more mathematically inclined.","The main ""twist"" that logistic regression introduces is that, due to the ""squishification"", its coefficients are no longer linear. This means you can't just look at the output table and immediately intuit direct predictions - you can see direction and general magnitude, but specific predictions require specific calculation.

Like linear regression, logistic regression allows you to calculate coefficients, error, and overall goodness of fit. Depending on which specific measure you're calculating, interpretation may be straightforward - many [pseudo R-squared statistics](https://stats.idre.ucla.edu/other/mult-pkg/faq/general/faq-what-are-pseudo-r-squareds/) have similar basic interpretation as the ""real"" OLS R-squared.

The major difference for logistic regression is the coefficients themselves, as they are what the logistic function was applied to. This function maps values from $(-\infty, +\infty)$ to $(0, 1)$ - which means the coefficients are expressing not a linear weight but one scaled by the logistic.

To generate a prediction, we can't simply calculate the dot product (the sum of products) of the values we wish to predict and the coefficients from the model, as we do in the linear case. Instead we must first also transform the values, passing them through the same logistic function, and then calculating the dot product. But still, the same linear algebra as OLS generally works out.

Take a moment and appreciate what is going on - we're dealing with fundamentally non-linear situations. Non-linearity is required to do something like map the real continuum down to the unit interval - the logistic function has infinite asymptotes towards 1 (as it approaches positive infinity) and 0 (as it approaches negative infinity).

But despite this non-linear step, the rest of it - based on *linear* algebra - holds. We can rely on the same general framework as we did with linear regresion, and indeed gradient descent and related approaches as well. Despite the ""squishification"", a similar assumption underlies these approaches - that some single line/curve/plane/hyperplane can separate the classes and model the data. This is why logistic regression is sometimes referred to as being a member of the *generalized linear models* family, or GLM.","Consider a situation where you want to use regression to predict something, but instead of predicting a continuous value (e.g. income, age) you want to predict something binary (gender, major political party affiliation). You can code such things as 0/1, and in principle feed the vectors and matrices into a linear regression as you already know (i.e. solve for $x$ in $Ax = b$.


But you'll run into a problem - let's say you're predicting gender (0 male, 1 female), and your coefficient for age is some positive value (e.g. 0.00023). This does tell you something true - age is positively correlated with being female (in other words, females in your dataset have higher life expectancy). But it can also result in fairly silly predictions - beyond a certain age, you will output a value *above* 1, as the coefficient is linear and your predictions will increase accordingly.

It doesn't make any sense to predict something above 1 for a binary variable - similarly, if you wanted to model approval ratings, it wouldn't make sense to predict above 100% (or below 0%). But linear regression has nothing to prevent this, so is inappropriate for modeling these situations.

Logistic regression addresses this by transforming the dependent variable. The name ""logistic"" refers to the function used for this transformation:
<math>f(x) = \frac{L}{1 + e^{-k(x-x_0)}}</math>

![Plot of logistic function](https://upload.wikimedia.org/wikipedia/commons/8/88/Logistic-curve.svg)

This function is also often referred to as ""sigmoid"", due to its smooth ""s"" shape. You may notice this function looks an awful lot like a CDF (cumulative distribution function) - in fact, that is exactly what it is (the CDF of the [logistic distribution](https://en.wikipedia.org/wiki/Logistic_distribution)), and there are alternatives to logistic regression such as probit (probability unit), which uses the normal CDF instead.
If you enjoy diving into the math deeper you are encouraged to do so, but the main intuition to get from looking at the above - the logistic function ""squishifies"" its input. It does so smoothly (so the various nice characteristics of OLS and gradient descent still work), but gives you a strong guarantee - the output *will* be contained in the unit interval.

This ""squishification"" allows us to solve problems like those discussed above (predicting gender, click-through, etc.), and know that our predictions will always be appropriate. And, since it is a fairly simple extension of basic linear techniques, logistic regression is a great baseline model - easy to get started with, scales fantastically, and often works well enough that you don't need to go fancier.

For example, much of the online ads market still depends on logistic regression to predict the effectiveness (likelihood of click) of an ad, impacting its placement and price. More sophisticated techniques exist, and can be appropriate, but when you're fitting millions of models with many thousands of parameters each, logistic regression is a good way to go.",Pair with another student and discuss in your own words - how should logistic regression be interpreted? What about it is similar to linear regression? What is different?,pREaWFli-5I,http://youtube.com/watch?v=pREaWFli-5I,https://www.youtube.com/embed/pREaWFli-5I,,Reasons to learn Logistic Regression,Maximum likelihood estimation,,Logistic Regression,,"Advanced Regression, Classification & Validation",,,1,1,1,3
use sklearn.linear_model.LogisticRegression to fit and interpret Logistic Regression models,"Data Science is the union of math and code - specifically, we should use a mathematical understanding to inform a proper use of code.

Math clearly matters - it is foundational. But in some ways, the code matters more. It's what we actually deliver or build, and so working code is more important than a valid proof. We should still of course aim at mathematical validity - but it can be more intuitionistic.

Here, we'll apply our intuition to the task of writing working code. We will not code logistic regression from scratch - it is more valuable to learn how to use, and eventually read, ""battle-tested"" machine learning code.","sklearn.linear_model.LogisticRegression (what we use), despite being called logistic, naturally supports multinomial classification. This is worth emphasizing, and overall can be a nice story about how sklearn (and many modern libraries) provide nice ""intuitive"" APIs, but that behind the magic there may be meaningful distinctions.

scikit-learn also has a range of solvers that are worth trying in different situations (data size etc.). The details aren't really worth diving into, but just having people be *aware* of what's available is important.","Now you know how logistic regression works and is interpreted - how do you actually run it? There's many packages out there, but scikit-learn is a good and widely-used Python library for logistic and many other predictive models. Let's dive in!","Following is a minimal logistic regression, run using the famous Iris dataset:

```python
>>> from sklearn.datasets import load_iris
>>> from sklearn.linear_model import LogisticRegression
>>> X, y = load_iris(return_X_y=True)
>>> clf = LogisticRegression(random_state=0, solver='lbfgs',
... multi_class='multinomial').fit(X, y)
>>> clf.predict(X[:2, :])
array([0, 0])
>>> clf.predict_proba(X[:2, :])
array([[9.8...e-01, 1.8...e-02, 1.4...e-08],
[9.7...e-01, 2.8...e-02, ...e-08]])
>>> clf.score(X, y)
0.97...
```

What's happening here? Take a moment and read the code and see if you can build your own intuition.

Overall, what this code is doing is using logistic regression to build a multinomial classifier on the [Iris dataset](https://archive.ics.uci.edu/ml/datasets/Iris/). There are three classes, so the underlying math is not a single logistic ""squishification"", but instead multiple - calculating the probabilities of something being one class over another.

The [LBFGS solver](https://en.wikipedia.org/wiki/Limited-memory_BFGS) is being used - the specific solver is often something you can experiment and research as appropriate to your situation. Then, both predictions (which output class labels) and probability predictions (which output lists of probabilities of being each class) are output for the first two observations, and an overall score (which can be interpreted similarly to $R^2$ - as a measure of the overall fit of the model) is reported.

In this case, the model fits quite well, and both of the first two observations are predicted to belong to class 0 (by a large margin considering the probabilities).","Find a different dataset in sklearn appropriate for logistic regression, and write code to run and interpret a logistic regression model.",bDQgVt4hFgY,http://youtube.com/watch?v=bDQgVt4hFgY,https://www.youtube.com/embed/bDQgVt4hFgY,,"sklearn.linear_model.LogisticRegression,Logistic Regression Module Notebook","Pseudo-R^2 statistics,scikit-learn logistic regression user guide",,Logistic Regression,,"Advanced Regression, Classification & Validation",,,1,1,1,3
express and explain the intuition and interpretation of Survival Analysis techniques,"As with the other models this week, survival analysis is a technique intended to address situations where traditional OLS/linear models fall short. Specifically we want to model ""time until failure"" - but only *some* of our observations have actually failed. Observations that haven't (yet) failed are called ""censored"", and to model them we must understand the idea of *hazard* and the hazard function.","The lecture notebook has multiple datasets/examples - may not be possible to cover them all live (perhaps better to focus on live-coding heart attack survival), but they're good for studying.","What does it mean to ""survive""? In the context of survival analysis, it actually means ""to persist without a certain event occurring."" But, generally, the event being modeled is *eventually* inevitable - a patient may survive 5 or 10 or more years after a treatment, and that may mean success of the treatment. But the event (in this case, death) is eventually inevitable - [this too shall pass](https://en.wikipedia.org/wiki/This_too_shall_pass).

But not all survival analysis is fixated with dark outcomes - math is math, and an event can be neutral or even positive. With our Async program and PM contracts, we could model ""time to graduation"" (a happy event) using survival techniques.

There exist a variety of approaches (covered in the lecture notebook and beyond), but the common intuition - hazard (instantaneous likelihood of failure) and survival (backwards cumulative hazard).

![Different hazard functions](https://upload.wikimedia.org/wikipedia/commons/2/25/Compsyseng17_04.jpg)
Above are three common paradigms of hazard functions. Increasing and decreasing failure rate are fairly intuitive - the ""bathtub"" shaped is perhaps the most surprising, but actually models many real-world situations. In fact, life expectancy in general, and most threats to it, assume this shape.

What the ""bathtub"" means is that - threats are highest at youth (e.g. infant mortality), but then decrease and stabilize at maturity, only to eventually re-emerge in old age. Many diseases primarily threaten children and elderly, and middle aged people are also more robust to physical trauma.

The ""bathtub"" is also suitable for many non-human situations - often with reliability analysis, mechanical parts either fail early (due to manufacturing defects), or they survive and have a relatively long lifetime to eventually fail out of age and use.

Since the hazard function can be treated as a probability density function, it makes sense to think about the corresponding cumulative distribution function (CDF). But because we're modeling time to failure, it's actually more interesting to look at the CDF backwards - this is called the complementary cumulative distribution function.

In survival analysis there's a special name for it - the survival function - and it gives the probability that the object being studied will survive beyond a given time.

![4 survival functions](https://upload.wikimedia.org/wikipedia/commons/e/e0/Four_survival_functions.svg)

$S(t) = Pr(T > t)$
As you can see they all start at 1 for time 0 - at the beginning, all things are alive. Then they all move down over time to eventually approach and converge to 0. The different shapes reflect the average/expected retention of a population subject to this function over time, and as such this is a particularly useful visualization when modeling overall retention/churn situations.","Basic survival analysis can be done simply by observing the empirical survival over time. To create a predictive regression, we will use the [Cox proportional hazards model](https://en.wikipedia.org/wiki/Proportional_hazards_model), which represents the baseline hazard function and then effect parameters (effectively coefficients) to explain how it changes in response to explanatory variables.

Proportional hazards relates the variables to the hazard in a basic multiplicative fashion, and in its simplest these stationary coefficients essentially mean that the risk added by e.g. a certain variable is always the same regardless of when during the lifetime it is introduced or increased. While clearly a simplifying assumption (and time-varying predictors exist as an extension of this approach), it is nonetheless an effective approach to many problems in this domain.

The other challenge of survival analysis is dealing with censoring - missing data where the event is not observed due to the study/data collection terminating while the observation is still surviving. This is called right-censoring - left-censoring can also occur (where an observation is studied but without a definitive ""birth""/start date), or both at the same time. There can also be interval censoring - cases where the event happened, but the precise time is not known and instead we just know it happened in some interval. And lastly there can be truncation - situations where the full lifetime of a potential observation (birth, life, and death) occurs before the study (""predeceased"", for instance a child who dies before starting school in a study of child survival using data from school attendance).","Think of a real-life survival analysis situation, and (on real paper!) sketch plausible hazard and survival functions and list what as many of the above ""jargon"" terms correspond to (in your chosen situation) as you are able. Stretch goal - share with a classmate, and critique/discuss theirs!",1Ib54A15X4w,http://youtube.com/watch?v=1Ib54A15X4w,https://www.youtube.com/embed/1Ib54A15X4w,,,"One in ten rule,Survival Analysis (Wikipedia)",,Survival Analysis,,Advanced Regression,,,1,1,1,3
use the Python package lifelines to fit and interpret Survival models,"Now it's time to move from math to code, and actually fit and interpret survival analysis models!","Again lots in the lecture notebook for this. Also if asked, lifelines is the leading Python package, but e.g. R has a big biostats community and top-notch survival analysis tools.","Survival analysis is an area of active research and development, and the [lifelines](https://lifelines.readthedocs.io/en/latest/) package is a modern focused implementation. It is built on Pandas and provides internal plotting methods - plots of the hazard and survival functions are often one of the best ways to present survival analysis results.

lifelines also supports a variety of underlying mathematical models and techniques - you are encouraged to explore these in more depth. R has [high quality survival analysis tools](https://cran.r-project.org/web/views/Survival.html) as well, and (as it is favored amongst biostatisticians) is often the place where new algorithms are first implemented.","See the lecture notebook for multiple worked-through examples. Guidance on interpretation:

`coef`: usually denoted with $b$, the coefficient

`exp(coef)`: $e^{b}$, equals the estimate of the hazard ratio. Here, we can say that participants who received treatment 1 had ~4.5 times the hazard risk (risk of death) compared to those who received treatment 2. And for every unit the `logWBC` increased, the hazard risk increased >5 times.

`se(coef)`: standard error of the coefficient (used for calculating z-score and therefore p-value)

`z`: z-score $\frac{b}{se(b)}$

`p`: p-value. derived from z-score. describes statistical significance. more specifically, it is the likelihood that the variable has no effect on the outcome

`log(p)`: natural logarithm of p-value... used to more easily see differences in significance

`lower/upper 0.95`: confidence levels for the coefficients. in this case, we can confidently say that the coefficient for `logWBC` is somewhere _between_ 1.02 and 2.34.

`Signif. codes`: easily, visually identify significant variables! The more stars, the more solid (simply based on p-value). Here `logWBC` is highly significant, `Rx` is significant, and `sex` has no statistical significance

`Concordance`: a measure of predictive power for classification problems (here looking at the `status` column. a value from 0 to 1 where values above 0.6 are considered good fits (the higher the better)

`Likelihood ratio (LR) test`: this is a measure of how likely it is that the coefficients are not zero, and can compare the goodness of fit of a model versus an alternative null model. Is often actually calculated as a logarithm, resulting in the log-likelihood ratio statistic and allowing the distribution of the test statistic to be approximated with [Wilks' theorem](https://en.wikipedia.org/wiki/Wilks%27_theorem).","Work through one of the [lifelines examples](https://lifelines.readthedocs.io/en/latest/Examples.html), and then adapt it to different data (either data provided or assigned in the lecture notebook, or other appropriate data you find yourself).",WexU7r7VI3E,http://youtube.com/watch?v=WexU7r7VI3E,https://www.youtube.com/embed/WexU7r7VI3E,,,,,Survival Analysis,,Advanced Regression,,,1,1,1,3
express and explain the intuition and interpretation of Quantile Regression,"Quantile regression allows us to optimize for something other than the mean - by picking any specific quantile threshold, we can both mitigate outliers and tune our false positive/negative tradeoff. We can also deal with situations where the problem really does call for more of a quantile cutoff - safe birth weight for a baby, skill level for top competitive eSports players, etc.","Less than the other modules this week, none of these examples obviously scream ""linear regression can't do this, that's why we need this other tool!"" So, roll with that and admit that it's not exactly as clear-cut as e.g. logistic regression, but do be firm that there *is* value and point to the Shopify example (linked as a preclass link in this module) as further support. Also, the lecture notebook has lots of little tricks that are nice to show (selecting numeric features, programmatically generating formulae, running and comparing a bunch of models, etc.).","To understand quantile regression, first be sure to understand [quantile](https://en.wikipedia.org/wiki/Quantile) - a generalization of cutting a probability distribution into intervals. A cut at any given percent is a percentile, the most common cut being the median (50th percentile). Quartiles (25th and 75th percentiles along with the median) are also common, and used in box plots.

Quantile regression is then simply regression, like ordinary least squares, but where instead of minimizing the sum of square errors you minimize the sum of absolute error from the chosen quantile cut point. If `q=0.50` (the median), then you are doing a special case of quantile regression - least absolute deviation (since the median is the central quantile).

Why choose any other quantile? True that you'll inevitably have more error, but by tuning `q` you can choose a threshold appropriate for balancing false positives and false negatives specific to your problem. You can also model and estimate specific thresholds, such as the minimum healthy baby birth weight as assigned in the lecture notebook.","Consider these results of a quantile regression:

```
                         QuantReg Regression Results                          
==============================================================================
Dep. Variable:                   pm25   Pseudo R-squared:               0.2455
Model:                       QuantReg   Bandwidth:                     0.09841
Method:                 Least Squares   Sparsity:                        2.767
Date:                Mon, 21 Jan 2019   No. Observations:                41757
Time:                        00:41:27   Df Residuals:                    41745
                                        Df Model:                           11
==============================================================================
                 coef    std err          t      P>|t|      [0.025      0.975]
------------------------------------------------------------------------------
Intercept   4.016e-06   2.98e-07     13.488      0.000    3.43e-06     4.6e-06
No         -2.768e-06    4.6e-07     -6.017      0.000   -3.67e-06   -1.87e-06
year           0.0108      0.001     19.537      0.000       0.010       0.012
month         -0.0336      0.002    -19.522      0.000      -0.037      -0.030
day            0.0070      0.001     10.518      0.000       0.006       0.008
hour           0.0224      0.001     24.385      0.000       0.021       0.024
DEWP           0.0692      0.001     88.783      0.000       0.068       0.071
TEMP          -0.0772      0.001    -76.819      0.000      -0.079      -0.075
PRES          -0.0170      0.001    -15.557      0.000      -0.019      -0.015
Iws           -0.0038      0.000    -34.319      0.000      -0.004      -0.004
Is            -0.0062      0.008     -0.818      0.413      -0.021       0.009
Ir            -0.1055      0.004    -28.951      0.000      -0.113      -0.098
==============================================================================
```

To interpret, you can generally understand it as you would a linear regression. Instead of a proper R^2 there is a pseudo-R^2, meaning it is calculated via a different technique but still has similar interpretation (ranges from 0 to 1, larger -> more variation being captured).

Each feature has a coefficient and corresponding hypothesis test with t-statistic and p-value. The coefficients in fact even still have the same linear interpretation - for every ""unit"" the independent variable changes, the coefficient is the weight of the corresponding change in the dependent variable. The quantile being fit to impacts the way these are calculated, but does *not* otherwise change the interpretation.","Think of a situation where quantile regression may be an appropriate choice. Discuss with a classmate - try to take a critical perspective of their example, and defend your reasoning!",kSx_tMzJZrg,http://youtube.com/watch?v=kSx_tMzJZrg,https://www.youtube.com/embed/kSx_tMzJZrg,,Getting Started with Quantile Regression,"How Shopify uses Quantile Regression,Quantile Regression versus other techniques",,Quantile Regression,,Advanced Regression,,,1,1,1,3
use the StatsModel Python library to fit and interpret Quantile Regression models,"Quantile Regression is a somewhat less common model, but it is provided by the StatsModel Python library. This library is clearly inspired by R, and borrows various syntax and API decisions from it.","It is very likely R will come up with quantile regression (many of the sources, including ones linked from the TK, are in R). That is OK - strong students can even explore it (add R Studio via Anaconda or check out https://rstudio.cloud/). But overall still emphasize that Python is perfectly capable, and overall more flexible/employable.","StatsModel uses a slightly different paradigm than scikit-learn. As with scikit-learn you generate a model object that then exposes a `.fit()` method to actually train and predict.

However, scikit-learn models generally take data (as an `X` matrix and `y` array) as arguments to `.fit()`, while StatsModel has its model specified as a formula given to the model object at instantiation. The formula is a string of the form:

`y ~ x1 + x2 + ...`

You can specify polynomial and interaction terms flexibly, e.g.:

`y ~ x1 + (x1 * x1) + x2 + x3 + (x2 * x3)`

This presents nicely for relatively short formulae, and reminds us that we are essentially fitting a function. It is however a bit cumbersome, especially for long formulae, and the lecture notebook shows how a formula string can be constructed using Python string methods.","Once you have a formula expressing your desired model, you can fit a quantile regression as follows:

```
import statsmodels.formula.api as smf
quant_mod = smf.quantreg('y ~ x1 + x2', data=df)
quant_reg = quant_mod.fit(q=.5)
quant_reg.summary()  # ""summary"" is another very R-thing
```

Pay special attention to the `q` parameter - this specifies the targeted quantile cutoff. `0.5` is the median, and the resulting model is a special case known as ""least absolute deviation.""

You should choose `q` based on your problem domain (relative cost of false positive/negative, most important part/threshold of the D.V. distribution, etc.), and can also try a parameter search of a variety of `q` values (fit a model for each, compare error/pseudo-$R^2$, etc.).","For any fitted quantile regression model/data (i.e. from the lecture notebook or your pick), create plots or tables showing how the error, pseudo-R^2, and possibly other aspects vary as the `q` parameter is varied across all percentiles (0.01 to 0.99).",wRoannLrajE,http://youtube.com/watch?v=wRoannLrajE,https://www.youtube.com/embed/wRoannLrajE,,Quantile Regression in Python with statsmodels,,,Quantile Regression,,Advanced Regression,,,1,1,1,3
express and explain the intuition and interpretation of Ridge Regression,"What does it mean to ""regularize""? Is it always a good thing? How does it change fit, predictive power, and generalizability? Regularization in general, and ridge regression in particular, is a useful tool, but as with all tools it has its place.","Focus on ridge, but (especially if asked) acknowledge lasso and other techniques, and L1/L2.","Data science depends on math, and math is generally focused on situations where:

1. a solution exists,
2. the solution is unique,
3. the solution's behavior changes continuously with the initial conditions.

These are known as [well-posed problems](https://en.wikipedia.org/wiki/Well-posed_problem), and are the sorts of assumptions so core in traditional techniques that it is easy to forget about them. But they do matter, as there can be exceptions:

1. no solution - e.g. no $x$ such that $Ax = b$
2. multiple solutions - e.g. several $x_1, x_2, ...$ such that $Ax = b$
3. ""chaotic"" systems - situations where small changes in initial conditions interact and reverberate in essentially unpredictable ways - for instance, the difficulty in longterm predictions of weather (N.B. not the same thing as longterm predictions of *climate*)","Problems suffering from the above are called ill-posed problems. Relating to linear algebra and systems of equations, the only truly well-posed problems are those with a single unique solution.

![Intersecting lines](https://upload.wikimedia.org/wikipedia/commons/c/c0/Intersecting_Lines.svg)

Think for a moment - what would the above plot look like if there was no solution? If there were multiple solutions? And how would that generalize to higher dimensions?

A lot of what you covered with linear regression was about getting matrices into the right shape for them to be solvable in this sense. But some matrices just won't submit to this, and other problems may technically ""fit"" linear regression but still be violating the above assumptions in subtle ways.

[Overfitting](https://en.wikipedia.org/wiki/Overfitting) is in some ways a special case of this - an overfit model uses more features/parameters than is ""justified"" by the data (essentially by the *dimensionality* of the data, as measured by $n$ the number of observations). As the number of features approaches the number of observations, linear regression still ""works"", but it starts giving fairly perverse results. In particular, it results in a model that fails to *generalize* - and so the core goal of prediction and explanatory power is undermined.

How is this related to well and ill-posed problems? It's not clearly a no solution or multiple solution case, but it does fall in the third category - overfitting results in fitting to the ""noise"" in the data, which means the particulars of one random sample or another (different initial conditions )will result in dramatically different models.


## Stop and think - what are ways to address these issues?

...

### What can we do?

- Use fewer features - sure, but it can be a lot of work to figure out *which* features, and (in cases like this) there may not be any good reason to really favor some features over another.
- Get more data! This is actually a pretty good approach in tech, since apps generate lots of data all the time (and we made this situation by artificially constraining our data). But for case studies, existing data, etc. it won't work.
- **Regularize!**

## Regularization just means ""add bias""

OK, there's a bit more to it than that. But that's the core intuition - the problem is the model working ""too well"", so fix it by making it harder for the model!

It may sound strange - a technique that is purposefully ""worse"" - but in certain situations, it can really get results.

What's bias? In the context of statistics and machine learning, bias is when a predictive model fails to identify relationships between features and the output. In a word, bias is *underfitting*.

We want to add bias to the model because of the [bias-variance tradeoff](https://en.wikipedia.org/wiki/Bias%E2%80%93variance_tradeoff) - variance is the sensitivity of a model to the random noise in its training data (i.e. *overfitting*), and bias and variance are naturally (inversely) related. Increasing one will always decrease the other, with regards to the overall generalization error (predictive accuracy on unseen data).

Visually, the result looks like this:

![Regularization example plot](https://upload.wikimedia.org/wikipedia/commons/0/02/Regularization.svg)

The blue line is overfit, using more dimensions than are needed to explain the data and so much of the movement is based on noise and won't generalize well. The green line still fits the data, but is less susceptible to the noise - depending on how exactly we parameterize ""noise"" we may throw out actual correlation, but if we balance it right we keep that signal and greatly improve generalizability.

### Look carefully at the above plot and think of ways you can quantify the difference between the blue and green lines...

One way to characterize the green line is that it has an average/overall slope much smaller (in terms of magnitude) than the blue line. The coefficients of the function defining it must, overall, be smaller. Regularization formalizes this by letting us calculate a penalty for the overall slope of our model.

## What's the intuition? What are we doing?

The `alpha` parameter corresponds to the weight being given to the extra penalty being calculated by [Tikhonov regularization](https://en.wikipedia.org/wiki/Tikhonov_regularization) (this parameter is sometimes referred to as $\lambda$ in the context of ridge regression).

Normal linear regression (OLS) minimizes the **sum of square error of the residuals**.

Ridge regression minimizes the **sum of square error of the residuals** *AND* **the squared slope of the fit model, times the alpha parameter**.

This is why the MSE for the first model in the for loop (`alpha=0`) is the same as the MSE for linear regression - it's the same model!

As `alpha` is increased, we give more and more penalty to a steep slope. In two or three dimensions this is fairly easy to visualize - beyond, think of it as penalizing coefficient size. Each coefficient represents the slope of an individual dimension (feature) of the model, so ridge regression is just squaring and summing those.

So while `alpha=0` reduces to OLS, as `alpha` approaches infinity eventually the penalty gets so extreme that the model will always output every coefficient as 0 (any non-zero coefficient resulting in a penalty that outweighs whatever improvement in the residuals), and just fit a flat model with intercept at the mean of the dependent variable.

Of course, what we want is somewhere in-between these extremes. Intuitively, what we want to do is apply an appropriate ""cost"" or penalty to the model for fitting parameters, much like adjusted $R^2$ takes into account the cost of adding complexity to a model. What exactly is an appropriate penalty will vary, so you'll have to put on your model comparison hat and give it a go!

PS - scaling the data helps, as that way this cost is consistent and can be added uniformly across features, and it is simpler to search for the `alpha` parameter.","Implement your own function to calculate the full cost that ridge regression is optimizing (the sum of squared residuals + `alpha` times the sum of squared coefficients) - this alone won't fit a model, but you can use it to verify cost of trained models and that the coefficients from the equivalent OLS (without regularization) may have a higher cost.",XK5jkedy17w,http://youtube.com/watch?v=XK5jkedy17w,https://www.youtube.com/embed/XK5jkedy17w,,,,,Regularization & Survival Analysis,,"Advanced Regression, Practicing & Understanding Predictive Modeling",,,1,1,1,3
use sklearn.linear_model.Ridge to fit and interpret Ridge Regression models,"As with the other modules this week, understanding is just step one - data scientists must also apply. How do we write code to fit and interpret Ridge regression?","The lecture notebook has examples and working code, and is better to work from.","Good news! Ridge regression, like quantile regression, is a fairly direct extension of linear regression. So interpretation is direct and straightforward - a coefficient corresponds to the weight of change predicted in the dependent variable based on a unit change in the independent variable.","There are, however, a few things to keep in mind:

- Just because interpretation is the same doesn't mean *fitting* is the same - the weight given to the regularization impacts what the model is optimizing for, and so in a sense (similar to quantile) what the overall ""meaning"" of it is.
- Additionally, don't leap to interpret until you've spent some time validating your choice of parameterization (how much you weigh regularization, i.e. `alpha` or $\lambda$ depending on context). You may in fact be making things worse!
- Since you should scale your data with ridge regression, the meaning of ""unit"" is scaled as well - this is not a bad thing! In fact it makes them more consistent, but is something to remember as different from a normal unscaled regression.","Explore the extension links - try to use RidgeCV (cross-validation with Ridge regression) and RidgeClassifier (a classifier, like logistic).",kQ9Wreh6rMc,http://youtube.com/watch?v=kQ9Wreh6rMc,https://www.youtube.com/embed/kQ9Wreh6rMc,,sklearn.linear_model.Ridge,"Ordinary Least Squares and Ridge Regression Variance with scikit-learn,sklearn.linear_model.RidgeClassifier,sklearn.linear_model.RidgeCV",,Regularization & Survival Analysis,,"Advanced Regression, Practicing & Understanding Predictive Modeling",,,1,1,1,3
demonstrate understanding and recall the top Resume Dos and Don’ts.,,,"## What is a resume and how do hiring managers use it?  
- A one-page document that summarizes a job seekers qualifications for the job they are interested in. 
- Hiring managers use it to screen potential applicants, and see what value the applicants can bring to their company. 


# Resume Do's and Don'ts 

## Do's 

- **Write about your achievements** 

	 Too often, candidates like to include information about the company itself in their work experience section of the resume. This is simply not necessary, because your future employer doesn’t care about what the other company did. What they do care about is what you did. When listing your work experience, leave out the summary of the company and spend that precious white space on your page talking about your own accomplishments and skills gained instead.  


	When creating your professional experience summaries, try to use real data and numbers. This is easier for a hiring manager to digest because you are offering verifiable information.  


	Try to begin every sentence or bullet point with a powerful verb. A few examples of this include:  

	“**Mentored** a team of 10 developers.”  
	“**Developed** RESTful APIs in Python.""
	“**Spearheaded** web UI application.”

- **Relevant personal details** 
	Do you code in your free time? Did you teach yourself any advanced software? This is all very impressive and relevant on your resume. Don’t shy away from including a little personality on your resume — it’ll make you stand out more.

	That being said, make sure it’s relevant. Your potential future employer probably doesn’t care if you are an ultra-marathon runner or a world-class chess player, but just might be interested if you coded a chess program online!


- **Leave out certain details**  
	Don’t include your complete work history, especially if it isn’t relevant. The most recent three to five jobs is fine, or stick within the last ten years of employment history.

	If you happen to have an irrelevant job in the middle of the pool of jobs you’re hoping to list, don’t leave it out. Gaps in your job history look worse than a job that doesn’t contribute to the position in which you are applying.

	Don’t include links to your social media if there is absolutely anything on there that you’d be embarrassed for an employer to see. You should also refrain from including your Twitter handle if it has nothing to do with your intended field of work. Some things are best kept personal.

- **Spellcheck**  
Spelling and grammatical errors in your resume are an indicator of either a candidate’s lack of professionalism or a lack of attention to detail. If resumes are poorly crafted and include spelling errors, it will be an easy rejection from the recruiter. Give prospective employers a positive first impression of your work, not a reason to throw out your resume before giving you a chance.

	One way to avoid having errors is to use spell check AND have a friend, colleague or career coach review the resume before submitting to a prospective employer. It’s a good idea to ensure each word has the intended meaning you believe it does before submitting your resume.

- **Use keywords** 
Many companies utilize HR Software to automatically screen resumes, they use algorithms trained to detect the presence of keywords related to the job requirements. If these keywords aren’t present on your resume, you won’t pass the filter and will be rejected before a human looks at your portfolio.

## Don'ts 

- **Don't get too technical** 
Technical terms, sales and marketing slang, and acronyms that are commonly used at one company may be like a foreign language to recruiters or hiring managers at other companies. Make your resume universally understood by using industry-recognized terminology and explaining anything that recruiters might find confusing.

- **Using a less-than-professional email address**
	It’s best to use a professional gmail address with some combination of your first name and last name. You should not be applying to tech industry jobs with any of the following: hotmail.com, aol.com, yahoo.com, and no nicknames or gamer tags with an @gmail.com ending. 

	If you create a new professional email address, you need to check it regularly.

	The best possible email address is firstname.lastname@gmail.com 

- **Writing in third person or using personal pronouns**
	Resumes have their own specific set of language rules to follow. This includes avoiding personal pronouns, which will make the resume sound too informal. You want to sound as professional as possible when crafting the language used in your resume. 

	For example, instead of saying, “I managed a team of ten students” eliminate the pronoun altogether so that it says, “Managed a team of ten students.”

- **Providing references**
	You do not need to provide references initially. If they want them they will ask for them. If you have people that can write recommendations for you have them go and add them onto your LinkedIn profile. It is great to be able to read those when you are a recruiter looking at someone's LinkedIn page.

- **Lying**
Your resume should provide hiring managers with a strong preview of not only what you can do, but also of who you are. The last impression you want to leave is one that shows that you have low integrity, poor character or indicates that you make poor judgement calls. Lying on your resume exposes you to all of these pitfalls and sends the message that you are untrustworthy. 

	Answer honestly at all times even when responding to difficult questions. During your interview prep, do your best to have answers prepared for the most difficult anticipated questions. Be ready for “curve ball” questions with prepared answers that are clear and truthful. 

- **An objective/mission statement**
	Employers know you want the job if you are applying to it and have properly tailored your resume. An objective uses up valuable space on your resume that could otherwise be used to add additional selling points or bullet points, so skip it.

	The words ""I am seeking an opportunity.."" should not appear on your resume. If you have pertinent information you'd like to get across to the hiring manager, then consider writing a cover letter. 

- **A photo of yourself**
Attaching a photo of yourself to your resume will only invite employers to potentially discriminate against you. Information that would be illegal for them to ask, such as race, gender, or age, can be approximated through the inclusion of a photograph. Don’t put a photo on your resume.

- **Salary information**
Some employers will use your compensation history to anchor the discussion around the salary they will offer you. If you’re switching careers, this information isn’t relevant and will only be used to suppress your new wage. In some states, it is illegal to ask potential employees about compensation history and there is no reason at all to provide this voluntarily.",,"Start piecing together the first draft of your resume based on the recommendations we covered today. 

It's ok if this is a very rough draft, it's just a starting point for the next step. ",,,,,,,,Resume,,Resume,Career Readiness,,0,1,,1
create their own resume according to specific guidelines,,,"Now that you know what the overarching do's and don'ts are for a resume. Let's go over the contents of a resume, what it should look like visually, and how to create one for a specific audience. 

## Content 

- **Name and Title**
*Example:* Ryan Holdaway, Senior Software Engineer 

- **Contact information**
	- Email Address  
	- Phone Number  
	- City / State  
	- Github  
	- Linkedin link  
	- Portfolio website  
	- Use a name that is consistent across your application, professional documents, and professional profiles.

- **Projects**
	- At least 2 projects need to be on your resume 
	- Can include up to 4 projects 
	- Project Name
	- Short explanation about the function of your project
	- How you built out the projects / contribution
	- Technologies used
	- Deployed link or Github repo or HackHive link

- **Skills**
	- List your technical skills (Javascript, MongoDB, Express, React, Redux, Node, Python, Django, Jest, CSS, HTML, C, etc)
	-  Capitalize technologies listed and make sure to capitalize the correct letters, such as Mongo**DB**
	- When choosing a design/format, *never* rate your skills with a pie or chart graph
	- Although, when listing your skills, list the ones you feel most confident at the top of the list. 
	- Keep your resume skills section relevant to the job you are applying for. If you are applying to a React specific developer job, then React should be at the top of your list. 
	- Make sure to only include skills that you feel confident speaking about or demonstrating in an interview.

- **Experience**
	- Job 
	- Title 
	- Date
	- Company Name

	-  For your bullet points take some time to think about accomplishments you had at  this job. If you can use numbers to talk about accomplishments (increased sales by x percent)
	- Although your past job may not have been technical there is always something you can pull from it that can help make you a better employee/developer.
	- Only need 2 maybe 3 bullet points. If you have additional information you would like to put you can put that on Linkedin.

- **Education/Relevant Training**
	-   You might call this section Education or Relevant Training depending on what you have to include in it.

	-   List your Lambda education at the top (reverse chronological order).

	-   Provide additional context for your Lambda training by covering a few highlights of the curriculum and/or linking to the curriculum/website.

	-   List all other degrees obtained.

	-   If you spent time working towards a degree (but did not obtain one) and not including it would leave an unexplained gap on your resume, you should include it, but make it clear you didn’t obtain a degree.

	-   If you have the space and it’s relevant, you can include other courses or certifications here as well.

- **Optional: Community Involvement** 
	- Hackathons, Tech related events, conference or related presentations, participation in related organizations, volunteering

## Format & Design 

- You will need to include all of the content above, but you can create your own format. We do not want all Lambda students to have the same exact format and design, because you are all unique students! 

- Make sure to save your resume in a PDF format, and label it as FirstNameLastName.PDF

- While you are free to choose your own format, it still needs to be professional. Keep your audience in mind when creating/choosing a format. 

- Consistency in formatting is the **MOST** important thing.
	- Text needs to be **aligned**

	 - Use the same font throughout, no adding multiple fonts

	 - Same styling throughout. 

	 - The smallest font size is 10pt, but legibility should always be the most important
	 - Same margin sizing throughout 

	- No paragraphs! Use bullet points to divide up large text blocks. 

	- Do not use dashes `-` in place of bullet points  

	- There should be no page number in the header or footer sections

	- Do not put your contact information in the header section of your document

	- Don't use: Comic Sans, Papyrus, or any other garbage font

- The best place to create your resume is through Google Docs, that way you can share the document and have your Career Coaches and peers help edit. Then you will export to a PDF format prior to submitting for an application. 

### Hyperlinks
- Hyperlink can just take an underline, no use for the blue color. 

- Only use lines for under hyperlinked items. If you'd like to use lines as a part of the design, then it will need to span the width of the page so readers won't confuse it for a hyperlink. 

### Tailor Your Resume
- It is important to tailor or edit your resume to the job you're applying for, so you can emphasize your skills that match the job description. 

- You will need to match at least 50% of the job description skills for it to be worth your time to apply. 

- For example: If you're looking for a React job, then you want to highlight your React projects and React experience. 

- No need to tailor your resume for every single position, but the skillset you're highlighting should be in the job description. 

- Be conscious that the information you are adding to your resume aligns with the job description. 

- Be able to confidently and expressively communicate your knowledge on the particular technology you are highlighting. 

## Lambda Descriptions
-    This section is to help you confidently talk about your time at Lambda School and what the curriculum covers. 

- When describing your time at Lambda School, it would be best if you could first review the Curriculum page for your track on learn.lambdaschool.com. That way you are reminded on every topic you have mastered, and are able to speak to your skillset. 

- https://learn.lambdaschool.com/course/cs-fsw

- Lambda School is a 6+ month Computer Science & Software Engineering Academy that provides an immersive hands-on curriculum with a focus on computer science, software engineering, and web development.

-   Approached all coding challenges using pair programming

-    Utilized agile software development and Git workflow on all projects

-   Hands on experience with client and server testing,

-   Completed all curriculum course work including; React, React Native, Redux, Node, Express, MongoDB, Jest, Python, Django, etc…

-   Wrote production-ready code using ReactJS, Redux, and CSS on the frontend and NodeJS and Express on the backend to build single page applications

### Section Lead Language
-   Supervised

-   Number of students you worked with

-   Led 1:1s each week

-   Discussions lead

-   Led breakouts or brown bags

-   Pull Request reviews

### PM Language 
-   Role: Teaching Assistant

-   Supervised X number of students 

-   Led 1:1s each week

-   Managed discussions group to gauge student mastery of the material

-   Facilitated breakout groups or brown bags

-   Conducted Pull Request reviews

-  Served as a Project Manager leading team of 30+ students in daily code challenges in JS, Python and C.

-   Provided daily feedback and issue resolution of all curriculum through slack help channel.

-   Provided 1:1 feedback and code review on a weekly basis

-   Led a team of students that emulates a real work environment using the agile methodology.

-   Mentored students on how to learn effectively and solve programming problems.

-   Reviewed student code and giving feedback on areas of improvement.

-   Conducted daily standup meetings to build camaraderie, facilitate sharing of ideas and work progress, and provide guidance for that week’s study material

- Taught supplemental lectures on various topics related to software engineering.",We are now going to critique a sample resume together! ,"After reviewing the topics we have gone over today, you will select a format/template to create your resume. 

Your PM will place everyone into pairs, so you can peer edit each others resumes. 

Send your first revised copy of your resume to your PM for a second review. ",,,,,,,,Resume,,Resume,Career Readiness,Resume Rubric.pdf (https://dl.airtable.com/.attachments/ccb587f2e49d0a9c5114a6f53f2be595/e66668fd/ResumeRubric.pdf),0,1,,1
"Train, Validate, Test",,,,,,,,,,,,,Baselines & Validation,,Classification & Validation,,,0,,,0
Cross Validation,,,,,,,,,,,,,Baselines & Validation,,Classification & Validation,,,0,,,0
Begin with baseline models,,,,,,,,,,,,,Baselines & Validation,,Classification & Validation,,,0,,,0
ROC AUC,,,,,,,,,,,,,Classification metrics & Imbalanced classes,,Classification & Validation,,,0,,,0
Confusion Matrix,,,,,,,,,,,,,Classification metrics & Imbalanced classes,,Classification & Validation,,,0,,,0
Imbalanced classes,,,,,,,,,,,,,Classification metrics & Imbalanced classes,,Classification & Validation,,,0,,,0
Model selection,,,,,,,,,,,,,Select models and parameters,,,,,0,,,0
Hyperparameter optimization,,,,,,,,,,,,,Select models and parameters,,,,,0,,,0
Feature selection,,,,,,,,,,,,,Select important features,,,,,0,,,0
Feature importances,,,,,,,,,,,,,Select important features,,,,,0,,,0
adopt a UX mentality driven by a user-first mindset and empathy,A UX mentality will help you frame your product development efforts in the context of your users’ needs an expectations.,,"While we've learned about what UX means, why it is valuable, and what the field of UX looks like, we should recognize that UX is also a mindset that provides a powerful mental framework for solving problems and building products. Cultivating that mindset is an incredibly important part of learning to become a UX designer.

The foundations of a UX mindset are curiosity, a user-first focus, and empathy. One of the most powerful tools in the UX toolbox is a simple question: why? When we step into existing products or start building new ones, we're often entering murky territory where everything is ambiguous. What are we building? Who are we building it for? Why do they even want it? These are the essential questions that UX designers ask themselves when we're trying to make sense of these vague situations, and they're rooted in our cultivated curiosity.

Even as we become more familiar with a product and its requirements, we should still foster our curiosity and be comfortable asking questions. Why are we adding this feature? Would this button work better in red or blue? Why did our engagement metrics dip after we started our blog? We should always be interested in uncovering what makes our products tick and why things are happening the way they are. The best way to foster that interest is to foster your curiosity and be prepared to ask the hard questions that'll propel your product's growth forward.

To ensure your questions help your product grow instead of wither, you'll need to make sure you're framing everything with a user-first focus. There's an old saying that ""the customer is always right."" Now, this may seem like an obvious statement, but it's the cardinal rule for UX designers to follow. 

We need to make sure that whatever we're designing is for our users and not ourselves. For example, imagine that we're in a product meeting with a whole bunch of stakeholders trying to brainstorm our next big feature. Someone from marketing asks, ""why don't we have a blog?"" Everyone kind of looks around and says, ""we don't know, let's build that!""

So, the team spends the next three months setting up the perfect blog. You do all sorts of user tests and design iterations; the engineering team executes it flawlessly with special SEO considerations, and the marketing team writes up a ton of blog posts and plans an awesome launch campaign. Launch day arrives, the team pushes the button, and then... nothing happens.

There's no user engagement or even any activity. Your whole team has deflated. Now people are pointing fingers and try to pass the blame around. Marketing didn't get the launch right; engineering didn't build a good site, UX should have designed it better. However, the truth is that back in the planning meeting the team decided to build something that it thought was a good idea instead of something that the customers wanted.

This example may feel a bit contrived, but it happens all the time. It's why most startups fail. Everyone thinks they have a great idea, they build it, and then no one wants it. Why? Because they didn't do the research to understand what their customers wanted before they started building.

That's why UX designers need a user-first focus. Part of our job is to ensure that we're building features, experiences, and products that are needed. As Ash Maurya, the author of Running Lean, says, ""Life's too short to build products nobody wants.""

So, how do we make sure that we're building products for customers? That brings us to the final piece of a UX mindset: empathy. As Ainsley Fagerström explains, ""empathy is the experience of understanding another person’s thoughts, feelings, and condition from their point of view, rather than from your own. You try to imagine yourself in their place to understand what they are feeling or experiencing.

Empathy is often confused with Sympathy. Sympathy is an act that [shows you] care for someone. To genuinely design something that meets the users’ need, you must have empathy. Showing the users that you care is not enough.

Being a designer, you need to step out of your own office and talk with your users. During the process, you would understand the daily life of the users, what their struggles are, what goals they want to achieve, how the product solves their problem, how they use the product and how they feel when they are using it. By listening to the users’ sharing, you would be able to resonate and empathize with them.""

The only way to develop empathy for someone is to get to know them. We can't even begin to wrap our minds around anyone else's problems, goals, or joys if we don't even know what they are. However, having empathy for someone isn't only about understanding or sharing similar experiences. It's about being able to connect to the underlying emotions behind an experience that we all feel.

For example, let's pretend that we're building an app to find lost dogs. If we've always been a cat person, we don't know what it's like to be a dog owner. So, as we meet our users, it might seem like we couldn't possibly connect with their experiences of being dog owners. However, we've had cats before, and we know what it feels like to lose one of them for several days. We know how scared and anxious that made us feel. So, while it's true that we can't say that we know what owning a dog is like, we have certainly shared the human experience of being scared and anxious. And if we understand those emotions, then we can design an experience that alleviates those feelings for our users. By cultivating our ability to empathize with others, we can understand their viewpoints and frame our design decisions within their context. 

When we put together curiosity, a user-first focus, and empathy, we have a UX mindset. Each of those foundational pieces helps us approach problems and product development in a different manner than other stakeholders. Our user-first focus and empathy let us concentrate on the problems our users are facing, while our curiosity encourages us to explore multiple potential solutions and find the best one. A UX mindset may seem a bit abstract now, but as you learn about the UX process you'll understand how it weaves into all of the skills and techniques we practice.",,,,,,,"How to Master Empathy,Empathy — the foundation of a great design",Developing Empathy | Designing for Foreign Cultures,- What are the three pieces of a UX mindset?,Developing a UX Mentality,Active,UX Fundamentals,UX Design Core,,1,,,1
understand their roles as UX educators,"Educating your peers and organizations about the UX process is part of the job. Just like we might not know all of the details about marketing or software development, other stakeholders don’t know everything about UX. Being able to quickly educate them about the UX process will help you grow in your career and improve the UX outcomes at your organization.",,"Over the last few years, the UX discipline has gained more widespread understanding and recognition. However, most organizations still aren’t sure what it’s all about. As UX designers, we’ll frequently be working with stakeholders who have no idea what UX is or what we do on a daily basis. 

Helping our peers and organizations understand the role of UX and can improve our products is a key part of our roles as UX designers. When we teach others about what UX is and why it is important, we not only help our peers level up their own understanding but we also make our own lives easier.

When stakeholders aren’t sure about UX or what it even means, they’re far less likely to see the benefits it brings. So, they’re more likely to treat UX designers like a checkbox on a hiring list than as critical members of the organization. By teaching them about UX, we’re also setting ourselves up for future success and growth in the organization.

Most people want to learn more about UX - it’s a pretty interesting field! But, oftentimes they’re overwhelmed by their own responsibilities and needs. Plus, UX has become a bit of a buzzword, so they don’t want to feel dumb for not knowing about. When we teach anyone about UX, we want to make sure we do so in a manner that is considerate of their existing understanding and their own constraints. 

For example, an older manager might not understand everything about technology or current product development processes and might be feeling a bit out of the loop. Taking the time to explain UX in terms that they understand will go a long way towards improving their comprehension. Plus, you’ll earn a whole bunch of brownie points with them for explaining things in a way that they understand!

Being a UX educator is part of the job for UX designers. While that may seem intimidating at first, it’s a great way to make connections within your organization, demonstrate your value, and help everyone build better products.",,,,,,,,,- Why are UX designers also UX educators?,Developing a UX Mentality,Active,UX Fundamentals,UX Design Core,,1,,,1
"use the connect() function to ""connect"" React components to the Redux store","Now that we have created a Redux store, we have to connect our components to that store in order to access the data they will need. We will use the connect function, and mapStateToProps to accomplish this.",,"Now that we have built a store to manage our state, we need to connect our components to that store. This is done using the `connect` function, within the components itself. We will also build a helper function in that component file to tell the `connect` function what pieces of state we want to access in each component. This function is usually named `mapStateToProps`, and it will do exactly what it says - it will map pieces of our Redux state to the props of our component. Let's try it out.","Using the app you created earlier that has the redux store wired up, change the object you originally returned out of the reducer function to look like this:

```js
{
  user: {
    name: 'Dustin'
  },
  movies: [
    'Star Wars',
    'Lord of the Rings',
    'Harry Potter'
  ],
  todoList: [
    { task: 'Learn Redux' id: 0, completed: false }
  ],
  moviesToWatch: 13
}
```

Now create a component called `MovieList`. Next we'll take a look at the syntax we use to connect our React component to Redux, then we'll talk about it. To start, import the `connect` function into your component:

```js
import { connect } from 'react-redux';
```

Next, we use the `connect` function where we export the component at the bottom of the file. We will invoke `connect` twice (function currying). The first time we invoke it, we pass in two arguments - a function and an object. Then second invocation takes the component we are trying to connect. For now, we'll just pass `null` and `{}` into the first invocation.

```js
// export default MovieList; Not this way if we are connecting this component!
export default connect(null, {})(MovieList)
```

Now `MovieList` is connected to the store. Let's write our `mapStateToProps` function now, to tell `connect` which pieces of our state we want to bring in to this component. This function will take in `state` as a parameter, then return an object where the properties are what get passed to props, and the values are what we want to retrieve from the store for our component.

Remember what our state like like? (Hint: it's the object that the reducer function is returning). For a `MovieList` component, we probably only want to know about the `movies` array and the `moviesToWatch` number, _maybe_ the `user` object. We'll not worry about the `todoList`, since our component doesn't need to know about that part of our state. Let's bring those three pieces of our state into the component. 

```js
const mapStateToProps = state => {
  return {
    movies: state.movies,
    moviesToWatch: state.moviesToWatch,
    user: state.user
  }
}
```
Let's pass this in as the first argument to the first `connect` invocation. Notice that `state` is being passed into this function. Under the hood, connect will pass in our entire state tree to `mapStateToProps`. That means that within that function, we have access to all our state via the `state` argument that gets passed in. But, the component will only receive the pieces of state that we turn out of `mapStateToProps`.

```js
export default connect(mapStateToProps, {})(MovieList)
```

Now if you look at the props in the React tools, you will see that all three pieces of our state have been passed to our component through the `connect` function! As a side note, other props we've passed to this component the traditional way are still going to be available.

_By the way, did you notice that we are using function that takes in a component, extends its functionality, and returns a component? `connect` is a HOC!!!`_",Create a new application. Add the `redux` and `react-redux` packages. Create a redux store with some test data (have fun with this part 😃). Build a component and connect that component to the store using `connect` and a `mapStateToProps` function. Render the connected data from your connected component.,0rNVB36pQTE,http://youtube.com/watch?v=0rNVB36pQTE,https://www.youtube.com/embed/0rNVB36pQTE,,,,,Redux Fundamentals I,,Redux,Full Stack Web Development Core,,1,1,1,3
explain what immutability is in programming and demonstrate its benefits,"Redux is built on the programming principle of immutability. This means that the Redux store cannot be mutated, which will save us from running into more bugs and weird side effects, and will make it easier to reason about our code.",,"Mutable objects are objects whose state is allowed to change over time. An immutable value is the exact opposite – after it has been created, it can never change. There are some real benefits from making your state immutable. We won't go over all the benefits here, but a couple we will talk about are predictability and mutation tracking.

#### Predictability

Mutation hides change, which can create (unexpected) side effects. This can lead to some nasty bugs in our code. When we enforce immutability, we can keep our application architecture and mental model simple, which makes it easier to reason about the application. Simply put, it is very easy to predict how the state object will change based on certain actions/events. Without immutability, our state object can be changed or updated in unpredictable ways, causing weird behavior and/or bugs.

#### Mutation Tracking

Immutability makes it really easy to see if anything has changed. For example when we change the state in Redux, our components props will update. We can check our previous props against our new props to know what change occurred, and know how to handle those changes. If a user adds a task to the todo list, the `TodoList` component will update since it is receiving new props. But what if we want to run an animation on the new todo? We can't just run it on every render because it would run when the user toggles a task to complete, or deletes a task. Since Redux state management is immutable, we can track the changes that happen on the state, and only run our animation when a new task is added.

#### Redux and Immutability

Redux has a single immutable state tree (referred to as the store) where all state changes are explicitly handled by dispatching actions. Dispatched actions are processed by a reducer that accepts the previous state and the action and returns the next state of your application. It is easy to predict how the state tree is going to change based on actions that are dispatched. It is also easy to predict which action will be dispatched based on some event or interaction. This all leads to very predictable state management.

Writing immutable code can be tough - your Javascript skills will really be tested here - and it may seem pretty tedious, especially since we will be building very small apps with small state trees during this sprint. Because of that, it may be pretty hard to see the real benefits of immutable code in class. However, when you start working with a large application, with a huge state tree, you will quickly grow to appreciate the benefits of writing immutable code, and the extra effort it takes will seem much more worth it.","Here is a replit that will help you understand mutable code. In the next objective below, we will learn how to write immutable code.

Follow along with the exercises [here](https://repl.it/@snowkid314/understandingMutations)",Read [this article](https://codeburst.io/explaining-value-vs-reference-in-javascript-647a975e12a0). Write a paragaraph or two explaining what you learned. Send that paragraph to your PM.,EY8lIHdBA-w,http://youtube.com/watch?v=EY8lIHdBA-w,https://www.youtube.com/embed/EY8lIHdBA-w,,,,,Redux Fundamentals II,,Redux,Full Stack Web Development Core,,1,1,1,3
use ideation skills to create three divergent concepts for the app,,,"Refer to the lesson on <a href=""https://learn.lambdaschool.com/ux/sprint/rect2lxo4stxdkulq"">ideation, creativity</a> for a reminder of some practical ideation tips.",,,,,,,,,,Ideation in Practice,,"Design in Practice: Group Project 1 week 1, Design in Practice: Solo Project Week","UX Design Core [v1 deprecated], UX Design Core, UX Design Core [v1 deprecated], UX Design Core",,0,,,0
use prototyping tools to create a testable prototype of your refined concept,,,"Review this material to be reminded of prototyping skills: 

*Rapid sketching and paper prototyping:*
https://learn.lambdaschool.com/ux/module/recmzhhkcg634kasd
https://www.youtube.com/watch?v=T8dBPQw1ibU&feature=youtu.be

*Wireframing and prototyping in Invision:*
https://learn.lambdaschool.com/ux/module/recbt5kjngbolulkw
https://www.youtube.com/watch?v=5TSsAaL7wD8&feature=youtu.be",,,,,,,,,,Prototyping in Practice,,Design in Practice: Solo Project Week,"UX Design Core [v1 deprecated], UX Design Core",,0,,,0
create a high-fidelity UI design for a mobile application,,,"Review these lessons for additional discussion of UI design principles for mobile devices: 

*Mobile Interface Design*
https://learn.lambdaschool.com/ux/module/rect8ukimjdbkd53v
https://www.youtube.com/watch?v=qifPwTDUEoE&feature=youtu.be

*Design Systems*
https://learn.lambdaschool.com/ux/module/rec38qiqknmzgqa4l",,,,,,,,,,High-Fidelity UI Design in Practice,,Design in Practice: Solo Project Week,"UX Design Core [v1 deprecated], UX Design Core",,0,,,0
setup google play services,,,,,,,,,,,,,Location Based Services,,Additional Android,Android Development Core,,0,,,0
request “dangerous” permissions,,,,,,,,,,,,,Location Based Services,,Additional Android,Android Development Core,,0,,,0
get GPS location coordinates,,,,,,,,,,,,,Location Based Services,,Additional Android,Android Development Core,,0,,,0
convert coordinates to street address,,,,,,,,,,,,,Location Based Services,,Additional Android,Android Development Core,,0,,,0
create a map activity,,,,,,,,,,,,,Location Based Services,,Additional Android,Android Development Core,,0,,,0
manipulate the map view,,,,,,,,,,,,,Location Based Services,,Additional Android,Android Development Core,,0,,,0
add markers the map view,,,,,,,,,,,,,Location Based Services,,Additional Android,Android Development Core,,0,,,0
explain what typography is and why it matters,"An interface’s content is the most important part of its user experience. Therefore, presenting that content is also extremely important. The best and quickest way to improve our content’s presentation is to focus on the typography.",,"If you take a look at any user interface and removed all the text on the page, what do you have? Maybe a few pictures, perhaps a couple of rectangles, but when you think about it you don’t have a user interface anymore. Regardless of how good we get at design, without text our interfaces will never be usable because people read to understand what’s going on.

If written content is so important to the success of our experiences, then how do we make sure we’re presenting it in the best possible way? Welcome to the huge, exciting world of typography. 

According to Butterick’s Practical Typography guide, “Typography is the visual component of the written word. A text is a sequence of words. A text stays the same no matter how it’s rendered. Consider the sentence “I like pizza.” I can print that text on a piece of paper, or read it aloud, or save it in a file on my laptop. It’ll be the same text, just rendered different ways—visually, audibly, digitally.

But when “I like pizza” is printed, typography gets involved. All visually displayed text involves typography—whether it’s on paper, a computer screen, or a billboard.”",,"In your own words, explain what typography is and why it is important to learn.",,,,,What is typography?,,"- What is typography?
- Why does it matter?",Intro to Typography & Color Theory,Active,Intro to Design Theory,UX Design Core,,1,1,,2
identify the various elements of typography to choose a font,"Choosing a font for a project is a difficult decision to make. You need to consider the brand, the overall aesthetic, and the usability among many other concerns.",,"All fonts are unique and have radically different impacts on our content and thus our design. Some fonts convey a lot of personality and can be useful for communicating a brand identity. Other fonts are designed to be incredibly usable and easy-to-read.

In order to use fonts effectively, we need to understand how to talk about them and describe their differences. To do that, we can use the following terminology.

- *Typeface:* refers to the specific design of the letters, like Times New Roman or Helvetica.
- *Font:* font refers to a particular style or size of a typeface. For example, 10 point regular or 24 point bold.
- *Character:* an individual symbol of the full character set that makes up a typeface. It may take the form of a letter, number, punctuation mark, etc.
- *Serif:* a short line or stroke attached to or extending from the open ends of a letterform. It also refers to the general category of typefaces that have been designed with this feature.
- *Sans Serif:* the general category of typefaces, or an individual typeface, designed without serifs.
- *Italic:* refers to a slanted version of a typeface (slants from left to right). A true italic is uniquely designed, more than a tilted version of the upright (a.k.a. “roman”) typeface.
- *Font Weight:* the thinness or thickness of a font.
- *Baseline:* the imaginary line where most letters and other characters sit.
- *Cap Line:* the imaginary line that marks the upper boundary of capital letters and some lowercase letters’ ascenders.
- *X-Height:* refers to the height of a typeface’s lowercase letters. It’s also what we use to distinguish between ascenders and descenders.
- *Descender:* a piece of a letter that extends below the baseline.
- *Ascender:* a part of a lowercase letter that rises above the main body of the letter, or above the x-height.
- *Tracking:* refers to the uniform amount of spacing between characters in a complete section of text (sentence, line, paragraph, page, etc.).
- *Kerning:* refers to the horizontal spacing between two consecutive characters. Adjusting the kerning creates the appearance of uniformity and reduces gaps of white space between certain letter combinations.
- *Leading:* the vertical spacing between lines of text from baseline to baseline.

While there are more terms, these ones will definitely get you pretty far in typography. You don’t have to memorize all of them at once. But, as you continue to work with and use typography in your designs you’ll find yourself reaching for these terms to help describe what you’re thinking about. Through that repetition and practice, you’ll pick them up in no time.","When we’re first starting out, picking a typeface for our interface can seem like an overwhelming task. This process gets easier over time as you practice and internalize the details that make up a good typeface. But for now, we can follow a few guiding principles, from **Refactoring UI** by Steve Schoger and Adam Wathan, to start picking out high-quality typefaces today.

## Play it safe
When we’re designing interfaces, our safest bet is to pick a fairly neutral sans-serif. Neutral sans-serifs are great for interface design because they’re typically easy to read and are more externally consistent with other interfaces. Plus, they won’t ever overwhelm the user with fancy font features.

A great default option is to rely on the system font stack. As we can see in the image below, every device that you use has a set of typefaces that it uses.

![](https://tk-assets.lambdaschool.com/42d8c97c-894e-4586-b3c6-a8fa778e5be5_ScreenShot2019-01-28at11.58.01AM.png)

These are already well-considered and tested, so you can feel comfortable using them to get started.

## Ignore typefaces with less than five weights
As a general rule of thumb, typefaces that have more weights tend to be crafted with more care and attention to detail. With this rule in hand, we can visit most font directories, like Google Fonts, and filter out all of the fonts that don’t have a certain number of weights.

![](https://tk-assets.lambdaschool.com/95400814-38df-4fad-ae50-b1bc7a4bcd9e_ScreenShot2019-01-28at12.02.25PM.png)

Cranking the filter up to 10+ weights means that we’ll also include italics in our search. Doing this on Google Fonts cuts out about 85% of the available options, making it much easier to pick one that works.

## Optimize for legibility
As Refactoring UI explains, “When someone designs a font family, they are usually designing it for a specific purpose. Fonts meant for headlines usually have tighter letter- spacing and shorter lowercase letters (a shorter x-height), while fonts meant for smaller sizes have wider letter-spacing and taller lowercase letters.

![](https://tk-assets.lambdaschool.com/7ce55566-e11d-4423-99b3-8add441bc353_ScreenShot2019-01-28at12.05.42PM.png)

Keep this in mind and avoid using condensed typefaces with short x-heights for your main UI text.""

## Trust the wisdom of the crowd
There’s a reason that crowdsourcing became so popular - the collective decision-making power of thousands of other people can help you find what you need. 

Fonts are no different. If it’s popular then most likely it’s a pretty good font to use. Fortunately, most font directories let us sort everything by popularity, so we can quickly pick popular fonts that work.

## Steal from people who care
“Good artists copy, great artists steal.” If you’re still trying to find a font that works for you, check out the interfaces that you admire most. As Refactoring UI explains, “there are a lot of great design teams out there full of people with really strong opinions about typography, and they’ll often choose great fonts that you might have never found using some of the safer approaches outlined above.“

## Developing your intuition
As you practice picking and working with fonts, you’ll be developing your own sense of what works and what doesn’t. It won’t take long for you to start labeling some typefaces as awesome and others as terrible. 

Until then, keep following the guidelines outlined above and remember that they’re just a place to get started. Experimentation, user testing, and your typography skills can help you find typefaces that work better for your users. So, don’t be afraid to use them as long as you can defend your decisions.",Visit Google Fonts and select a popular typeface that has more than 10 weights.,,,,,,Refactoring UI,- How do you pick a typeface for an interface?,Intro to Typography & Color Theory,Active,Intro to Design Theory,UX Design Core,,1,1,,2
create a text hierarchy,"While a good typeface goes a long way towards improving your typography, the most important aspect of your content is your text hierarchy.",,"As Jeremy Loyd, the Creative Director of SparkBox, explains, “typographic hierarchy is a system for organizing type that establishes an order of importance within the data, allowing the reader to easily find what they are looking for and navigate the content. It helps guide the reader’s eye to where a section begins and ends, whilst enabling the user to isolate certain information based on the consistent use of style throughout a body of text.” 

You may have never heard of the term text hierarchy before, but if you’ve ever read a newspaper then you’re certainly familiar with it. If you look at this example from canva.com, you can see a classic example of text hierarchy at work.

![](https://tk-assets.lambdaschool.com/85abaf9c-e05a-4b89-9fc1-a1cb66401515_ScreenShot2019-04-29at10.30.17AM.png)

As you can see, the Wisconsin State Journal clearly uses a strong text hierarchy to emphasize the most important information first. Text hierarchy might not seem important at first, but like canva.com explains, “enhancing readability and usability are some of the most important benefits of establishing a clear typographic hierarchy. 

If instead, the front page of that newspaper had looked like one of the first two examples below — with either no typographic hierarchy or very limited hierarchy — the important message being communicated would not have been nearly as easy to see at a glance. Readers would have had trouble distinguishing where one section stops and another begins, making for a harder to read design that has less impact.”

![](https://tk-assets.lambdaschool.com/59d93c2a-23e3-46fe-905e-22528050055a_ScreenShot2019-04-29at10.30.37AM.png)

Ensuring that your interfaces have a strong text hierarchy is an incredibly important part of the design process. Without a text hierarchy, your users won’t know what information they need to use or interact with your experiences.","When developing a type hierarchy, there are several characteristics of your typeface that you’ll need to consider. Let’s review each of them here.

## Sizing
If you refer back to the newspaper example from earlier, you’ll notice that the primary way they’ve established their type hierarchy is through size. The headline is the largest piece of text on the page, followed by the subheads, and finally the text. As you can see, using size is one of the simplest and most effective ways to establish a text hierarchy.

When designing an interface, we’ll also want to ensure that our text hierarchy is being consistently used so we avoid inconsistent sizing. In order to prevent those inconsistencies, we can rely on a type scale to make our sizing decisions easier. A type scale is a series of font sizes that you’ve pre-established before you start designing.

There are a few different approaches to creating a type scale. One of the most common is to calculate a “modular scale” using a ratio. For example, 4:5 is called the major third scale, 2:3 is called the perfect fifth scale, and 1:1.618 is the golden ratio scale. To use a modular scale, you start with a sensible base value, such as 16px, apply your ratio to get the next value, and so on until you’ve generated enough variations.

While a modular scale can be appealing thanks to its mathematical exactness, in practice it leaves a lot to be desired. For instance, you’ll often end up with fractional values that are difficult to work with. Also, when we design interfaces, we typically need to use a lot of different sizes and modular scales have a hard time producing enough variation for us.

So, oftentimes a more practical approach is to simply pick the scale values by hand. This way you can avoid the issues with fractional values and generate enough variations to have a useful scale. Here’s an example from **Refactoring UI** that works well for most interfaces.

![](https://tk-assets.lambdaschool.com/420bb6fc-2c59-41d8-b836-09753804c43d_ScreenShot2019-01-29at10.29.52AM.png )

## Typefaces
Another way to create a type hierarchy is to pair different typefaces. Referring back to our newspaper example, notice how the sans-serif headline contrasts with the serif font used for the text. As you can see, pairing different typefaces is a classic way to introduce contrast and thus hierarchy into an interface.

Now most interfaces typically use only one typeface. So, pairing typefaces is a little trickier in UI design than say print design. However, when the situation is appropriate, pairing typefaces can be a powerful tool.

## Weights
Apart from sizing, font weight is probably the most widely used method of introducing hierarchy. If you’ve ever written an essay in Microsoft Word or Google Docs, chances are that you’ve bolded some text to make it stand out. You may not have realized it, but you were using the font’s weight to introduce a text hierarchy.

As we learned earlier, typefaces come with a variety of weights. We can use thinner weights to de-emphasize text to make them lower in our text hierarchy, and we can use heavier weights to do the opposite.

## Spacing & Proximity
As canva.com explains, “in a design, the spacing between typographic elements — both letter-spacing and line-spacing — can make all the difference between a balanced, easily readable design and one that looks cluttered and confusing… That’s because spacing (or white space) visually separates different parts of a design but also helps the viewer understand and visualize how all the pieces work together.

When you’re looking at a layout that is spaced well, it’s immediately obvious how you should go about reading or getting information from the design. But when you’re looking at a design where maybe the designer felt that he didn’t have enough space to work with (so he crammed a lot of content together without considering spacing) — then you might find yourself squinting at text that’s too small to read. Or looking for information, perhaps an address or phone number, but it’s not immediately clear where to find it. Or not even wanting to bother interacting with the design because it looks like a mess.

Spacing isn’t just about separating typographic elements; it’s also about proximity, or moving related items closer together. Reducing the spacing a bit between pieces of text that go together (to make it more obvious that they go together) is another visual tool to help viewers navigate a design more easily.”

## Color
Color is another tool we can use to influence our text hierarchy. Brighter, warmer colors like yellow and red will help your text stand out on the page. While cooler, darker colors like blue and green will help them fade out. Since colors carry their own meanings and associations, we need to make sure we’re considerate of the brand and the overall meaning they convey.

## Putting Everything Together
While we can use each of these techniques on their own, in reality we’ll frequently combine them to create the appropriate level of hierarchy. ",Create a text scale for a popular Google Font with 10+ weights.,,,,,,"Understanding Typographic Hierarchy,Why every design needs three levels of typographic hierarchy","- What is a text hierarchy?
- Why is it important?",Intro to Typography & Color Theory,Active,Intro to Design Theory,UX Design Core,,1,1,,2
explain the basics of color theory and how color influences emotions and accessibility,"Understanding the general influences of color on humans can help us design experiences that are better tailored to our brand, audience, and communications.",,"There’s a large body of psychology and scientific literature that examines the impact of color on our thinking and emotions. In fact, there is an entire field called color psychology dedicated to the study of hues as a determinant of human behavior.

Understanding the general influences of color on humans can help us design experiences that are better tailored to our brand, audience, and communications.

While the following general guidelines are useful, we do have to recognize that context and cultural understanding is important. For example, in South Africa the color red is associated with mourning, but in China it represents celebration, good luck, and prosperity. So, make sure that you understand your users’ context when you’re working with color. Now, here are the colors and their general meanings.

- Red
  - Associated with fire, violence, warfare, love, passion, anger, importance, and danger.
- Orange
  - Associated with earth, autumn, change, movement, creativity, health, and vitality.
- Yellow
  - Associated with happiness, sunshine, hope, and danger.
- Green
  - Associated with new beginnings, growth, renewal, abundance, envy, wealth, and stability.
- Blue
  - Associated with sadness, calm, responsibility, refreshing, friendly, and peace.
- Purple
  - Associated with royalty, creativity, imagination, romance, and luxury.
- Black
  - Associated with power, elegance, formality, evil, death, mystery, and mourning.
- White
  - Associated with purity, cleanliness, virtue, healthcare, weddings, goodness, and mourning (in Eastern cultures).
- Gray
  - Associated with moody, conservative, formal, and sophistication.
- Brown
  - Associated with earth, wood, stone, dependability, reliability, and dull.",,Describe your favorite color’s meanings.,,,,,,"""Color Theory for Designers, Part 1: The Meaning of Color""", - Do colors have the same meanings across cultures?,Intro to Typography & Color Theory,Active,Intro to Design Theory,UX Design Core,,1,1,,2
understand how colors are used by UX designers,UX designers have a few different ways to work with colors. Understanding these differences will help you effectively use your tools and communicate with other designers.,,"When working with colors, we have a few different ways to represent them in our graphic design tools of choice. These representations are referred to as color spaces. The most common ones that we’ll work with in interface design are RGB, HSB, and HSL. The following definitions are provided by colorizer.org.

## RGB (Red, Green, Blue)
“The RGB (Red, Green, Blue) color model is the most known, and the most used every day. It defines a color space in terms of three components:
- Red, which ranges from 0-255
- Green, which ranges from 0-255
- Blue, which ranges from 0-255

The RGB color model is an additive one. In other words, Red, Green and Blue values (known as the three primary colors) are combined to reproduce other colors. For example, the color ""Red"" can be represented as [R=255, G=0, B=0], ""Violet"" as [R=238, G=130, B=238], etc.

Its common graphic representation is the following image:

![](https://tk-assets.lambdaschool.com/c6b5af36-c34c-4807-8c6e-51b13c434095_rgb.png)

In graphic design software, it can be represented like this:

![](https://tk-assets.lambdaschool.com/a52a503a-19c2-43e0-b383-2d109cb918a8_ScreenShot2019-01-29at1.05.37PM.png)

## HSB (Hue, Saturation, Brightness) 
“The HSB (Hue, Saturation, Brightness) color model defines a color space in terms of three constituent components:
- Hue : the color type (such as red, blue, or yellow).
  - Ranges from 0 to 360° in most applications. (each value corresponds to one color : 0 is red, 45 is a shade of orange and 55 is a shade of yellow).
- Saturation : the intensity of the color.
  - Ranges from 0 to 100% (0 means no color, that is a shade of grey between black and white; 100 means intense color).
  - Also sometimes called the ""purity"" by analogy to the colorimetric quantities excitation purity.
- Brightness (or Value) : the brightness of the color.
  - Ranges from 0 to 100% (0 is always black; depending on the saturation, 100 may be white or a more or less saturated color).

Its common graphic representation is the following image:

![](https://tk-assets.lambdaschool.com/86275d6c-4eed-4651-b686-404096d59bdf_hsv.png)

In graphic design software, it can be represented like this:

![](https://tk-assets.lambdaschool.com/c010cafc-5525-4427-8104-6652f989c4de_ScreenShot2019-01-29at1.09.24PM.png)

The HSB model is also known as HSV (Hue, Saturation, Value) model. The HSV model was created in 1978 by Alvy Ray Smith. It is a nonlinear transformation of the RGB color space. In other words, color is not defined as a simple combination (addition/subtraction) of primary colors but as a mathematical transformation.

Note: HSV and HSB are the same, but HSL is different.”

## HSL
“The HSL color space, also called HLS or HSI, stands for:
- Hue: the color type (such as red, blue, or yellow).
  - Ranges from 0 to 360° in most applications (each value corresponds to one color. 0 is red, 45 is a shade of orange, and 55 is a shade of yellow).
- Saturation: variation of the color depending on the lightness.
  - Ranges from 0 to 100% (from the center of the black & white axis).
- Lightness (also Luminance or Luminosity or Intensity).
  - Ranges from 0 to 100% (from black to white).

Its common graphic representation is the following image:

![](https://tk-assets.lambdaschool.com/0e10c1c7-354b-4096-937e-188acadbcb1a_hsl.png)

In graphic design software, it can be represented like this:

![](https://tk-assets.lambdaschool.com/3a3999bc-6b52-4650-8157-1383484e8f49_ScreenShot2019-01-29at1.16.07PM.png)

HSL is similar to HSB. The main difference is that HSL is symmetrical to lightness and darkness. This means that:
- In HSL, the Saturation component always goes from fully saturated color to the equivalent gray (in HSB, with B at maximum, it goes from saturated color to white).
- In HSL, the Lightness always spans the entire range from black through the chosen hue to white (in HSB, the B component only goes half that way, from black to the chosen hue).”

## Choosing a Color Space
While you should be familiar with all of these color spaces, most designers prefer the HSL one because it maps closest to our innate understanding of color. 

Unfortunately, HSL isn't always available in our graphic design tools. For example, Sketch doesn’t have a native way to support HSL. Fortunately, we can use plugins to add this functionality. Or, we can use other tools to generate our colors before adding them to our graphic design software using hex codes.

## Hex Codes
Looking at our color space pickers above, we can see that all of them have a little string of characters that look something like this: `#dfdfdf`. These little strings are called hex codes. 

Each of the color spaces can generate these hex codes. This allows us to share exact colors between the color spaces. It is also how we code color into our user interfaces. Our computers and browsers use hex codes to interpret and display colors. So, when we’re working with developers, we give them the hex codes for our colors so they can add them to our experiences.

## Alpha and Opacity
Finally, in our color picker images above you may have also noticed a little box labeled `A`. This `A` stands for Alpha. The alpha value sets the opacity of the color we’re using. In code, it ranges from 0.0 for fully transparent to 1.0 for fully opaque. In our graphic design tools, it’ll run from 0 for fully transparent to 100 for fully opaque.

## Color Accessibility
When we choose colors for our projects, we need to always consider how they can be visually perceived by all sorts of users - including users with disabilities. 

To ensure that our color palettes are accessible, we can follow the guidance from the Web Content Accessibility Guidelines or WCAG. When we’re focusing on color accessibility, the key concept to remember is color contrast. As the WCAG 2.0 explains, “Hues are perceived differently by users with color vision deficiencies (both congenital and acquired) resulting in different colors and relative luminance contrasts than for normally sighted users. Because of this, effective contrast and readability are different for this population. However, color deficiencies are so diverse that prescribing effective general use color pairs (for contrast) based on quantitative data is not feasible. Requiring good luminance contrast accommodates this by requiring contrast that is independent of color perception.”

To facilitate our ability to use color contrasts effectively, the WCAG outlines three levels of contrast conformance: A, AA, AAA. As it explains, “a contrast ratio of 3:1 is the minimum level recommended… for standard text and vision. The 4.5:1 ratio is used in this provision to account for the loss in contrast that results from moderately low visual acuity, congenital or acquired color deficiencies, or the loss of contrast sensitivity that typically accompanies aging.

The rationale is based on a) adoption of the 3:1 contrast ratio for minimum acceptable contrast for normal observers, in the ANSI standard, and b) the empirical finding that in the population, visual acuity of 20/40 is associated with a contrast sensitivity loss of roughly 1.5 [ARDITI-FAYE]. A user with 20/40 would thus require a contrast ratio of 3 * 1.5 = 4.5 to 1. Following analogous empirical findings and the same logic, the user with 20/80 visual acuity would require contrast of about 7:1.

The contrast ratio of 4.5:1 was chosen for level AA because it compensated for the loss in contrast sensitivity usually experienced by users with vision loss equivalent to approximately 20/40 vision. (20/40 calculates to approximately 4.5:1.) 20/40 is commonly reported as typical visual acuity of elders at roughly age 80. [GITTINGS-FOZARD]

The contrast ratio of 7:1 was chosen for level AAA because it compensated for the loss in contrast sensitivity usually experienced by users with vision loss equivalent to approximately 20/80 vision. People with more than this degree of vision loss usually use assistive technologies to access their content (and the assistive technologies usually have contrast enhancing, as well as magnification capability built into them). The 7:1 level therefore generally provides compensation for the loss in contrast sensitivity experienced by users with low vision who do not use assistive technology and provides contrast enhancement for color deficiency as well.”

The key takeaway here is that we need to ensure that our color contrast meets at least a AA rating when appropriate. In practice, this means that we need to be especially focused on how we use color with our typography. If our text content doesn’t have enough contrast then it can’t be read! 

Generally speaking, less contrast is necessary for larger and bolder text. So, we focus our efforts on 14 and 18px text. If we can pass the AA and AAA ratings at those sizes, then we’re confident about our color contrast.

To check out color contrast ratios, we can use a variety of tools online. A quick Google search for “color contrast checker” will yield tons of results, but two solid choices are [Contrast Ratio](https://contrast-ratio.com ) and [Colour Contrast Check](https://snook.ca/technical/colour_contrast/colour.html).",,,,,,,,"WCAG 2.0 Contrast (Minimum),Color Accessibility Workflows,""Hex colors, how do they work?"",Colorizer.org","- What are the color spaces?
- What are hex codes?
- What is alpha?",Intro to Typography & Color Theory,Active,Intro to Design Theory,UX Design Core,,1,,,1
generate a color palette for a user interface,Color palettes help simplify our color decisions while ensuring our interfaces remain consistent and onbrand.,,"Designing a color palette for your projects is an incredibly useful exercise. By pre-determining the colors you’re using you can ensure that your interfaces will be consistent and onbrand, plus you’ll avoid wasting time while designing trying to pick colors. We can follow these principles from **Refactoring UI** to come up with a color palette for any project.

## You need more colors than you think
Nobody can design a full product with just three colors. However, if you’ve ever played around with a color palette generator online, then that’s exactly what they’d have you believe. Instead, we need a multitude of colors and shades to truly create a colorful interface. We can typically group these color into three categories: greys, primary color, and accents.

### Greys
Our grey colors (sometimes called the greyscales) is incredibly important because almost everything in an interface is a shade of grey! If you look at the Training Kit interface you’re reading this on, apart from the red nav, a few blue links, and some yellow backgrounds, the rest of the interface is grey. Since grey is used so frequently, we’ll typically need around 8-10 (not quite 50) shades of grey. 

Also, as **Refactoring UI** explains, “by definition, true grey has a saturation of 0% — it doesn’t have any actual color in it at all. But in practice, a lot of the colors that we think of as grey are actually saturated quite heavily. If you’ve ever purchased light bulbs before, you’ve had to make the decision between “warm white” bulbs that give off a yellow-ish light, and “cool white” bulbs that give off a blue-ish light. 

Saturating greys in a user interface works in a similar way. If you want your greys to feel cool, saturate them with a bit of blue. To give your greys a warmer feel, saturate them with a bit of yellow or orange. To maintain a consistent temperature, don’t forget to increase the saturation for the lighter and darker shades. If you don’t, those shades will look a bit washed out compared to the greys that are closer to 50% lightness.”

One great technique is to saturate your greys with your primary color. This will subtly connect your grey scale to the rest of your color palette.

## Primary Color
Most products need one color to use for primary actions and as a way to let the brand be present in the interface. This is the color that creates the overall look and feel of the site. There’s a reason that everyone thinks of Facebook as “blue”.

Just like the grey scale, we’ll typically need at least 8-10 shades of our primary color. Ultra-light shades can be useful as a tinted background for things like alerts, while darker shades work great for text, and our primary color itself is great for important actions like buttons, links, and active states.

## Accents
Finally, every product needs a few accent colors to communicate different concepts to its users - in particular semantic messages like errors, successes, or warnings. In these cases, we’ll need to use colors like red, green, and yellow to communicate these semantic messages. In less critical places, sometimes we just need a simple accent color to contrast with our primary color.

We typically won’t need as many accent shade as we would for our primary color or greys. Instead, we could get away with 5-10 of them.",,"Review your favorite website and try to count how many different colors they are using. Can you tell which ones are the primary, grey, and accents?",,,,,,,- Why are color palettes important?,Intro to Typography & Color Theory,Active,Intro to Design Theory,UX Design Core,,1,1,,2
demonstrate understanding of the importance of a polished portfolio website,,,"## Why is it important to have a polished portfolio site?

- Companies have a site to look at your projects, and will get a sense of who you are as a person
- It's one central location to house all the projects you are working on
- You should be adding projects to your portfolio often, to keep it up to date
- It's a site that is a reflection of you, since the portfolio is all about showing you and your projects in the best light 
- Portfolio is a project in and of itself, it's a way to show off your skills. It can be more personalized and customized to your personality 
- Resume and LinkedIn can't show everything you have to offer, whereas a portfolio doesn't have the same limitations
- Your portfolio needs to be intentional and thought out, or it can hurt your chances at landing an interview.

### Who is going to look at the portfolio?
- Hiring managers
- Recruiters
- Potential mentors or people who are trying to match you with opportunities 
- People with non-technical backgrounds 
- Your Career Coach

### What needs to be on your portfolio website
- URL with professional name (no nicknames or gamer tags)
- Short and sweet ""About Me"" section
	- Do not include any information you would not freely give during an interview
	- Share fun quirks and hobbies to show off your personality 
	- Include a professional picture of yourself 
- Icon links to your LinkedIn, Twitter, and artifact profiles (Github, Dribbble, Medium)
- Project section
	- Should include 3-4 fully completed projects
- Contact section
	- Either have a contact email form, or a place that has your contact information easily accessible 


### Tips on what *not* to include on your portfolio website 
- Stagnant resume
	- You want people to reach out to you for your most current resume
-  Do no have ratings (graphs, pie charts, etc) of your skills on the portfolio
	- Don't rate your skillsets, because you don't know what the company is searching for and don't want to put yourself out of the running by rating your React skills at 25%
- Too much animation that it bogs down the load speed 
- Useless features, keep it clean and user friendly. Don't add features for the sake of filling up space. 
- No lengthly paragraphs on your portfolio site, no need to include a novel about yourself. 
- Do not include incomplete projects 
	- Publish your project on the portfolio site once it is completed 

### What to do after you've completed your portfolio site
- Get feedback from various people: peers, instructors, acquaintances in the industry, etc. 
- Continuously be updating your site with new projects and personal information 

### Examples of good portfolio websites
- http://findmatthew.com/
- http://ejosue.com/
- http://www.adhamdannaway.com/
- http://www.rleonardi.com/ (this is an intense portfolio site, but wanted to include it because it's so fun to interact with!)

### Supplemental Resources
- https://www.youtube.com/playlist?list=PL8BUtRNvg3YiV2k5Tvs4swmOcBpcPlND-
Our own Nick Basile talking about his own portfolio. ","Now that we've gone over why a polished portfolio is essential to your job search. Find a portfolio website you like, and list 3 things that portfolio is doing right.  ","Incorporate the information we've gone over today into your portfolio then share with your PM.

Link your portfolio site to your LinkedIn, GitHub (or other artifact), and professional Twitter accounts. ",,,,,,,,Building a Portfolio Website,,Building a Portfolio Website,Career Readiness,Portfolio Slides.key (https://dl.airtable.com/.attachments/c3a4e987ca654656080513e023712ddd/6475aa8e/PortfolioSlides.key),0,1,,1
demonstrate understanding the importance of consistently updating their portfolio ,,,,,,,,,,,,,,,,,,0,,,0
"using the standard Java Development Kit (JDK), enter source code, generate bytecode, prepare a shippable application (JAR file), execute that application and view the application’s output.",,,[Slide Deck for Presentation JDK](https://drive.google.com/file/d/1rBsoNOjwZMw3em3zTIlUTqNtQ2uklo2t/view?usp=sharing),,,Pi0iJroM8_4,http://youtube.com/watch?v=Pi0iJroM8_4,https://www.youtube.com/embed/Pi0iJroM8_4,,JX JDK ,,,Java I - JDK and Java Classes,,Java Fundamentals,Java Backend Development,,0,,1,1
"craft multiple Java Classes which include comments, constructors, static and instance variables (fields), accessors, public and private methods and instantiate and use Objects of these classes.",,,[Slide Deck for Presentation Object Oriented](https://drive.google.com/file/d/1MPP27Ck7I7jTgZrD3_z4trc4o5giVwBu/view?usp=sharing),,,mzIxwmNGKjI,http://youtube.com/watch?v=mzIxwmNGKjI,https://www.youtube.com/embed/mzIxwmNGKjI,,,,,Java I - JDK and Java Classes,,Java Fundamentals,Java Backend Development,,0,,1,1
"create and manipulate the base Java types which include Boolean, byte, char (including Strings), short, int, long, float, and double.",,,[Slide Deck for Presentation Strongly Typed](https://drive.google.com/file/d/1liZaZVFXsVv8d_xaW8a34DebgNJgAFqi/view?usp=sharing),,,CQSTMaRslOM,http://youtube.com/watch?v=CQSTMaRslOM,https://www.youtube.com/embed/CQSTMaRslOM,,,,,Java I - JDK and Java Classes,,Java Fundamentals,Java Backend Development,,0,,1,1
"using IntelliJ, enter source code, generate bytecode, prepare a shippable application (JAR file), execute that application and view the application’s output.",,,,,,,,,,,,,,,,,,0,,,0
"using IntelliJ, open a preexisting project, fix errors (bugs), and continue the process to execute an application (JAR) file.",,,,,,,,,,,,,,,,,,0,,,0
"craft and use for loops, while loops, do while loops, and recursion",,,[Slide Deck for Presentation Loops](https://drive.google.com/file/d/1saUW9G5ETUPKCxVE9mutFH3Piy4xoise/view?usp=sharing),,,JRwjTatpnfk,http://youtube.com/watch?v=JRwjTatpnfk,https://www.youtube.com/embed/JRwjTatpnfk,,,,,Java II - Language Fundamentals,,Java Fundamentals,Java Backend Development,,0,,1,1
"craft Java conditionals including if-then, if-then-else, and switch statements and branching statements including break, continue, and return.",,,[Slide Deck for Presentation Conditionals](https://drive.google.com/file/d/1oF26SssVRCX7lQo_lKg5DKBkHGzvoMVK/view?usp=sharing),,,6i9xA-VJvFc,http://youtube.com/watch?v=6i9xA-VJvFc,https://www.youtube.com/embed/6i9xA-VJvFc,,,,,Java II - Language Fundamentals,,Java Fundamentals,Java Backend Development,,0,,1,1
"craft and manipulate Arrays, and collections with initializers including ArrayList, HashSet, and HashMap.",,,[Slide Deck for Presentation Collections](https://drive.google.com/file/d/1NbDqINFxr7tVH5YyeWmF8XzSUvh1xA9f/view?usp=sharing),,,OaxAc_O3qVQ,http://youtube.com/watch?v=OaxAc_O3qVQ,https://www.youtube.com/embed/OaxAc_O3qVQ,,,,,Java II - Language Fundamentals,,Java Fundamentals,Java Backend Development,,0,,1,1
use and implement interfaces.,,,[Slide Deck for Presentation Interfaces](https://drive.google.com/file/d/1kl2UqsQNkPbtVAY-mNAywidzLzNag-lB/view?usp=sharing),,,LNqecOJKxJo,http://youtube.com/watch?v=LNqecOJKxJo,https://www.youtube.com/embed/LNqecOJKxJo,,,,,"""Java III - Interfaces, Abstract Classes, Lambda Expression""",,Java Fundamentals,Java Backend Development,,0,,1,1
use and implement abstract classes.,,,[Slide Deck for Presentation Abstract Classes](https://drive.google.com/file/d/1Y_pvXFJHq6x4ZtWJcJpkWDGT82BoXCq2/view?usp=sharing),,,C7ASnPD9xMI,http://youtube.com/watch?v=C7ASnPD9xMI,https://www.youtube.com/embed/C7ASnPD9xMI,,,,,"""Java III - Interfaces, Abstract Classes, Lambda Expression""",,Java Fundamentals,Java Backend Development,,0,,1,1
use and implement Lambda Expressions.,,,[Slide Deck for Presentation Lambda Expressions](https://drive.google.com/file/d/1NGxlYMwX-MBuYiBCRVokMJwB2I4NGH9t/view?usp=sharing),,,7EmJoIBGDeQ,http://youtube.com/watch?v=7EmJoIBGDeQ,https://www.youtube.com/embed/7EmJoIBGDeQ,,,,,"""Java III - Interfaces, Abstract Classes, Lambda Expression""",,Java Fundamentals,Java Backend Development,,0,,1,1
"use IntelliJ in the following areas: code entry, refactoring, debugging, application analysis, version control, IDE customization, production and distribution",,,[Slide Deck for Presentation IntelliJ](https://drive.google.com/file/d/1bgx9mHF0g9bRlYoeQgMrv3ENU61s9OwQ/view?usp=sharing),,,5tiS4h8zseA,http://youtube.com/watch?v=5tiS4h8zseA,https://www.youtube.com/embed/5tiS4h8zseA,,,,,"""Java IV - IntelliJ Deep Dive, Dependencies""",,Java Fundamentals,Java Backend Development,,0,,1,1
"download, commit and branch source control repositories.",,,[Slide Deck for Presentation github](https://drive.google.com/file/d/1Gt8hz-x-hBBF06BtpfvMqvrA7fEkg6Dq/view?usp=sharing),,,xqighS7M-N8,http://youtube.com/watch?v=xqighS7M-N8,https://www.youtube.com/embed/xqighS7M-N8,,,,,"""Java IV - IntelliJ Deep Dive, Dependencies""",,Java Fundamentals,Java Backend Development,,0,,1,1
"use and implement code annotations, dependencies, dependency injections, and Java libraries.",,,[Slide Deck for Presentation Dependency Injection](https://drive.google.com/file/d/1Kr4VsnlzeAFIPhdAzy3uxggJpytwzrOs/view?usp=sharing),,,d8froMSNYBQ,http://youtube.com/watch?v=d8froMSNYBQ,https://www.youtube.com/embed/d8froMSNYBQ,,,,,"""Java IV - IntelliJ Deep Dive, Dependencies""",,Java Fundamentals,Java Backend Development,,0,,1,1
explain what middleware is and its different types.,,,,,,,,,,,,,"""Middleware, Logging, Message Queues""",,Building Java Web APIs,"Java Backend Development, Android Development Core",,0,,,0
write custom middleware.,,,,,,,,,,,,,,,,,,0,,,0
integrate a service with a message queue using RabbitMQ.,,,,,,,,,,,,,"""Middleware, Logging, Message Queues""",,Building Java Web APIs,"Java Backend Development, Android Development Core",,0,,,0
write error handling middleware.,,,,,,,,,,,,,,,,,,0,,,0
"deploy a full RESTful Web Services application with a JAR and WAR using Maven, Spring including Spring Boot, and Tomcat",,,,,,,,,,,,,Deployment and Best Practices with Spring Cloud Config Server,,Building Java Web APIs,"Java Backend Development, Android Development Core",,0,,,0
perform calls to HTTP services using curl.,,,,,,,,,,,,,Deployment and Best Practices with Spring Cloud Config Server,,Building Java Web APIs,"Java Backend Development, Android Development Core",,0,,,0
troubleshoot running services using log files.,,,,,,,,,,,,,,,,,,0,,,0
explain what a Relational Database is and its core components.,,,,,,,,,,,,,Java RDBMS I RDBMS and SQL Basics,,"""Java Backend Data Persistence with SQL, Hibernate""","Java Backend Development, Android Development Core",,0,,,0
use SQLite Studio to create a SQLite database,,,,,,,,,,,,,,,,,,0,,,0
use SQLite Studio to open an existing SQLite database,,,,,,,,,,,,,,,,,,0,,,0
"open an existing database, or create a new one, while adding tables to a PostgreSQL database",,,,,,,,,,,,,Java RDBMS I RDBMS and SQL Basics,,"""Java Backend Data Persistence with SQL, Hibernate""","Java Backend Development, Android Development Core",,0,,,0
explain what SQL is and its advantages,,,,,,,,,,,,,Java RDBMS I RDBMS and SQL Basics,,"""Java Backend Data Persistence with SQL, Hibernate""","Java Backend Development, Android Development Core",,0,,,0
query data from a single table,,,,,,,,,,,,,Java RDBMS I RDBMS and SQL Basics,,"""Java Backend Data Persistence with SQL, Hibernate""","Java Backend Development, Android Development Core",,0,,,0
query data from multiple tables.,,,,,,,,,,,,,Java RDBMS I RDBMS and SQL Basics,,"""Java Backend Data Persistence with SQL, Hibernate""","Java Backend Development, Android Development Core",,0,,,0
,,,,,,,,,,,,,,,,,,0,,,0
perform CRUD operations on an RDBMS using SQL.,,,,,,,,,,,,,Java RDBMS II Inserting and Modifying Data using CRUD Operations,,"""Java Backend Data Persistence with SQL, Hibernate""","Java Backend Development, Android Development Core",,0,,,0
perform CRUD operations on an RDBMS using JPA and Hibernate.,,,,,,,,,,,,,Java RDBMS II Inserting and Modifying Data using CRUD Operations,,"""Java Backend Data Persistence with SQL, Hibernate""","Java Backend Development, Android Development Core",,0,,,0
use flyway migrations to build a schema,,,,,,,,,,,,,"""Java RDBMS III Querying, Migrations, and Seeding""",,"""Java Backend Data Persistence with SQL, Hibernate""","Java Backend Development, Android Development Core",,0,,,0
use JPA and Hibernate to perform advanced query operations on a RDBMS.,,,,,,,,,,,,,"""Java RDBMS III Querying, Migrations, and Seeding""",,"""Java Backend Data Persistence with SQL, Hibernate""","Java Backend Development, Android Development Core",,0,,,0
add relationships between tables.,,,,,,,,,,,,,Java RDBMS IV Data Modeling and Authentication,,"""Java Backend Data Persistence with SQL, Hibernate""","Java Backend Development, Android Development Core",,0,,,0
explain data normalization and normal forms.,,,,,,,,,,,,,Java RDBMS IV Data Modeling and Authentication,,"""Java Backend Data Persistence with SQL, Hibernate""","Java Backend Development, Android Development Core",,0,,,0
implement Spring Security and OAuth2. to provide authentication for a project.,,,,,,,,,,,,,Java RDBMS IV Data Modeling and Authentication,,"""Java Backend Data Persistence with SQL, Hibernate""","Java Backend Development, Android Development Core",,0,,,0
configure an application using Spring Cloud Config Server.,,,,,,,,,,,,,"CI I  - Introduction and Spring Cloud Config Server,Deployment and Best Practices with Spring Cloud Config Server",,Building Java Web APIs,"Java Backend Development, Android Development Core",,0,,,0
"articulate the benefits of, the principles behind, and the processes of CI.",,,,,,,,,,,,,CI I  - Introduction and Spring Cloud Config Server,,,,,0,,,0
implement CI using Jenkins.,,,,,,,,,,,,,Continuous Integration with Jenkins,,Java Testing and Continuous Integration,"Java Backend Development, Android Development Core",,0,,,0
create builds and pipelines using Jenkins.,,,,,,,,,,,,,Continuous Integration with Jenkins,,Java Testing and Continuous Integration,"Java Backend Development, Android Development Core",,0,,,0
explain the Scrum Agile Methodology including the 5 basic steps.,,,,,,,,,,,,,Intro to Agile and JIRA,,Java Testing and Continuous Integration,"Java Backend Development, Android Development Core",,0,,,0
document their project’s APIs using Swagger integrated with Spring.,,,,,,,,,,,,,Documenting APIs with Swagger,,,,,0,,,0
create and update stories in Jira.,,,,,,,,,,,,,Intro to Agile and JIRA,,Java Testing and Continuous Integration,"Java Backend Development, Android Development Core",,0,,,0
estimate story complexity using story points.,,,,,,,,,,,,,Intro to Agile and JIRA,,Java Testing and Continuous Integration,"Java Backend Development, Android Development Core",,0,,,0
implement using a live project the Scrum Agile Methodology including the 5 basic steps using Jira.,,,,,,,,,,,,,,,,,,0,,,0
"participate in an IPM, standup meeting, sprint close / demo and retrospective.",,,,,,,,,,,,,,,,,,0,,,0
document a REST service using Swagger.,,,,,,,,,,,,,Documenting APIs with Swagger,,,,,0,,,0
"use JUnit to write, run, and interpret the output of unit tests.",,,,,,,,,,,,,Automated Testing using TDD,,Java Testing and Continuous Integration,"Java Backend Development, Android Development Core",,0,,,0
explain what automated testing is and why it is important.,,,,,,,,,,,,,Automated Testing using TDD,,Java Testing and Continuous Integration,"Java Backend Development, Android Development Core",,0,,,0
troubleshoot running services using both system and programmatically generated logs,,,,,,,,,,,,,"""Middleware, Logging, Message Queues""",,Building Java Web APIs,"Java Backend Development, Android Development Core",,0,,,0
implement Java Front End for a Spring REST service,,,,,,,,,,,,,"""Exception Handling, Java Front End""",,Building Java Web APIs,"Java Backend Development, Android Development Core",,0,,,0
implement industry standard exception handling including user friendly exception messages,,,,,,,,,,,,,"""Exception Handling, Java Front End""",,Building Java Web APIs,"Java Backend Development, Android Development Core",,0,,,0
build a REST service using Spring Boot and other Spring Projects.,,,,,,,,,,,,,,,,,,0,,,0
"using Jedis, read from and write to cache and an in-memory database managed by Redis thus integrating an application with the in-memory cache Redis.",,,,,,,,,,,,,,,,,,0,,,0
explain the fundamentals of REST API,,,[Slide Deck for Presentation REST APIs](https://drive.google.com/file/d/16_hMP1t82WORUFQLXbvyRGifBWDnPzt5/view?usp=sharing),,,xHpUHBcFsBE,http://youtube.com/watch?v=xHpUHBcFsBE,https://www.youtube.com/embed/xHpUHBcFsBE,,,,,"""Intro to Maven, Spring, and Tomcat using REST Api""",,Building Java Web APIs,"Java Backend Development, Android Development Core",,0,,1,1
build a REST service using Spring Boot,,,"[Slide Deck for Presentation Spring Boot](https://drive.google.com/file/d/1IHJTnIzL2md_eLnWOH0DwRIC4TlO3wEI/view?usp=sharing)

[A Must Read for Spring - Top Spring Framework Interview Questions](https://www.baeldung.com/spring-interview-questions)",,,200ZFN_BuZc,http://youtube.com/watch?v=200ZFN_BuZc,https://www.youtube.com/embed/200ZFN_BuZc,,,,,"""Intro to Maven, Spring, and Tomcat using REST Api""",,Building Java Web APIs,"Java Backend Development, Android Development Core",,0,,1,1
produce a complete application following the Maven Phases.,,,[Slide Deck for Presentation Maven Phases](https://drive.google.com/file/d/19AuZ1Eq1Z0DSlgCHu_4Q4GyCo6R-nVFo/view?usp=sharing),,,connn6UWrm4,http://youtube.com/watch?v=connn6UWrm4,https://www.youtube.com/embed/connn6UWrm4,,,,,"""Intro to Maven, Spring, and Tomcat using REST Api""",,Building Java Web APIs,"Java Backend Development, Android Development Core",,0,,1,1
generate documentation using Maven.,,,,,,,,,,,,,,,,,,0,,,0
configure Tomcat as their own JSP server.,,,,,,,,,,,,,,,,,,0,,,0
monitor Tomcat and manage settings as needed.,,,,,,,,,,,,,,,,,,0,,,0
"explain the uses of and differences between Maven, Spring, and Tomcat",,,[Slide Deck for Presentation Maven Spring Tomcat](https://drive.google.com/file/d/1YwXCWasFsDDLpAfN9VB2zHbabb1-qrFL/view?usp=sharing),,,4Ib-jL1_kkU,http://youtube.com/watch?v=4Ib-jL1_kkU,https://www.youtube.com/embed/4Ib-jL1_kkU,,,,,"""Intro to Maven, Spring, and Tomcat using REST Api""",,Building Java Web APIs,"Java Backend Development, Android Development Core",,0,,1,1
"implement the Spring Architecture, including Spring Boot.",,,,,,,,,,,,,,,,,,0,,,0
implement Beans throughout the Beans’ lifecycle controlling the Beans using annotations.,,,[Slide Deck for Presentation Bean Life Cycle](https://drive.google.com/file/d/19CrQSt1KIU9DsI8GBR24XRZjDBXaSPu4/view?usp=sharing),,,Eey81DRObLc,http://youtube.com/watch?v=Eey81DRObLc,https://www.youtube.com/embed/Eey81DRObLc,,,,,"""Intro to Maven, Spring, and Tomcat using REST Api""",,Building Java Web APIs,"Java Backend Development, Android Development Core",,0,,1,1
implement Spring dependency injections.,,,,,,,,,,,,,,,,,,0,,,0
use JUnit to test Web APIs.,,,,,,,,,,,,,,,,,,0,,,0
test using mocks and stubs.,,,,,,,,,,,,,,,,,,0,,,0
build custom Redux Middleware for a Redux Store,"There is a lot that we can do with middleware in Redux. Building custom middleware functions can give us some great functionality, but will also help us better understand how middleware work.",,"Building custom middleware seems like it would be complicated, but it is suprisingly straight forward. Here are the underlying principles, as stated in [this article](https://www.codementor.io/vkarpov/beginner-s-guide-to-redux-middleware-du107uyud):

""The redux middleware syntax is a mouthful: a middleware function is a function that returns a function that returns a function. The first function takes the store as a parameter, the second takes a next function as a parameter, and the third takes the action dispatched as a parameter. The store and action parameters are the current redux store and the action dispatched, respectively. The real magic is the next() function. The next() function is what you call to say 'this middleware is done executing, pass this action to the next middleware'.""

So what does this look like in code? It's a pattern we are getting more and more familiar with.

```js
const customMiddleware = store => next => action => {
    // do something with the action here, and then don't forget to call next!
    next(action);
};
```

Ah the possibilities! We have the innermost function that has access to the entire store and the action. Let's use this to build our own custom middleware function.","We're going to build a middleware function that sets a user's authentication token to localStorage (a token that the server returns to the web browser to authenticate the user - you'll learn all about these in the backend unit). Follow along [here](https://codesandbox.io/s/4zzojv5v9w)

We'll start with the code we saw above.

```js
const customMiddleware = store => next => action => {

};
```
We'll check the incoming action. If the type is `LOGIN_SUCCESS` we will set the token to localStorage. Outside of the `if` statement, we'll run `next` and pass in the action. Never forget to run `next()`, unless of course you want to intentionally block the action. If you forget, it will take a while of debugging to figure out why the dispatched action is not being passed to the reducer.

```js
export const addTokenToLocalStorage = store => next => action => {
  if(action.type === LOGIN_SUCCESS) {
    localStorage.setItem('userToken', action.payload.token);
  }
  next(action);
};
```
The last thing we have to do is pass in our custom middleware to the `applyMiddlware()` function in `index.js`, then it will work!

Here is a finished [codesanbox](https://codesandbox.io/s/54397xql5k) with this middleware implemented.","Create another custom middleware for any React/Redux app you have. Find an action that has a payload. In your middleware function, when that action is dispatched, set its payload to localStorage. Run the app to make sure it is being set in localStorage.",4aPdZIuwg2o,http://youtube.com/watch?v=4aPdZIuwg2o,https://www.youtube.com/embed/4aPdZIuwg2o,,,,,Redux Middleware / Authentication,,Redux,Full Stack Web Development Core,,1,1,1,3
explain what a visual hierarchy is and why it matters,Everything in an interface can be prioritized. Visual hierarchy is how we design this prioritization into the interface and present the most important information to the user.,,"Anyone can slap together some content and call it an interface, but a visual hierarchy is what makes an interface look “designed”. Visual hierarchy helps to organize the page and present the content, functionality, and overall experience to the user in an intuitive, digestible way. Without a visual hierarchy, our interface would just look like blobs of content.

If a visual hierarchy is so important, how do we go about designing it? First, we need to identify the content we’d like to include on the page, and then prioritize it according to our user, business, and product needs. Then, we can design it using the design principles of visual hierarchy.

## The Design Principles of Visual Hierarchy
Designing a visual hierarchy can seem confusing at first because it starts as an analytical, conceptual exercise before becoming a design one. When we’re identifying and prioritizing the content, we can do most of our work in Google Docs or on paper. Once we have our prioritized content, we’re ready to design our visual hierarchy.

In order to create our visual hierarchy, we can leverage several design principles. These include size, contrast, whitespace, proximity, symmetry, the rule of thirds, the rule of odds, implied movement, the concept of “below the fold”, and eye tracking.

### Size
The larger something is, the more importance it has in the visual hierarchy. So you can use size as a way to let people know what you want them to look at. 

Generally speaking, the largest thing on the page gets looked at first. So on this page, we can see that this hero section draws a lot of attention, but the little boxes down below don’t. 

Photos tend to draw the eye more than other elements on a page. So, if you have say text and photos at roughly the same size, the photo will get the first glance. But, an extremely large headline will get glanced at before a relatively smaller photo.

### Contrast
Contrast is a tool you can use to make one object stick out compared to another. More than just color, contrast is speaking about tonality and vibrancy.

Using black on white or white on black offers the largest contrast, while other colors have different outcomes. The greater the contrast between an element and its background the more important it seems.

### Whitespace
Whitespace is one way to use spacing. Whitespace is not always literally white. It refers to the area around an object. Generally speaking, the more whitespace around an object the more attention it receives and the more important it seems—even if it’s small.

### Proximity
Another use of spacing is how we work with proximity. We use proximity to help group related information and imagery together. By grouping things, we can call attention and lend importance to the elements that might otherwise seem unimportant. 

So, by nestling a headline next to a large image, the headline might still be relatively small, but we understand its role and importance by its proximity to the image. Using proximity we’re also guiding the eye around the page.

### Symmetry
Many untrained designers tend to design with symmetry automatically. Making everything center aligned, the same sized, evenly spaced, etc.

Symmetry is not bad, but it tends to be less engaging in compositions. There is certainly a place for symmetry in design. You should always keep it in your toolkit. It adds stability to a design, but it also is harder to use in interaction design because it makes a path through a page more difficult to find and follow.

### The Rule of Thirds
The rule of thirds is used to add interest to an interface and it is simple to remember and powerful in its use. The rule of thirds means that if you were to divide your page or screen by two vertical, evenly spaced lines and two horizontal and evenly spaced lines, you would place your element of focus at the point of intersection of two of the lines. 

This is just a very solid, useful guideline that can quickly turn a stale layout into an interesting one. It’s frequently used in photography and art composition, and it can be used very effectively in digital composition as well.

### The Rule of Odds
The rule of odds tells us that humans tend to respond better to odd numbers of elements as opposed to even ones. This is related to symmetry in that even numbers, being divisible by two, are a little more boring than odd numbers. They engage the mind a little less. So using odd numbers of items on the page can help add interest to your layout.

### Implied Movement
Implied movement helps keep a user engaged. We can create implied movement by influencing our user’s saccades. Saccades are the small movements the eye makes while reading. Saccades happen basically whenever we’re looking at anything, and the saccades are our eyes taking in all the things.

By laying out our page with implied movement we help guide the saccades to the next item of interest that will help carry the narrative of our pages forward. We create implied movement by creating diagonal relationships between the elements of our page or by incorporating actual imagery of implied movement.

### “Below the fold”
There’s a term that emerged from the newspaper lexicon and has caught hold in web and mobile contexts, in spite of its literal ridiculousness, and that is “below the fold”.

When newspapers were sold in stands. You had basically the top half of the page to grab people’s attention. When designing a news page, you had the whole page open on the screen, but you had to be aware of where that page would end up being folded, so you didn’t bury your most compelling headlines where no one could see them.

In UI design, we use this to refer to all of the content that is on the screen before the user scrolls the page. That means if the user never scrolls then this is the only content they see. Therefore, we need to include the most important and enticing content here so they are encouraged to engage with us.

### Eye Tracking
When we read a page, our eyes often follow either an F or a Z pattern. This is tremendously important for our visual hierarchies because it shows us where our users’ attention is most likely going to fall on the page.

Furthermore, our designs directly influence which pattern our users will follow. If we present our content as a blog post or as items in a list, then our users will typically follow an F pattern. So, when we’re designing content heavy pages, we should keep this in mind so we can place the most important information where our user will see them.

In a less text-heavy interface, users tend to use the Z-pattern to scan the page for information and make sure they didn’t miss anything. So, this pattern is useful for highlighting a logo, a call-to-action, and graphical content.

### Altogether Now
In practice, we’ll rarely use just one of these principles on their own. Instead, we’ll use a variety of them at once to design our visual hierarchies.",,Look at this Training Kit page and identify three principles of visual hierarchy.,,,,,,9 Effective Tips on Visual Hierarchy,- What is a visual hierarchy?,Intro to Visual Hierarchy,Active,Intro to Design Theory,UX Design Core,,1,1,,2
"distinguish between front-end, back-end, database, and what tasks are appropriate for which","Web applications are built on a relatively thick stack - from the client (user with their browser) over a network to the back-end (server) and database (for data persistence). As a data scientist you won't master any particular piece, but you should understand the whole picture.","Refer to the web program, and encourage students to seek out web students to chat/work on side-projects with.","A web application is a user-facing piece of software implemented with a client-server architecture. The client (the user's browser) makes requests - specifically, *HTTP* (Hypertext Transfer Protocol) requests over a network (the Internet, or a local network for e.g. internal corporate web applications).

The server receives this request, and then builds and sends a *response* - generally, a mixture of HTML/CSS and JavaScript, a.k.a. ""a web page."" The client receives the response, and the web browser renders it so the user can see whatever it was they asked for.","From the above summary, it's fairly clear what the **front-end** of a web application is - specifically, it's that HTML/CSS and JavaScript returned in response to user requests. But what's the difference between the back-end and the database?

The **back-end** is the direct server receiving requests and handling the routing/business logic to determine and send the appropriate response. The **database** is a generally separate server where data is actually *persisted* - saved in a durable fashion, for later retrieval by the web application. In fact, many web applications are essentially highly usable database querying machines - they let a user interact with a front-end, send requests to a back-end which gets or changes data in a database.

Why separate the back-end and the database? A useful model is to have a back-end server application that is *stateless* (or close to it) - that is, it doesn't persist or save or depend on persisting or saving things. It just has the appropriate logic to respond as desired in a given situation - and as such, it's much easier to scale, spin up or down extra instances, and so forth.


Now that you know a bit about the pieces, consider this example of a simple full-stack web application:

- Front-end: a webpage styled with simple CSS (e.g. Bootstrap), listing TODO items for a user in a bullet point list
- Back-end: a Flask application that receives requests for returning, creating, or completing/deleting TODOs, and returns responses with the appropriate TODOs for the front-end to render
- Database: a PostgreSQL instance that stores the actual TODO data for users, which the back-end uses to persist and retrieve data","Think of your own example of a full-stack web application, and list what specific responsibilities you think fall to which piece of the stack. You may pick an existing application or one you imagine - in either case, share your analysis with a classmate and offer them feedback on theirs.",dqq951Msj_Q,http://youtube.com/watch?v=dqq951Msj_Q,https://www.youtube.com/embed/dqq951Msj_Q,,"Solution stack,""Hypertext Transfer Protocol, HTTP (Wikipedia)""","How Search Works,Picnic CSS",,Web Application Development with Flask,,Productization and Cloud,DS - Data Engineering,,1,1,1,3
understand and follow Python namespaces and imports,What happens when you `import foo from bar`? And what is run when you type `my_function()` in your repl? More than you may think!,"Python scoping and imports are fairly clean (usually ""just works"", versus JavaScript), but is still worth tracing through specifically. If students are on top of it, fill extra time with a bit of object-oriented programming (since that's where a lot of the scoping actually comes in), to foreshadow/prepare for the next module.","A core part of Python philosophy is the [principle of least astonishment](https://en.wikipedia.org/wiki/Principle_of_least_astonishment) - that the behavior of the code should be what the programmer expects. The motivation is to free the programmer from low-level details, and allow them to focus on the larger flow and design.

You've already been doing this! Your Python notebooks may have relatively short high-level pieces of code, but under the hood they're doing all sorts of cool crazy things. And, hopefully, most of the time the things they do are the things you want.

But, they aren't always - and what's more, if you're always working at the top of the stack, you're limited to the cases considered by the people who wrote the tools you depend on. If you want to have more freedom and power, you must *go deeper*.","In a text editor, make a file named `fibo.py`, and enter the following code:

```python
# Fibonacci numbers module

def fib(n):    # write Fibonacci series up to n
    a, b = 0, 1
    while a < n:
        print(a, end=' ')
        a, b = b, a+b
    print()

def fib2(n):   # return Fibonacci series up to n
    result = []
    a, b = 0, 1
    while a < n:
        result.append(a)
        a, b = b, a+b
    return result
```

Save this file to a directory, and navigate to that directory with a command line terminal. Then run `python`, and execute the following:

```python
>>> dir()
['__annotations__', '__builtins__', '__doc__', '__loader__', '__name__', '__package__', '__spec__']
```

This shows you what is in scope in a basic empty Python session. You shouldn't see much - only things with double underscores, like `__annotations__` and `__builtins__`.

Double underscores are a Python convention indicating that, while you can poke at these things, they are core to Python functionality and you may break things in strange ways if you change them. See also - [monkey patch](https://en.wikipedia.org/wiki/Monkey_patch).

Next, run the following:

```python
>>> from os import getcwd
>>> getcwd()
'/Users/you/some/project/directory'
```

This should show you the directory where you started Python, referred to as the *current working directory*. This is important because it is the first place `import` looks for things.

Now run:

```python

>>> import fibo

>>> fibo.fib(1000)0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987
>>> fibo.fib2(100)[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]
>>> fibo.__name__
'fibo'
```

If you see output as above then you set things up correctly, and now have reusable functions for calculating Fibonacci numbers in a module that you can access wherever you can put `fibo.py`!","1. Make your own module with functions you think may be useful to have in a reusable context. Use your imagination! Later, you can add them to the `lambdata` package.
2. Make a directory in your Google Drive and upload `fibo.py` and/or the module you made in part 1. Attach your Google Drive to a Colab notebook, and import your modules and use your functions. Reusable code, in the cloud!
3. Experiment more with the built-in `dir()` function to inspect objects and check out where things ""live"" in Python.",,,,,Python Modules,Data science is different now,,"""Python Modules, Packages, and Environments""",,Software Engineering and Reproducible Research,DS - Data Engineering,,1,1,,2
create their own Python package and install dependencies in a dedicated environment,"Modules are great, but if you need more code, you need something bigger - a package!

Packages usually benefit from other packages, so to specify those dependencies in a reproducible and portable fashion, we'll also learn about virtual environments.","This will be fiddly content and involve lots of student-specific debugging - don't get bogged down, defer thorny cases for PMs to handle 1:1 later. The goal is to understand Python virtual environments, and demonstrate use of pipenv and other modern tools to create and use them - focus on that, and student implementation can follow.","You're already a consumer of Python packages and dependencies, and you actually already use containers - they're what makes cloud hosted notebooks such as Google Colab work. Now it's time to learn a bit about how these really work, so you can customize them and make your own.

As a Data Scientist, you may or may not specialize in this sort of development work. But even if you are more of a ""type A analysis"" person, *knowing* how these things work at a high level can make you a much more informed consumer and debugger.","In the live lecture, we're going to start our own Python package the right way - by making an environment with `pipenv`, installing our dependencies, and making some classes. Before class, be sure to download and install [Anaconda](https://www.anaconda.com/distribution/)!

Individual computers/operating systems vary, so specific steps won't be listed here - follow the instructions on the Anaconda page. If you encounter issues, don't be shy - ask for help from staff or your fellow students.","1. Get a head start - read up on `pipenv`, and see if you can figure out making your own virtual environment. Try to install `numpy` in it, and verify that you can activate the environment and import the specific version of the dependency you installed.
2. Check out [Cookiecutter Data Science](http://drivendata.github.io/cookiecutter-data-science/) for another approach for building a starter data science project in a package. Try to make your own project with it!",,,,,"Python Environment (XKCD),PyPI,Anaconda Distribution","Cookiecutter Data Science,Python Packaging User Guide,Pipenv documentation,""To get hired as a data scientist, don't follow the herd""",,"""Python Modules, Packages, and Environments""",,Software Engineering and Reproducible Research,DS - Data Engineering,,1,1,,2
"create a basic Python class, with a constructor, methods, and fields","Python is a pragmatic multi-paradigm language, and object-oriented programming is one of the most important and widely used of its supported paradigms. In this module you'll learn how to make a basic Python class, and some of the common language used to describe elements of code in object-oriented programming.","OOP is big/deep - this is a quick overview, and arguably all that is really needed for DS. But for some students, emphasize extra goals/resources, and mention software design patterns as a good thing to read up on.","Classes are the top level organizational structure in OOP. They are the ""blueprints"" for the different objects that will exist within our program.

For example, if a developer writes a Player class, they can then use this blueprint to create many different copies of Player objects throughout a program.

Classes contain:
* Fields - also known as attributes or properties. They hold state information about a specific instance of an object. Examples might include name, size, or image.

* Methods - functions that belong to a specific class. They represent the behaviors this object should have. If we continue to think about the Player class, it might have methods such as move() or jump().

* Constructors - special methods, defined with init() in Python, that are used to instantiate an object of this class.

* self - keyword used to refer to class-level variables and methods. These have scope across the entire class. Variables may also be declared normally and will have scope limited to the block of code they are declared within.","Consider the following class as a way to represent complex numbers.

```python

class Complex:
    def __init__(self, realpart, imagpart):        self.r = realpart
        self.i = imagpart

x = Complex(3.0, -4.5)
x.r, x.i
```

Execute the above code in a Python repl/environment of your choice (a notebook can work too). Make multiple instances of the class, inspect them, and try to use them interactively to perform basic mathematics (arithmetic).","Rewrite the `Complex` class with a method `add` that takes a complex number as an argument and returns the sum of it with the complex number it is being called from (`self`).

Stretch goal - implement all basic arithmetic operations (`subtract`, `multiply`, `divide`).",,,,,"Object-oriented programming (Wikipedia),Python Classes Tutorial","Anti-patterns,Software Design Patterns",,"""OOP, Code Style and Reviews""",,Software Engineering and Reproducible Research,DS - Data Engineering,,1,1,,2
"write stylistic (PEP 8) Python code, and give and receive a basic code review","You say potayto, your coworker says potahto - how do you work on the same code? Style and code reviews are about *consensus* and *common understanding* - there is no single ""right"" style, but agreeing and doing things similarly makes the whole codebase more homogeneous and easier to read.","Try to make this fun/interactive - ""war stories"" may be particularly helpful if you have any related to ""ugly"" codebases making it hard to fix bugs or write new features.","Code style refers to the ""look"" and formatting of the code - it is orthogonal to the actual logic or results. That is, code with ""bad style"" can still run and get results.

So why worry about style? Because, though it can run, code that is harder to read is more error prone, and harder to fix the inevitable errors that occur. It's also harder to extend and build on, which is the real long term goal of a production codebase.

In this module we will explore what makes for *good* style, and tools that help us enforce it. Note that in some contexts this is referred to as ""linting"", and the corresponding tools as ""linters.""","Consider the following code:

```python
import math, sys;

def example1():
    ####This is a long comment. This should be wrapped to fit within 72 characters.
    some_tuple=(   1,2, 3,'a'  );
    some_variable={'long':'Long code lines should be wrapped within 79 characters.',
    'other':[math.pi, 100,200,300,9876543210,'This is a long string that goes on'],
    'more':{'inner':'This whole logical line should be wrapped.',some_tuple:[1,
    20,300,40000,500000000,60000000000000000]}}
    return (some_tuple, some_variable)
def example2(): return {'has_key() is deprecated':True}.has_key({'f':2}.has_key(''));
class Example3(   object ):
    def __init__    ( self, bar ):
     #Comments should have a space after the hash.
     if bar : bar+=1;  bar=bar* bar   ; return bar
     else:
                    some_string = """"""
                       Indentation in multiline strings should not be touched.
Only actual code should be reindented.
""""""
                    return (sys.path, some_string)
```

Pretty ugly, yes? And it's not just an aesthetic problem - the dense and at times inconsistent way the code is written means, even though it runs, it's hard to read and understand.

Now consider this version of it:
```python
import math
import sys


def example1():
    # This is a long comment. This should be wrapped to fit within 72
    # characters.
    some_tuple = (1, 2, 3, 'a')
    some_variable = {
        'long': 'Long code lines should be wrapped within 79 characters.',
        'other': [
            math.pi,
            100,
            200,
            300,
            9876543210,
            'This is a long string that goes on'],
        'more': {
            'inner': 'This whole logical line should be wrapped.',
            some_tuple: [
                1,
                20,
                300,
                40000,
                500000000,
                60000000000000000]}}
    return (some_tuple, some_variable)


def example2(): return ('' in {'f': 2}) in {'has_key() is deprecated': True}


class Example3(object):
    def __init__(self, bar):
        # Comments should have a space after the hash.
        if bar:
            bar += 1
            bar = bar * bar
            return bar
        else:
            some_string = """"""
                       Indentation in multiline strings should not be touched.
Only actual code should be reindented.
""""""
            return (sys.path, some_string)
```

Much better! Yes, it's many more lines (a lot of style rules are about breaking things out), but with more whitespace comes more readability. It's also consistent, following a standard that is widely used in the Python world.

We'll also discuss peer code reviews - remember, in your career you will read more code than you write! Check out the [peer code review checklist](https://github.com/LambdaSchool/Peer-Code-Review-Checklist), and consider the following tips for reading and giving feedback on code from other people:

- Can you follow the code flow/layout?
- Can you understand the logic/reasoning for what it is doing?
- Could you build with (`import` and use) or extend on it (as a developer adding more to the codebase)?","The above example was generated automatically by [autopep8](https://pypi.org/project/autopep8/) - try installing and running it on some of your own code, and see the results!",,,,,"Lambda School Peer Code Review Checklist,PEP8 online,PEP8 Python Style Guide","Python typing module,Google Python Style Guide,autopep8,VS Code Python Documentation,Python plugin for VS Code",,"""OOP, Code Style and Reviews""",,Software Engineering and Reproducible Research,DS - Data Engineering,,1,1,,2
"read and write quality comments, Pydoc, and READMEs","""Everyone knows that debugging is twice as hard as writing a program in the first place. So if you're as clever as you can be when you write it, how will you ever debug it?"" - [Brian Kernighan in ""The Elements of Programming Style""](https://en.wikiquote.org/wiki/Brian_Kernighan)

Every topic we've covered this week helps us address the above dilemma, but documentation plays a particularly key role. It's where you write those things that the code itself doesn't quite say, but you had to think through to be able to come up with it. Your coworkers (and future you) will thank you!","Err on the side of encouraging comments, but do give a few examples of ""trivial comments"" that should be avoided, e.g.

```python
x = 2  # Assigns the value 2 to x
```","You read more code than you write - and the more experience you get and the higher your position, the more that is true. So when you write code, you should always remember that it's not good enough for it to just *run*. Obviously that matters, but it's also important that your code can be *read* - that is, understood by another human, be it a coworker, or just you but in the future.

Code that runs assigns and moves the bytes that the computer wants and understands - one of the biggest challenges of coding is ""thinking like a computer"" and writing code that does what it should. But your human ""mental state"" when writing that code is extremely temporary - it requires great focus to write complicated code, and you'll quickly forget the details within weeks if not days.

How do we send information to the future? We write it down! Comments, Pydoc, and READMEs are how we (as Python developers) save our human mental state, and share it with whoever works with our code in the future.","There are two sorts of comments in Python:

```python
# Inline comment
""""""
Multi
Line
Comment
""""""

```

Both are useful, but serve different purposes - an inline comment is a brief annotation, to indicate the meaning (or ""trick"") of a line or maybe a few lines of code.

Multi-line comments, aka docstrings, (which are technically strings, but are ignored by the interpreter as they aren't being assigned to anything) are *documentation*, and can describe details such as the argument and return types of a function, links to resources, etc. They're what the `help()` function grabs to explain things in the repl, and there's a tool named [Pydoc](https://docs.python.org/3/library/pydoc.html) that extracts docstrings and generates HTML (this is how a lot of code documentation sites are built!).","Go back to your `lambdata` project, and make sure you've added comments as appropriate. In particular, have docstrings wherever PEP8 suggests - then build/import your module and try the `help()` function on your code. For an extra goal - try building HTML documentation with `pydoc` - you can even put it in a `docs/` directory and push to GitHub to deploy with GitHub Pages!",,,,,Pydoc,"Literate programming (Wikipedia),Sphinx Python Documentation Generator,pandas docstring guide",,"""Software Testing, Documentation, and Licensing""",,Software Engineering and Reproducible Research,DS - Data Engineering,,1,1,,2
recognize major open-source licenses and their significance for personal and professional use,"Code rules the world - binaries (compiled code) are just a by-product. So the rules and *laws* around who gets to see and use what code in what situations matter quite a bit. We don't all have to be lawyers, but we should all be informed coding citizens.","This should mostly be a soft discussion/reading topic. The main takeaway - not all open source licenses are the same, some (GPL) are far more ""infectious"" than others (BSD, MIT). All actually *use* copyright to try to put things out there in a ""somewhat restricted but for the common good"" way.","You may think that writing code is a relatively new thing - but lawyers have been doing it for centuries. *Legal code*, though not quite as deterministic as computer code, has been an important part of human history for many centuries now.

One area it has been applied is to the idea of ""intellectual property"" - the ownership of ideas themselves. Ideas are powerful, and can have real economic and other forms of value. In many areas, intellectual property is straightforward (if occasionally controversial) - the creator of an idea (or whoever pays them) ""owns"" the idea, as represented by things like copyright and patents.

But in software, a remarkably different situation has emerged - the open source movement, as embodied by idealists such as [Richard Stallman](https://en.wikipedia.org/wiki/Richard_Stallman), has had tremendous impact on software development, technology, and the world. The idea that code should be available, while pragmatic from a development perspective, has created an ecosystem where arguably the majority of high quality software in the world is available not just in binary but source code form.","There are two major ""schools"" of open source licenses - GPL and BSD/MIT. The GPL (General Public License, part of the GNU Project with Richard Stallman) is the more ""aggressive"" of the two - it takes the stance that source code shouldn't just be available, but that people who use open source code should also make their source code available. This is refererd to as ""copyleft"", and some consider it ""infectious"":

```
""Linux is a cancer that attaches itself in an intellectual property sense to everything it touches.""

--Steve Ballmer, Microsoft
```

BSD/MIT-flavored licenses take a different approach - they put code out there, and the main presumption they make on anyone who uses it is that the original code writer isn't liable for bad things (i.e. you can't sue them), and that you should include the license with your code and acknowledge the original author (but not necessarily release your own code the same way).


Which is the right approach? That's the realm of philosophy - but both have major proponents and users. Linux (as Ballmer bemoaned) is the single most influential GPL licensed software, though there is an entire GPL toolchain (most of what you run on a command line). BSD (the operating system family) is, unsurprisingly, BSD licensed, and the MIT license is also widely used (for instance by Lambda School for our project code we share with you).

Both approaches have an important commonality - rather than *foresake* copyright (as with Public Domain), they *use* copyright to claim certain, but limited, rights. The main practical difference - BSD/MIT code is more ""business-friendly"" than GPL (indeed MacOS is built on BSD).
There exist finer differences between licenses, and if you're interested you should read more at the [Open Source Initiative](https://opensource.org/licenses).","Read [the MIT License, Line by Line](https://writing.kemitchell.com/2016/09/21/MIT-License-Line-by-Line.html), and write a summary of it with a target audience of a fellow code-writing coworker.",,,,,"TLDR Legal,Open Source Licenses","Creative Commons,""The MIT License, Line by Line""",,"""Software Testing, Documentation, and Licensing""",,Software Engineering and Reproducible Research,DS - Data Engineering,,1,1,,2
"write basic SQL queries to get specific subsets of data from a database and answer basic ""business questions""","The main purpose of SQL is to just get (`SELECT`) some data, and to restrict the data based on certain conditions (`WHERE`). Getting all customers from a certain region, or everyone who bought a certain product or on a certain day - these are common business questions useful for reports and dashboards, and easily answered with basic SQL.","Keep it simple, and *no local SQL install required* - use cloud toy environments (e.g. sqlfiddle.com). If folks want local, suggest SQLite (which is really just a flat file and a program to explore/query it) followed by PostgreSQL.","SQL is a standard, and a computational implementation of [relational algebra](https://en.wikipedia.org/wiki/Relational_algebra) - the math underpinning modern data modeling.

In relational algebra, datum are considered members of sets, where data with the same overall structure (attributes) are members of the same sets. Data in other sets has different attributes (columns if you want to picture it), but has at least one column shared with another set - a *key* that can relate entries across them.


So querying in relational algebra is essentially a batch of set operations - union, difference, Cartesian product, and intersection - but constrained to ensure the end result is valid.

$$
\Pi_{name, id}(\sigma_{state=CA}(Customers))
$$

The $\Pi$ symbol indicates projection (choosing attributes), and $\sigma$ indicates selection (setting conditions). The above translates roughly to ""Get the names and ids of all customers from California.""","Querying in SQL is essentially the same as relational algebra, but instead of mathematical syntax and Greek letters we use capitalized keywords like `SELECT` and `WHERE`. Here is a typical SQL query:

```sql
SELECT name, id
FROM customers
WHERE state = 'CA';
```


One counterintuitive difference - in SQL, `SELECT` is the equivalent of projection ($\pi$), and `WHERE` is the equivalent of selection (in relational algebra).

SQL queries are declarative - they simply state what they want, and the database sorts out the details. Depending on your career you may eventually want to specialize and dig deeper, but for now - trust the query planner (the part of the database that does this), and always start with queries as *simple* as you can.

Other common SQL constructs:

- `AND` - you can use `AND` to specify multiple conditions, e.g. `WHERE state = 'CA' and name = 'John Smith'`

- `LIMIT` - if you only want at most a certain number of rows
- `ORDER` - to sort output
- `GROUP` - to aggregate output (more on this tomorrow)",Imagine the customers table also has `address` and `customer_since` attributes (where `customer_since` is a year). Write a query to get all names and addresses of customers living in Colorado who have been customers for at least 10 years.,,,,,"SQL Fiddle,pandas comparison with SQL","SchemaCrawler,Lahman's Baseball Statistics,SQL.js Playground,SQL Tryit Editor",,Introduction to SQL,,SQL and Databases,DS - Data Engineering,,1,1,,2
"understand the purpose of SQL join, and perform joins to access data from multiple tables","What if the data you need lives in separate tables (e.g. one for users, and another for orders)? That's when you need to `JOIN` - write a query that brings data across tables together on some common key. This is where ""relational"" in relational databases comes from, and is the true heart of the power of SQL.","Teach a bit about joins/join types, but focus on implicit inner joins (not using the join keyword, just specifying table1.field1 = table2.field2 in a where clause) as more practical in most situations.

Old student PR with both Django ORM and some SQL answers for the RPG data questions: https://github.com/LambdaSchool/Sprint-Challenge--Django-II/pull/14/files","Joins come in several flavors, and a favorite of SQL puzzles is to understand the distinction between them. Consider a scenario where you have two tables, for now considered abstractly as $X$ (with $n$ rows $x_i$) and $Y$ (with $m$ rows $y_j$), and that there is some common *key* $id$ across the tables allowing rows to be connected. Following are the possible joins:

- Cross join - also known as *Cartesian product*, this combines each $x_i$ with each $y_j$, and will multiply out the number of rows returned ($n * m$)
- Left outer join - returns all $n$ rows of $X$, with the columns of $Y$ populated whenever the $id$ matches and allows a join and left as `null` otherwise
- Right outer join - similar to left, but uses the $m$ rows of $Y$ instead
- Inner join - only returns rows that are *both* in $X$ and $Y$, reducing the number of rows returned and guaranteeing that no `null` values introduced

SQL databases support all of the above, but the last case - inner joins - is the most practical in most situations. Cross joins are essentially never used outside of testing the database (most join implementations are cross-joins followed by filtering), and outer joins, while occasionally useful, should never be the default (only choose an outer join if you *know* it is appropriate for your problem).

There are specific cases of inner join referred to as *equi-join* (specifying what should be equal) and *natural join* (automatically joining by matching column names) - their implementation will vary across real-world databases, and use of natural join is generally discouraged.. Start with regular inner join - you can research and pick up more sophisticated techniques as needed later on.","The full syntax to specify an inner join is:

```sql
SELECT charactercreator_character.name, charactercreator_character_inventory.id
FROM charactercreator_character
INNER JOIN charactercreator_character_inventory ON
charactercreator_character.character_id = charactercreator_character_inventory.character_id;

```

This query can be made easier by using table aliases, and replacing the explicit join with an implicit inner join using a `WHERE` clause:

```sql
SELECT character.name, inventory.id
FROM charactercreator_character AS character,
charactercreator_character_inventory AS inventory
WHERE character.character_id = inventory.character_id;
```

Both above queries are identical, returning 898 rows for the included `rpg_db.sqlite3` data in this module. Since that's a lot of rows, let's just load the first 10:

```sql
SELECT character.name, inventory.id
FROM charactercreator_character AS character,
charactercreator_character_inventory AS inventory
WHERE character.character_id = inventory.character_id
LIMIT 10;
```

```
Aliquid iste optio reiciendi	1
Aliquid iste optio reiciendi	2
Aliquid iste optio reiciendi	3
Optio dolorem ex a	4
Optio dolorem ex a	5
Optio dolorem ex a	6
Minus c	7
Minus c	8
Sit ut repr	9
Sit ut repr	10
```

What are we looking at? Character names and all their unique inventory `id` values - each of these then corresponds to an actual item, but the details of that lives in *another* table. Fortunately, we can get it by just growing our join:

```sql
SELECT character.name, item.name
FROM charactercreator_character AS character,
charactercreator_character_inventory AS inventory,
armory_item AS item
WHERE character.character_id = inventory.character_id
AND inventory.item_id = item.item_id
LIMIT 10;
```

```
Aliquid iste optio reiciendi	Quos re
Aliquid iste optio reiciendi	Dolores rem v
Aliquid iste optio reiciendi	Alias laboriosam sapiente e
Optio dolorem ex a	Sapiente do
Optio dolorem ex a	Natus
Optio dolorem ex a	Libero saepe accusantium
Minus c	Saepe ea vo
Minus c	Tempore
Sit ut repr	Atque laudantium dolor q
Sit ut repr	Sit rerum err
```

Note that all the names (for both characters and items) are automatically generated [lorem ipsum](https://en.wikipedia.org/wiki/Lorem_ipsum) - but the results look pretty good! We've successfully joined across three tables, connecting characters to the items they own.

The relationship between characters and items is known as *many-to-many* - one character can have many items, and one item can be had by many characters (""item"" here refers to the general idea of e.g. a sword, and not a specific copy of a sword). The intermediary `charactercreator_character_inventory` facilitates this relationship - if you have simpler relationships, you can get the results from joining only two tables. Other sorts of relationships:

- One-to-one - each entry has exactly one corresponding row in each table (e.g. books and ISBNs, people and SSNs)
- One-to-many - each entry in the first table can have multiple corresponding rows in the second table (e.g. books and book editions/printings, addresses and people who live there)

All of these can come up (many-to-one can be considered the reverse of one-to-many), but many-to-many (m2m) is particularly powerful. Consider other m2m examples - customers and items purchased, books and authors, and more.","Come up with your own real-world examples of situations/data that can be modeled with one-to-one, one-to-many, and many-to-many relationships. Write ""pseudo-SQL"" to describe and query the data.",,,,,"SQL Style Guide,SQL Joins Tutorial","pandas.DataFrame.to_sql,SQL Aggregation Functions,SQL Subqueries,SQL Joins (Wikipedia)",,Introduction to SQL,,SQL and Databases,DS - Data Engineering,,1,1,,2
understand and explain the advantages and disadvantages of traditional SQL databases,"When you only have a hammer, everything looks like a nail. When you only have SQL, must everything be relational?

For traditional SQL, you *do* need to fit your data in a relational paradigm. This is actually not a bad thing - much of the time, it is welcome structure. But it is important to understand the strengths and weaknesses of traditional databases, to make informed decisions between alternatives.","Some of this may be a review topic, but make it discussion/interview-practice oriented. Knowledge in this area can help a candidate stand out.",We've been using SQL the whole week - what are the tradeoffs of it as a tool?,"The immediate obvious cost of a relational database is the necessity of robustly specifying a schema, including relations between relevant tables. Another cost that becomes quickly evident with a real-world application - things change! And, while you can use `ALTER TABLE` to update your schema, it can be pretty tricky to do so and preserve/update existing data to not lose it.

Another prominent cost, and the main motivation of ""big data"" proponents of NoSQL, is scalability. *Traditional* relational databases need to fit an index for all keys (and sometimes other attributes) in memory - this limits the ability to grow the data beyond a certain size (namely the size where all of your keys fit in however much RAM you can afford).

This was highly important in the history of Google and several other major Internet companies, as they needed to figure out how to scale while using large quantities of relatively cheap commodity hardware. The solution is to distribute work across computers - but that requires structuring the work (and the end result) in a fairly clever way. More on this in the next sprint with Apache Spark!

But it's also important to note that, in present day, RAM is actually pretty cheap, and your data is probably not as big as you think it is. Unless you literally have hundreds of millions of users (and maybe even then), you *can* with proper structure fit things in main memory and use a relational approach.

So, what are the advantages of a relational approach? ACID - Atomicity, Consistency, Isolation, Durability - a set of guarantees provided by the use of transactions to ensure that data is always in a valid state, even if e.g. a query inserting new data is interrupted by a failure of any sort (including external to the system such as a power outage).

- Atomicity: a transaction functions as a ""unit"" - it either succeeds completely, or fails completely
- Consistency: transactions can only change a database from a valid state to another valid state
- Isolation: concurrent transactions are isolated from each other, so they have the same results as if they were run sequentially
- Durability: once a transaction has finished it will survive runtime system failure (it is recorded in non-volatile memory)

That's a pretty nice set of guarantees! It should be clear why, for instance, financial data is often suited for the ACID paradigm. But in general, ACID just means ""things work reliably as you'd expect"", and it's nice to have for any application.


If relational databases have ACID guarantees, what do non-relational approaches have? They usually give up or weaken one of the four qualities - for instance, many big data systems are ""eventually consistent"". This means that there can be intermediary states where the data is actually *not* consistent, but over time it reaches consistency. The typical acronym for adopting eventual consistency is **BASE** - Basically Available, Soft state, Eventually consistent.","Think of a situation (besides finance) where ACID guarantees are mission-critical, and another where it may be okay to weaken them. Describe both to a fellow student, and explain your reasoning.",,,,,"SQL Tutorial (Interactive),SQBolt,ACID (Wikipedia)","Database Normalization (Wikipedia),Database Normalization Explained in Simple English,CAP theorem (Wikipedia),Eventual consistency (Wikipedia)",,ACID and Database Scalability Tradeoffs,,SQL and Databases,DS - Data Engineering,,1,1,,2
make informed decisions about alternative databases,"In tech, we have lots of tools - this leads to the problem of choosing which tools to use when. Relational and non-relational - when should we use one over another, and can we get ""the best of both worlds?""","Again will be partially review (especially if MongoDB was introduced w/caveats), but embrace that - ask lots of questions, and try to get participation.","The first generation of ""big data"" solutions, as exemplified by Google's [MapReduce](https://en.wikipedia.org/wiki/MapReduce) paradigm, made significant tradeoffs in the name of scalability. Most notably, such systems weakened the ACID guarantees, as well as only providing a subset of the full querying functionality of SQL (queries such as sorting generally require comparison of all values in memory). They allowed companies to scale with available and affordable technology, but also lead many companies to develop solutions that were ""bigger"" and more complicated than they needed to be.


SQL is really just a standard for a querying language, albeit one tightly associated with the relational approach. But since NoSQL became the banner of the initial non-relational approaches, NewSQL has been coined as a term to characterize attempts at extreme scalability that *still* provide ACID guarantees.

It's also good to be aware of security issues - SQL injection is a common family of attacks where user-provided data causes undesired changes in the database. But despite the name, any database system is potentially vulnerable, and the solution is to always sanitize user input (building queries in your application rather than trusting what they pass in).","A good way to understand the challenges of NoSQL is to envision the MapReduce paradigm. MapReduce provides a framework for a programmer to specify a job that is then distributed and performed by a potentially large number of worker nodes (horizontal scalability). At a high level, there are three steps to computation in MapReduce:

1. **Map**: each worker gets a piece of the input data, and applies the given `map` function to process their data
2. **Shuffle**: workers redistribute the data based on the key of the output function (collecting common data in single worker nodes)
3. **Reduce**: workers concurrently process their output data, resulting in final output that is combined by a master node


MapReduce is no longer the most current approach for these problems, and for our current purposes it is OK to only understand it at a relatively high level. It was developed using principles from [functional programming](https://en.wikipedia.org/wiki/Functional_programming), and these more general principles are where you are suggested to explore if you want to dig deeper into the topic.

Functional programming treats functions as first-class citizens - objects in their own right that can be created and manipulated. This means you can also write *higher-order* functions (functions that take functions), such as **map** (apply a function to all items in a collection, returning an equally sized collection) and **reduce** (apply a function to combine items from a collection, returning a single item). It is also more purely mathematical, reducing state (encouraging immutability) and making it easier to reason about work being split up and combined.
This is a deep topic, but the important point for us as data scientists is that MapReduce gave horizontal scalability (tackle bigger problems with more computers) as opposed to vertical (tackle bigger problems with a single bigger computer), and economically horizontal scalability is the superior approach. Horizontal scalability also has essentially no ceiling, whereas vertical scalability has a hard limit (though these days it is quite high - you can get a single server with 1 terabyte of ram).

Because MapReduce splits data essentially randomly (by output key) between workers, it is well-suited for problems where computation order doesn't matter. For example, calculating the mean can be done by summing values in any order, and then dividing by the number of values. MapReduce simple has each worker sum their own arbitrary distinct subset (map), then return those partial sums to be finally added together in total (reduce). In mathematical terms - addition is commutative (order doesn't matter), so things work out.


How do we do better? It's an open problem! But there are several NewSQL approaches, including [shared-nothing architecture](https://en.wikipedia.org/wiki/Shared-nothing_architecture) (nodes are fully independent) as well as simply heavily optimized SQL datastores (usually organizing data by column).
An important caveat to all of the above - it's great to keep up on the latest and greatest, but many companies are still maintaining legacy codebases and existing solutions. So it is important and valuable to understand *all* approaches, and be able to work with any of them to create effective solutions.","Think about how you'd apply MapReduce to calculate [gradient descent](https://en.wikipedia.org/wiki/Gradient_descent) (the algorithm underpinning many statistical models). Try to sketch at a conceptual level/pseudocode, and then search for existing implementations and resources. Spend at least 20 minutes thinking about it before you look things up!",,,,,"Functional programming (Wikipedia),MapReduce (Wikipedia),NewSQL (Wikipedia)","Amazon Aurora,VoltDB,SQL Injection (XKCD)",,ACID and Database Scalability Tradeoffs,,SQL and Databases,DS - Data Engineering,,1,1,,2
identify appropriate use cases for document-oriented databases,"There's a lot of hype for Big Data - what are the actual use cases? One common case is document-oriented databases (also known as document stores), which are great for storing large amounts of, well, documents (generally unstructured or semi-structured content).

Some people refer to these as ""NoSQL"" - but really, that is an imprecise label (anything that isn't SQL is ""NoSQL""). More specifically, these are *non-relational* approaches to storing and retrieving data.","The main takeaways - document-oriented databases are handy when either (1) what you're doing won't fit in main memory, and/or (2) you don't want to deal with the overhead of planning a schema/things will be changing too fast.

Both of these are fairly weak reasons in most cases - main memory is big these days, and planning and writing a schema is a useful project and documentation step. But they can be valid, and should be identified as (when valid) the reasons for using this sort of tool.","Document-oriented databases are a common subset of key-value stores - a general non-relational database paradigm. You've already interacted with structures like this! The general data structure abstraction is known as the [hash table](https://en.wikipedia.org/wiki/Hash_table) (or hash map), and common real-world implementations are Python dicts and JSON.

How is a document-oriented database different? It's bigger, and (usually) run on somebody else's computer (or *computers*). Because values are indexed by key hashes, it is relatively easily to split the data across multiple instances, and figure out which instance is needed to actually retrieve a given record.


Traditional SQL databases are more difficult to scale, as they calculate an index for each table based on its primary key, and these indices must live in-memory in a single server. There are new approaches to work around this which we will discuss tomorrow (e.g. PostgreSQL sharding), but it is true that non-relational approaches are still at least conceptually easier to scale.

Another important distinction - as we've seen, SQL databases require specifying a schema (what your data/types are) up-front. Document-oriented databases can generally take any sort of key-value pairs, including nested key-values, allowing you to flexibly store data without preemptively specifying structure. Some argue that this allows for faster prototyping, and is good for situations where you need to rapidly develop something that is likely to be completely rewritten in the long term anyway.

But there is an important caveat - though some may characterize NoSQL as being ""schema-free"", it really just delays the necessity of a schema. *Eventually* your application needs to know what fields it is asking for (and probably what types they are). One way to characterize this approach is ""schema-on-read"", as querying a document store usually requires specifying *which* key/value pairs you want. This is in contrast with ""schema-on-write"", the approach of traditional SQL (which then lets you do things like `SELECT *` more easily, with some guarantees for what you're getting).","Consider the following situations:


- A bank, with mission-critical data demanding high reliability and integrity
- A 2-person startup, rapidly developing a prototype in a week to demonstrate to investors
- A medium size company, profitable and established in their niche, building a new product offering
- A large company, in the same situation as the prior medium size company

Think for a moment - which sort of database (relational or non-relational) would you recommend in which situation?

...

The first situation (the bank) arguably demands a relational approach. Banks should be well-defined in their data, so an up-front schema is a fine requirement. Banks also benefit more from the reliability of SQL than the scalability of document-oriented databases.

The second situation could go either way, but many would suggest document-oriented databases. You can quickly make and throw away things without worrying about a schema, and you're likely to rewrite everything after you get investor approval anyway. Overall when prototyping though - go with the tools you know. If the two people involved happen to be really experienced with PostgreSQL, that is likely to be a better approach.

The third situation is similarly dependent on details, but erring towards relational is likely the right decision. Many companies think they have larger data than they have - PostgreSQL is likely to scale up just fine, and if you're an established company you have the time to plan and develop something with structure.

The fourth situation is deceptively similar to the third one - even a larger company can get by with relational! The main exception would be if they *know* they are developing a product that is closely related to their existing line and will thus immediately see significant usage and ""big"" data. But otherwise, even a large company can get a lot of mileage out of SQL, and benefits even more from the clarity and structure of a schema (due to having more developers and a larger ecosystem).

In the last two situations it'd also be worth considering modern ""NewSQL"" approaches, which try to combine the best of both worlds (structure from relational, scale from non-relational). More on this in the next module!","Come up with two situations, one where relational is appropriate and another where non-relational is. Describe both in writing, as if you were making a recommendation to your manager for which database to choose.",,,,,"Your databases always have a schema,Red Hat Satellite standardizing on PostgreSQL backend","""""""640K ought to be enough for anybody"""""",A Comparison of Scalable Database Isolation Levels",,NoSQL and Document-oriented databases,,SQL and Databases,DS - Data Engineering,,1,1,,2
deploy and use a simple MongoDB instance,"MongoDB makes it quite easy to have data in the cloud - it won't be the sort of data you're necessarily used to, but it is useful and is a tool that many web apps depend on.","Add caveats when introducing MongoDB - the web program no longer teaches it, but we're using it because it is still the most recognized document store and because MongoDB Atlas has a good free tier to play with. But it has fallen a bit out of favor in general, and that is worth acknowledging.","A good mental abstraction for MongoDB is that it is ""big JSON in the cloud"" - it lets you save and retrieve (persist) JSON-serialized data, at scale, over a network. Since JSON is a ubiquitous format, widely supported by browsers and web applications, this is pretty handy.

But there is an important caveat - from a data science perspective, ""unstructured key-value pairs"" aren't the most useful way to have data. They're great for application development - just save things and retrieve them when you need them, but use a key instead of an inscrutable memory address. But this variety means that you end up with a collection of heterogeneous documents - you aren't guaranteed that they all have the same fields, so you can't just throw them in a DataFrame and work with them.

Nonetheless, you *will* encounter document-oriented databases in some form or another, and with proper care it is possible to get useful data from them.","Follow the instructions for [Getting Started with MongoDB Atlas](https://docs.atlas.mongodb.com/getting-started/) - registration is free, and the default options are generally all fine. You may have to wait some for your cluster to actually be generated - it's actually spinning up multiple nodes, demonstrating the natural scalability of non-relational approaches.

Once it is finished, you can click the `Connect` button for your sandbox cluster - you have to specify a username and password, and it is suggested you randomly generate and save these values somewhere. You can generate random strings by [clicking here](https://duckduckgo.com/?q=pwgen) (refresh for new ones), and use one for username and another for password (but save them somewhere locally so you remember them!).

Also, make sure to whitelist your current IP address! This will allow you to connect through the firewall that will protect your cluster. Want to connect from a Colab or other hosted notebook? Run `!curl https://ipecho.net/plain` to find the IP address. Note - it seems Colab IP addresses all start with `35.`, so you can whitelist all of them with the rule `35.0.0.0/8`.


Next for connection method, select ""Connect Your Application"" (the other two methods require installing local tools - check out the extension links if you're curious). Copy the ""Standard connection string"", replace username/password with the ones you used, and use as follows (replacing the string passed to `pymongo.MongoClient`):

```python
import pymongo
client = pymongo.MongoClient(""mongodb://<USERNAME>:<PASSWORD>@mycluster0-shard-00-00.mongodb.net:27017,mycluster0-shard-00-01.mongodb.net:27017,mycluster0-shard-00-02.mongodb.net:27017/admin?ssl=true&replicaSet=Mycluster0-shard-0&authSource=admin"")
db = client.test
```


Congratulations - you're connected to your MongoDB! PyMongo interacts with MongoDB, giving/retrieving Python dicts from it, but with an important caveat - all keys must be strings, so that it can be cleanly translated to JSON by MongoDB.

```python
result = db.test.insert_one({'stringy key': [2, 'thing', 3]})
print(result.inserted_id)
print(db.test.find_one({'stringy key': [2, 'thing', 3]}))
```

You should see output like:
```python
5c6a0505d04bc70096888c2e
{'_id': ObjectId('5c6a0505d04bc70096888c2e'), 'stringy key': [2, 'thing', 3]}
```","Use `dir()` and `help()` to inspect the `db.test` object, and see what else you can do. In particular, check out `db.test.insert_many` and `db.test.find_many`, to let you work with lots of data at once!",,,,,"MongoDB Cheat Sheet,MongoDB Query Documents,PyMongo,Connect to MongoDB with Python,MongoDB Atlas Getting Started","Amazon DocumentDB,Robo 3T,MongoDB Compass,The mongo shell",,NoSQL and Document-oriented databases,,SQL and Databases,DS - Data Engineering,,1,1,,2
deploy and use a simple PostgreSQL database,"SQLite is a great starting point, and still useful for all sorts of situations - but if you want to deploy and scale, PostgreSQL is the next tool to check out. It is a performant and true SQL database, with a great ecosystem and support for sharding (partitioning data for scalability - the domain of DevOps, but good to be aware of).","Note that another aspect of deployed databases is usually interacting with them using an ORM (Object-Relational Mapping), i.e. not writing queries from scratch. Don't go into teaching any ORM in depth, but students should know they exist and that they are better for e.g. an app to interact with a database (to make it more predictable, resist SQL injections, etc.).","PostgreSQL is a highly influential relational database management system (rdbms), created in the 1980s at UC Berkeley. An evolution of the [Ingres database](https://en.wikipedia.org/wiki/Ingres_(database)), PostgreSQL uses a permissive (MIT-style) license. Its author, [Michael Stonebraker](https://en.wikipedia.org/wiki/Michael_Stonebraker), received the 2014 Turing Award (CS equivalent of the Nobel Prize) in recognition of his work and its impact.

Despite its long and rich history, PostgreSQL is a well-supported modern database, with significant new functionality having been added in recent years. It is also the [second most widely used open-source SQL database](https://stackshare.io/stackups/mariadb-vs-mysql-vs-postgresql), after MySQL (now owned by Oracle).","Sign up for [ElephantSQL](https://www.elephantsql.com/) - login and create a new free instance (""Tiny Turtle""). No address or credit card should be required. Name it ""playground"", and select whichever available region/data center is physically closest to your location (suggested sticking with AWS, other providers may not be available even if they are selectable).


Select ""browser"" - from here you can write and execute queries. Create a table:

```sql
CREATE TABLE test_table (
  id        SERIAL PRIMARY KEY,
  name  varchar(40) NOT NULL,
  data    JSONB
);
```

Then you can insert some data:

```sql
INSERT INTO test_table (name, data) VALUES
(
  'A row name',
  null
),
(
  'Another row, with JSON',
  '{ ""a"": 1, ""b"": [""dog"", ""cat"", 42], ""c"": true }'::JSONB
);
```

And finally use `SELECT` to see the result!
```sql
SELECT * FROM test_table;
```","Install [pgAdmin](https://www.pgadmin.org/), and then [follow the instructions to connect to ElephantSQL](https://www.elephantsql.com/docs/pgadmin.html).",,,,,"pgAdmin,ElephantSQL","MySQL World Database,ElephantSQL API,PostgreSQL Sharding,pgAdmin with ElephantSQL",,SQL for Analysis,,SQL and Databases,DS - Data Engineering,,1,1,,2
create a data pipeline with SQL,"What good is a database without data in it? And do we really want to do all of our analysis directly with ad hoc queries?

There's a better way - getting data into and out of things programmatically, by building data pipelines.","You won't really end up demonstrating a Big Data pipeline, so this is more introductory/motivational and proof-of-concept. As long as you can get connected to a PostgreSQL database programmatically in Python with psycopg2, it should be clear to students that ""the sky is the limit"" in terms of automating things.

Fun starting image (PostgreSQL mascot is an elephant): https://upload.wikimedia.org/wikipedia/commons/thumb/9/98/Elephas_maximus_(Bandipur).jpg/1200px-Elephas_maximus_(Bandipur).jpg","SQL is great, but Python is our home - it's where our core code will live, and it's supported by a great ecosystem of Data Science libraries and frameworks. The good news is we can *connect* to SQL *from* Python, using Psycopg!","Use `pip` (in an environment of your choice - even Colab) to install [psycopg2-binary](https://pypi.org/project/psycopg2-binary/). Then execute the following (requires having first done the setup from the earlier objective):

```python
import psycopg2

# Connect to ElephantSQL-hosted PostgreSQL
conn = psycopg2.connect(dbname='TODO', user='TODO',
                        password='TODO', host='baasu.db.elephantsql.com')
# A ""cursor"", a structure to iterate over db records to perform queries
cur = conn.cursor()
# An example query
cur.execute('SELECT * from test_table;')
# Note - nothing happened yet! We need to actually *fetch* from the cursor
cur.fetchone()
```

If you see something like `(1, 'A row name', None)`, congratulations! You've interacted with your database from Python.","Write a Python function to generate random data for insertion, and execute it in a loop in order to generate and insert a large quantity of data.",,,,,"psycopg2-binary,Psycopg Documentation","pewee ORM,PostgreSQL EXPLAIN ANALYZE tool,psycopg2 GitHub repository,StackExchange Data Explorer,HackerRank SQL Exercises",,SQL for Analysis,,SQL and Databases,DS - Data Engineering,,1,1,,2
use the concept of “simple shapes make complex shapes” to draw,"If you’re new to drawing, it can be difficult translating the ideas in your head into lines on the page. However, we can draw anything if we break things down with one simple idea: simple shapes make complex shapes.  ",,"When people think about learning to draw, the following image by Van Oktop might come to mind.

![](https://tk-assets.lambdaschool.com/ed0855d1-d7d2-4324-bf9b-d48a26e28097_7dd.jpg)

While we can all laugh at that image, the sentiment behind it is very real. Drawing feels like this magical skill that only some of us can master. If we think about it, this is actually baked into our culture. That’s why we believe that only some people can be creative. Or, that “creatives” are special entities who need lots of creative space to get their work done.

But the truth is the notion that only some folks can draw is a whole lot of malarkey. The truth is that if you can write your own name, then you can learn how to draw. And with a bit of focused practice and guidance, you can rapidly become an interface designer.

Fortunately, as interface designers, we don’t have to be good enough at drawing to actually make that final horse from earlier (but it certainly helps if we can). Instead, we just have to be good at working with shapes like rectangles, circles, and triangles. 

With that in mind, one of the most fundamental ideas that we can learn as designers is that simple shapes make complex shapes. This is such an important concept that we should repeat it one more time: simple shapes make complex shapes. To see this in practice, take a look at the image below.

![](https://tk-assets.lambdaschool.com/21cdeb26-3d8f-4d0d-8cde-b9c8e59add9e_ScreenShot2019-02-05at8.13.52AM.png)

This shark by Matt Vergotiss feels complicated to draw. However, if we look a little closer, we can see that it’s just a clever arrangement of various circles and a few triangles.

![](https://tk-assets.lambdaschool.com/4cef8b2e-672b-457e-b090-f12a86301d71_ScreenShot2019-02-05at8.14.51AM.png)

Matt has done an incredible job documenting his design process here, and we can see that everything really is just circles and triangles! Now admittedly, Matt is working at quite an advanced level of this concept and has clearly practiced this skill a lot. But, the basic idea remains: we can use simple shapes to make complex shapes.

Fortunately, when designing an interface, we’ll rarely need to make shapes that are this complex. We mostly focus on using rectangles within rectangles, which are much easier to work with. That said, practicing this technique with complicated shapes will make us better at drawing, which can help us design faster and more intuitively. So, make sure you practice!",,,,,,,,"A bat created from simple shapes,A shark created from simple shapes,A turtle created from simple shapes",- How do we make complex shapes from simple shapes?,Intro to Drawing,Active,Intro to Design Theory,UX Design Core,,1,,,1
draw elements using perspective and depth,"An understanding of perspective and depth helps us add visual richness and flair to our interface designs, and improves our ability to use interaction design.",,"As ThoughtCo explains, “Artists use perspective to represent three-dimensional objects on a two-dimensional surface (a piece of paper or canvas) in a way that looks natural and realistic. Perspective can create an illusion of space and depth on a flat surface (or the picture plane).

Perspective most commonly refers to linear perspective, the optical illusion using converging lines and vanishing points that makes objects appear smaller the farther away from the viewer they go. Aerial or atmospheric perspective gives things in the distance a lighter value and cooler hue than things in the foreground. Foreshortening, yet another type of perspective, makes something recede into the distance by compressing or shortening the length of the object.“

In interface design, it may seem like we don’t have to worry about perspective because interfaces feel pretty one-dimensional. However, if you look closely at various interfaces, you’ll notice a surprising amount of depth. This depth is achieved through an understanding of perspective.

When designing with perspective in interfaces, there are three main concepts to keep in mind.

1. The Z-index
2. Bigger = Closer, Smaller = Farther
3. Light comes from above

## The Z-index
Z-index refers to the stack order of elements on a page, where elements with a higher stack order are closer to the user. The image below demonstrates the concept of the z-index

![](https://tk-assets.lambdaschool.com/596a339d-092c-48e0-ae44-5907dcfaf8e9_axes.png)

When we’re designing for perspective, the z-index is how we measure where an element is in the design relative to other elements. It also helps the developers implement the design in code.

## Bigger = Closer, Smaller = Farther
When working with perspective, the farther away an object is then the smaller it should be. The same principle applies to our interfaces. If we have two similar elements, but one is higher on our z-index (or closer to the view) than the other, then the closer element should be slightly larger than the farther element to account for the difference in perspective.

## Light comes from above
When we’re working with perspective, we’ll frequently use shadows to enhance the appearance that an element is higher or lower in the z-index. Whenever we use shadows, we need to be cognizant of the light source, or the direction the shadow is being cast in. 

A general best practice in interface design is to assume that the light source is coming from the very top of the page. The thinking is that humans are used to having our light sources (i.e. the sun, lights, etc) above us, and thus we’re used to how those shadows are cast. 

So, by mimicking that light source our interfaces can feel more intuitive to our users. In practice, this means that we need to slightly offset our shadows along the y-axis when we add them to our interface elements.",,Review your favorite website. How are they using perspective to add depth?,,,,,What Is Perspective in Art?,Understanding Perspective in Art,"- What is perspective?
- How do we add depth to an interface?",Intro to Drawing,Active,Intro to Design Theory,UX Design Core,,1,1,,2
identify when to use paper and when to use a digital tool,"As designers, we’ll frequently switch between our digital tools and good, old-fashioned pen and paper. Knowing when to make that switch can help you be more efficient at design.",,"Switching between digital and physical mediums is all part of the job for a UX designer. However, how do we know when to use one or the other? As you mature as a designer, you will develop your own rhythm and workflow so you’ll naturally switch between the two when you feel comfortable. As you’re getting started, it might feel a little bit unclear so let’s go over some common scenarios for using both.

## Using Pen and Paper
Paper is an incredibly versatile tool for design. In particular, we especially prize using it for its speed, low-fidelity, and impermanence. So designers typically reach for paper because it helps us adopt a “throw-away” mentality. Since the cost of restarting with paper is low, we’re free to try out many different ideas without getting too attached to any one of them. This helps us avoid our design’s local maximum and iterate towards a better end result. So we typically use paper when we need to quickly sketch an idea or when we’re actively engaged in problem-solving.

## Using Design Tools
Over the last few years, the design tool landscape has radically changed and we’ve seen many incredible tools come and go. These tools offer a variety of benefits and are can be especially suited to solving specific challenges. For example, Sketch is great for interface design while Illustrator is better for creating vector images.

Regardless of the tool we’re using, we tend to value design tools for their speed, higher-fidelity, and permanence. Design tools have slightly different speed considerations than pen and paper. While paper is great for quickly getting ideas out of your head and into the world, design tools let you rapidly create designs that share common characteristics.

Designers also reach for graphic design tools when we need to produc higher-fidelity design artifacts. We might need these for stakeholder presentations, developer hand-offs, or usability tests. In these cases, the higher-fidelity makes it easier for us to communicate important ideas within our designs.",,,,,,,,,"- When should you use paper?
- When should you use a digital tool?",Intro to Drawing,Active,Intro to Design Theory,UX Design Core,,1,,,1
"understand purpose of and approaches towards software testing, and be able to write basic unit tests","When you say ""the code works"", what do you *really* mean? Generally you mean that, when the system/function is run with given input, the output/behavior is as expected (and hopefully documented).

Software testing formally specifies this, and provides a framework for automatically verifying that code really passes the tests. This helps you avoid *regressions* - no, not the statistical models, but rather the literal meaning of ""going backwards"" with your code (introducing bugs/errors). You may have already seen this, and already ran software tests - in your coding challenges!","This is a large topic, so emphasize that this is really just a teaser, and that large organizations have ""software test engineers"" devoted to this. It *is* important for anyone who writes code to be aware of testing, though, and to at least help towards basic test coverage of their code.

Fun starter image: http://cpr-test.org/wp-content/uploads/2015/12/AHA-Practice-Test.jpg","The simplest possible test requires the simplest possible piece of code - a *unit*. What is a unit?

In many cases it is just a function (or, if that function is a member of a class, remember it is called a method). For larger/more complicated code, it may be you write different unit tests for different cases of a function call, each passing different arguments in and testing for expected output.

Unit tests are the most basic, well, unit of testing. There are more sophisticated tests - integration tests combine modules into a group and test their joint behavior, and end-to-end tests simulate an entire user flow/interaction. These larger tests are arguably more effective at catching tricky bugs - you can have ""100% unit test coverage"" and still miss things if you don't test things combined.

But there is one important advantage to unit tests, and a reason to not neglect them entirely - they may not catch every bug, but they do force you to think of your code in *units*. A good unit test requires good code to test, and so you may find yourself refactoring your code in order to make it more testable. Embrace this! It's one of the biggest advantages of proper software testing.","To write unit tests, we will use `unittest`, a package included in the Python standard library (i.e. no special installation needed).

Consider the following example:
```python
import unittest
class TestStringMethods(unittest.TestCase):

    def test_upper(self):
        self.assertEqual('foo'.upper(), 'FOO')

    def test_isupper(self):
        self.assertTrue('FOO'.isupper())
        self.assertFalse('Foo'.isupper())

    def test_split(self):
        s = 'hello world'
        self.assertEqual(s.split(), ['hello', 'world'])
        # check that s.split fails when the separator is not a string
        with self.assertRaises(TypeError):
            s.split(2)

if __name__ == '__main__':
    unittest.main()
```


This tests basic string methods (i.e. the ""units"" being tested are already written and built-in to Python). The overall test case is a class, inheriting from `unittest.TestCase`, and the methods in the class are specific tests.

Save the code to a file `string_tests.py`, and execute with `python string_tests.py`. You should see:

```
...
----------------------------------------------------------------------
Ran 3 tests in 0.000s

OK
```

What happened? The default when tests pass is to be silent - this just means all the tests passed. Try running again as verbose with `python string_tests.py -v`:

```
test_isupper (__main__.TestStringMethods) ... ok
test_split (__main__.TestStringMethods) ... ok
test_upper (__main__.TestStringMethods) ... ok

----------------------------------------------------------------------
Ran 3 tests in 0.000s

OK
```

Now you see it checking off each individual test and saying that it passed.

What does it look like when a test fails? It's noisier!

Python string methods are pretty well-written, so to get a failing test let's introduce a bug into the test itself:

```
    def test_upper(self):
        self.assertEqual('foo'.upper(), 'FO')  # bug in test!
```

Now run `python string_tests.py` again:

```
..F
======================================================================
FAIL: test_upper (__main__.TestStringMethods)
----------------------------------------------------------------------
Traceback (most recent call last):
  File ""string_tests.py"", line 6, in test_upper
    self.assertEqual('foo'.upper(), 'FO')  # bug in test!
AssertionError: 'FOO' != 'FO'
- FOO
?   -
+ FO


----------------------------------------------------------------------
Ran 3 tests in 0.001s

FAILED (failures=1)
```

Failure! Specifically, the assertion `self.assertEqual('foo'.upper(), 'FO')` failed, as `'foo'.upper()` is equal to `FOO`.

The above is the minimal viable approach to testing basic expected code behavior - you can make unit tests more complicated, with `setUp()` and `tearDown()` methods in the class to do setup/cleanup behavior before/after tests. You can also use `unittest.mock` to make ""fake"" objects, e.g. a fake database connection, so that a unit test can run without hitting real systems.

Advanced testing is beyond the scope for today, and in general is unlikely to be your core responsibility as a data scientist (there exist specific software test engineers). But it's good to be aware of its existence, and that a codebase is only as healthy as its test suite.",Write a unit test for one of the functions or methods (pop quiz - what's the difference?) in your `lambdata` package.,,,,,"pytest,numpy.testing,unittest - Python Unit testing framework","Travis CI,Python typing module,Integration Testing (Wikipedia),OOP Review Assignment",,"""Software Testing, Documentation, and Licensing""",,Software Engineering and Reproducible Research,DS - Data Engineering,,1,1,,2
explain what Sketch is and why we use it as a design tool,Sketch is one of the most widely used graphic design tools in the UX industry.,,"Sketch is graphic design software that is specifically tailored for UI design. Using Sketch is pretty intuitive and there are lots of great tutorials on how to use the tool. Sketch has become so popular because it directly addresses the needs of UI designers. Before Sketch, there wasn't a world-class design tool dedicated to UI design. But, Sketch stepped in a filled that gap.

We can take a look at [UXTools.co’s Design Tools Survey from 2018](https://uxtools.co/survey-2018) to see how just how popular Sketch has become. They had about 2800 designers take their survey. In this chart, we can see that Sketch is the predominant tool for UI design with almost 70% of respondents saying that they use it.

![](https://tk-assets.lambdaschool.com/8f09706a-0641-44c4-a93f-24401d755351_ScreenShot2019-02-12at10.00.17AM.png)

So, you can be pretty confident that learning Sketch is a good way to get started with design tools. Fortunately, there is a fair bit of overlap between most design software. So, picking up new software isn’t too difficult once you’ve mastered one. 

Part of the fun of being a member of the design community is trying out new tools, so I encourage you to experiment with your tools and find the best ones for you. An up-and-comer that folks are talking about is Figma, so that might be a great tool to learn once you’ve mastered Sketch.

![](https://tk-assets.lambdaschool.com/70e3e4ca-72e7-410a-876b-fe6c66a2b488_ScreenShot2019-02-12at10.03.29AM.png)",,,,,,,,"UXtool's Design Tools Survey 2018,Sketch Website","- What is Sketch?
- Why is it worth learning?",Intro to Sketch,Active,UI Fundamentals,UX Design Core,,1,,,1
"use Sketch to make basic shapes, add and manipulate text, and work with colors","Shapes, text, and colors are the building blocks of designing with Sketch.",,"To build our user interfaces, we need to understand how to use the basic features of Sketch. Let’s cover the basics of adding shapes, text, and colors.

## Shapes
In Sketch, we can add a shape by going to the insert button in the upper left corner, clicking it, hovering over the shape menu, and selecting the shape we want to add.
![](https://tk-assets.lambdaschool.com/cff6f1f3-d1f6-4423-81ee-44215bf9893c_adding-layers2x.jpg)

Then, we can head to the canvas and click and drag to create the shape. If we hold down Shift creating our shape, then the shape will keep all of its sides the same length. This is great for creating squares instead of rectangles.

Each shape also has a corresponding keyboard shortcut. For example, you can press `r` to create a rectangle where your cusor is on the canvas. Learning the shortcuts takes a little bit of time, but they can dramatically speed up your workflow!

## Text
Text can be added the same way as shapes. Go to the insert button in the upper left corner, click it, and click on the text menu. ![](https://tk-assets.lambdaschool.com/4515f160-2eae-43b9-991f-a3366dcdf7df_ScreenShot2019-02-12at10.16.05AM.png)

Then, click on the canvas where you want to add your text. You can type inside the bounding box to add your custom text. To manipulate the text’s font-family and size, use the Inspector on the right side of the screen.

## Color
To change the color of any layer, you can select a layer and then use the color picker in the Inspector on the right side of the screen.

### Shapes
![](https://tk-assets.lambdaschool.com/a7744bad-4f85-4ac7-beab-d84e4750b86d_ScreenShot2019-02-12at10.21.07AM.png)

### Text
![](https://tk-assets.lambdaschool.com/4f7ce87e-5639-4e30-b1b1-14b668d52415_ScreenShot2019-02-12at10.21.16AM.png)",,,,,,,,"Using Colors in Sketch,Adding Text in Sketch,Adding Layers in Sketch","- How do you add a shape?
- How do you add text?
- How do you change colors?",Intro to Sketch,Active,UI Fundamentals,UX Design Core,,1,,,1
"use Sketch to manage, group, duplicate, and align layers",Managing layers is a critical concept to master in any graphic design tool.,,"As the Sketch documentation explains, “layers are the building blocks for creating designs in Sketch.” Every shape or text that you add to the canvas is considered a layer. On the left side of the screen, we have the layer list. Here we can see all of the layers and manage them as need.

## Layer List Ordering
The order of layers in the layer list is important. Layers that are at the top of the list are above lower layers on the canvas. So, in the following image, the Top Layer is the grey rectangle and the Bottom Layer is the black rectangle. Since the Top Layer is above the Bottom Layer in the layer list, it sits on top of the Bottom Layer on the canvas.
![](https://tk-assets.lambdaschool.com/7cf02187-1d57-4823-a491-115b677650d0_ScreenShot2019-02-12at10.27.29AM.png)

## Grouping
We can group layers to make them easier to manage on the canvas. Frequently, we’ll develop designs that belong together. For example, a field input and its label should move together on the canvas.

So, we can group elements by selecting them in the layer list, right-clicking on them, and selecting “group selection”. We could also select the layers and use `Command + G` to group them.
![](https://tk-assets.lambdaschool.com/9a0fffb6-e659-4054-9a95-9746b520edbe_ScreenShot2019-02-12at10.31.06AM.png)

This will create a group in our layer list, and when we select it we can move or manipulate all of the layers in it together.
![](https://tk-assets.lambdaschool.com/3ee393be-8d06-4f71-8d68-512abcf3d403_ScreenShot2019-02-12at10.29.28AM.png)

## Duplicate
We can duplicate any layer with a simple copy + paste, but sometimes we’ll want to maintain the position of our layer. In those cases, we can select a layer and press `Command + D` to duplicate them.

If we want to move and duplicate a layer, we can move the layer and hold down the `Alt` key to create a duplicate that will be placed where we let it go.
![](https://tk-assets.lambdaschool.com/4423da92-9555-4277-975e-30f6eb7c916f_ScreenShot2019-02-12at10.36.14AM.png)

## Alignment
There are a few ways to align layers in Sketch. First, we can select the layers we want to align and use the alignment tools in the inspector on the right of the screen.
![](https://tk-assets.lambdaschool.com/8bcaccc4-aeea-4f9c-865a-10fc7549e917_ScreenShot2019-02-12at10.40.42AM.png)

We can also hold down the `Option` key when moving layers to see their relative position and distance, which we can use for alignment.
![](https://tk-assets.lambdaschool.com/3a2188a3-7aab-4d7a-b976-97ef0212d3aa_measurements.jpg)",,,,,,,,"Moving Layers in Sketch,Grouping Layers in Sketch",- How can you work with layers?,Intro to Sketch,Active,UI Fundamentals,UX Design Core,,1,,,1
understand and use MKCoordinateRegion/Span to show a specific location on a map view,"Map views probably provide some of the most value for work in the iOS SDK. It is incredibly easy to get a map into your application. Simply drag a map view onto your canvas from the objects library and run the app. Instant map.

The problem with the map you get for free is that it will likely either show the entire United States or perhaps even the whole world. So it's not very helpful if the user wants to see some specific portion of the map. Fortunately, there are a couple easy ways to limit the scope of the map (also known as zooming) to show a specific area.",,"#### Specifying a Region


The map view can take an `MKCoordinateRegion` to specify a map center and a distance horizontally and vertically. This effectively zooms the map to a particular level.

To set a region, you must first have a handle to the map view itself, so create an `IBOutlet` from your storyboard if you don't have one already.

Next, create a region object and provide it with the following: a center (as a set of latitude/longitude coordinates), a distance in latitudinal meters, and a distance in longitudinal meters.

NOTE: you may need to import `MapKit` and `CoreLocation` into your view controller.

```
let mapCenter = CLLocationCoordinate2D(latitude: 37.79425, longitude: -122.403528)
let region = MKCoordinateRegion(center: mapCenter, latitudinalMeters: 50, longitudinalMeters: 50)
mapView.setRegion(region, animated: false)
```

![Map of San Francisco at 50 meters across](https://raw.githubusercontent.com/jcgohlke/lambda-resources/master/airtable-images/ios-media-programming/mapkit/sf-map-50m.png)

You can see from the image above that 50 meters is a pretty tightly zoomed map. See below for some other zoom levels for comparison.

```
let mapCenter = CLLocationCoordinate2D(latitude: 37.79425, longitude: -122.403528)
let region = MKCoordinateRegion(center: mapCenter, latitudinalMeters: 500, longitudinalMeters: 500)
mapView.setRegion(region, animated: false)
```

![Map of San Francisco at 500 meters across](https://raw.githubusercontent.com/jcgohlke/lambda-resources/master/airtable-images/ios-media-programming/mapkit/sf-map-500m.png)

```
let mapCenter = CLLocationCoordinate2D(latitude: 37.79425, longitude: -122.403528)
let region = MKCoordinateRegion(center: mapCenter, latitudinalMeters: 5000, longitudinalMeters: 5000)
mapView.setRegion(region, animated: false)
```

![Map of San Francisco at 5,000 meters across](https://raw.githubusercontent.com/jcgohlke/lambda-resources/master/airtable-images/ios-media-programming/mapkit/sf-map-5000m.png)

```
let mapCenter = CLLocationCoordinate2D(latitude: 37.79425, longitude: -122.403528)
let region = MKCoordinateRegion(center: mapCenter, latitudinalMeters: 50000, longitudinalMeters: 50000)
mapView.setRegion(region, animated: false)
```

![Map of San Francisco at 50,000 meters across](https://raw.githubusercontent.com/jcgohlke/lambda-resources/master/airtable-images/ios-media-programming/mapkit/sf-map-50000m.png)

The larger the number you use for latitudinal/longitudinal meters, the more zoomed out the map will be.

#### Specifying a Span

Using meters to specify a region might not work in all scenarios. As an alternative, you can also specify a zoom level with something called an `MKCoordinateSpan`. The unit of measure for this is degrees of latitude or longitude. See below for a few examples.

_For reference, 1° of latitude or longitude is roughly 69mi or 110km (the earth is not perfectly round, so it does vary slightly depending how far from the equator you are)._

We're using the same map center as the previous examples.

```
let mapCenter = CLLocationCoordinate2D(latitude: 37.79425, longitude: -122.403528)
let span = MKCoordinateSpan(latitudeDelta: 0.1, longitudeDelta: 0.1)
let region = MKCoordinateRegion(center: mapCenter, span: span)
mapView.setRegion(region, animated: false)
```

![Map of San Francisco at 0.1 degrees of latitude across](https://raw.githubusercontent.com/jcgohlke/lambda-resources/master/airtable-images/ios-media-programming/mapkit/sf-map-0.1.png)

The difference is simply a matter of how much distance around the center you want to show.

```
let mapCenter = CLLocationCoordinate2D(latitude: 37.79425, longitude: -122.403528)
let span = MKCoordinateSpan(latitudeDelta: 0.01, longitudeDelta: 0.01)
let region = MKCoordinateRegion(center: mapCenter, span: span)
mapView.setRegion(region, animated: false)
```

![Map of San Francisco at 0.01 degrees of latitude across](https://raw.githubusercontent.com/jcgohlke/lambda-resources/master/airtable-images/ios-media-programming/mapkit/sf-map-0.01.png)

When using spans, the smaller the degree you provide, the more zoomed in the map will be.",,Google allows you to type an address into the search bar and follow it with the word _coordinates_ to show you the lat/long of a given place. Find a couple different sets of coordinates and try out different map centers and regions/spans to see how it affects the map view.,,,,,,,,MapKit,,iOS Media Programming,iOS Development Core,,1,1,,2
display annotations on a map view,"The next most important skill with mapping on iOS is adding content to the map. Map pins, or _annotations_ as they are called in `MapKit`, are almost as easy to add as showing the map itself.",,"Let's say we want to show a collection of registered landmarks around San Francisco. We'll start with a single landmark and build from there.

```
// 1
let doggieDiner = CLLocationCoordinate2D(latitude: 37.735461, longitude: -122.502969)

// 2
let doggieDinerAnnotation = MKPointAnnotation()
doggieDinerAnnotation.coordinate = doggieDiner
doggieDinerAnnotation.title = ""Doggie Diner""
doggieDinerAnnotation.subtitle = ""Landmark No. 254""

// 3
let span = MKCoordinateSpan(latitudeDelta: 0.01, longitudeDelta: 0.01)
let region = MKCoordinateRegion(center: doggieDiner, span: span)
mapView.setRegion(region, animated: false)

// 4
mapView.addAnnotation(doggieDinerAnnotation)
```

1. First we must have a location to show on the map. The coordinates used in the example are for an [adorable old diner sign](https://en.wikipedia.org/wiki/Doggie_Diner) that's now a landmark.
2. Next, we need to turn those coordinates into an annotation. The class we use here is called `MKPointAnnotation`. This allows us to create and customize a pin quite easily. We have two text fields available to provide additional info. The `title` field is shown next to the pin at all times. The `subtitle` field is shown if the user taps the pin to highlight it.
3. This block should look familiar from the previous section. We're using the doggie diner sign as our map center and specifying 0.01° of distance around the sign for our zoom level.
4. Lastly, we have to add the annotation to the map. This will make it visible and interactive on the map view.

Here's what it will look like in a map view.

![Doggie diner landmark annotation on a map](https://raw.githubusercontent.com/jcgohlke/lambda-resources/master/airtable-images/ios-media-programming/mapkit/doggie-diner.png)

The pin is provided for free by iOS. Notice the title field is also automatically displayed below the annotation.

![Doggie diner landmark annotation that's been tapped, showing the subtitle field](https://raw.githubusercontent.com/jcgohlke/lambda-resources/master/airtable-images/ios-media-programming/mapkit/doggie-diner-tapped.png)

This second image shows the tapped or selected state of the pin. Once tapped, the pin animates into a larger size and the subtitle is displayed below the title.

#### Multiple Annotations

Let's find another landmark and see what happens when we place two annotations on the map.

```
let ggBridge = CLLocationCoordinate2D(latitude: 37.819722, longitude: -122.478611)
let ggBridgeAnnotation = MKPointAnnotation()
ggBridgeAnnotation.coordinate = ggBridge
ggBridgeAnnotation.title = ""Golden Gate Bridge""
ggBridgeAnnotation.subtitle = ""Landmark No. 974""
```

Insert the above after the other annotation in your code, and then insert a line to add the annotation to the map, like so:

```
mapView.addAnnotation(ggBridgeAnnotation)
```

When checked in the simulator, the map frustratingly does not show both of our annotations:

![Map showing only the doggie diner annotation](https://raw.githubusercontent.com/jcgohlke/lambda-resources/master/airtable-images/ios-media-programming/mapkit/doggie-diner.png)

The reason is because our defined region is centered around the doggie diner pin and doesn't span a large enough distance to see the golden gate pin. We could calculate a distance that would be large enough to see both pins, and sometimes that will be necessary to get just the right zoom level of your map. But in this case, we can use a much simpler method for adding the pins that will automatically zoom the map to the right factor.

```
// 1
let doggieDiner = CLLocationCoordinate2D(latitude: 37.735461, longitude: -122.502969)
let doggieDinerAnnotation = MKPointAnnotation()
doggieDinerAnnotation.coordinate = doggieDiner
doggieDinerAnnotation.title = ""Doggie Diner""
doggieDinerAnnotation.subtitle = ""Landmark No. 254""

// 2
let ggBridge = CLLocationCoordinate2D(latitude: 37.819722, longitude: -122.478611)
let ggBridgeAnnotation = MKPointAnnotation()
ggBridgeAnnotation.coordinate = ggBridge
ggBridgeAnnotation.title = ""Golden Gate Bridge""
ggBridgeAnnotation.subtitle = ""Landmark No. 974""

// 3
mapView.showAnnotations([doggieDinerAnnotation, ggBridgeAnnotation], animated: true)
```

Sections 1 and 2 are the same as before, as we're just creating our annotation objects.

Section 3 is a little different however. We're going to let the map decide what zoom level is appropriate, so we don't define any kind of `MKCoordinateRegion` here. Instead, we call the `showAnnotations` method on the map view that takes an array of annotation objects as well as a flag to denote whether we should animate the changes. The map will look at all the annotations in the array and determine a zoom level of the map that will allow all the pins to be shown to the user. The result of this code is displayed below:

![Map showing both annotations](https://raw.githubusercontent.com/jcgohlke/lambda-resources/master/airtable-images/ios-media-programming/mapkit/sf-two-annotations.png)

The map view will ensure that all pins are comfortably displayed on the screen and none are super close to the edges of the map.",,"Using the same Google trick from the previous section, find a few coordinate sets and create annotations for them. See how adding more annotations affects the zoom level of the map when using `showAnnotations`.",,,,,,,,MapKit,,iOS Media Programming,iOS Development Core,,1,1,,2
customize the appearance of map annotations,"If the default pins and information presented are not appropriate for the app you're building, you can have direct control over how the pins look on the map and what information they present. To do that, you'll need a custom `MKAnnotation` instance and also take over the presentation of `MKAnnotationView` objects.",,"#### `MKAnnotation`


The objects we saw in the previous section were instances of `MKPointAnnotation`, a standard class used for displaying pins. In order to create custom pins, you can create a subclass of `NSObject` that implemements the `MKAnnotation` protocol. In the spirit of our landmark pins, we'll create a model class to make our landmarks a little more useful.

```
import Foundation
import MapKit

class Landmark: NSObject, MKAnnotation {

    // 1
    var coordinate: CLLocationCoordinate2D

    // 2
    let name: String
    private let registryNumber: Int
    private let registrationYear: Int

    // 3
    var title: String? {
        return name
    }

    var subtitle: String? {
        return registered
    }

    // 4
    var registered: String {
        return ""Registered as No. \(registryNumber) in \(registrationYear)""
    }

    // 5
    init(coordinate: CLLocationCoordinate2D, name: String, registryNumber: Int, registrationYear: Int) {
        self.coordinate = coordinate
        self.name = name
        self.registryNumber = registryNumber
        self.registrationYear = registrationYear
    }
}
```

1. The only required property from the `MKAnnotation` protocol is `coordinate`. It contains the latitude/longitude of our landmark.
2. These are our custom properties for storing data about our landmarks. We've made the two integers private to prevent fetching of these data outside this class. This allows us to present that data in the way we prefer. See point 4 below for how we control access to those integers.
3. `title` and `subtitle` are both optional values for `MKAnnotation`. They are used by the map to display basic information about the pin when it is tapped. Here we're simply computing the properties by fetching them from other properties where this data is actually stored. This allows us to have an easily understood data model, but also work with MapKit.
4. Here we combine the two integers to form a small string more easily digested by the human user. This property combined with the private integers allows us to control how our data is used by consumers of this object.
5. We use a custom initializer to pull in the relevant data about our landmark object when we create it. This is also the only public exposure we have for our integer properties.

Once we've established our custom annotations with the above model class, we can convert our two landmarks from the previous section to objects of the above type.

```
let doggieDiner = CLLocationCoordinate2D(latitude: 37.735461, longitude: -122.502969)
let doggieDinerAnnotation = Landmark(coordinate: doggieDiner, name: ""Doggie Diner"", registryNumber: 254, registrationYear: 2006)

let ggBridge = CLLocationCoordinate2D(latitude: 37.819722, longitude: -122.478611)
let ggBridgeAnnotation = Landmark(coordinate: ggBridge, name: ""Golden Gate Bridge"", registryNumber: 974, registrationYear: 1999)

mapView.showAnnotations([doggieDinerAnnotation, ggBridgeAnnotation], animated: true)
```

Instead of creating `MKPointAnnotation` objects, we use our custom `Landmark` class. And since they conform to the `MKAnnotation` protocol, the map is happy to accept them in the call to `showAnnotations(_:animated:)`.

#### `MKAnnotationView`

Since we want to control the look and feel of the pins, the view controller in charge of the `UIMapView` needs to take on the responsiblility of creating and configuring each `MKAnnotationView` (the actual pin object that gets added to the map).

Think of the relationship between `MKAnnotation`s and `MKAnnotationView`s as similar to the one between model objects and `UITableViewCell`s. The model is the data, and the cell is the object that represents the pixels on the screen.

In order to take over the process of creating and configuring the pin views, we need to make our view controller conform to `MKMapViewDelegate`. That would look something like this:

```
extension ViewController: MKMapViewDelegate
```

(It's a best practice to place each protocol conformance in its own extension of the base class, usually in the same file. This creates a separation of concerns and makes things easier to find.)

Then, we need to assign the view controller to the delegate property of our mapview. This can be done in `viewDidLoad` or similar:

```
mapView.delegate = self
```

Finally, we can implement the following method in our new extension from above.

```
func mapView(_ mapView: MKMapView, viewFor annotation: MKAnnotation) -> MKAnnotationView?
```

This method takes in the mapview requesting the pin, the annotation we want to create a pin for, and returns the annotation view that will be displayed on the map.

Think of this method as analogous to the `cellForRow(at:)` method used with tableviews. It creates a cell, configures it, and returns it for the table to show on screen. This method does the same for annotation views.

To configure our landmark annotations, we'll implement the method this way:

```
func mapView(_ mapView: MKMapView, viewFor annotation: MKAnnotation) -> MKAnnotationView? {
    // 1
    let annotationReuseIdentifier = ""Landmark Annotation""

    // 2
    if let annotationView = mapView.dequeueReusableAnnotationView(withIdentifier: annotationReuseIdentifier) {
        annotationView.annotation = annotation
        annotationView.image = UIImage(named: ""Pin"")
        annotationView.canShowCallout = true
        return annotationView
    } else {
        /// 3
        let annotationView = MKAnnotationView(annotation: annotation, reuseIdentifier: annotationReuseIdentifier)
        annotationView.image = UIImage(named: ""Pin"")
        annotationView.canShowCallout = true
        return annotationView
    }
}
```

1. When creating annotation views, we must provide an identifying string. Think of this as the same as the reuse identifier of a tableview cell. It allows for pins to be reused when they are scrolled off the map.
2. First, we need to attempt to dequeue an annotation view from the mapview's queue. This works in pretty much the same way as a tableview. In order to preserve the memory allocation of iOS (and because we could be producing high volumes of pins for the map), the first way we'll try to _create_ an annotation view is to ask if the map has any it doesn't need (meaning a pin that _was_ on screen but the user has since scrolled away from it). This method call returns an optional `MKAnnotationView`, which is why we've used an `if-let` statement to unwrap it. If an annotation view can be dequeued, we configure it with the annotation, set the image which will use our custom pin from the asset catalog, and set the `canShowCallout` to `true`. This allows the pin to display a little white bubble with additional info when tapped.
3. In the case where there are no available annotation views that can be dequeued (maybe this is the first one we're creating, or all the pins we've made previously are still visible), the call to `dequeueReusableAnnotationView(withIdentifier:)` will return `nil`. If that happens, our `else` clause will run and we can just create an annotation view from scratch. The same configuration steps happen as in part 2, and we finally return that newly created annotation view.

We've now created a custom type of annotation and also provided instructions for how to convert these to pins to be displayed by the map. When executed, the code above will show the following view:

![Map with custom annotation views](https://raw.githubusercontent.com/jcgohlke/lambda-resources/master/airtable-images/ios-media-programming/mapkit/sf-custom-map-pins.png)

You'll notice it looks similar to the previous section's output, but we've now got custom pins. These are simply using a custom image from the app's asset catalog.

![Map with custom annotation view and callout view showing](https://raw.githubusercontent.com/jcgohlke/lambda-resources/master/airtable-images/ios-media-programming/mapkit/sf-custom-map-pins-tapped.png)

When the pin is tapped, iOS produces a callout view and pulls data from the `MKAnnotation`'s `title` and `subtitle` properties. Our `Landmark` class implements both of these by using the name for title and a computed property for subtitle. The callout view can be customized beyond simply changing those two strings, if desired. There are accessory views you can configure, or you can replace the entirety of the callout with your own view.

To customize the standard callout, use the `leftCalloutAccessoryView` or `rightCalloutAccessoryView`. To replace the callout entirely, use the `detailCalloutAccessoryView`. See [Apple's documentation](https://developer.apple.com/documentation/mapkit/mkannotationview?language=swift) on `MKAnnotationView` for more details.",,,,,,,,,,MapKit,,iOS Media Programming,iOS Development Core,,1,,,1
extract configuration into environment variables,"Most development pipelines include different environments that often include `development`, `testing` and `production`.

It's recommended to extract away any values that need to change between environments, like database connections.",,"We have been running our code in our computer as we work on it, we can consider that to be the `development` environment.

Most companies will have a `testing` environment that is similar to production, it has the same versions of software and run on similar, albeit weaker, hardware. They do this to mitigate the risks when moving the to `production` servers that clients use.

Ideally all environments run on the same stack, platforms and versions, but, it is common to have developers on the Windows platform with the latest version of Node.js and the `production` server running on Linux with the last stable version of Node.js. For those cases it is important to have a `testing/staging` environment that also runs the exact same versions of Linux and Node.js as the production server to detect any regressions that may occur during deployment, before it reaches the user.","## Starter Code

The starter code for this tutorial can be found in [this repository](https://github.com/LambdaSchool/webapi-iv-guided).

## Configure a ""server"" Script

The server is not configured to run when typing `yarn server` or `npm run server`. It is also not using `nodemon` to restart on changes. Let's configure both:

- add `nodemon` as a development time dependency: `yarn add nodemon --dev`.
- open `package.json` and modify the ""test"" script to read:

```json
""server"": ""nodemon index.js""
```

- test it from a terminal.

When we deploy the API, `heroku` will look for a ""start"" script that uses `node` to run the server. We need to add that to `package.json`.

### Add ""start"" script.

Add a ""start"" script that uses `node` instead of `nodemon` to run `index.js`.

The ""scripts"" section of `package.json` should look like so:

```json
""scripts"": {
    ""start"": ""node index.js"",
    ""server"": ""nodemon index.js""
  },
```

After this change `heroku` will know how to start our server, but, needs to be in control of which `port` will be used by the API. The port is hard-coded as 4000, we need to make it dynamic.

## Make the Port Dynamic

- introduce `process.env`.
- introduce the [dotenv npm module](https://www.npmjs.com/package/dotenv). Show the documentation on `npmjs.com`.
- install `dotenv` as a production dependency.
- change `index.js`:

```js
// it's recommended to load configuration for .env as early as possible
require('dotenv').config(); // add this line as the first thing to run1

const server = require('./api/server.js');

// we'll read the port from the server environment if it is there
// heroku will have the PORT environment variable set
const port = process.env.PORT || 5000;

// we can now use that port, if set up by heroku or read from .env or 5000 as a default if not set
server.listen(port, () => {
  console.log(`\n*** Server Running on http://localhost:${port} ***\n`);
});
```

- add a `.env` file to the root folder (next to `package.json`) with the following content

```txt
PORT=4000
```

It is recommended to add `.env` to `.gitignore` to prevent it from being uploaded to GitHub.

The reason is that most systems will have configuration secrets added to that file that will be different between environments. Some examples are database connection credentials or API keys for external services.

- **stop the server** and restart it again, or the change to `.env` will not be detected.
- the API should be using port 4000 now as specified in `.env`.",Extract all secrets and values that need to change between `development` and `production` environments.,,,,,,,,Deployment and Best Practices,,Building RESTful Web APIs with Express and Node.js,Full Stack Web Development Core,,1,1,,2
"use function declarations, expressions, and arrow functions and describe their differences","Functions are everywhere in JavaScript.  Being able to decipher between function syntax, concepts, and usage is vital to your success as a developer.  As you continue to push deeper into JavaScript more concepts will unlock as you gain knowledge about functions.","Recommended progression:

Function declarations

Function expressions and their anonymous nature

Arrow functions are derived from expressions with the added bonus of unique syntax and the `this` keyword is unbound

Keep arrow functions simple!  Avoid delving into the many ways you can use arrow function so students can absorb everything properly.
","## Functions  
Functions are the foundation for all web interactions. Being able to execute code when you want is truly powerful in programming. Let's define a basic function called a `function declaration` and identify the syntax. 

### Basic Function Syntax
Function declarations are made up of several syntactical parts: 
* The `function` keyword  
* The name of the function  
* An optional list of parameters 
*  The statements inside the block of code `{}` 

Take a look at the example below to see how all the different parts of a function declaration work together.

```javascript  
// Define our function declaration  
function add(a,b){ 
 return a + b;
} 
``` 
If you tried to run that code on a website, you wouldn't see anything happen.  That is because functions need to be called for the execution to occur.  The concept of calling a function is often called `invoking a function`.  

Let's invoke the function above to see the difference:
```javascript  
// Define our function declaration  
function add(a,b){ 
 return a + b;
} 
// Invoke the function add
console.log(add(2,4)) // 6 
``` 
*Note that because we are using a `return` statement in our function, we must wrap the invocation in a `console.log()` if we want to see a result in our `web console`.* 

#### Function Invocation, Arguments, and Parameters

When we invoke a function, we often pass in values along as well.  These values are known as `arguments`.  In the example above, our `arguments` are the numbers `2` and `4`.

Those arguments are then received into the parameters of the function, `a` and `b` *in the order they were called.*

This distinction trips up many new developers.  It is worth repeating: *`arguments` are values that are passed into functions that receive them as `parameters`.*

The name of the parameter does not matter on a syntax level.  *What matters the most for parameters is the order in which they were received.*

#### The `return` Statement

When you see a `return` in a block of code within a function, keep in mind that anything written *after* a `return` statement will not execute.  This is because the `return` statment will terminate the function after running the line of statements within it.
```javascript  
function add(a,b){ 
 return a + b;
 // Anything after a return won't execute
 console.log('You will never see this code!');
} 
console.log(add(2,4)) // 6 
``` 

#### Function Declaration Hoisting

JavaScript utilizes a two-pass compiler when executing lines of code that we write.  This means that anytime we run JavaScript in the browser, there are two passes the browser will take over our code.  The first pass is setting up references to all of our code.  The second pass applies the values to the references that were found.  

Function declarations are defined in the first pass.  The compiler is made aware of the function declaration and adds it to the top of the execution order for your code.   This concept of putting a function higher in the execution order for later use is known as hoisting.

What does this mean for you?  It means that function declarations can be invoked *before* they are defined!  Let's take a look at an example:

```javascript
// This code is valid above the definition!
console.log(add(2,4)) // 6 

function add(a,b){ 
 return a + b;
} 
``` 
This is odd behavior to developers new to JavaScript.  It can be used as a feature or introduce bugs if not understood properly.  Be aware that hoisting applies to function declarations and not function expressions or arrow functions.

### Function Expressions  
Now that we have a better understanding of how basic function syntax works, we can push even further into another type of function, a function expression.

Function expressions have unique differences when compared against function declarations:
* A variable is used to store the function for later use
* Anonymous functions are used 
* Function expressions are not hoisted.  They can only be invoked after a definition has been placed in the execution stack.

Example of a function expression:
```javascript
const add = function(a,b){ 
 return a + b;
} 
console.log(add(2,4)) // 6 
``` 
Notice the function doesn't actually have a name.  This is what we refer to as anonymous functions.  Because we are using a `const` named `add` we don't need to name our function anything.  We can simply execute the function when `add` is referenced by invocation.  

Why do this and not use a function declaration?  Because we have more control over our code now.  Our function expression cannot be hoisted so we can tell it when to do its job easier.  We also gain the syntactical sugar of an anonymous function.  We can place functions within functions easier without having to name them.  We will discuss this in greater detail later on.

### Arrow  Function Expressions  

Arrow functions are fancy looking function expressions with a major feature removed, the `this` keyword.  We won't focus on why this is important right now,  Instead, we will start getting used to seeing the syntax of what an arrow function looks like:

```javascript
// function expression syntax
// const add = function(a,b) { 
//  return a + b;
// } 

// arrow function expression syntax
const add = (a,b) => { 
 return a + b;
} 
console.log(add(2,4)) // 6 
``` 
You will notice that we removed the `function` keyword in front of our parameters and then added a `=>` token behind the parameters.  This is a pretty straightforward conversion!

Syntactically, we didn't remove much, we lost a few characters in the word `function` and gained a `=>`.  However, there are many sub-rules for syntax with arrow functions.  Those sub-rules can create extremely streamlined syntax.  For example, this line of code:

 ```javascript
// streamlined arrow syntax
const add = (a,b) => a + b; 

console.log(add(2,4)) // 6 
``` 
Wow, there are a lot of abstractions occurring there!  Because we only have one return statement, we no longer are required to even use the `return` keyword cause it's implied!  We also have no need for our `{}` because they too are redundant in the rules of arrow functions.  

It's fun to see how slim we can get, but a word of caution: stick with the simple conversion first and slowly step into using other syntactical sugar approaches as you progress.

Often times developers will go too far with syntactical sugar and the code becomes very hard to read.  Arrow function expressions are great to use with array methods for example, but may not be a great choice in a lot of other places.

#### When Not To Use Arrow Functions
 There are a time and place for arrow functions.  Here is a list of times you should not be using them:
 * Event handlers (Unless they are inside a class constructor!)
* Object methods
* Prototype methods
* Anytime you need to use arguments Object",,,A3osW_wRH0U,http://youtube.com/watch?v=A3osW_wRH0U,https://www.youtube.com/embed/A3osW_wRH0U,,,,,JavaScript I ,,JavaScript Fundamentals,Full Stack Web Development Core,,1,,1,2
deliver a tailored elevator pitch to various types of people.,It's important to know how to effectively market yourself to the various kinds of people you encounter throughout the hiring process.,,"## Steps to tailoring your elevator pitch

 1. Know your audience 
	- What does your audience *want* and how could this possibly connect to your goals?
	- Does the person your talking to have a technical *background*? If not, adjust your jargon.
	- How high up in a company is the person you're talking to? What is their *rank*? A CEO may not have the time to respond to informational interview requests that a mid-level developer might.
	- Seek first to understand before being understood. The more information you have about who you are talking to, the easier it is for you to target your pitch. Sometimes the best pitch can even be a strategic follow-up question.
 2. Identify how your goals are aligned with your audience
	 - How would it be a win-win if you were hired?
 4. Stay curious and empathetic
	 - Seek first to understand and then to be understood. The more information you have about who you are talking to, the more you can target your pitch. Sometimes the best pitch is a strategic follow-up question. 

## Conducting effective people research
Once you get the names of people you are interviewing with, be sure to go to their social profiles online to gather valuable information not only on company culture, but on the individual interests and backgrounds of the person you'll be interviewing with. Mine the following thoroughly:
- LinkedIn
- Instagram
- Twitter
- Google
- Mutual connections

## Beyond the elevator pitch
Other than your elevator pitch, you also have the opportunity to use your information about the employer or contact to tailor other interactions during the interviewing and application process. See below for some additional tips:
 1. Cover Letters & Resumes
 	 - Use an online word cloud generator to identify the language for the position and help you to focus on words you should be including
 	 - Make sure you have thoroughly scoured the company website to incorporate information from their values and mission statements
 	 - set a Google alert for news related to your target company that you can incorporate into your cover letter
 2. Interview Responses
 	 - It's okay to work shared interests into interview responses and conversation
	 	 - For example: if Holdy were your Hiring Manager, a quick Twitter search would let you know which sports teams he follows, and you might want to work in the fact that following baseball season is a hobby of yours
 	 - There may also be things that you don't want to bring up  based on your assessment of what the company or person's priorities are 
	 	  - if there are any touchy subjects in relation to the company, you want to avoid them

 3. Thank You Emails/Letters
 	 - Write down notes on your interaction with every person immediately after your interview to incorporate those details into a physical thank you note or thank you email","## Let's tailor a sample elevator pitch for a classmate who got a job at one of your target companies. 
- What does my audience want or could they possibly get out of this interaction?
	- a win for their company if you get the job
	- a possible referral bonus if they refer you to the job
	- credibility with their company for bringing a successful candidate on board
- What's missing from this pitch example?
- Is there anything that should be taken out?","Pair up with another student and take turns role playing the delivery of a tailored elevator pitch to a Hiring Manager, Peer, and Recruiter. Turn in a list of who you practiced with to your PM who will pick one role at random to practice with you during your sprint review.",,,,,,,,Bait the Hook to Suit the Fish,,Bait the Hook to Suit the Fish,Career Readiness,,1,1,,2
demonstrate understanding of the importance in adopting an employer's perspective during the job search process.,"To effectively sell yourself to employers and build your network at multiple stages of the job search process, you will need to empathize with the employer and identify the unique value you can bring to them.",,"## Why is this helpful?
- In Dale Carnegie's famous book ""How to Win Friends & Influence People"", he talks about the importance of identifying what other people want when you are trying to persuade them of something. The same is true for your job search. You will be interacting with many different kinds of people over the course of your job search, including in-house recruiters, third-party recruiters, hiring managers, peers, potential referrals, and connections with or without technical backgrounds. Any one of these people could be the potential gateway to your next job, so it's important to always be ready to deliver your elevator pitch and Lambda pitch effectively to each person. Since you've already developed an elevator pitch in a previous lesson, let's talk about considerations in tailoring it for different audiences.

## Figuring out what your audience wants
Nobody wants their time wasted. Whether it's the CEO, administrator, potential coworker, or a friend who is doing an informational interview for you, everyone is looking to make decisions that will better their perspective. They would love to meet a person who is going to take them closer to that better vision of their life. Let yourself be that person.
- List of potential motivations for different audiences
	- Hiring Manager- an experienced worker as soon as possible
	- Senior Developer- a new employee they don't have to handhold
	- Peer- someone they can learn alongside with and from
	- In-House Recruiter- culture/company fit and longevity
	- Third-Party Recruiter- cheapest & most experienced candidate
	- Industry Connection- to pay it forward
	- Potential Referral- bonus for referring a new employee
	- Friend/Family- to help YOU (their friend/family member) find success
- Strategies for obtaining additional information on your audience
	- Informational interviews
		- ""Walk me through your company's current greatest challenges.""
	- Interview questions
		- ""Let's say you hire me. Sixty days into my role, what would I have accomplished that would let you know you made the right decision?""
	- Company research
		- What can you find out about their client base, areas for growth, and opportunities for improvement?

## What the process can look like
Going through a typical job application process could look like: 
- Conducting an informational interview with a peer to see if you're a good fit for an open position at their company
- Getting a referral for the position
- 1st round interview- coding challenge
- 2nd round interview- recruiter screen
- 3rd round interview- technical interview with hiring manager
- 4th round interview- behavioral interview with your prospective teammates

For each of these rounds, you're also emailing back and forth with someone from HR to schedule the interviews. Which human interaction do you think played the most important part in you ultimately getting the job and why?",,"Do an informational interview with someone who is involved in any part of the hiring process of a company and ask questions to gain a greater understanding of their perspective. Report on who you interviewed and one thing you learned to your PM.

OR


If you aren’t able to schedule an informational interview, submit a list of questions that you would like to ask someone who is involved in the hiring process.",,,,,,,,Bait the Hook to Suit the Fish,,Bait the Hook to Suit the Fish,Career Readiness,,1,1,,2
"use Sketch to create artboards, shadows, rounded corners, and manipulate lines with vector editing","Working with artboards, shadows, rounded corners, and vector editing can help us create more advanced designs with Sketch.",,"Artboards, box shadows, rounded corners, and vector editing are powerful Sketch tools that allow us to create more engaging visual designs. Let’s cover each of these concepts, in turn, to see how we can use them.

## Artboards
When we open a new Sketch file, we’re presented with the Canvas. We can create all of the designs we’d like on the Canvas, but after a while, things can start to look a little unorganized. Artboards are a great tool for organizing our work.

As the Sketch documentation explains, “Artboards allow you to create fixed frames on Sketch’s infinite Canvas, but they’re completely optional.

If you’re creating a responsive web design you may want to design for different screen sizes, and each size could be contained within an Artboard. Or perhaps you’re designing multiple views of a mobile app. Artboards can serve as a handy container.

Artboards behave like a special kind of group. The main differences are that they are represented on the Canvas, you never have to double-click to view their contents, and they don’t resize to fit the contents inside.

To create an Artboard, choose **Insert › Artboard** from the toolbar or menu (or press `A`). The Inspector will reveal a list of presets, whose categories can be changed by clicking the dropdown button at the top of the list, along with a toggle for landscape and portrait orientations. Just click on a preset from the list to insert it into the Canvas.”

![](https://tk-assets.lambdaschool.com/36cca65e-00fb-47a0-8648-8d7e895630f5_artboard-presets.jpg)

## Shadows
Shadows let us add depth to interface designs, and using them in Sketch is a breeze. When we have a layer selected, we can navigate to the Inspector and click on the `Shadows` menu item to add a shadow.

![](https://tk-assets.lambdaschool.com/ecc895dd-2825-4815-aae5-b79fd7f8502f_ScreenShot2019-02-18at3.11.59PM.png)

Once we’ve done that, we can adjust the shadow’s color, X and Y positioning, Blur, and Spread. The Blur determines how blurry the shadow will be, while the Spread determines how large it can get.

## Rounded Corners
Rounded corners are great for increasing the affordances of elements like buttons and inputs. To add rounded corners, select a layer and navigate to the Inspector. Then, adjust the Radius slider or put in a value that you’d like to use (3 and 5 are good safe choices).
![](https://tk-assets.lambdaschool.com/0b440692-71f8-4957-ac3b-95df18894a6b_ScreenShot2019-02-18at3.28.43PM.png)

## Vector Editing
As we’ve seen earlier, we can use Sketch to make simple shapes like circles, rectangles, and lines. What we didn’t cover yet is that each of these shapes is also a vector. A vector is a set of points, lines, and fills that colletively form a shape. For example, we can see that this rectangle is really just four points and four lines filled in.

![](https://tk-assets.lambdaschool.com/8fe6e5c5-e82f-4476-bc14-b28d7a295610_ScreenShot2019-02-18at4.12.43PM.png)

Through vector editing, we can manipulate points and lines to create any shape imaginable!

![](https://tk-assets.lambdaschool.com/93467ce7-929d-43fa-9d8e-095c9f9d7a2a_ScreenShot2019-02-18at4.14.35PM.png)",,,,,,,,"Sketch documentation on vector editing,Sketch documentation on shadows,Sketch documentation on artboards","- What is an artboard?
- What is vector editing?",Intro to InVision & Craft,Active,UI Fundamentals,UX Design Core,,1,,,1
explain what InVision is and why we use it as a design tool,InVision is a powerful prototyping tool that integrates well with Sketch.,,"To test the interfaces we design in Sketch with users or to present them to stakeholders, we need a way to connect all of the interfaces and make them feel like a cohesive product. There are a variety of tools and software available that make this process easier for us, but the current market leader and most widely used tool is InVision.

We can take a look at UXTools.co’s Design Tools Survey from 2018 to see how just how popular InVision has become. They had about 2800 designers take their survey. In this chart, we can see that InVision is the predominant tool for Prototyping with about 43% of respondents saying that they use it.
![](https://tk-assets.lambdaschool.com/48e9651f-a458-476b-9600-494b5d632352_ScreenShot2019-02-19at8.28.20AM.png)",,,,,,,,,,Intro to InVision & Craft,,UI Fundamentals,UX Design Core,,1,,,1
"manually upload screens to InVision, add hot spots, and share the prototype","The core functionality of InVision revolves around uploading, connecting, and sharing your designs to prototypes.",,"To use the prototyping features of InVision, we need to upload our Sketch screens, connect them together, and share them. To start this process, we need to generate screens from Sketch to upload.

## Exporting Artboards
In Sketch, we can generate image files of our artboards by exporting them. Before we do that, we want to make sure that we’re using an artboard that will sync nicely with InVision as outlined below. 

- Web screens
  - Desktop preset
- Apple device screens
  - iPhone XS preset
- Android device screens
  - Galaxy S8 preset. 

To export your chosen artboards, we can select any artboard and click the `Make Exportable` option in the Inspector.

![](https://tk-assets.lambdaschool.com/994029b4-ad95-4645-abc7-671a4ac3d584_ScreenShot2019-02-19at10.04.41AM.png)

This will open up the exportable options for your artboard. You’ll want to make sure that you’re exporting a `PNG` or `JPG`. You can also choose to check the `Background Color` box above the export options. This will add a background color to your export, which is helpful when uploading to InVision. Otherwise, you can leave the rest of the options for now and click the `Export Selected` button at the bottom of the Inspector.

![](https://tk-assets.lambdaschool.com/50c3a2f5-cfb2-4fd0-b89f-635afdaba728_ScreenShot2019-02-19at10.10.02AM.png)

After pressing the button, you will be prompted to save your work on your computer. Save it somewhere you can easily find it later, like your Desktop, Downloads, or Documents.

Now that we have the screens we want to use, we’re ready to upload them to InVision.

## InVision Setup
Before we upload our screens, we’ll need to create an InVision account and add a prototype. If you don’t have an account yet, you can sign up for one [here](https://projects.invisionapp.com/d/signup).

Once you have an account and log in, you’ll be presented with your projects. Now we need to create a new prototype project to upload our images. In the workplace, we typically create a new prototype for each project we’re working on. But at Lambda, we only use one prototype for everything so you can stay on the free plan.

To create a new prototype, click on the pink plus sign in the upper right side of the interface.

![](https://tk-assets.lambdaschool.com/5cf4d0e5-004b-4d58-bced-d48958cf5eeb_ScreenShot2019-02-19at10.19.38AM.png)

You will then be prompted to select your project type. We want to create a prototype.

![](https://tk-assets.lambdaschool.com/cad77ce4-7573-4e60-b9fd-3496ffac35bb_ScreenShot2019-02-19at10.20.23AM.png)

Next, you’ll be prompted to name your prototype and select what type of prototype it should be. The type will vary depending upon the product you’re designing. For now, we’ll stick with the desktop.

![](https://tk-assets.lambdaschool.com/ba145882-43ca-4a3a-a9da-f6761f63e9dc_ScreenShot2019-02-19at10.21.13AM.png)

Once you’ve clicked `Next`, your prototype will be created and you’re ready to start uploading screens.

![](https://tk-assets.lambdaschool.com/93b7ccb3-1a2e-412d-b753-9896bd9e336e_ScreenShot2019-02-19at10.23.39AM.png)

## Uploading Screens
There are a couple of different ways you can upload your Sketch screens to your InVision prototype. You can simply drag and drop your exported images onto your prototype. Another way is to click on the pink plus button on the right side of the screen and press the `Upload Screens` option.

![](https://tk-assets.lambdaschool.com/204fc84c-c756-4844-8a38-39bde45fae9a_ScreenShot2019-02-19at4.04.11PM.png)

Once your screens are uploaded, you will see them in your project.

![](https://tk-assets.lambdaschool.com/3fbe0c9c-1ca6-4550-85bf-16d60a26c416_ScreenShot2019-02-19at4.07.16PM.png)

## Hot Spots
To mimic the functionality of an app or website, we add hot spots to our uploaded screen. We can start by selecting the screen we want to add a hot spot to in our project. Doing so will open up that screen in InVision. Next, we can activate Build Mode by clicking the `Build Mode button` or by pressing `B`.

![](https://tk-assets.lambdaschool.com/2bbe0c76-fc50-4a87-8477-8666ba13d476_ScreenShot2019-02-19at4.12.01PM.png)

Once we’re in Build Mode, we can click and drag on the screen to create a hot spot.

![](https://tk-assets.lambdaschool.com/e4b939d7-e213-4534-a06b-6f08796ab370_ScreenShot2019-02-19at4.14.51PM.png)

Now we can select the functionality that we’d like the interaction to handle. Once we’re done, we can go back to the preview screen by pressing `P`. Finally, we can click on the screen and InVision will handle the functionality we requested!

## Sharing
InVision prototypes are great tools to help us visualize our designs, but they’re even more useful when we share them with stakeholders, users, and other designers. To share a prototype, we can press the green `share` button on our prototype’s page.

![](https://tk-assets.lambdaschool.com/9a105472-8a57-451d-8a14-6061b315cb43_ScreenShot2019-02-19at10.23.39AM.png)

Then you follow the prompt to invite someone by email or use the link at the bottom to share a link with them.",,,,,,,,Sketch documentation on exporting artboards,,Intro to InVision & Craft,,UI Fundamentals,UX Design Core,,1,,,1
use InVision’s Craft plugin to save time,InVision’s Craft plugin automates the manual parts of the screen upload process and adds other nice features to Sketch.,,"Uploading screens to InVision manually takes a lot of time that we could be spending designing! Fortunally, InVision has developed a plugin for Sketch, called Craft, that automates the upload process. You can download Craft [here](https://www.invisionapp.com/craft).

Once you have Craft installed, you will see an extra toolbar in Sketch next to your Inspector.

![](https://tk-assets.lambdaschool.com/a46fb379-fe91-4b11-8a3a-e179cbc379a1_ScreenShot2019-02-19at4.31.17PM.png)

Selecting the first item in the Craft menu will open up the sync tool. Here you can select the prototype you’d like to upload screens to and then click the `Publish` button. Now, every time you make a change to your screens, you can re-publish the screens through Craft and Invision will update your prototype for you.",,,,,,,,InVision Craft,,Intro to InVision & Craft,Active,UI Fundamentals,UX Design Core,,1,,,1
get Permutation Importances,,,,,,,,,,,,,Random Forests & Gradient Boosting,,"Tree Ensembles, Classification & Validation",,,0,,,0
make Partial Dependence Plots,,,,,,,,,,,,,Model interpretation,,"Tree Ensembles, Practicing & Understanding Predictive Modeling",,,0,,,0
get Shapley Values,,,,,,,,,,,,,Model interpretation,,"Tree Ensembles, Practicing & Understanding Predictive Modeling",,,0,,,0
do feature engineering for decision trees,,,,,,,,,,,,,Decision Trees,,"Tree Ensembles, Regression",,,0,,,0
make visualizations of decision trees,,,,,,,,,,,,,Decision Trees,,"Tree Ensembles, Regression",,,0,,,0
enforce Monotonic Constraints,,,,,,,,,,,,,Gradient Boosting,,Tree Ensembles,,,0,,,0
get Out-Of-Bag scores,,,,,,,,,,,,,Random Forests & Gradient Boosting,,"Tree Ensembles, Classification & Validation",,,0,,,0
understand Bagging vs Boosting,,,,,,,,,,,,,Gradient Boosting,,Tree Ensembles,,,0,,,0
,,,,,,,,,,,,,,,,,,0,,,0
design a user interface,"As UX designers, we need to be able to design a user interface to make our experiences a reality.",,"To make user experiences tangible, UX designers frequently design User Interfaces (UI) for users to interact with. In the broadest possible sense, a UI is where humans and machines interact with each other. That means that a UI isn’t always a digital artifact. Instead, it could refer to text, menus, physical controls, etc.

While there are many types of user interfaces, there are four that we commonly refers to:

- Command Line Interface
- Menu-driven Interface
- Graphical User Interface (GUI)
- Touchscreen Graphical User Interface

Cheryl Falk from Altia outlines the following definitions and pros and cons for each of these interfaces.

## “Command Line Interface
The command line interface is no longer common as a form of basic user interface in everyday consumer products, but it is still in use under certain circumstances. Command Line Interface requires users to type appropriate instructions into the command line. The computer is commanded to first go to the required file or directory. From there, a whole host of commands become available, from retrieving files to running programs.

### Advantages
- Simple structure
- Minimal memory usage
- Great for slow-running computers, or those low on memory
- An expert CLI user can give commands and perform tasks much faster than when using an alternative UI type

### Disadvantages
- Difficult to learn command language
- Complex for novice users
- Minimal error message information

## Menu-Driven Interface
The menu-driven user interface provides you with a range of commands or options in the form of a list or menu displayed in full-screen, pop-up, pull-down, or drop-down. An ATM is an example of a menu-driven interface.

### Advantages
- It is not necessary to remember a long list of manual commands
- Simple interface for novices
- Self-explanatory menu options

### Disadvantages
- Slower for experienced users
- Limited menu options
- Often requires you to access multiple menu screens to perform simple functions

## Graphical User Interface
The graphical user interface, or GUI, is the type of interface with which the majority of people are the most familiar. You interact with these interfaces by using a mouse, tack pad, or other peripheral to point and click on graphics or icons.

### Advantages
- Self-explanatory
- Easy to use
- Memorizing command lists is not necessary
- Allows for running multiple applications, programs, and tasks simultaneously
- Solid support facilities
- The similar format among different programs adds familiarity
- WYSIWYG makes for easy design and formatting

### Disadvantages
- Uses large amounts of memory – although this is less of a concern as computers get more powerful

## Touchscreen Graphical User Interface
The touchscreen GUI is very similar to the regular GUI, except that you use your fingers or a stylus to select icons and perform tasks, rather than a mouse or trackpad. Touchscreen GUIs are commonly found on tablets, smartphones, and medical devices, like the t:slim insulin pump. The touchscreen GUI has the same benefits and disadvantages as standard GUIs, but also offers a more intimate method of interaction. The lack of peripherals makes touchscreen GUIs very convenient.”

These days, most users are familiar with GUIs, Touchscreen GUIs, and Menu user interfaces. As computers have become more powerful, the need for Command line interfaces has decreased dramatically. 

Because GUIs are so prevalent, when we designers generically refer to the term UI they often mean GUI. So, be aware of the context in which you’re discussing UIs. If you work at an ATM factory, you’ll probably use UI to refer to Menu interfaces. If you work anywhere else, you’ll most likely use the term UI to refer to a GUI. Throughout this course, when we refer to a UI we typically mean a GUI or Touchscreen GUI.

A graphic user interface (GUI) is generally made up of pieces. Sometimes we call those pieces components or elements of the screen. Many times in design work, you’ll work for a team that already has a design system in place, where the components are already styled and you can simple use existing components to structure the page. Other times, you might be responsible to create an interface from scratch, choosing and styling components based on existing design paradigms. We’d like to introduce you to some common elements or components that you might encounter or be required to design in a UX design career.

In addition, we’re introducing some terminology that might help you talk about some of these concepts with other designers and developers. As with any language, the nomenclature of design and development is constantly changing and different organizations often refer to different elements by different names. Nevertheless, it’s good to have a foundation in the lexicon of the field in order to better communicate with colleagues and mentors.

These elements or components are loosely organized. There are some components that might fit in multiple categories. For simplicity, we have grouped them in the following way, but just understand this is not the only way these elements could be conceivably categorized.

### Windows
In graphical user interfaces, containers called windows are the primary metaphor for contextualizing components as part of the same entity. Each program on a desktop will use a window to contain its information. Sometimes the program allows multiple windows to be open simultaneously, for example when you have more than one website open in two separate containers (as opposed to two tabs within a single window). Windows usually have what is referred to as chrome which is the area at the top and sometimes bottom of the window that contains information about the application and often has controls for closing or minimizing the window.

### Dialogue Box
A dialogue box is a graphical box usually containing a message that appears over the window of the relevant program. Often the dialog box will require an interaction before a user can continue. When that is the case, the dialog box is referred to as a modal window. If no action is required and the user can continue work without acknowledging the dialog, it is referred to as mode-less.

## Navigation
Navigation is a general term for controls that allow you to move around within an application. Navigation can take multiple forms. In web and desktop or laptop programs, the navigation is often across the top of the application or browser window. Some programs opt for a side-based navigation. Here are a few examples of navigational controls.


### Menu bar or Navigation bar
Usually located across the top of the window, a menu or navigation bar is a foundational paradigm of most programs. People are now accustomed to finding their way around a website through the top menu. It is even sometimes called a top bar.

### Sidebar
Sidebars are often used for navigation in dashboard-style designs. They are also used for navigation in more complex environments, like online shopping or looking for vehicles where there are huge numbers of categories to choose from. A form of navigation that often uses a sidebar is called faceted navigation and is often used to help users find information they are seeking quickly from a very large, complex data set.

### Tabs
Wikipedia uses tabs for the edit and view history options of this page.
Tabs are often used with navigation to help keep window content organized. The windows and dialog box illustrations above also show how tabs are used within the chrome browser to keep track of pages visited within the browser.

Wikipedia uses tabs for navigating to access the editing, commentary, and history of entries. The site also features a sidebar navigation, a top bar navigation and a search field.

### Search field
A powerful way for navigating many websites and applications is through search. Search fields are almost ubiquitous in any site today. It can be tempting to design any site with a search field without giving thought to what the implications are when you introduce search into a product. There are technical considerations for what is being searched and how search results should appear.

## Controls
Controls are elements that a user can interact with to affect some behavior of the program.

### Scrollbar
Scrollbars are many times built into the browser and cannot be styled. But it is important when designing to consider when a scrollbar might appear and what the ramifications are of its appearance. A current common pattern is for scrollbars to appear as a mouse scrolls and disappear after the scroll activity ends. Sometimes designers place controls on a page under where the scroll bar appears. When that happens, the controls can’t be used while the scrollbar is active. This can be a potential annoyance for users.

### Button
The button is a control that is usually tapped or clicked (depending on the input source). Buttons should be designed with affordances that suggest their purpose. That is, they should appear to be buttons and invite that interaction through their appearance.

### Slider
Whereas a button is a do/don’t option. Sliders allow a user to adjust the control across a spectrum of possible options. They can be tricky to develop effectively, but can be useful in some contexts. One should always consider if there are more effective options before deciding on a slider.

### Spinner
A spinner is used to allow a user to incrementally change a value in a field up or down. This control is used in many programs to allow users to choose font size or object size.

### Context menu
A context menu is one that is normally inactive or hidden and can only be revealed when activated through some special control, for example a right-click on a mouse, or through the activating of an object on the screen.

### Link
Hyperlinks, often just called links, are what made the internet as powerful as it is for sharing and organizing information. HTML code allows developers to designate text or objects on a web page or in applications to “point to” other pages or actions. Clicking on the link then shows the user what the link was linked to. The user’s mental model is “I’m going to that page” whereas the actual technology is “We’re now showing the user something new.”

Links have traditionally been blue, underlined text. Now, developers can make links appear however they choose. Designers should be careful about what that appearance is and match it to user expectations. An unrecognizable link is not useful at all.

## Information component
There are components used to contain static or dynamic content that has little or no user interaction, but are simply different ways to provide information to the user.

### Carousel
A series of images that are contained within a central viewport. The user can generally only see one of the images at a time. Sometimes a carousel is designed to rotate automatically through the images. Sometimes it is user-controlled. Sometimes both options are available. While fairly common, the carousel is out of favor because it hides information and is often implemented poorly, rotating through the images faster than a user can read or perceive them. The movement also distracts users from other parts of a page.

### Progress bar
Progress bars are designed to help a user understand their place within a process. A good example is a checkout experience or sign-up experience where there might be multiple steps in the process.

### Accordion
An accordion is a vertical stack of containers that can be collapsed to hide content.

## Forms
Forms are the way interfaces can gather information from users and store it for use in the application. They consist of inputs, labels, and submission buttons. There are more nuances to the various ways forms can be used, but those are the basics.

### Label
Labels help the user understand what information is being requested. They typically accompany an input field.

### Input Field
Text boxes that allow the user to type information are known as text inputs or text fields. The boxes under the labels are the text input fields. They can be styled in a variety of ways.

### Dropdown or Select Menu
Select menus or dropdown menus allow for placing many options within a single control and allow the user to select one or more of them (depending on the implementation).

### Radio Buttons and Checkboxes
Radio buttons are controls used in web and desktop applications, but seldom in mobile applications. They are usually used when you have multiple items to select from and you want to choose only one of them. In a radio button group, only one button can be selected at a time.

Checkboxes are used in similar circumstances to radio buttons, but they allow for selecting multiple items in a group.

Checkboxes and radio buttons can be styled in various ways, but the concept of single-select, vs. multi-select when using them is important.","There are many different ways to design a user interface. As you develop your process, you’ll uncover your own methodology and approach that will help you design the UIs you need. That said, there are a few universal components of an interface that we all need to consider when designing. Let’s take a look at each of them now.

## Content
As we’ve seen time and time again, content is the most important part of any user interface. So, it stands to reason that we can’t design a UI without some content.

At a minimum, we need to understand the purpose of a page relative to its audience. For example, does our About page need to inspire customers about our mission, is it a recruiting tool to let prospective employees know who we are as a company, or does it need to do both? It’s almost impossible to design a UI without an understanding of its purpose.

Once we have that understanding, then we can start working on what content that page needs to display. If our About page needs to inspire customers about our mission, then we’ll need to have that mission written out so we can design a UI around it because content can dramatically impact how we design an interface. For example, if the mission is two sentences, we might design it very large and stylized. But, if it’s a two page essay, then we’ll have to design it like a long-form piece of content with an appropriate text hierarchy.

The more we understand about the intentions behind a UI and the actual content it needs to contain, then the better we can design it.

## Navigation
Navigation is a critically important component of every UI. Users use navigations for more than maneuvering around our products. They also use them to build a mental model of how our products work and to quickly find the information scent for the content that is most relevant to them.

Since navigations are so important, there is a lot of external consistency between different products. Designers have recognized that users are familiar with certain navigation patterns, and have adopted these patterns into their own UIs to provide their users with an immediate sense of familiarity. Common navigation patterns include having the navigation in a horizontal line at the top of a page, or having a sidebar navigation on the side of the page. 

As we design our interfaces, one of the first components we need to consider is our navigation. The vast majority of the time, we will simply use one of the existing navigation patterns. So, becoming familiar with how to design and implement them is a great way to get better at designing interfaces.

There are certainly occasions where the existing patterns won’t work for a product. In those circumstances, we need to make sure we’ve done some design and user research to see if anyone else has solved this design problem already and to understand how our users are expecting to see this information presented. Once we’ve developed our the new navigation, it should be extensively user tested to see if users can use it as expected.

## Component Patterns
As we design user interfaces, we don’t always have to solve design problems from scratch. Instead, we can “stand on the shoulders of giants” and use existing component patterns. We’ve compiled a list of common patterns above, but you can find more of them on sites like Dribbble.com and Behance.net, or by looking at products you admire.

Having a well-developed understanding of common patterns helps us design faster and prevents us from reinventing the wheel every time we face a design problem.

## Low-fidelity vs. High-fidelity
Designing an interface takes a lot of thinking and time, so we need to make sure that the way we’re designing is suited to what we want to achieve by designing the interface in the first place. If we’re trying to get a quick idea of how a layout should look, then we could sketch out a quick wireframe on a piece of paper. But, if we’re trying to create a fully realized version of the product for developers to implement, then we’ll need to spend a lot of time designing mockups.

We can boil this process down into determining the fidelity of our UIs. If we’re interested in a quick, approximation of an interface, then we’d design a low-fidelity UI. And, if we need a hyper realistic version, then we’d design a high-fidelity UI. Ensuring that you’re designing for the right fidelity can help save you time, effort, and money.

## Assets
As we design user interfaces, we’ll frequently add assets to them that help increase their fidelity. Assets can include typefaces, colors, images, icons, and other details that are considered separately designed from the actual UI. Once we’re ready to develop our UIs, we need to be able to share these assets with our development teams so they can implement our designs. Keeping track of assets and working with developers to resize and implement them is an important concept to master when designing interfaces.",,,,,,,Exploring the UI Universe: Different Types of UI,"- What is a UI?
- What is a GUI?",Designing User Interfaces,Active,UI Fundamentals,UX Design Core,,1,,,1
"use Sketch to manipulate opacity, create a mask, and use boolean operations","Working with opacities, masks, and boolean operations can help us create more advanced designs with Sketch.",,"Opacities, masks, and boolean operations are powerful Sketch tools that allow us to create more engaging visual designs. Let’s cover each of these concepts, in turn, to see how we can use them.

## Opacity
When we add color to layers and text, we can also adjust the opacity to make the layer or text more transparent. Adjusting the opacity is useful when designing shadows or when you’re layering many elements on top of each other like in a modal.

You can adjust the opacity of any color by changing the Alpha value in the color picker. You can use any value from 0 to 100, with 0 being completely transparent and 100 being totally opaque.

![](https://tk-assets.lambdaschool.com/e06bf608-4939-4fd3-9127-a6b3dd285825_ScreenShot2019-02-25at8.52.02AM.png)

## Masks
We can use masks to selectively show parts of other layers. In practice, we’ll frequently use masks with images to make the images take certain shapes like a circle.

If we wanted to create a profile picture circle from an image with a mask, we could follow these steps. First, we’ll add an image to Sketch.

![](https://tk-assets.lambdaschool.com/792feb10-1866-4324-9e37-efe59590ca6f_ScreenShot2019-02-25at9.05.18AM.png)

Then, we’ll add a circle layer on top of our image where we want the image to come through.

![](https://tk-assets.lambdaschool.com/4279f3bf-cfc3-476b-8f19-ff6617494c43_ScreenShot2019-02-25at9.07.28AM.png)

Next, we’ll select both layers and press the `Mask` button.

![](https://tk-assets.lambdaschool.com/09bd09b6-466e-4ef8-90a9-2f709d21100e_ScreenShot2019-02-25at9.08.55AM.png)

Finally, we have our masked image!

![](https://tk-assets.lambdaschool.com/e52fd032-ee91-4643-b867-786082e7522b_ScreenShot2019-02-25at9.09.53AM.png )

## Boolean Operations
Boolean operations help us make complex shapes from simple shapes. There are four boolean operations that we can use: Union, Subtract, Intersect, and Difference. According to the Sketch documentation, they each have the following effects.

![](https://tk-assets.lambdaschool.com/846e4e91-75aa-4c43-a2ec-7e2bfff7075a_operations.jpg)

- Union: The result is a vector that is the sum of both vectors’ areas.
- Subtract: The result is a vector where the area of the top shape is removed from the one under it.
- Intersect: The result is a vector consisting of the parts where the original shapes overlapped.
- Difference: The result is a vector that is exactly the part where they didn’t overlap. It’s the inverse of an intersect operation.

Once a boolean operation has been used, the layer it manipulated become a combined shape. A combined shape can be inspected in the layer list and its individual layers can be manipulated as well.",,,,,,,,"Sketch documentation on masking,Sketch documentation on boolean operations","- What is a mask?
- What is a boolean operation?",Designing User Interfaces,,UI Fundamentals,UX Design Core,,1,,,1
use InVision’s comments and history features,InVision has some powerful features for tracking your design progress and collaboration.,,"Part of InVision’s appeal goes beyond its ability to wire up prototypes. It also has incredible collaboration and version tracking tools that can help us produce better designs. Let’s take a look at each of these features in turn.

## Comments
In InVision, we can leave comments on our prototype screens to suggest changes, make notes, and have conversations. To do so, we can visit a screen and enter comment mode by pressing `C` or clicking on the comment button. Then, we can click anywhere to leave a comment.

![](https://tk-assets.lambdaschool.com/843993e2-95d7-46e9-af39-9b555b78fb73_ScreenShot2019-02-25at10.26.38AM.png)

Inside of a comment, we can respond to other comments and have conversations about the design. We can then resolve comments, or keep them as documentation.

## History
As we iterate towards a viable design, we’ll frequently upload many screen variations to InVision. Being able to see the progress we’ve made towards a design can help spark new ideas and remind of experiments we’d forgotten. InVision’s history feature makes it easy for us to see past versions of our screens.

To see these versions, we need to navigate to a screen and click on the history tab.

![](https://tk-assets.lambdaschool.com/b2260765-f908-4265-83a2-9f99a41d7fab_ScreenShot2019-02-25at4.17.27PM.png)

Then we can select a different version in the left sidebar to see what our design looked like at that point in time.

![](https://tk-assets.lambdaschool.com/41d0bc65-42e0-4610-a281-bf7d8b6b9f10_ScreenShot2019-02-25at4.17.19PM.png)

By looking at the different versions, we can see how our design has developed over time.",,,,,,,,,"- What is InVision’s comment feature?
- What is InVision’s history feature?",Designing User Interfaces,Active,UI Fundamentals,UX Design Core,,1,,,1
start and stop AWS SageMaker Notebook instances,,,,,,,,,,,,,AWS SageMaker,,Big Data: AWS & Spark,DS - Data Engineering,,0,,,0
use Dask,,,,,,,,,,,,,AWS SageMaker,,Big Data: AWS & Spark,DS - Data Engineering,,0,,,0
use Numba,,,,,,,,,,,,,AWS SageMaker,,Big Data: AWS & Spark,DS - Data Engineering,,0,,,0
use Spark Streaming,,,,,,,,,,,,,,,,,,0,,,0
learn basic syntax of the Scala programming language,,,,,,,,,,,,,Just enough Scala for Spark,,Big Data: AWS & Spark,DS - Data Engineering,,0,,,0
install Python libraries for AWS SageMaker,,,,,,,,,,,,,AWS SageMaker,,Big Data: AWS & Spark,DS - Data Engineering,,0,,,0
deploy a basic (single-server) web application to common cloud services,You've run your web application locally - but your local computer isn't the web! Let's get it out there so you can share it with others in your portfolio.,"Push students to deploy, but https://ngrok.com/ can be a fallback for students who really get hard stuck on issues.","When you run your web application locally, you're already running a ""server"" - it's just not meant for production use. In order to deploy a web application fully, you need to get all your code and its dependencies on a proper server, generally an instance in the ""cloud.""

We will deploy to Heroku - a platform-as-a-service, which facilitates deploying web applications to AWS without having to directly set up or configure the underlying virtual machines. So, believe it or not, we're taking the easy way - but it'll still be a pretty tricky process, involving multiple steps that each need to be ""just so"" for it to work in the end.

Once you get it down, you can reliably put your work out there and share with others. This is clearly critical for real-world projects, but very nice for personal projects as well so that non-technical hiring managers can check them out and appreciate them.","To deploy to Heroku, you need to:

1. Install the [Heroku CLI](https://devcenter.heroku.com/articles/heroku-cli)

2. Add a few dependencies to your project - `pipenv install gunicorn psycopg2` (gunicorn for production webserver, psycopg2 for connecting to production PostgreSQL database)
3. Doublecheck that you're using `python-dotenv` properly for your API keys/secrets (nothing should be hardcoded)
4. Make a file `Procfile` in the base of your repo - this tells Heroku what process to run to start the app, and should look like `web: gunicorn twitoff:APP -t 120` (start a web dyno running gunicorn with twitoff:APP)
5. Create a new Heroku app from the Heroku website
6. Add it as a remote to your project repo, e.g. `heroku git:remote -a username-twitoff`
7. Commit, and `git push heroku master`
8. Fix things! Specifically [config vars](https://devcenter.heroku.com/articles/config-vars) (see next section) for API keys/secrets, and `heroku addons:create heroku-postgresql:hobby-dev` to create your cloud PostgreSQL database","Get as far as you can in the above steps before coming to lecture! This is not an easy thing to do, especially if you're not used to the command line. Some useful problem solving techniques:

- `heroku logs` gives you your log output, and can be useful for debugging deploys that finish but then give 500 errors
- `heroku run /bin/bash` will give you a regular command line in your Heroku instance
- `heroku run flask shell` will give you a Flask shell in your Heroku instance

- `heroku pg:psql` will give you a PostgreSQL prompt in your Heroku instance

It's OK (and expected) for you to not get all the way through, but push a bit to stretch, and ask others for help. We'll work through it together in lecture, and you can get more help afterwards as well.",W75JAe7vFF0,http://youtube.com/watch?v=W75JAe7vFF0,https://www.youtube.com/embed/W75JAe7vFF0,,"Getting Started on Heroku with Python,Heroku Installation guide",Gunicorn,,Web Application Deployment,,Productization and Cloud,DS - Data Engineering,,1,1,1,3
securely connect a deployed web application to a relational database back-end,"As we learned when we discussed full-stack web applications, the back-end handles requests but it is generally not the right place to persist data in the longterm. For that, we need a database, and for it to work in production we need to connect securely to it. This means using *environment variables* for secrets (passwords), *not* checking them into git or otherwise exposing them.","This objective is in some ways a sub-objective of the first one, but substantive enough to be worth calling out and providing specific tips for.","GitHub is great for your code - but not so great for [your API keys](https://github.com/search?q=api_key+%3D+%22z9&type=Code&ref=searchresults). How do you avoid committing secrets that grant account access, when `git` itself is the tool for both backing up, sharing, and now *deploying* your code?

For local development, we set up `python-dotenv` - for the cloud, we'll use [Heroku config vars](https://devcenter.heroku.com/articles/config-vars).","After you deploy your application for the first time, you need to set all your config vars (Heroku's flavor of *environment* variables). You can retrieve all or one of them from the CLI as follows:

```
$ heroku config
USERNAME: jane
ENVIRONMENT:    production

$ heroku config:get USERNAME
jane
```

You can set a username (creating or overriding it) with `heroku config:set USERNAME=janesmith`, and `heroku config:unset USERNAME` will simply remove it entirely.","'- Use the command line to set all the config vars you need for your app to work (largely Basilica and Twitter API access).
- Explore the Heroku web site, and find the part of the dashboard corresponding to config vars. Verify that your config vars are there as you set them from the CLI.

Note - you don't need to set the `DATABASE_URL`! Why? Because that gets set automatically when it is created (see the last line):

```
$ heroku addons:create heroku-postgresql:hobby-dev
Creating heroku-postgresql:hobby-dev on ⬢ sushi... free
Database has been created and is available
 ! This database is empty. If upgrading, you can transfer
 ! data from another database with pg:copy
Created postgresql-concave-52656 as DATABASE_URL
```",iRE7XRch670,http://youtube.com/watch?v=iRE7XRch670,https://www.youtube.com/embed/iRE7XRch670,,Heroku Config Vars,Herkou Postgres,,Web Application Deployment,,Productization and Cloud,DS - Data Engineering,,1,1,1,3
connect to the Twitter API and query for tweets by various parameters,"Twitter - the id of society - a fast and rich data source. Used cleverly, we can query the Twitter API to check the pulse on a variety of issues - or at least stay up to date on which celebrity is doing what where.","The Twitter API has slowly changed and gotten increasingly limited/rate limited. For our basic use case things should still be functional enough, though (mostly it's about limiting apps that try to provide alternatives to Twitter as a front-end).","API stands for Application Programming Interface, and it is essentially a specification for how components of an application can communicate and share/cooperate. You can think of it as a *contract* - by having an API, anybody who works with the system knows what to expect and what they should do to get desired results. One of the main original APIs was for graphical programs - Windows exposes an API for interacting with the underlying operating system, which Windows desktop apps must use in order to behave as expected.

These days the term API is usually in reference to third party APIs accessed over the web, such as the Twitter API we will be using. In this case it *is* a true API, but you could also essentially call it ""somebody else's database"" - they have their own full web application, and they're agreeing to give you a peek (possibly with conditions and restrictions or cost).","Twitter is an entity with valuable data - and while they do grant access, it does require jumping through a few hoops. First, you need to be signed up for a Twitter account (and have given Twitter a valid phone number).

Then, [apply for developer access](https://developer.twitter.com/en/apply-for-access) - you'll have to answer questions about your intended use of the API. In general, write that you are working on a school project, and not planning to use the API for retweets/content creation (no spam-bot behavior). You should be approved very quickly, so if you run into issues please ask your PM for help.

Do this ahead of class, so you're ready to go when lecture starts.","Read about [Tweet timelines](https://developer.twitter.com/en/docs/tweets/timelines/overview), one of the main ways to get data that we will use. Note that the Twitter API really is a web application itself - just one that returns data rather than nice rendered templates (that's what the main Twitter.com site is for).",6IcC8kcJ4Js,http://youtube.com/watch?v=6IcC8kcJ4Js,https://www.youtube.com/embed/6IcC8kcJ4Js,,"Tweepy,Application Programming Interface (Wikipedia)","Idempotent REST APIs,twitter-scraper",,Consuming Data from an API,,Productization and Cloud,DS - Data Engineering,,1,1,1,3
connect to Basilica API and retrieve and manipulate embeddings for given entities,"Embeddings are a powerful, if mysterious, concept - an arbitrary dimensional numeric representation of, well, ""things"" in space. Specific dimensions have no particular semantics as they are derived from deep learning, but overall we get a useful and often remarkably accurate representation of the ""meaning"" of things and what they are similar to.

In the machine learning unit we'll learn more about how we can truly train and build our own embeddings, but for now - we can use an API and get a lot of the same power with a whole lot of convenience!","The Basilica.ai brown bag lecture is fantastic - watch it, and encourage students do as well.","The Basilica API is a somewhat different sort of service than the Twitter API - rather than asking for access to data, we're asking for access to *models* - pretrained models that Basilica has invested in that are good at generating *embeddings* for a variety of content.

This means that our input (the body of our request) can be fairly rich - they accept images, but we'll be focusing on text (specifically tweets). It also means that the output (the response from the API) is a bit unusual - in the case of tweets, a vector of floats with length 768.

Why 768? No particular reason! Embeddings are essentially the penultimate output layer of a deep neural network, and so they in some sense represent the ""meaning"" of the input (tuned to optimize certain predictions) - but the network itself is fully connected and essentially ""jumbled"", meaning any particular number has no particular semantics. 768 is just what Basilica has chosen to represent tweets, as being a rich enough representation to allow for effectively solving classification problems.","Sign up for Basilica, get an API key, and in a Python notebook:

```python
!pip install basilica
import basilica
conn = basilica.Connection(YOUR_KEY)
embedding = conn.embed_sentence('hey this is a cool tweet', model='twitter')
```

You should get back a list of 768 floats, representing `'hey this is a cool tweet'. Investigate the results, and generate more embeddings for test text (or actual tweets) of your choice and compare.","Follow the [official Basilica quickstart](https://www.basilica.ai/quickstart/python/) and the [image tutorial](https://www.basilica.ai/tutorials/how-to-train-an-image-model/), to explore the broader range of Basilica functionality.

Take some of these embeddings, and try to ""do Data Science""! That is, apply some model or algorithm (e.g. regression, clustering, PCA) and see if you can get real results using these embeddings. Embeddings such as those from Basilica let you use relatively straightforward (and computationally efficient) approaches, but get results competitive with research-grade neural networks.",5UlEcTptPc0,http://youtube.com/watch?v=5UlEcTptPc0,https://www.youtube.com/embed/5UlEcTptPc0,,Basilica.ai Brown Bag,,,Consuming Data from an API,,Productization and Cloud,DS - Data Engineering,,1,1,1,3
run and report simple online analysis of data from the user or an API,"Online analysis refers to running whatever data science model/algorithm in real-time, in response to a user request. This has the advantage of processing and possibly training directly on user data, but the disadvantage of added compute cost (and thus possibly latency) at request time. It's still a useful paradigm, especially for descriptive statistics and other simple/inexpensive techniques.","Focus on the integration of stats in the webapp, so just basic logistic or similar. If students ask for more/different - stretch goal.

For practical purposes, we'll mostly be doing ""online"" analysis - logistic regression. But to contrast with offline, you can show/discuss how the fitted model object can be saved/serialized (pickle, database, redis, etc.) and loaded more quickly.","At long last, we have a web application with some data in it - let's do some Data Science!

""Online analysis"" just refers to running the analytical code (e.g. dataframe wrangling, model fitting, etc.) in the same application/methods as the web app itself. So this just means writing code like you're using to writing in a notebook (importing and using `pandas` and `sklearn`), but in functions that get called by the web application.

This makes it easy to reason about, and ensures that it's running with the latest data. But if your model is computationally intensive online analysis is not ideal, as you may block the response and page loading as it waits for your model.

For our immediate purposes, we'll stick with a simple and efficient model (logistic regression), and online analysis will yield useful and reasonably efficient results.","We're going to run the classic logistic regression example data - the iris dataset. But now, on the web!

1. `pipenv install scikit-learn` (in your project directory) - you probably already have scikit-learn locally, but it's important for your project to have the dependency specified for later deployment.
2. Wherever your app and routes are specified, add the following route:
```python
@app.route('/iris')
def iris():    from sklearn.datasets import load_iris
    from sklearn.linear_model import LogisticRegression
    X, y = load_iris(return_X_y=True)
    clf = LogisticRegression(random_state=0, solver='lbfgs',
                             multi_class='multinomial').fit(X, y)

    return str(clf.predict(X[:2, :]))
```

Start your server, and visit the http://127.0.0.1:5000/iris. You should see `[0 0]` as the response, reflecting the class predictions for the given Iris data based on logistic regression.","1. Add a route that reports the overall goodness of fit of the logistic regression (e.g. `clf.score(X, y)`).
2. Add a route that *takes as a parameter* the input data to be predicted, and returns class labels (or even full probabilities).
3. Refactor! You should probably centralize and move the actual scikit logic to another file, and have your routing file just import and use what it needs.",2BdhrCeuNI8,http://youtube.com/watch?v=2BdhrCeuNI8,https://www.youtube.com/embed/2BdhrCeuNI8,,,,,Adding Data Science to a Web Application,,Productization and Cloud,DS - Data Engineering,,1,1,1,3
"run a more complicated offline model, and serialize the results for online use","Offline analysis refers to running whatever data science model/algorithm ahead of time, before the application is built/deployed. The trained model is then loaded into the application, or otherwise used to inform the predictions or behavior at runtime (online, in response to user requests). More expensive ML approaches essentially must be trained offline, with only inference (running the model for a prediction) happening in real-time.","This will likely be more discussed than fully demonstrated or implemented, due to time constraints - but is still an important objective to cover as they should be aware of this approach and possibly use it for build week/labs projects.

Suggested for live lecture you `import pickle` and (using the model built for ""online"" use in the first objective) show how you can `pickle.dumps` to get a generic string that could be e.g. stored in a database, cache, or otherwise. Leave the full implementation of that as a stretch goal.","As you know, in Data Science we have lots of ~toys~ tools - different models, tests, feature engineering, data processing, and so forth. Doing all of these ""online"" - live in realtime as the user makes a request - is not always realistic.

Instead, the approach is to run your pipeline and train your model ""offline"" - which just means not as part of the web application itself (in terms of routes and responses). Then, *serialize* the results - save them in some portable format - and make them available to the online application for realtime use (generally inference, making predictions rather than training).","There are many ways to save and reuse a model - the simplest (for a regression) would be to extract its coefficients, and program them into the live application. One step up is to use [pickle](https://docs.python.org/3/library/pickle.html).

`pickle` is a module in the Python standard library (so it's always available wherever Python is), and it allows you to ""dump"" and ""load"" arbitrary (in-memory) Python objects to string or binary representations. For our purposes we'll use string, as that is most convenient to then add to a database or otherwise save and load in the web application.

To use pickle, you need only two functions - `dumps` (""dump to a string"") and `loads` (""load from a string""):

```python
>>> import pickle
>>> d = {'An arbitrary': 'Python Object'}
>>> d_pickled = pickle.dumps(d)
>>> d_pickled
b'\x80\x03}q\x00X\x0c\x00\x00\x00An arbitraryq\x01X\r\x00\x00\x00Python Objectq\x02s.'
>>> d_unpickled = pickle.loads(d_pickled)
>>> d_unpickled
{'An arbitrary': 'Python Object'}
```","The above example shows how to save and load an arbitrary Python object with `pickle`.

1. Reproduce the example, but with your own Python object (and specifically one representing a statistical model of some sort).
2. Persist the string into a file or database, and write code to automatically load it in a fresh session.
3. See if you can integrate the above into your web application!",5o_yLPpdPLA,http://youtube.com/watch?v=5o_yLPpdPLA,https://www.youtube.com/embed/5o_yLPpdPLA,,pickle - Python object serialization,,,Adding Data Science to a Web Application,,Productization and Cloud,DS - Data Engineering,,1,1,1,3
design “responsively”,"Responsive design is the gold standard best practice approach for designing interfaces. So, having an understanding of it is crucial to a UX designer's success.",,"The idea of responsive design can be traced back to an article by Ethan Marcotte called Responsive Web Design. It was published in A List Apart in 2010, and it was the first time the concept of responsive design had been clearly articulated.

Ethan described responsive design like this: 
```“Rather than tailoring disconnected designs to each of an ever-increasing number of web devices, we can treat them as facets of the same experience. We can design for an optimal viewing experience, but embed standards-based technologies into our designs to make them not only more flexible, but more adaptive to the media that renders them. In short, we need to practice responsive web design.“```

Now that we had some terminology to describe this problem we were facing, Ethan went on to describe how we could technically implement a solution using media queries. Prior to media queries, we didn’t have a technically feasible way to make a website responsive. So, even if we had started designing responsively it would have never caught on. But, thanks to Ethan’s technical explanation, responsive design could be easily implemented on the web.

This was a pivotal moment for UX designers. We had an understanding of the challenge we faced and a way to technically solve it.","Designing a responsive interface is just like designing a normal one, except we’ll be creating a few different versions. Typically, we usually just create a mobile and a desktop version of a design. But, depending on the scope of the project and the importance of given breakpoints to your users, you might have to create additional interfaces.

Here is a general process that you’ll refine as you practice it.
- Prioritize mobile features - we can’t add everything to a mobile experience, so prioritize the content that is critically important.
- Research the sizing constraints on mobile - your entire visual hierarchy needs to be scaled down, so take some time to understand and experiment with smaller sizes.
- Design the mobile version of your product
- Design the desktop version of your product with all of the features
- Identify any edge-cases or specialized views that should be considered when transitioning from mobile to desktop and design them as well.

Unfortunately, our design tools like Sketch and Illustrator aren’t great at responsive design. So, you’ll need to work closely with the developer implementing the design to ensure it maintains your design direction. Otherwise, the developer is just going to use their judgment, which might not be the best approach for the product.",,,,,,,,"- What is responsive design?
- How do we design responsively?",Responsive Design,Active,UI Fundamentals,UX Design Core,,1,,,1
design using a “mobile-first” approach,"As we’ve designed more responsive websites, we’ve come up with some best practices. The most important of these is a mobile-first approach.",,"To understand a mobile-first approach, we need to first look at the terms progressive advancement and graceful degradation.

Progressive advancement means that when we design a product, we start with the simplest version of the UI, like the mobile screen, and then we add functionality as we iterate towards larger, more complex UIs.

Graceful degradation is the opposite approach, where we start with the most complex version of the UI and then remove features until it’s at its simplest form.

As you may have guessed, in order to follow a mobile-first approach, then you’d need to use progressive advancement. So, mobile-first means that we start the product design from mobile and then expand its features as screens grow.

We take this approach for several reasons.
- First, it makes us prioritize the interface even further. Because space is such a luxury on mobile, we need to really consider what we should be showing on the screen and how users will interact with it.
- Second, mobile phones are now used more than computers to access digital products. So, we should pay extra attention to our mobile designs if the majority of our users are going to be using them.
- Finally, from a technical standpoint, it is easier to code the mobile version first and then add features than it is to do the other way around.

Putting this all together, when we’re designing our responsive products, we should be using a mobile-first approach.",,,,,,,,,,Responsive Design,,UI Fundamentals,UX Design Core,,1,,,1
"use Sketch to create text styles, symbols, and libraries",Re-creating the same patterns from scratch is a tedious process. Sketch has a number of features that help speed up our workflow.,,"Sketch has a number of features that help us design more efficiently. These include text styles, symbols, and libraries. Let’s review each of these in turn.

## Text Styles
As we design interfaces, we’ll frequently use the same text properties throughout our designs. Text styles help us keep these styles consistent and make it easy for us to update them if we change them.

As the Sketch documentation explains, “to create a Text Style, select a text layer, and choose Layer › Create new Text Style from the menu, or click the text that reads “No Text Style” in the Inspector and choose Create new Text Style from the menu.

Once selected, you’ll be prompted to give your text style a name before the style is created. You will then see the Inspector updates to show you the new Text Style created using the selected layer’s properties.

![](https://tk-assets.lambdaschool.com/1ca6ad0d-78fc-46a2-b69d-4e03f3a7cf87_new-style2x.jpg)

When you modify any part of the text’s style, such as the color, font, alignment, etc you will see an asterisk (*) appear next to the Text Style’s name. This means that the style has been modified and you can choose to update any other text layers who share the same style.

Clicking the style’s name in the Inspector will reveal a pop-up menu containing a couple of options;

- Update Text Style: Will apply the changes made to that layer to any other text layers using the same style
- Reset Text Style: Will remove the changes made to that layer’s style
- Create new Text Style: Will take the changes made, and apply those to a new style that can be applied to other text layers
- Detach from Text Style: Will keep the changes you’ve made to that layer but removes the Text Style attribute from the layer”

## Symbols
While text styles help us keep our text consistent and maintainable, symbols help us keep our design patterns in order. A symbol is a reusable layer that can easily be updated across all of its instances. For example, let’s say we create a main navigation for a website. If our website had 100 pages, then it would be extremely time-consuming to add a new link to our navigation. But, if we made our navigation into a symbol, then we would just have to update the symbol once and all of the pages would be updated automatically.

As the Sketch documentation explains, “To create a Symbol, select a group, Artboard, or a selection of layers and click the Create Symbol item in the toolbar, or choose Layer › Create Symbol in the menu.

A dialog will appear allowing you to name your Symbol, and give you the option to send the Symbol’s “master” to a different page. After you’ve created the Symbol you’ll see the contents have been flattened to a single layer, called an “instance” in the Layer List.

Now you can choose Insert › Symbol from the pop-up menu, and insert a new instance of your Symbol into the Canvas. Likewise, you can copy and paste or duplicate an existing instance of a Symbol and Sketch will link them together as well.”

## Libraries
According to the Sketch documentation, “a Library is just an ordinary Sketch document that contains Symbols, Text Styles and Layer Styles, which you can then use in any other Sketch document. If you update any of the Symbols or styles in your Library file, documents containing instances of those Symbols, or any of your predefined styles, will receive a notification telling you that they can be updated.”

Building your visual language and pattern library into Sketch will save an enormous amount of time and energy because you don’t have to recreate each element whenever you want to use it. Instead, all of your components are easily injectable right in the Sketch UI.

Let’s create a Sketch library for an app called Tune.ly. In particular, we’ll include our text hierarchy and a button component.

We’ll start by opening up Sketch and creating a new file. Now, we can create our text hierarchy and button component as usual.

![](https://tk-assets.lambdaschool.com/79fa94fc-2f8c-439e-bfc4-e25ca7ee679d_ScreenShot2018-11-26at2.34.38PM.png)

From here, we’ll need to turn our text hierarchy into Sketch text styles and our button into a symbol. 

To create text styles, we can select the text we want to make into a style and then in the “Appearance” section of the right menu we can select the “No Text Style” dropdown and click “Create new text style”.

![](https://tk-assets.lambdaschool.com/f308be6e-2918-4115-8e84-865b1fb53cdf_ScreenShot2018-11-26at2.39.40PM.png)

To create a symbol, we can select the element we want to make into a symbol and then select “Create Symbol” in the upper left part of the main navigation bar.

![](https://tk-assets.lambdaschool.com/30731710-9717-4c3d-a961-6e8f541cbc8c_ScreenShot2018-11-26at2.40.46PM.png)

Once we’ve finished converting everything, we can head to the “File” menu and select “Add as library”.

![](https://tk-assets.lambdaschool.com/4536e351-66c7-40ef-8241-0ebec9b03911_ScreenShot2018-11-26at2.45.00PM.png)

Now, we can access our library styles and symbols when we open up new Sketch documents.

![](https://tk-assets.lambdaschool.com/fe2ae222-24ab-48a6-a0ba-8d5268f85be0_ScreenShot2018-11-26at2.46.10PM.png)

If we update any of our symbols our styles in our original library document, then those changes will cascade through all of our Sketch files that use this document.",,,,,,,,"Sketch documentation on libraries,Sketch documentation on symbols,Sketch documentation on text styles","- What is a Sketch text style?
- What is a Sketch symbol?
- What is a Sketch library?",Responsive Design,Active,UI Fundamentals,UX Design Core,,1,,,1
share designs with developers using InVision inspect,InVision makes it easy for developers to get the details they need out of your designs.,,"Just like designers aren’t professional developers, developers aren’t professional designers. This means that most of them are unfamiliar with how Sketch and other design tools work. So, they usually can’t jump into a design project and find the details they need.

Therefore, we use hand-off tools to make it easier for developers to implement our designs. InVision has a powerful handoff feature called Inspect that allows developers to easily grab colors, typefaces, spacing details, and even pre-generated CSS!

To access Inspect, we can navigate to any prototype screen and press the Inspect tab.

![](https://tk-assets.lambdaschool.com/1c78bdb5-65c3-4457-b782-5de5fdd18c50_ScreenShot2019-02-26at10.10.43AM.png)

On the Inspect page, we can see our layer list in the left sidebar and some meta details about our design in the right sidebar. This is another reason why layer management is so important! If we select an element on the page, we can see additional details in the right sidebar such as its spacing, size, text styles, and pre-generated CSS.

![](https://tk-assets.lambdaschool.com/198392e3-3b2d-4b92-ac2f-6a0e0a4bbcac_ScreenShot2019-02-26at10.12.28AM.png)",,,,,,,,,- What is InVision Inspect?,Responsive Design,,UI Fundamentals,UX Design Core,,1,,,1
explain what the Product Design Cycle is and why it is useful,"There are many ways to approach UX, and the Product Design Cycle is an excellent starting point.",,"If you search online for product design diagrams, you’ll have thousands of results that are all slightly different. There’s no “One Right Way” to design a product.

In the following graphic, we’ve tried to capture what best represents the idealized product design cycle as it is experienced in the industry. 

![](https://tk-assets.lambdaschool.com/47321205-c2c9-4382-a192-2479d291ba11_Product-Design-Cycle-Graphic-768x679.png)

This diagram is not literal and not all organizations follow this process with the exact same language. But, in general, the steps represented in this diagram are useful in just about any UX oriented role. The steps are just simple tools and ways of talking about the design process.

The steps are also not discrete—they overlap and blend. It’s a complex process. There really are a lot of moving parts. It’s hard to pin a product down … just like the volatile world every product lives in.

The product design process steps through these processes: 
- Discovery
- Definition
- Ideation
- Prototyping
- Production
- Testing

The processes feed into each other and continue in a cycle. Once you reach a testing phase, you begin to discover more about the product and can begin to move again into the cycle. Sometimes tight deadlines and limited budget force you to conduct only cursory discovery activities. Sometimes you move directly from ideation into production. Sometimes you test at the ideation phase and go back to discovery and definition before jumping into prototyping. This diagram is an idealized representation of the process and as such is just a guide to help you design and also to help you talk to others about design processes.

## Discovery
Discovery comes in many forms, it is also known as user research and is an important part of a user-centered design paradigm. It takes the form of interviews, observation, surveys and basically any form that allows us to gather information directly from the intended user of our devices or applications—preferably in a context where they would be using the software or product.

## Definition
The Definition phase is where designers analyze findings from the discovery phase.  We’ll cover this later too, but there are tools we can use to make sense of all the raw data. There are also processes we use to capture and describe the circumstances and the things users need in order to meet their objectives.

## Ideation
Ideation is generally the funnest part of design and sometimes is mistaken as design itself. Many people think of designers as the idea folks, but that’s just one part of the process. Ideation is the expansive, stretching, creative part of the process. It’s loose and exciting. It’s exploration and generation. But, ideation is insufficient to create a product of value. Ideas have to be beaten down and tested and tried and reformulated and then finally refined and built into something better.

## Prototyping
Prototyping is the start of the refining process. In the prototyping phase, we put frames around our ideas. Prototyping is dressing the ideas up in various outfits, so to speak, so we can put the ideas in front of users again to see how they react. It’s quick and rough, at times. At other times, prototypes are highly detailed. The prototyping process can form a tight loop with ideation—one feeding and changing the other. Prototyping is meant to give us quick information and will often be the point at which problem definition changes and might require you to start back into deeper discovery to start the full cycle again before moving into development.

## Production
The way we use this term, we’re referring to final creation of the customer-facing product. The ideas have been tested and refined at the prototype phase to avoid rework and reduce chances for errors at the production phase since the production phase tends to be more cost intensive for a business—although I might argue that that is less likely to be true now. Our concept of production includes not only the technical development of code, but also the creation and documentation of the high-fidelity interface mock-ups that communicate designed intent to the technical development team.

## Testing
Once a product is live and submitted to users, we test it with them to ensure it meets expectations. This can be done in a variety of ways, including usability testing and analytics monitoring. Testing can happen during any phase of the process. You can test ideas, you can test prototypes and you can test published products. All testing helps inform the discovery and ideation for next versions or product enhancements.

The product design cycle is a guide to help you talk about design and to help remind you of steps that will help you design quality products.",,,,,,,,,,Intro to the Product Design Cycle,,UX Processes,,,1,,,1
understand how UX designers use the Product Design Cycle’s techniques as building blocks towards a final product,The Product Design Cycle is a conceptual model for organizing our UX efforts. Understanding when to follow the model and when to diverge is an important part of being a UX designer.,,"The Product Design Cycle is a useful conceptual model for organizing how we think about the UX process. Within each section of the cycle, there are a variety of techniques that we can use to further our UX efforts. Understanding how we organize these techniques and when to use them is a critical skill to master as you develop your UX process.

Before we can understand when to use these techniques, we need to know what these techniques are! In the following list, we’ve organized various UX techniques and concepts into the section of the product design cycle that they are frequently associated with. The bolded techniques are ones that you’ve learned by this point.

- Discovery
  - Evaluating product assumptions
  - Conducting competitive analysis
  - Adhering to usability heuristics and usable design patterns
  - Conducting user and stakeholder interviews
  - Contextual inquiry
  - Organizing and presenting research findings
  - Creating a research plan
  - Recruiting research participants
- Definition	
  - How to create and use personas and proto-personas
  - How to create and use user flows
  - How to create and use an information architecture (IA)
  - How to create and use a content strategy
  - Writing project and design briefs
  - Writing job stories
  - Creating and using customer journey maps
- Ideation
  - Conducting UX workshops
  - Rapid sketching on paper
  - Presenting ideas and designs to stakeholders
  - Storytelling in design
  - How to use pair design in ideation and design work
  - Design thinking principles
- Prototyping
  - Paper prototyping
  - **Creating an effective visual hierarchy**
  - **Using gestalt principles in design**
  - **Designing responsively for the web**
  - **Understanding the mobile-first paradigm**
  - **Using Sketch to create wireframes**
  - **Transitioning from wireframes to high-fidelity design**
  - **Click-through prototyping in Invision**
- Production
  - **Using Sketch to create a high-fidelity mock-up of a design**
  - **Using Sketch libraries to speed up design work**
  - **Designing for limitations of attention and memory**
  - **Designing effectively for human perception**
  - **Using color effectively**
  - **Using typography effectively**
  - Using design systems and interface guidelines to quickly create a usable interface
- Testing
  - Online and in-person usability testing
  - Preference testing
  - 5-second testing
  - First-click tests

At first glance, this might seem like an overwhelming amount of work to do for a single product. In practice, UX designers don’t use all of these techniques on every project due to time, budget, and preference constraints. However, it is imperative that we are familiar with all of them so we can choose the best technique for what we’re trying to accomplish.

As you learn more of these techniques in the rest of the course, be sure to keep this concept in mind. Developing your understanding of when a technique should be used is a critical skill to master and will save your team time, energy, and money.",,,,,,,,,,Intro to the Product Design Cycle,Active,UX Processes,,,1,,,1
handle authentication with tokens in a React app,"Many services out in the wild require the client (our React app, for example) to provide proof that it's authenticated with them. The server running these services can issue a JWT (JSON Web Token) as the authentication token, in exchange for correct login credentials. So how do we handle this token from then on, inside our Single Page Application?",,"In general servers don't remember anything about us after each interaction. Clients need to tack some kind of reminder to every request, and this is commonly done by having the browser automatically send a small piece of data called a cookie.

Modern web services dealing in JSON data often use JWTs instead. These tokens issued by the server are strings of cryptic text which can be stored in the client using local storage or session storage. The server can readily tell it issued the token and nobody else, as well as read the token and be able to tell who you are and what permissions you have.

A common pattern is for a login endpoint to exist, which takes a payload of `username` and `password`. If the credentials are known, the server responds with a fresh JWT. From then on, it's the application's responsibility to add an `Authorization: Bearer <token>` header to every request, in order to be allowed access to protected resources that require authentication.","We are going to create an Axios configuration that attaches an `Authorization: Bearer <token>` header to requests. In order to do that, we will create a new file called `axiosAuth.js`. Whenever the application needs to exchange data with a protected endpoint, it will import this module, instead of the usual `import axios from ""axios"";`.

```javascript
  import axios from 'axios';

export default function() {
    const token = localStorage.getItem('userToken');

    return axios.create({
        headers: {
            'Content-Type': 'application/json',
            'Authorization': `${token}`,
        }
    });
};
```

From one of your Redux containers (components connected to the store), dispatch an action like so:
```javascript
  {
    type: 'LOGIN_SUCCESS',
    payload: 'eyJ1c2VySWQiOiJiMDhmODZhZi0zNWRhLTQ4ZjItOGZhYi1jZWYzOTA0NjYwYmQifQ',
  }
```

This simulates a successful request to a login endpoint. If our custom middleware works correctly, a `'userToken'` should be set to local storage. You can verify this by inspecting local storage using Chrome Devtools (Application tab).

Next, do an AJAX request to an endpoint using the `axiosAuth.js` module.
```javascript
  import axiosWithAuth from '../../path/to/axiosAuth.js';
  // etc
  axiosWithAuth().get('endpoint.url').then(data => /* do something with the data */);
```

If you inspect the request on the Network tab in Chrome Devtools, you should see `Authorization: Bearer eyJ1c2VySWQiOiJiMDhmODZhZi0zNWRhLTQ4ZjItOGZhYi1jZWYzOTA0NjYwYmQifQ` among the request headers.","Improve our custom Axios configuration using the library `axios-retry`. The idea is to automatically retry the request three times, if there are errors or timeouts.",,,,,,,,Redux Middleware / Authentication,,Redux,Full Stack Web Development Core,,1,1,,2
explain what Lean UX is and why it is useful,"To use Lean UX, we need to know what it is first!",,"One of the biggest challenges for a UX process is getting it to work in a fast-paced, iterative environment. Traditional UX processes, like the Product Design Cycle, operate on the assumption that there will be ample time and resources to delve deeply into the problem space. However, many organizations today are pivoting towards continuous, agile product development where products are frequently tweaked, updated, and launched on a rolling basis.

Lean UX has emerged as a process that fits into this world better. As Sidharth Malhotra explains on Prototypr.io’s blog, “Lean UX, based on the foundation of Agile development, is a user-centric approach that focuses on reducing the waste produced during the design cycle, and enhancing the UX through multiple iterations without spending much time on documentation.”

By eliminating waste in the design process and moving to an iterative approach, Lean UX provides a more adaptive approach for today’s latest development practices. Practicing Lean UX revolves around 3 main concepts outlined in this graphic from JustInMind: think, make and check.

![](https://tk-assets.lambdaschool.com/7bac9ffc-820b-402d-80e6-4b31f0067ae9_think-make-check-loop-in-lean-ux-design.png)

During the Think phase, you’ll be working in a collaborative team to identify your assumptions and hypotheses about the problems you’re trying to solve.

In the Make phase, you begin by designing a Minimum Viable Product (MVP) or a version of your product. With a product in hand, you can begin to gather user feedback, which leads to the final part of the process.

The final phase is Check. Here you will test your MVP with your users and see if your initial hypotheses were valid.

Within each of these phases, we work with Assumptions, Hypotheses, MVPs, and Testing to build our product. Let’s explore each of these in more details.

## Assumptions
As JustInMind explains, “The reason that assumptions play a big role in Lean UX is there is a shift from the traditional requirements/deliverables method. Instead of relying on requirements, the focus is turned towards creating a problem statement. A problem statement can take this form:

We have observed that **product/service/organization** isn’t meeting **these goals/needs**, which is causing **this adverse effect**. How might we improve so that our product/service/team/organization is more successful based on **these measurable criteria**?

This helps you to know when you’ve solved the problem. It’s likely you might have multiple problem statements. It is you and your team’s job to decide which problem statements are most pertinent to business and user goals and pursue that route.

From your problem statement, you can start to make assumptions. When creating assumptions, it’s best to have your problem statement in front of you. Now you need to think about needs, users and solutions.”

## Hypotheses
Once you have your assumptions figured out, you’re ready to turn them into a hypothesis. A hypothesis is a binary statement that outlines how it can be proven or disproven to validate your assumptions.

We write our Lean UX hypotheses a bit differently from their scientific cousins, using the following format:

We believe this [business outcome] will be achieved if [these users] successfully [attain this user outcome] with this [feature].

So an example, from JustInMind, might include the following:

“We believe that conversions will increase by 25% (business outcome) if new customers (your target audience) successfully identify a larger call to action button (feature).”

As the Interaction Design Foundation explains, “We state the belief and why it is important and who it is important to. Then we follow that with what we expect to achieve. Finally, we determine what evidence we would need to collect to prove that our belief was true.

If we find that there’s no way to prove our hypothesis – we may be heading in the wrong direction because our outcomes are not clearly defined.

One of the big advantages of working like this is it removes much of the “I don’t think that’s a good idea” and political infighting from the UX design process. Every idea is going to be tested and the evidence criteria clearly determined. No evidence? Then it’s time to drop the idea and try something else.

If everyone can understand a hypothesis and the expectations from it, they tend to be happy to wait to see if it’s true rather than passionately debating their own subjective viewpoint.”

Once we’ve identified our hypotheses, we’re ready to build a Minimum Viable Product.

## Minimum Viable Product (MVP)
A minimum viable product is exactly what it sounds like, it should be the smallest possible product that delivers value and allows you to test your hypotheses. While this sounds simple in theory, it is difficult to develop in practice.

Oftentimes, we’re tempted to add more functionality beyond what we need to test our hypotheses. This phenomenon is frequently referred to as scope creep because we’re slowly expanding the scope of our project.
Another pitfall of MVPs is that it can be tempting to deliver a sub-par experience because it’s just a test. However, we’re burning our reputational capital by doing so. We need to ensure that our MVP delivers value and a good user experience. Otherwise, our users won’t trust our future product releases. 

## Testing
Once your MVP is launched, you’re ready to begin testing. Now you’ll focus on validating the hypotheses you wrote earlier. As you validate them, you’ll refine your assumptions and work towards the next iteration of your product.",,,,,,,,"Complete Guide to Lean UX,Lean UX: Designing Great Products with Agile Teams",,Intro to Lean UX,,UX Processes,,,1,,,1
explain the differences between Lean UX and the Product Design Cycle and when they overlap,"At first glance, Lean UX might seem at odds with the Product Design Cycle. While there are differences, there is also a lot of overlap.",,"The Product Design Cycle and Lean UX have the same overarching goal: delivering a fantastic UX for your users. While that may be the case, they have very different approaches for how they go about doing so.

The Product Design Cycle is a long, thorough process that produces many design artifacts as you work towards a polished product. Whereas Lean UX eschews documentation in favor of speed, assumptions, and rapid iterations. Neither approach is better than the other. They both come with different tradeoffs and considerations.

Lean UX is a great process to reach for on small, collaborative, agile teams. It’s also perfect for when you need to develop a product rapidly with minimal costs.

The Product Design Cycle is better suited for larger teams where documentation is important to ensuring long-term success. It is also better when you can’t take an iterative approach. For example, medical products can’t be developed iteratively - they need to work right on the first try!

While each approach has its benefits, we can also blend the approaches into a hybrid style. Maybe we could have two iterations of Lean UX in a longer Product Design Cycle process, or we could use some the Product Design Cycle’s documentation in our Lean UX approach.",,,,,,,,,,Intro to Lean UX,,UX Processes,,,1,,,1
Social Media Check,,,,,,,,,,,,,How to Use Social Media in Tech,,How to Use Social Media in Tech,Career Readiness,"Social Media Preparation Checklist.docx (https://dl.airtable.com/.attachments/7356030aecbc5ebd1ec314254e8cf2db/e225bcb9/SocialMediaPreparationChecklist.docx),Social Media.key (https://dl.airtable.com/.attachments/a3325c28583222999d2584d8601834bf/7decf663/SocialMedia.key)",0,,,0
explain what a project brief is and create one,Project briefs help our teams stay aligned throughout the project development process.,,"Project briefs are an invaluable tool for helping our teams stay organized. We use them to succinctly state what the goals and expectations are for a given project. It attempts to 

`“clearly summarize the overall plan for the project: what you’re doing, why you’re doing it, relevant constraints that will drive your work, and what outcomes you expect.” `
- Leah Buley, The User Experience Team of One

`“Often, when a project is beginning, everyone has distinct ideas for what the right outcome looks like. In team discussions, it’s possible for people to express their point of view and think they’re all saying the same thing, but actually have very different ideas of what they expect… [Having a brief] creates an opportunity for everyone to agree or, if not agree, at least have a productive conversating about the focus and goals of the project [or design].“`
- Leah Buley, The User Experience Team of One

You’ll typically create a project brief when you’re starting a new project or picking up an existing one. In either case, you’re trying to bring clarity and alignment to your team regarding what you’ll ultimately deliver.

Like most UX tools, there’s no right way to go about creating a project brief. But, we can use the following process outlined by Leah Buley in The User Experience Team of One to produce one. 

First, we’ll need to understand the context of our project a bit more. To do that, we can answer the following questions. Note that these questions are just to get you started - you can certainly add or remove questions as they pertain to your project.

- Business needs
  - What business needs are driving this project?
  - If this is successful, what will be the impact on business? If it fails?
  - What is the revenue model for this product?
  - What measurable impact will improving the product have?
- User needs
  - Who are your customers? Are they your users?
  - What are their primary needs?
  - What do you know about them?
  - What don’t you know about them?
  - What assumptions are you making about them that you need to validate?
- Goals
  - What are your team’s goals?
  - What are your personal goals?
  - How will you personally know if you are successful?
- Key Expectations
  - What are they expecting from you?
  - Are there any discrepancies between their picture of your role and yours?
  - What questions might they have?
  - What things should you address prior to kicking off the work?
- General Tips
  - Consider also whether there are softer, but no less important, qualities of the work that are relevant to the overall project mandate. For example, what is the product’s value proposition, and what brand characteristics should the work reinforce or activate?
  - When capturing goals, be careful not to confuse the what with the how. A how might be ‘redesigning your company website.’ The what in this case might be ‘to produce more inbound sales leads through the company’s website.’

Once you’ve answered these questions, and any additional ones relevant to your project, you can organize your answers into a coherent document that can be easily consumed by the rest of the team.

After your document is ready, be sure to share it with your team and get their agreement or input. This can be done in a dedicated meeting or by email if that’s easier. Finally, once everyone has agreed upon the brief, make sure to 

`“revisit it periodically and use it as a framework for communicating how the work is progressing toward the overall high-level goals outline.”`
- Leah Buley, The User Experience Team of One","Let’s create a project brief for a music app called Tune.ly. We’ll be using the process outlined by Leah Buley in The User Experience Team of One.

`1.` We’ll start by answering some guiding questions to articulate the project’s context.

- Business needs
  - *What business needs are driving this project?* We need to build the app in order to have a product to sell
  - *If this is successful, what will be the impact on business? If it fails?* If the product is usable, then we will have a viable product. If not, then the whole company fails.
  - *What is the revenue model for this product?* We have free accounts with advertising and paid accounts with no advertising.
  - *What measurable impact will improving the product have?* Since this is a new project, we can ignore this question.
- User needs
  - *Who are your customers? Are they your users?* EDM music lovers aged 16-35. They’re also our customers.
  - *What are their primary needs?* They need a fast, reliable, and personalized music listening experience.
  - *What do you know about them?* We know they’re between 16-35 years old and that they love EDM music.
  - *What don’t you know about them?* We don’t know how they currently prefer to consume their music.
  - *What assumptions are you making about them that you need to validate?* We assume that by personalizing their music experience, they’ll want to use our app.
- Goals
  - *What are your team’s goals?* Build a usable product that exceeds our users’ expectations.
  - *What are your personal goals?* To design a quality user experience.
  - *How will you personally know if you are successful?* If our final user tests are 90% successful.
- Key Expectations
  - *What are stakeholders expecting from you?* They expect me to lead the UX design process and produce a usable interface.
  - *Are there any discrepancies between their picture of your role and yours?* Stakeholders may not be aware of the quantity of work that occurs prior to design and development.
  - *What questions might they have?* What does the overall process look like? How long will this take? What will this cost?
  - *What things should you address prior to kicking off the work?* Ensure that everyone understands the overall process, key milestones, and objectives.

`2.` Next, we can organize our answers into a coherent document.

At Tune.ly, we’re developing the fastest, most reliable and personalized music listening experience for EDM fans between the ages of 16 and 35. While we’re familiar with our target users, we still need to validate how they currently prefer to consume their music and if they want a personalized music experience. We will validate these outstanding concerns during our product development process.

In order to develop the most usable app possible, we will be following a standard UX product development cycle. We’ll start with a Discovery phase to research our user and business goals. Then, we’ll add some structure to our research in our Definition phase as we brainstorm problems to solve. We’ll develop solutions to these problems in the Ideation phase before rapidly iterating through potential designs during the Prototyping phase. Once we have a feasible prototype, we’ll begin our Development process. Finally, we’ll continue to track and measure our success in the ongoing Testing phase.

At the end of each phase, we will have a milestone event where we’ll share the work completed and align everyone for the next phase of work. Following this process will be a significant investment. In doing so, we will save an incredible amount of time and money by following a user-centric approach and validating our assumptions prior to development. This will prevent future rework and allow us to move forward with product development confident that we’ve built a product users will want.

By the end of this project, we will have a viable, usable app that can enter the market. Prior to launch, we will measure its readiness via usability tests. Once our usability tests are 90% successful, we will be ready for development and launch. 

`3.` With our project brief ready, we can share it with our team. Most of the team is on board, but our CEO wants to ensure that we are building the most usable app possible. So, we’ll bump up our usability test success target to 95%.

`4.` With our project brief finished and shared, we can print it out and hang it on our desk so we can reference it throughout the project.","In your own words, explain what a project brief is and why it is valuable. Then, describe the process for creating one and brainstorm 3 additional guiding questions that you might ask in your own projects.",,,,,,The User Experience Team of One: A Research and Design Survival Guide,"- What is a project brief?
- When would you create one?
- Why is it a valuable tool?",Project and Design Briefs,Active,UX Processes,,,1,1,,2
explain what a design brief is and create one,Design briefs help us articulate our vision for designs and work to be done so we can verify it matches other stakeholders’ assumptions.,,"Design briefs are powerful tools for articulating and communicating your design intentions.

`“The design brief documents your working assumptions about the optimal design of the product and puts forth your hypotheses for how best to bring that design to like… It seeks to articulate the vision for the user experience and connect the dots on how that vision will be brought to life. The design brief is something you create for your team, for any stakeholders who need to approve the design direction, and for yourself.”`
- Leah Buley, The User Experience Team of One

While design briefs are similar to project briefs, they differ in their focus. Design briefs zero in on design specifics while project briefs outline the overall vision for the project.

You’ll typically reach for a design brief when you want to clarify your design intentions to your team and highlight any ambiguous assumptions.

To create a design brief, we can create a document that answers the following guiding questions as suggested by Leah Buley in The User Experience Team of One. Note that these questions are just to get you started - you can certainly add or remove questions as they pertain to your design.

- Focus
  - What is the focus of the design work? 
  - What will be created, improved, etc. as an outcome of this work?
- Audience
  - While a design brief is intended to be brief, this is an area where a little more description will enable you to double-check that your assumptions about users - their needs, mindsets, and priorities - match your teammates’ assumptions.
  - Who will the design serve? 
  - Who are the primary audiences or personas that you will be designing for?
- Feature and functions
  - What are the core screens, states, or scenarios? 
  - What pieces of the experience will be central to the product?
- Feeling
  - If you are successful, what will the feeling of the user experience be?
  - This is basically about your brand. When people use the product, will it feel fun and playful, dark and serious, or crisp and professional? 
  - As you’re talking to stakeholders and team members about how they would like to see the product take shape, you will find that in addition to talking about features and functions, people do slip in words that effectively describe the desired feeling of the product. If you notice that language and write it down, put it in the design brief.
- Restrictions and expectations
  - What constraints must be obeyed? 
  - What is most critical to the success of the design? 
  - What parts must you absolutely get right, and what things can you absolutely not do?

Once we’ve answered these questions and finalized our document, we can share it with our team to see if everyone is on the same page.","Let’s create a design brief for our a music app called Tune.ly. In this case, let’s focus on the design we’re creating for the login page. We’ll be using the process outlined by Leah Buley in The User Experience Team of One.

`1.` We’ll start by answering some guiding questions to articulate the project’s context.
- Focus
  - *What is the focus of the design work?* We will be designing the login page.
  - *What will be created, improved, etc. as an outcome of this work?* We will create a design for the login page.
- Audience
  - *Who will the design serve?* This will serve all of our users.
  - *Who are the primary audiences or personas that you will be designing for?* Since this is a universal page, it will serve all personas.
- Feature and functions
  - *What are the core screens, states, or scenarios?* The design will require a login form and error states for incorrect data entry.
  - *What pieces of the experience will be central to the product?* Every piece will be central because if a user can’t log in then they can’t use the product.
- Feeling
  - *If you are successful, what will the feeling of the user experience be?* The UX will feel secure and safe yet not too challenging.
- Restrictions and expectations
  - *What constraints must be obeyed?* We must ask for their email and password
  - *What is most critical to the success of the design?* The login form must be easy to use.
  - *What parts must you absolutely get right, and what things can you absolutely not do?* We must make it simple to log in yet still make the user feel secure. We cannot let anyone access a user’s account without their authorization.

`2.` Next, we can organize our answers into a coherent document.
We are designing the login page for Tune.ly. This page will serve all of our users. It will allow them to enter their login credentials and proceed to the application. If they incorrectly enter their credentials, then it will display an appropriate error message.

Users should feel safe and secure on this page. Our tone should be friendly and polite. Repeatedly entering incorrect information can be frustrating, so we don’t want to use overly glib or obnoxious language. Instead, we should calmly present the user with the error and politely ask them to fix it.

It is critical that we ask the user for their email and password. These items represent their login credentials. For this design, we will deliver a user flow, wireframe, mockup, and prototype. Each deliverable will be user tested until it achieves a 95% success rate.

`3.` With our design brief ready, we can share it with our team. In this case, our entire team signed off on it. So, we didn’t need to make any changes.

`4.` With our design brief finished and shared, we can reference it as we work on it.","In your own words, explain what a design brief is and why it is valuable. Then, describe the process for creating one and brainstorm 3 additional guiding questions that you might ask in your own projects.",,,,,,The User Experience Team of One: A Research and Design Survival Guide,"- What is a design brief?
- When would you create one?
- Why is it a valuable tool?",Project and Design Briefs,Active,UX Processes,,,1,1,,2
write Kotlin functions,,,,,,,,,,,,,Kotlin Part 1,,Kotlin,Android Development Core,,0,,,0
create Kotlin variables,,,,,,,,,,,,,Kotlin Part 1,,Kotlin,Android Development Core,,0,,,0
use Kotlin String interpolation,,,,,,,,,,,,,Kotlin Part 1,,Kotlin,Android Development Core,,0,,,0
use conditionals in Kotlin,,,,,,,,,,,,,Kotlin Part 1,,Kotlin,Android Development Core,,0,,,0
create Kotlin classes,,,,,,,,,,,,,Kotlin Part 1,,Kotlin,Android Development Core,,0,,,0
use Kotlin constants,,,,,,,,,,,,,Kotlin Part 1,,Kotlin,Android Development Core,,0,,,0
work with Lists in Kotlin,,,,,,,,,,,,,Kotlin Part 2,,Kotlin,Android Development Core,,0,,,0
use Loops in Kotlin,,,,,,,,,,,,,Kotlin Part 2,,Kotlin,Android Development Core,,0,,,0
"work with Interfaces, Abstract Classes and Inherited Classes in Kotlin",,,,,,,,,,,,,Kotlin Part 2,,Kotlin,Android Development Core,,0,,,0
use special types of classes in Kotlin,,,,,,,,,,,,,Kotlin Part 2,,Kotlin,Android Development Core,,0,,,0
work with Pairs and Maps in Kotlin,,,,,,,,,,,,,Kotlin Part 2,,Kotlin,Android Development Core,,0,,,0
use Kotlin Extension Functions,,,,,,,,,,,,,Kotlin Part 2,,Kotlin,Android Development Core,,0,,,0
implement protected routes using an authentication token and Redirect,Most of the web apps we will work on will have some sort of authentication system. We want to protect any routes in our app from being rendered if the user is not authenticated with a token from the server.,,"As we build our web apps, we will most likely have some ""protected"" routes - routes that we only want to render if the user has logged in and been authenticated by our server. The way this normally works is we make a login request, sending the server the user's username and password. The server will check those credentials against what is in the database, and if it can authenticate the user, it will return a token. Once we have this token, we can add two layers of protection to our app. One with protected routes, the other by sending an authentication header with our API calls (as we learned in the above objective).","Let's see what this looks like in code. We will use some React Router components, and we will build a custom `<PrivateRoute />` component that will be our route protector. We'll take this one step at a time.

In our `App` component, let's add a couple of public routes and a couple of links:

```js
function App() {
  return (
    <div>
      <ul>
        <li>
          <Link to=""/public"">Public Page</Link>
        </li>
        <li>
          <Link to=""/protected"">Protected Page</Link>
        </li>
      </ul>
      <Route path=""/public"" component={Public} />
      <Route path=""/login"" component={Login} />
    </div>
  );
}
```

Notice the links? Anyone can click on the ""Public Page"" link, but if they click on the ""Protected Page"" link without being authed, they will be routed to the login page instead.

Next step will be to add a `<PrivateRoute />` route:

```js
<Route path=""/public"" component={Public}/>
<Route path=""/login"" component={Login}/>
<PrivateRoute path='/protected' component={Protected} />
```

Here are the requirements for our PrivateRoute component.

1. It has the same API as `<Route />`.
2. It renders a `<Route />` and passes all the props through to it.
3. It checks if the user is authenticated, if they are, it renders the “component” prop. If not, it redirects the user to /login.

With those requirements in mind, let’s build it out.

```js
// Requirement 1.
// It has the same API as `<Route />`

const PrivateRoute = ({ component: Component, ...rest }) => (

)
```

This code just means that the component will accept a component Prop, just like `<Route />` does, then it will take any other prop that gets passed into it by spreading in `...rest`.

```js
// Requirement 2.
// It renders a `<Route />` and passes all the props through to it.

const PrivateRoute = ({ component: Component, ...rest }) => (
  <Route {...rest} render={} />
)
```

We are passing in all of the props passed to `<PrivateRoute />` in the App component.

```js
// Requirement 3.
// It checks if the user is authenticated, if they are,
// it renders the ""component"" prop. If not, it redirects
// the user to /login.

const PrivateRoute = ({ component: Component, ...rest }) => (
  <Route
    {...rest}
    render={props =>
      localStorage.getItem(""token"") ? (
        <Component {...props} />
      ) : (
        <Redirect to=""/login"" />
      )
    }
  />
);
```

This is using the render props pattern. We won't go too much into how this works here, but it would be a great weekend learning objective for you to look into.

Also, notice the `<Redirect />` component? That is from React Router. It does exactly what you think - redirects the app to the supplied route. Finally, we aren't giving `<Route />` here a path. That means it will always match. So no matter where we navigate to in our app, we will always go through this component, and we will always redirect any unauthenticated user to the login page.

At this point, you can see the PrivateRoute component in action if you try to click on the Protected Page link. You should be redirected to ""/login"" instead of being taken to the ""/protected"" page.

Let's think about the Login page now. Our login page will be a form that takes in a user's credentials, invokes an async action creator when the user submits the form, and then redirects the user to the protected route when the login API call returns. To achieve this, we need to use the promise returned by the `axios.post()` call to our advantage. In Login, we will chain a `.then()` off of the action creator call, and handle the redirect with `props.history.push()`.

```js
class Login extends React.Component {
  state = {
    credentials: {
      username: '',
      password: ''
    }
  }

  login = e => {
    e.preventDefault();
    props.login(this.state.credentials)
      .then(() => {
        // only fires if login call is successful
        this.props.history.push('/');
      })
  }

  handleChange = e => {
    this.setState({
      credentials: {
        ...this.state.credentials,
        [e.target.name]: e.target.value,
      }
    });
  }

  render() {
    return (
      <div>
        <form onSubmit={this.login}>
          <input
            type=""text""
            name=""username""
            value={this.state.credentials.username}
            onChange={this.handleChange}
          />
          <input
            type=""password""
            name=""password""
            value={this.state.credentials.password}
            onChange={this.handleChange}
          />
          <button>Log in</button>
        </form>
      </div>
    )
  }
}

export default connect(null, { login })(Login);
```

So our action creator needs to return the promise created by `axios.post()`:

```js
export const login = creds => dispatch => {
  dispatch({ type: LOGIN_START });
  return axios
    .post('/api/login', creds)
    .then(res => {
      localStorage.setItem('token', res.data.token);
      dispatch({ type: LOGIN_SUCCESS, payload: res.data });
    })
    .catch(err => {
      dispatch({ type: LOGIN_FAILURE, payload: err.response.message });
    });
};
```

The key part is the `return`. That makes it possible to use `.then()` where we invoke `login`.

One thing we can do to provide a good experience for our user is instead of just routing them to ""/"" when they log in, let's route them back to where they were trying to go to when they got redirected to the Login Page. We can access that path on the location object from props: `this.props.location.state.from`. Let's route to that instead. If it's undefined, we'll route them to ""/""

```js
login = e => {
    e.preventDefault();
    props.login(this.state.credentials)
      .then(() => {
        const route = this.props.location.state.from || '/';
        // only fires if login call is successful
        this.props.history.push(route);
      })
  }
```
Great work providing a good experience for your amazing users!","Add a `mapStateToProps` function, and bring in some `loggingIn` state, and `error` state. Solve for both potential states in your login form. For example, if `loggingIn` is true, show a spinner in the button. If there is an error, display an error message.",,,,,,,,Redux Middleware / Authentication,,Redux,Full Stack Web Development Core,,1,1,,2
source job opportunities that apply to them in the tech industry,"Starting out job searching can be overwhelming! There are hundreds of job boards, and thousands of opportunities get posted every day across the internet. How can you keep up with them?! Fortunately, some of the best places to find jobs also make it easy to narrow down what you want, and allow you to set alerts so you don’t have to manually search every single day. There are also some challenging dynamics to be aware of, both when working with recruiters and on LinkedIn with less-than-honest people trying to make a quick buck, so today’s lesson is designed to help you take ownership over your search.",,"## Things you need before you start searching:
-   A great portfolio site and an active GitHub
	-   Portfolio needs to have a clean layout, but the most important part is that you have links to all of your projects here and on GitHub.
	-   Ways to beef up your GitHub and portfolio (in addition to your Lambda projects): Freelance projects, open source contributions, hackathons
	-   As you gain more experience, you can start to remove older/less polished projects, but for now don’t worry about everything being perfect!   
-   A resume: your resume needs to be ready to send off to people at a moment’s notice- keep a PDF version saved in a google drive, that way you can access it from anywhere!
	-   We’ll be covering resumes in a couple weeks!
	-   You’ll want to tailor your resume whenever possible so it aligns with the jobs you want, but you never know when you might meet someone who is interested in your experience, so having a solid base resume you can share is key    
-   Start to meet others online and in real life: ~80% of jobs are found through networking!!
	-   Revisit the networking lessons in TK if you want a refresher on how to go about building your network- we know it can be intimidating, especially if you’re new to the field, but networking is absolutely the most critical thing you can do when starting in your career, aside from having a stellar portfolio 
-   Follow industry news:
	- It's a lot easier to walk the walk when you can talk the talk! Subscribe to tech blogs, podcasts, subreddits, follow technologists you admire on social media. Set aside 30 minutes each day to catch up on the latest happenings; this not only helps you sound informed when you meet people, but it also helps you stay ahead of the curve in your search by knowing what sectors are growing
-   Keep learning!
	-   While you’re searching, don’t just plan on focusing 100% on your search- you should be continuing to practice building and applying your skills. If it takes you a couple months to find a job, that’s fine and normal, but companies are going to want to know what you’ve been doing for the past three months if you haven’t been in Lambda and you haven’t been working!

## Where to find jobs:

-   General, go-to sites: LinkedIn, Builtin, and Stack Overflow all have strong filters built in that allow you to get really specific with your skills
	-   We don’t recommend more common job boards like Monster and Indeed because they don’t do a great job of refreshing jobs- you might be viewing a posting that is months old and already filled
	-   LinkedIn can sometimes have slightly outdated posts, but its ability to show you what companies you have connections at, and the fact that many companies post jobs on their LinkedIn pages before even posting them on their websites means that it should be one of your primary search tools. 
	-   Both LinkedIn and Stack Overflow allow you to set job alerts, and have postings all over the US
	-   Built In has great filtering options that allow you to really drill down in your search, but their jobs are mostly restricted to several major metro areas, so if you are unable/unwilling to relocate and you don’t live in these areas, you may not find it as useful for searching
-   Startup Jobs: If you’re interested in working for a startup, consider these boards to start; we’ve had positive experiences with them so they’re a great place to start!
-   Remote roles: You may want to consider whether a remote role is the right fit for you; in general, for people with less career experience, we really recommend finding an in-person role for your first opportunity
	-   This gives you access to mentorship, a network of peers, and visibility. All of these are critical as you start in your career, and not impossible to access when working remotely, but can be a lot harder.
	-   That said, for folks living in rural areas or in places where there isn’t a strong tech economy and are unable to relocate, remote work is one of the best parts of working in tech; rarely do you NEED to be physically in person to do your job, so there tend to be more opportunities for remote jobs in web dev, mobile dev, UX, and data science.

## Recruiters: things to know
-   Retained recruiters work for a company, and their job is to source, screen, and communicate with candidates only for that one company
	-   These recruiters will often be the first person you talk to at a company; they will often conduct phone screens of new candidates, and be the person you coordinate in-person interviews with and (hopefully eventually!) an offer
	-   A benefit of working with retained recruiters is that they can often answer questions about the company and team, and a good recruiter will form a rapport with their candidates so they feel supported through the process. That said, their priority is finding the right candidate for the company, so even if you feel very comfortable working with a recruiter, keep in mind that any conversation you have with them is just another screening opportunity!
-   Contingency recruiters (sometimes called headhunters) generally work with staffing agencies, but can also be independent recruiters, and they are hired by companies as third parties to source, screen, and refer talent
	-   A benefit of working with a contingency recruiter is that they have access to multiple companies, and can supplement your search. They also tend to earn most of their income through commission, so it’s in their best interest to get you a job
	-   That said, they may be more focused on getting you into a role than getting you into the right role… recruiters often have a sales skill set, so you may feel like you’re being pressured into jobs you don’t want, or to take a salary that is below what you’re worth. Don’t let yourself be bullied into anything! Recruiters work for both you and the company, so while it’s important to be open and flexible in your search, it’s also important to be firm about your goals and your value.
	-   Contingency recruiters also may only focus on contract roles, meaning fixed-term employment where you may not earn company benefits, and may technically be an employee of the staffing agency rather than the company. This varies depending on the agency, so when in doubt, ask.
	-   Contingency recruiters can be a great resource, especially if you need to find a job quickly, but just be wary of their intentions, and ask lots of questions. There are great recruiters out there who really invest in their candidates, but there are also some predatory ones so when in doubt, ask a career coach during office hours if you’re contacted by someone!

## Best Methods to Apply
-   LinkedIn is a fantastic tool to find people, jobs, and companies all in one place. It makes it easy to find people you know, or people who know people you know, and connect to them regarding opportunities.
	-   Pretty much every company and recruiter uses LinkedIn to find candidates, so you need to be active on here so you don’t miss out on opportunities!
-   In-person networking: this is by far the most valuable use of your time; 80% of jobs come from networking, and lots of times, those jobs don’t ever even get posted publicly because they’re filled by a reference early on!
	-   Networking might be intimidating, but almost every single person got to where they are in their career because someone helped them get there. The absolute worst thing that will happen is that the person will say no, or not reply. But the best thing? They might end up being an amazing mentor and connector that could help you access your next opportunity, so don’t miss out on the chance!
-   Referrals: building off of networking, once you get to a place where you feel comfortable with people in your network and they know enough about your skills and experience to vouch for you, asking for a referral to roles at their companies, or roles at companies where they know people, is completely appropriate. Some of our greatest Lambda graduate success stories have come from people going out on a limb to recommend a Lambda grad to a friend, and building your network allows you to access these kinds of opportunities.
-   Career fairs and hiring events happen all over the country, and there are often ones geared towards tech in particular. Eventbrite, Meetup, LinkedIn, and even Facebook are all great places to find hiring events! It’s always a good idea to bring your resume and business cards (you can print them at home)

## What Jobs to Apply for?
-   While what you search for will vary depending on your track and interests, anyone who is making a significant career pivot should be focused on junior-level roles looking for fewer than 5 years of experience
	-   Note that many job postings will ask for 2-3 years of experience even for entry-level roles; this is standard, and you should not be discouraged if you don’t meet this “requirement”
-   Requirements are like a company’s wish list- you never have to meet 100% of the requirements, and should aim to meet 50%-80%. The more, the better!
	-   Most jobs list requirements in order of importance. So if you only meet 50% of the requirements, but they’re at the top of the description, you are likely more qualified than someone who meets 75% of requirements listed at the bottom of the posting!
	-   Make sure that if you’re applying to jobs where you only meet 50% of the requirements that you’re VERY confident in your skills in those areas!
-   This is where networking is so critical- if you have less experience or gaps in your skills, having someone at the company who can vouch for you can often make up for this. Skills can often be taught- companies want hardworking, smart people who are trainable, so if someone can attest to your coachability and motivation, then that might tip the company in your favor for a role that you’re not fully qualified for!

## Things to Watch Out For
-   No matter how good the opportunity sounds, nobody is going to offer you a job just after looking at your LinkedIn. This is usually a clear sign of a scam
-   This might go without saying, but NEVER give out personal information before you have signed a formal offer. This is all normal information to give once you start, but you should never share it up front
-   Any job that you have to pay for is not a job you want- they’re often multi-level marketing schemes where you have to buy the product up front and then sell it (i.e. rip off) other people in order to make a little bit of money, with most of what you sell going to people above you at the company (it’s a legal pyramid scheme). This doesn’t happen as often in tech, but if it’s clear you’re green, people might target you assuming that you are desperate for a job, so keep an eye out!",,"You have two options, depending on whether you've started your search already or have not yet looked for jobs in your new field.

**If you have not started searching since making a career change:**
-   Experiment with different filters on at least LinkedIn and Stack Overflow, and Built In (if you live in areas that have jobs on Built In- options are limited)
-   Set alerts for jobs that meet the criteria most important to you; you want to narrow down your search without ruling out opportunities that you’d be a fit for and interested, so experimenting with filters to find the right balance is important here
-   Add any jobs (minimum 10) that you find to the job search tool (linked below) in the “job applications” tab, and submit on Friday.
-   NOTE: You do not have to apply (unless you wish to at this point)- the point is to start building habits around tracking and organizing your search!


**If you’ve already started searching since joining Lambda School:**
-   Expand your search by exploring other job boards- link to a list to get you started is below
-   Find at least 10 jobs you’re interested in and could be a fit for, and go on LinkedIn to see if you can find anyone whom you know (either 1st or 2nd degree connection) at those companies
-   Prioritize the 1st and 2nd degree connections, but you can send a cold outreach message too! Write to at least 3 people to request an informational interview. Use the email templates (linked below) to guide you depending on what type of message you’re writing.
-   Add these 10+ jobs to the “job applications” tab in the job search tool, and add the 3+ people you message to the “people in my network” tab in the job search tool. Include your message to them in ""notes"" (col e). Submit this on Friday.",Zus_yyy2Crs,http://youtube.com/watch?v=Zus_yyy2Crs,https://www.youtube.com/embed/Zus_yyy2Crs,,,"Job boards to help you expand your search,Networking and Outreach Templates,Job Search Tool",,Sourcing Opportunities,,Sourcing Opportunities,Career Readiness,Sourcing Opportunities.key (https://dl.airtable.com/.attachments/2ecb307faeac3d068a64958a0f0c3f4f/f2227821/SourcingOpportunities.key),1,1,1,3
articulate the acceptance criteria of a story,"The basic idea of acceptance testing is that you have some tests which test the actual requirements or expectations of the customer, and other tests that run against the system as a whole. ",,"As you create a functional story of what you’re building, you want to clarify the acceptance criteria of that story. When you’re done writing the code, what will the user be able to do. How will the inputs and outputs perform. 

When you work off of clear acceptance criteria, you can make sure the scope of the story is reasonable and sized appropriately. Acceptance criteria let you discovery and fix issues early and demonstrates the usability of your system.

Don’t let the time it costs distract you. “Measure twice, cut once” may be more obvious in physical construction because we can weight the cost of the materials of build. But it’s easy to get sucked into time-sinking issues that planning and acceptance design would have solved.",,"Let’s write the acceptance criteria for a couple stories:
1. User can subscribe to a monthly fee
  - Should you break down stripe purchase into a couple pieces?
2. User can only access certain portions of the app after authentication
3. User can create a survey with up to 3 questions",,,,,,,,Reviewing Code During Pull Requests,,Labs I - Project Planning,Lambda Labs,,1,1,,2
can create and test cases for function and regression,,,"#### Function:
- Testing activities that test the function of the system.
- This is not concerned with performance, resilience, security, scalability 

Three parts of a functional test case:
1. User actions
2. Expected appropriate Inputs 
3. Expected appropriate Outputs

#### Regression:
- Testing activities that test that the system does what it did before
- Most automated tests are regression tests
- A new feature should consider potential regressions
- Regression tests can be connected to a functional test

A backend API can be tested using “black box” tests. This is like a UI or integration test for a backend. ",,"Create a functional test case for:
1. User can subscribe to a monthly fee
  - Should you break down stripe purchase into a couple pieces?
2. User can only access certain portions of the app after authentication
",,,,,,,,Test Cases and Test Data,,Labs I - Project Planning,Lambda Labs,,0,1,,1
understand that there are a multitude of tests types that can be performed,,"Discuss what the purpose of each test type is, and how it could maybe be performed.","- Automated testing
- Unit testing
- Continuous integration
- Load testing
- Performance testing
- Recovery testing
- Security testing
- Stress testing
- Usability testing
- Accessibility testing",,,,,,,,,,Test Cases and Test Data,,Labs I - Project Planning,Lambda Labs,,0,,,0
"understand how to document, prioritize, and categorize a bug",,,"Document four things:
1. Experienced behavior
2. Expected behavior
3. Steps to reproduce
4. Screenshots or sample content 

Level 1 Critical: Data Loss, Key Functionality Loss - Blocks Release
Level 2 Severe: Some Functionality Loss, Perceived Data, Frequent, Part of Golden Path
Level 3 Low Priority: Workaround Possible, Infrequent, Don’t require immediate attention,
Level 4 Minor: Experience, Design, Layout issues, Spelling Mistakes etc.

Level 1 should block releases. Level 2 should be prioritized based on frequency and impact. 
For your next 3 sprints:
- Level 1 should be prioritized immediately.
- Level 2 should be prioritized sprint IV
- Level 3 and 4 should be prioritized sprint V",,"I will describe a bug, and you will ask questions to help prioritize it:
- When the user changes the date of an event multiple times before hitting “save” it force reloads the page
- After logging in the user has to refresh the page to see admin functionality
- If the title of a post is too long, it runs off-screen
- At mobile width the save button is off-screen and the user can’t save
",,,,,,,,"""Categorization, Severity, Frequency and Edge Cases""",,Labs I - Project Planning,Lambda Labs,,0,1,,1
understand how they can maximize their contribution,Imposter syndrome. We all have it. What does it mean?,,"It means that most of us feel like we’re pretending like we know more than we do. Every cohort we get a handful of students who express that they believe their team members know more than they do. You can all contribute uniquely.

![imposter](https://plantae.org/wp-content/uploads/2017/08/ImposterCredited.jpg)


*Keys to contribution:*
- Make sure to communicate what you feel confident you can contribute and what you feel like you can’t.
- Be willing to try something you don’t already know. Contribution doesn’t mean bringing what you already know. 
- Take your piece, and frequently check in with the team to let them know progress. Don’t go dark.
- Add documentation and learning notes to your tasks. This will help you learn faster, and share your learnings with others.",,,,,,,,,,Everyone Should Feel Valued,,Labs II - Working with Other Developers,Lambda Labs,,1,,,1
work in pair programming effectively,"We don’t pair program because it’s faster. We pair program because it’s more effective. Having two eyes on a piece of code or functionality helps ensure a higher level of efficiency and quality. You could almost certainly program it alone faster, but that’s *not the point*.
As you pair program the key is to help each other feel like you’re learning from one another and that you’re each contributing. ",,,,What are some key things you can do to help both participants in pair programming feel like they are ***learning*** and ***contributing***? ,,,,,,,,Everyone Should Feel Valued,,Labs II - Working with Other Developers,Lambda Labs,,0,1,,1
understand how to help others feel valued,"Every cohort we get a handful of students who express that they believe they have a team member who isn’t “pulling their weight”. This may surprise you, but it’s usually the student that expresses this that needs the most coaching.",,"Every team member will add value. Every team member’s additional value is important. You only get a few weeks. Everyone may not write the same amount of code. **You will have disparate code contribution on every project you ever work on.** There is no reason Labs should be different.

As you internalize the value other team members are bringing you will externally value them more. Everyone has had an experience where someone said “I value you” and you could tell they didn’t mean it. If you don’t mean it, the other person will know. You need to focus on feeling gratitude for what they bring. Look for it, you’ll find it.

How do you respond when you find someone else's mistake? Knowing that your focus is on helping them feel valued.",,"What are some examples of contributions that you could internalize? 
- Documentation
- A good pairing partner
- Focus on many small things so you can focus on some bigger issues",,,,,,,,Everyone Should Feel Valued,,Labs II - Working with Other Developers,Lambda Labs,,1,1,,2
communicate the goal of a conversation clearly,,,"When you are starting a conversation as a team or pairing often conflict arises because two individuals are working towards different outcomes with different assumptions. Begin technical conversations with the goals of what you’re trying to accomplish. 

- What is the outcome you need? 
- What decision do you need to make? 
- What assumptions are guiding your opinions? 
- Do you need to work out those assumptions?

If you do not agree on the assumptions, you need to have a conversation first on how you can agree on the assumptions.

Sometimes you don’t need to communicate the goal. It can make a conversation feel more mechanical. However, if you start to feel a conversation veering toward conflict, it can be a useful tool to make sure you’re on the same page about the goal outcome. Also, when you are aware of the disagreement before going into a conversation, you always want to start with the goal outcome. 

**Important note:** Make sure to move these types of conversations to Zoom immediately. There is a natural tendency to misunderstand emotional context and to “objectify” the other person when you have these conversations via Slack.",,,,,,,,,,Working Through Conflict,,Labs II - Working with Other Developers,Lambda Labs,,0,,,0
assume best intent by every team member,,,"What do you think *“assume best intent”* means?
Do you think you have team members that actively want the project to fail? Or that want you to personally fail? 

**They don’t.**

Assuming best intent means that you believe that the other person is doing the best they can with all of the information they have. Sometimes they may need more information, and you can provide that if you do it carefully. If you assume they are doing their best, then they may still disagree with you even after you share the information you think changes their mind. 
",,How can you internalize that your team member has best intent even when you feel personally challenged?,,,,,,,,Working Through Conflict,,Labs II - Working with Other Developers,Lambda Labs,,0,1,,1
communicate disagreement without putting down another team members opinion,You will *inevitably* disagree with a decision someone makes as a developer over the course of your career. This is natural as you develop your own preferences and beliefs and other developers form their own. ,,"Let’s start with one important point: 
It’s all subjective. ***All of it.***

Your opinion is based on your experience and your preferences. And the other developers opinion is based on his/her experience and preferences. You must understand that what you believe is preference only. It is not objectively better. It is subjectively better, to your subjective preferences. 

As you communicate your preferences to another developer it is important that you recognize that their preferences are valid to them. Don’t put them down. You can express disagreement, and say that you feel a certain way. 

Three keys to expressing disagreement without putting another person down:
- Recognize that your opinion is based on subjective views. Don’t even try to make it objective (well spaces objectively better because they don’t cause issues with different IDEs)
- Try to understand and even restate the reason the other person believes what they believe. 
- Do not try to discount the value of the other developers founding assumptions. (How it renders in IDEs isn’t even important, because you can just change IDEs)
",,"What would you say if you wanted to build a React.js front end and felt like it was better because you could reuse components and another developer wanted to use vanilla JS because they believed it kept code cleaner and more readable?

- How do you communicate disagreement without putting them down?
- What is something you wouldn’t want to say?",,,,,,,,Working Through Conflict,,Labs II - Working with Other Developers,Lambda Labs,,1,1,,2
look at a list of requirements and break it down to tasks,"What have you learned about breaking down tasks?
What does your team do to break down tasks?",,"You need to know the full requirements to write the subtasks of your stories. This usually can’t be done in a bubble. You’ll want to break down work in pairs, or even as a team. Remember to measure twice, cut once. Don’t rush planning. 

**3 tips:**
- 1-3 days (3-9 hours in Lambda Labs)
- Prioritize. Prioritize
- Zero budget your time",,,,,,,,,,Scoping Work,,Labs III - Understanding Scope,Lambda Labs,,1,,,1
estimate what can be accomplished in a week,"One of the biggest risks of estimating incorrectly is that you mis-prioritize your work. You may have seen this (I have). You come to the end of the week and you didn’t accomplish the main goal, but you have this progress on a side task or two that is nice, but didn’t contribute to the core objective. ",,As you get better at estimating what you can accomplish in a week you can more appropriately decide what to include as a stretch goal. ,,"- How much better are you at estimating weekly goals today than you were at the beginning of Labs? 
- What contributes to it the most?",,,,,,,,Scoping Work,,Labs III - Understanding Scope,Lambda Labs,,1,1,,2
make a plan to accomplish the goals for the week,,,"Walk through the next two weeks goals. 
- Discuss big rocks
- Discuss example stories
- Discuss example tasks

How do you break the stories up so that everyone is contributing to the core goals?",,Any team want to do a planning in front of everyone? ,,,,,,,,Planning out Work for a Sprint,,Labs III - Understanding Scope,Lambda Labs,,0,1,,1
run code and test the new functionality as part of a code review,,,,,,,,,,,,,Reviewing Code During Pull Requests,,Labs I - Project Planning,Lambda Labs,,0,,,0
encode and decode JSON,,,,,,,,,,,,,Kotlin in Android,,Kotlin,Android Development Core,,0,,,0
set up a class for Kotlin serialization,,,,,,,,,,,,,Kotlin in Android,,Kotlin,Android Development Core,,0,,,0
add the KotlinX Serialization library to an Android project,,,,,,,,,,,,,Kotlin in Android,,Kotlin,Android Development Core,,0,,,0
use Interface callbacks with Kotlin,,,,,,,,,,,,,Kotlin in Android,,Kotlin,Android Development Core,,0,,,0
create a new app using Kotlin,,,,,,,,,,,,,Kotlin in Android,,Kotlin,Android Development Core,,0,,,0
add Kotlin file to existing project,,,,,,,,,,,,,Kotlin in Android,,Kotlin,Android Development Core,,0,,,0
convert Java code to Kotlin,,,,,,,,,,,,,Kotlin in Android,,Kotlin,Android Development Core,,0,,,0
learn how to expand your network,,,,,,,,,,,,,In-Person Networking,,In-Person Networking,Career Readiness,InPerson_Networking.key (https://dl.airtable.com/.attachments/b789366edf6b09da44dbc80bb2dcad8a/fb79d3f8/InPerson_Networking.key),0,,,0
break down and solve problems using a consistent strategy,"Many times, both as you are working through the Computer Science curriculum and when you are on the job, you will find yourself faced with large, challenging problems. Fortunately, there are strategies we can use to break these problems down into more manageable pieces.",,"The general approach to solving any algorithmic problem can be broken down into the following steps:

**1. Understand it**  
  - Get a lay of the land
  - Make sure you have as complete an understanding of the problem as possible before you even start constructing a possible solution. 
  - Ask clarifying questions.
  - Think of possible edge cases, then ask what the expectation is for how your solution should handle these edge cases. 

**2. Devise a plan & scribble stuff down** 
  - Writing down / illustrating out your thoughts helps a lot in thinking about how to tackle the problem. Again, this is to help you better understand the problem at hand.
  - Write / draw out what you think a solution to the problem should output when given certain inputs. Again, this helps you clarify how the solution needs to work, and will also clue you in on edge cases that you might not have thought of before. 

**3. Implement your plan!**  
  - Come up with a first pass idea that will solve the problem.
  - Whatever is the first solution that comes to mind when looking at the problem in front of you, run with it; iteration and improvement of your solution comes afterwards. 
  - Write down the steps for the your first solution.
  - Figure out what your solution will output given some test inputs. Does it handle all the expected edge cases? Maybe it does and maybe it doesn't. If it doesn't, we'll come back to improve upon it later. 

**4. Reflect & revise**  
  - Now that we have a first-pass solution, let's think about how to make it better!
  - Figure out the runtime and space complexity of your first-pass solution. 
  - What is it about the first-pass solution that causes the runtime complexity to suffer? What about the space complexity?
  - Is there a data structure we could use that would improve the runtime and / or space complexity?","In the preclass video, we described the ***dining philosophers problem***. A short description of this problem can be found below:

- Five philosophers sit around a circular table. In front of each philosopher is a large plate of rice. The philosophers alternate their time between eating and thinking. There is one chopstick between each philosopher, to their immediate right and left. In order to eat, a given philosopher needs to use both chopsticks. **How can you ensure all the philosophers can eat reliably without starving to death?**

**1. Understand**  

On the surface, this seems like a fairly straight-forward problem and we outlined a simple solution in the preclass video. However, there are some approaches that will lead to problematic results. 

Some key pieces of information from the question we should highlight:  
- there are **5** philosophers
- there are **2 states** (eating, thinking)
- there is exactly 1 chopstick in between each pair of philosophers (5 total)
- BOTH chopsticks are required to transition from thinking to eating

Some important questions to ask here include _""when should philosophers pick up a chopstick?""_ and _""when should philosophers put down a chopstick""_

Remember that before you start working on a solution, you want to establish if there are any restrictions or limitations you need to consider.

**2. Plan**  

Let's create a solution written as a set of rules that defines how philosophers should interact with chopsticks that will allow them to transition between _eating_ and _thinking_.  

  1. philosopher is eating (2 chopsticks)
  2. philosopher finishes eating at sets down chopsticks 
  3. philosopher is thinking (0 chopsticks)
  4. philosopher sees his/her neighbor set down chopsticks & picks them up
  5. repeat steps 1-4

**3. Implement**  

We could break down the general plan above into a few specific rules.  

  - eat for a set amount of time once they are holding both chopsticks
  - set down the right chopstick
  - set down the left chopstick
  - pick up the left chopstick as soon as it becomes available
  - pick up the right chopstick as soon as it becomes available
  - repeat

However, this solution will NOT always work.

**4. Reflect**   

The above solution has the potential to create a situation known in Computer Science as **deadlock**. This basically means that 2 processes (or in this case, philosophers) are stuck in an eternal state of waiting. If neither has 2 chopsticks, they cannot eat. But they also won't put down chopsticks they're holding (because they haven't eaten yet). We need to revise the rules about when philosophers should pick up / put down chopsticks to eliminate this possibility.","So that everyone gets to eat, there are some situations in which philosophers _should_ pick up a chopstick, and some situations in which they _should NOT_ (because another philosopher needs to use it). 

Write a better solution to the dining philosophers problem so that deadlock does NOT occur. ",IIBJ7OA0R7s,http://youtube.com/watch?v=IIBJ7OA0R7s,https://www.youtube.com/embed/IIBJ7OA0R7s,,,,,Introduction to Python I,,Intro to Python/OOP,"Computer Science, DS - Computer Science",,1,1,1,3
understand the implementation and performance of the Bubble Sort algorithm.,,,"Bubble Sort is another example of an algorithm that, while easier to understand, performs slowly when used on large datasets. With each pass through an array, larger values will _""bubble""_ their correct spot on one side of the array. Worst-case runtime occurs when the smallest elements start on the opposite side of where they eventually need to end up. This scenario will require the maximum number of array traversals.","The main steps of this algorithm are as follows:
```
1. Create a boolean variable to keep track of if the most recent pass through the array resulted in at least one swap
2. While at least one swap has occurred
    - Traverse the array
    - For each adjacent pair of elements, if the LHS is greater than the RHS, swap 
```","After you have written Bubble Sort once in Python, try implementing it again in another language you know, like JavaScript, to help you remember how this algorithm works.",DzUYl76kC-E,http://youtube.com/watch?v=DzUYl76kC-E,https://www.youtube.com/embed/DzUYl76kC-E,,,,,,,,,,0,1,1,2
explain the purpose of the MVC design pattern,,,,,,,,,,,,,Android Model View Controller,,Android Fundamentals I,Android Development Core,,0,,,0
explain the purpose of the model layer in MVC,,,,,,,,,,,,,Android Model View Controller,,Android Fundamentals I,Android Development Core,,0,,,0
explain the purpose of the controller layer in MVC,,,,,,,,,,,,,Android Model View Controller,,Android Fundamentals I,Android Development Core,,0,,,0
explain the purpose of the view layer in MVC,,,,,,,,,,,,,Android Model View Controller,,Android Fundamentals I,Android Development Core,,0,,,0
explain the purpose of the repository in MVC,,,,,,,,,,,,,Android Model View Controller,,Android Fundamentals I,Android Development Core,,0,,,0
Articulate why lo-fi ideation is a key component of the UX design process,"Sketching is a communication that can be used to convey ideas quickly, efficiently, and freely. We use sketches to take ideas off the page, and into a medium that helps anyone involved in the creation of the product better understand a design. It is important to remember that anybody can sketch. With a few simple shapes, it is easy to get ideas into a visual medium that anyone can use as a starting point. ",,"#Fundamentals of Ideation

Ideation can come in many forms. Ideation can happen anywhere (even remotely) at any time. It can happen in 15 minutes, or throughout several months. Ideation can tackle small design challenges and brand new products.

All ideation sessions have three main characteristics.

1. Ideas are not evaluated.
We want to make sure that ideation sessions are void of critiques. It is essential that everyone feels comfortable ideating without being evaluated. Fostering the proper environment is of the utmost importance when conducting ideation sessions. Even potentially bad options can lay the groundwork for fantastic solutions.

2. Ideas are recorded, and the session is documented.
We can record ideas in many ways. Paper, pencil, voice recorder, video recorder, camera, and markers are just a few of the many ways that we can document ideas. It is essential that ideas are documented to ensure the participants/stakeholders can evaluate the ideas at a later date. It is essential to avoid deleting artifacts, as they all hold valuable information that can be used and built upon later.

3. Collaboration spurs diverse ideas.
Ideation can happen both alone and in a group. However, ideating with another individual, or a group can help spur creativity. Ideating with a group of diverse individuals helps to bring a diverse set of backgrounds, and therefore viewpoints, to the table. Ideating in this manner will likely save time and frustration in the long-run.

#Ideation Challenges


The most common complaint against conducting ideation sessions is a lack of time during an already constrained product design cycle (NNGroup). Although ideation does take time, it is important to remember that even a single session of 3 hours or less can uncover valuable information that can significantly impact the success of a product. Frequently, how participants spend their time during an ideation session is the most significant indicator of how successful the session will be. Remaining focused on the task at hand and properly documenting the ideation session helps to get the most value out of the session.

A lack of upper managerial support can also have a significant impact on the ability to conduct ideation sessions. If upper management does not support taking time to conduct this type of work, it can be challenging to get others to participate. Showing value early in the process and explaining how group ideation could have solved issues in the past are a couples way of potentially dealing with a lack of managerial support.

Ideation at any point in the product design process is beneficial. However, there are times when ideation is more beneficial than others. Ideation tends to be most effective directly after user research. Ideating after user research helps to keep the team focused on the outcomes of the research, and build toward a practical prototype.",,,,,,,"Ideation in Practice: How Effective UX Teams Generate Ideas,""Rapid Prototyping, Faking It Until You Make it in a UX Driven World"",Ideation for Everyday Design Challenges",,"- Why do we ideate in lo-fidelity as opposed to hi-fidelity?
- Where in the UX process should we ideate?",Lo-Fi Ideation/Rapid Iteration,,Ideation and Collaboration,UX Design Core,,1,,,1
Sketch a user interface,"Sketching is a communication that can be used to convey ideas quickly, efficiently, and freely. We use sketches to take ideas off the page, and into a medium that helps anyone involved in the creation of the product better understand a design. It is important to remember that anybody can sketch. With a few simple shapes, it is easy to get ideas into a visual medium that anyone can use as a starting point. ",,"#Sketching

Humans innately have a desire to create beautiful things. Ideating in UX, whichever form that takes, is not meant to be beautiful. We are using sketches to convey ideas. We want to provide people with a visual representation of an idea. Putting too much detail in sketches can be a detriment. We want to be sure that our audience is focusing on the themes being conveyed by the sketches, not on the details.

We use sketching to help us generate ideas. Sketching can happen on paper, on a whiteboard, and of course, digitally. Each medium presents its strengths and weaknesses. Sketching also aids exploration. Unlike writing, sketching can happen at the speed of thought. Visual ideas can be portrayed quickly without much effort.     

One of the biggest blockers to ideating (and henceforth sketching) is self-censoring. Remember, self-censoring blocks innovation. All ideas inherently have value. Even if the idea does not immediately work, or make complete sense, it might spark other ideas. Avoid being ashamed of ideas and value will shine through.

As we iterate on visual ideas and prepare to present them to potential stakeholders, lo-fidelity ideation using sketches or a similar medium will help stakeholders understand the vision of the product.

#Crazy 8s 

The Crazy 8s exercise is meant to be conducted early on in the product design life cycle. The Crazy 8s exercise helps participants explore several conceptual designs rapidly. A typical Crazy 8s exercise session will go as follows:

1. Choose a design medium (paper, digital, whiteboard), and a timer
2. If using paper, fold the paper into eight distinct squares
3. Set the timer for 5 minutes (40 seconds per square)
4. Sketch a unique design idea in each square. Sketches are expected to be rough

Once ideas are exposed, designers and participants will converge ideas and create a single prototype to test with users. At this stage, it is essential to ensure that creating the prototype takes minimal time and effort. The purpose of this prototype will be to test with users and immediately iterate. Designers should repeat this cycle until they feel confident in the direction of the design.

#Rapid Iteration

After ideating, it is a good idea to validate the design ideas with users. Prototyping is one of the fastest and easiest ways to do this. With paper sketches, a prototype can be quickly created by snapping photos of the sketches and linking the sketches together in prototyping tool, such as POP (Prototyping on Paper by Marvelapp). A simple prototype can be tested with users to understand the effectiveness of the design better. Once we evaluate the prototype, iteration can begin, and the cycle begins again.

A conventional rapid iteration cycle is as follows:

1. Create an initial interface design. Sketching or lo-fi wireframes are preferable.
2. Present the design to real or potential users of the final product
3. Note problems users encounter during the testing period
4. Refine the interface to account for the problems
5. Repeat this process and resolve all problems

#The RITE Method

The RITE (Rapid Iterative Testing & Evaluation) can be used to gain feedback on a design quickly. The RITE method has components of an expert review as well as rapid user feedback to improve a design quickly and efficiently. Typically, a designer or researcher will set aside a couple of days to test a design. Each day will consist of 2-3 1:1 session with a participant to evaluate the design. Decision-makers must be present for these sessions (remotely or in-person) and observe users interact with the design. When the usability sessions are complete, the product is iterated upon based on the observers' decisions and retested.

The RITE method is valuable because it provides real user feedback within a short amount of time. Researchers can extract both qualitative and quantitive data from the sessions depending on the questions asked. Ensuring that critical stakeholders are present for the process will speed up decision making when it comes time to iterate.

The RITE method is best used by researchers when there is not enough time to conduct longer and therefore more data-rich sessions.",,,,,,,"Playbook for Software Design Lifecycle,Rapid Iterative Testing & Evaluation (RITE),Everything You Need to Know about UX Sketching",,"- Why do we sketch user interfaces?
- What methods are there for sketching?
- Which sketching method is best",Lo-Fi Ideation/Rapid Iteration,,Ideation and Collaboration,UX Design Core,,1,,,1
,,,,,,,,,,,,,"""Analytics, HotJar, etc""",,Quantitative User Research,,,0,,,0
 recall what Hiring Managers look for as artifacts of skill set while reviewing artifacts required for their curriculum track,,,"## What is an Artifact and Why is it Important?
- An artifact is evidence of the skillset you've gained within your time at Lambda School. 
- This evidence is in addition to your portfolio website, they are materials that contain further evidence of your learning. These artifacts can then be added to your portfolio website to show the hiring manager a full view of your skills. 
	- Examples of artifacts include: GitHub, blog posts, video content, podcasts/sound files, Dribbble, electronic presentations. 
- Depending on which curriculum track you are currently enrolled, you will be required to have your artifact up to date.
- It is important because hiring managers look at these artifacts in addition to your portfolio and resume to gain a full picture of your skills. 

## What are Hiring Managers looking at?
Hiring Managers will be looking at different things depending on the curriculum track you are currently enrolled. What is universal is that they are looking for someone who can clearly present what projects they have been working on and articulate the process. 

Below we have each current curriculum track that Lambda School offers, with specifics of what will be looked at on your artifacts.

### Web Development: GitHub & Blog 
- GitHub Account (and to sign up for Student Developer Pack access)
	- Have a professional user handle, preferably first and last name
	- Your avatar should be your face, not anything silly
	- Your Project Week, Build Week, or Labs projects should be your top six items on your pin, you can customize them to select the repo you want to highlight
		- Open source contributions (Gatsby!) should be highlighted over your personal work
	- Worry less about your contribution graph than about the quality of your contributions
- Gists: a great way to signal that you are good at coming up with solutions and sharing them with others; if you complete any code challenge exercises (through CS portion of Lambda School, tutorial sites, etc), be sure to publish these gists. 
- You should continue updating your GitHub after completing Lambda School; you can rely on your projects for a few months after graduating, but you should have created new things within ~6 months of graduating
-   Hiring managers are not as concerned with your homework assignments as they are with the projects you’ve built on your own; focus on quality over quantity- they want to see what you can create!
- External resources:
	    - What a hiring manager is looking for in your GitHub profile: [https://youtu.be/cXE7YhxkHLw](https://youtu.be/cXE7YhxkHLw)
    -Why contributions aren’t showing up on your GitHub profile: [https://help.github.com/en/articles/why-are-my-contributions-not-showing-up-on-my-profile](https://help.github.com/en/articles/why-are-my-contributions-not-showing-up-on-my-profile)
-   Blogging Platform (Medium or a blog hosted through your personal website)
	- Professional picture attached to your profile
	- Write about your experience through Lambda School, learning a new subject, and the trials you have overcome. Make sure to keep things positive. 

### UX Design: Dribbble or Behance, and Blog
- Both Dribbble and Behance are intended to be shared network spaces for UX designers to share their work 
- Behance is considered to be the leading online platform to showcase and discover creative work. Work displayed in Behance is done so in a case study format. 
- The case study format should show users how we arrived at this design; what research did we use? How did we validate our research that lead to how we were able to ideate? How did what we learn become a final product?
- Dribbble is an exclusive site, to join one has to receive an invite from an existing user while Behance is open to anyone
- Dribbble is defined as ""show and tell for designers"". The slogan encourages designers to upload their own works. The displaying of details is more like a short microblogging, designers can share what they are doing at any time. That shows the active interaction of users here. 
- On Dribbble designers share their work but is more appropriately utilized for graphic designers vs. UX designers. The UX design description on Dribbble are small and therefore it is much better suited for graphic designers. 

### Data Science: Blog
-  Blogging Platform (Medium or a blog hosted through your personal website)
	 - Professional picture attached to your profile
	- Write about your experience through Lambda School, learning a new subject, and the trials you have overcome. Make sure to keep things positive. 
- Hiring managers are looking for evidence of someone who can write working code, run and understand real data science models, and either present data clearly (data storytelling) or build working data projects (data engineering).
	- Ensure there is writing and code clarity. 
- Make sure to highlight the projects you'll be working on throughout your curriculum. Labs projects, Build Weeks, and your own pure-DS projects that can grow into real portfolio pieces. 
- While you use Python notebooks in your course, they are great for learning and communicating with other data scientists and not someone non-technical. Your portfolio needs to be rounded out with Python notebooks, blog posts, and working projects. 

### iOS/Android: GitHub & Blog
#### Play Store

Many employers have apps published on the play store as a requirement for applicants. These should be apps that you are proud and excited about to continue working on and polishing in the future. You will want to maintain them and their listings with the latest versions of android as well as up to date and well written descriptions and change logs.

If you have a previously published app that you no longer wish to maintain. Be sure to remove it from your resume and consider removing it from the play store or at least publishing it under a different account before it gets too out of date.

You'll also want to regularly test the ones which interface with a web API to ensure the API is still up and functions the same way.

#### Good Candidates for this are:

* You labs project

* Your Unit 2 Project

* Your Build Week project

* Your Unit 3 Project

#### GitHub

-   It is great if one of your published apps has an open source license so that employers can see the code. You will also want to highlight other repositories on your profile for employers to look at.

-   Be sure that all the code in these repositories is well written including comments, code formatting, and software best practices.

#### Blog

-   Writing blog posts about things you have learned is a great way to demonstrate your understanding and ability to support and train other engineers which are both skills required for Senior level positions.

-   Many of you have learned additional skills not covered by the main curriculum. Take advantage of that to demonstrate your ability and willingness to go the extra mile to teach yourself new skills.",,,,,,,,Unnamed record,,Artifacts,,Artifacts,Career Readiness,Blog Checklist.pdf (https://dl.airtable.com/.attachments/cf8d18225bdeeab6995d9da77d5c2711/c5cd35d0/BlogChecklist.pdf),0,,,0
"explain CRUD operations, HTTP methods, and how they are related",,,,,,,,,,,,,Java RDBMS II Inserting and Modifying Data using CRUD Operations,,"""Java Backend Data Persistence with SQL, Hibernate""","Java Backend Development, Android Development Core",,0,,,0
implement a data seeding class using JPA and Hibernate,,,,,,,,,,,,,"""Java RDBMS III Querying, Migrations, and Seeding""",,"""Java Backend Data Persistence with SQL, Hibernate""","Java Backend Development, Android Development Core",,0,,,0
"follow the TDD model using JUnit, RestAssured, mocks and stubs.",,,,,,,,,,,,,Automated Testing using TDD,,Java Testing and Continuous Integration,"Java Backend Development, Android Development Core",,0,,,0
integrate an application with the in-memory cache Redis,,,,,,,,,,,,,Paging and Sorting with Detailed Swagger Documentation,,Java Testing and Continuous Integration,"Java Backend Development, Android Development Core",,0,,,0
document a REST service using Swagger,,,,,,,,,,,,,Paging and Sorting with Detailed Swagger Documentation,,Java Testing and Continuous Integration,"Java Backend Development, Android Development Core",,0,,,0
implement paging and sorting to display chunks of large dataset.,,,,,,,,,,,,,Paging and Sorting with Detailed Swagger Documentation,,Java Testing and Continuous Integration,"Java Backend Development, Android Development Core",,0,,,0
Install and config Jenkins for CI,,,,,,,,,,,,,Continuous Integration with Jenkins,,Java Testing and Continuous Integration,"Java Backend Development, Android Development Core",,0,,,0
"create a new element, manipulate it, and add it to the DOM",A student should know how to dynamically create a new element and add it to the DOM. ,,"An important feature of the DOM is the ability to create brand new elements dynamically. Using the `document.createElement()` method we will be able to create a brand new element, style it, and add it anywhere on the DOM we would like. 

#### .createElement
- Creates a brand new element based on the string passed to it.
- Element exists in memory, but not on the DOM yet. 
- Can use any DOM property or method to style and manipulate the element. 
- eg: `document.createElement('h1')` will create an `h1` element.


#### .appendChild() and .prepend()
- These methods are used for adding child elements to parent elements.
- `.appendChild(child)` will take an element and add it to its children. It will add it to the ‘end’ physically so if the children are displayed in order, it will be the last.
  - eg: `parentElement.appendChild(childElement)` 
- `.prepend(child)` adds a child to the beginning, displaying it first.
  - eq:  `parentElement.prepend(childElement)`",,,ikmnlhPDiyo,http://youtube.com/watch?v=ikmnlhPDiyo,https://www.youtube.com/embed/ikmnlhPDiyo,,,,,DOM I,,Applied JavaScript,Full Stack Web Development Core,,1,,1,2
explain what Interaction Design is and why it is useful,Product experiences are surprisingly dynamic. Users interact with our products and receive some feedback that leads to new interactions. Interaction Design is the discipline focused on designing this conversation between users and products.,,"It’s easy to think of our user interfaces as static entities, especially when we look at them in Sketch. However, they’re more like dynamic conversationalists who actively engage users in an interesting discussion. As users click buttons, submit forms, and interact with them, our interfaces are constantly responding with new information and feedback that our users can react to. Designing the conversation between users and interfaces is the world of Interaction Design.

As the Interaction Design Foundation explains, “Interaction Design (IxD) is the design of interactive products and services in which a designer’s focus goes beyond the item in development to include the way users will interact with it. Thus, close scrutiny of users’ needs, limitations and contexts, etc. empowers designers to customize output to suit precise demands.”

Interaction design can have an incredible impact on our overall user experience. Have you ever submitted a form before and then nothing happened? It’s a terrifying experience! All of these thoughts can rush through your head: was there an error? Did I miss something? Is it loading? Why is nothing happening?!?!

This example highlights just how important interaction design if for our UX. If we don’t consider the dialogue happening between our users and our interfaces, then we can ruin an otherwise successful design.",,,,,,,,"What Puts the Design in Interaction Design,Interaction Design Overview,What is Interaction Design?","- What is interaction design?
- Why is it valuable?",Interaction Design,,Intermediate UI,UX Design Core,,1,,,1
design UI states,"To incorporate Interaction Design into our work, we can begin to think in terms of states.",,"To add Interaction Design to our user interfaces, we need to be familiar with the concept of state. State refers to a snapshot of an interface at a specific point in time. When a user first visits an interface, it is typically in its “default state” because there hasn’t been any interaction yet. If the user submits a form, then the interface changes to its “loading state” as the data is transferred to the backend of the product.

Another way we can think of state is that it’s the memory of our interfaces. As interactions occur, new memories are added to our interface’s state. We then display these memories to the user as they happen so they understand what is happening.

There is an endless assortment of states that you can design for your user interfaces. However, some common ones include the following:
- Error States: Let’s the user know that an error has occurred
- Validation State: Tells the user that data they have provided is not in the proper format
- Hover State: Frequently used with buttons and links to increase their affordance
- Loading State: Let’s the user know that something is happening after an interaction
- Selected State: Communicates that an element has been selected by the user
- Active State: Provides context for the user about what type of content they are viewing
- Disabled State: Communicates a noninteractive element","The key concept to understand for state design is that state changes based on user interactions. Therefore, we can break our state design into three separate components: default state, transition, and end state. The default state is what the interface looks like before the user interaction and the end state is what it looks like after the user interaction has occurred. Then the transition is how the interface changes from the default to the end state.

For example, how might we design a simple button hover interaction? First, we can design how the button should look in its default state, like this:

![](https://tk-assets.lambdaschool.com/e739decd-66c2-45d0-bd67-38d515bb168f_ScreenShot2019-03-26at9.58.20AM.png)

Then, we can design how the end state should look. In this case, we just need to darken the background color.

![](https://tk-assets.lambdaschool.com/98fc143a-f7dd-4a81-87fd-eb6a63894413_ScreenShot2019-03-26at9.58.41AM.png)

Finally, we can design the transition. In this case, we’ll add a slight delay so the hover end state appears slowly.

![](https://tk-assets.lambdaschool.com/7be6e303-3e81-41d6-b8e8-b615eafaa1d7_ButtonHover.gif)

Just like that, we’ve used states to design this interaction! There are a variety of tools we can use to design this interaction. Sketch and InVision can be used to communicate the default and end states. However, it’s difficult to use them to design the transition. Some better tools for that are Adobe After Effects, InVision Studio, and CSS.",,,,,,,Understand Disney's 12 principles of animation,"- What is a state in interface design?
- How do I design a state?",Interaction Design,,Intermediate UI,UX Design Core,,1,,,1
represent state in InVision with hovers and timing,We can add states to our InVision prototypes via hover hotspots and screen timing.,,"InVision is a powerful tool for designing states. We can use hover hotspots and screen timing to incorporate interaction design into our prototypes. Let’s create a simple sign up flow using InVision’s interactions.

## Hover

To start, we’ll create a hover on our sign up form’s button. We’ll need to upload our default state and end state to InVision so we can simulate the hover interaction.

![](https://tk-assets.lambdaschool.com/c65ec401-07e3-4224-a9d4-351b76dc0c52_ScreenShot2019-03-28at10.10.13AM.png)

![](https://tk-assets.lambdaschool.com/36bebd72-f5d5-479b-9e65-68586f3c3773_ScreenShot2019-03-28at10.11.08AM.png)

Now on our default state screen, we can add a hover hot spot that links to our end state.

![](https://tk-assets.lambdaschool.com/05f48436-a486-4bdc-ba09-728319fe3446_ScreenShot2019-03-28at10.10.31AM.png)

If we go back to our preview mode, we can see that our hover interaction is working now!

![](https://tk-assets.lambdaschool.com/b0d9c0ef-8bad-4383-b6e0-6339e90a311a_Kapture2019-03-28at10.19.06.gif)

## Timing

Now we want to make sure that when we click on our hovered button that we trigger the loading state for the form. To simulate how it would work in our product, we’ll use InVision’s timer to display the loading screen for a few seconds and then have it automatically redirect to the welcome page.

Once again, we’ll need to upload our default state and end state to InVision. In this case, our default state will be the loading screen and our end state will be the welcome screen.

![](https://tk-assets.lambdaschool.com/9981a6e6-6ece-4a71-8cb7-d2439f056564_ScreenShot2019-03-28at10.24.55AM.png)

![](https://tk-assets.lambdaschool.com/b2457e14-bb03-42a8-84d3-f75f817c360e_ScreenShot2019-03-28at10.25.07AM.png)

With our states added, we can begin to create the interaction. First, we’ll add a click hot spot to our sign in button’s hover state.

![](https://tk-assets.lambdaschool.com/2ba30e4d-5146-4e3e-bb39-d1822477ae4e_ScreenShot2019-03-28at10.26.40AM.png)

Then, we can add our timer to our loading state by entering build mode and selecting the timer option in the top center of the page.

![](https://tk-assets.lambdaschool.com/f486bfd5-3aab-4c30-8de5-8201087c7ac6_ScreenShot2019-03-28at10.27.52AM.png)

Now our loading interaction is ready!

![](https://tk-assets.lambdaschool.com/9081a383-1aaf-4c16-ac06-e0e5c6bd54e7_Kapture2019-03-28at10.30.10.gif)",,,,,,,,,,Interaction Design,,Intermediate UI,UX Design Core,,1,,,1
design a splash/landing page,"Oftentimes, your landing page is the first chance you have to make a good impression on your users.",,"The term landing page refers to the first page that a user sees when they access your product. As you can imagine, having an effective landing page is essential to any user experience because it’s your chance to explain your product’s value to your users. Without a landing page, users wouldn’t know why they should use your product!

## Essential Components

While landing pages are as unique as the products they represent, some common components have arisen and are frequently included in landing page design. These components include navigation, a hero section, and a footer. Let’s review each of these in detail.

### Navigation
Most landing pages include their navigation at the top of the page so it is the first thing that users see. Doing so helps users see what information is available on the page, thereby increasing the [“information scent”](https://www.nngroup.com/articles/information-scent/) of your product’s details.

Here are some examples of landing page navigations. Notice how they present their links, what information they highlight, and where the logos are located.

![](https://tk-assets.lambdaschool.com/abb715da-1ef2-41af-bf83-902f6bd589c1_ScreenShot2019-03-29at10.11.39AM.png)

![](https://tk-assets.lambdaschool.com/895fac30-fa20-4446-934b-2dc9e99220be_ScreenShot2019-03-29at10.12.05AM.png) 

![](https://tk-assets.lambdaschool.com/27d8c5e6-d52d-4f97-a689-7e8f29195aba_ScreenShot2019-03-29at10.12.34AM.png)

### Hero Section
Hero section is what comes below the navigation. Here, we typically present the user with our Unique Value Proposition (UVP), a Call-to-Action, and some supporting imagery. Doing so helps the user understand why the product is valuable.

Here are some examples of hero sections. The areas inside the red rectangles are centerpieces of these hero sections. The areas outside of it and the supporting imagery can also be considered as part of the hero section. Typically the hero section ends before the fold or at the next piece of content beyond the UVP.

![](https://tk-assets.lambdaschool.com/2f766c5b-a025-46e6-a11b-b3eff9e3e9a6_ScreenShot2019-03-29at10.44.50AM.png)

![](https://tk-assets.lambdaschool.com/52fdf44a-8d94-48cb-94ac-7601ab8133e0_ScreenShot2019-03-29at10.45.17AM.png)

![](https://tk-assets.lambdaschool.com/945b3769-b09e-48fa-ae91-a3e2cca16e33_ScreenShot2019-03-29at10.45.46AM.png)

### Footer
Footers are the collection of links, social icons, and legal disclaimers at the bottom of the page. We utilize footers to provide the user with additional links to the site content and supporting media, and access to any legal content they need. Since footers are at the bottom of the page, this is your last chance to entice the user to continue exploring the page. So, we frequently include more links than the primary navigation to help improve our site’s information scent.

Here are some examples of footers.

![](https://tk-assets.lambdaschool.com/73ebab4f-0933-4547-a0d5-ffcfa8eae4f0_ScreenShot2019-04-01at10.03.34AM.png)

![](https://tk-assets.lambdaschool.com/f7a23f47-7f68-4b8f-8fcd-18b701466679_ScreenShot2019-04-01at10.03.57AM.png)

![](https://tk-assets.lambdaschool.com/0bd5c38d-a6ef-43fe-b1b5-d43cdbdd631e_ScreenShot2019-04-01at10.04.23AM.png)",,,,,,,,,,Interaction Design,,Intermediate UI,UX Design Core,,1,,,1
describe their role as a User Interface Developer,You have learned all about the foundations of the Web over the past eight weeks. Now you will build a static multi-page that links to your group's application login page.,,,,,,,,,,,,,,,,,0,,,0
describe their role as a Front End Architect,React JS has been your focus over the last 4 weeks. You will use those skills learned during the React Unit to build out a web application that consumes a CRUD API.,,"## **The `Web Application Development` unit explored the following topics:**

- Functional Components 1 - 2
- Class Components 1-2
- React Tooling
- The React Life-cycle
- React Composition Patterns
- CSS in JS
- React Router 1 - 2
- HTTP/AJAX 1 - 2
- Redux Fundamentals 1 - 2
- Async Redux w/ Redux Thunk

For your project this week, you will demonstrate proficiency by working with a group of students cross section to deliver a minimum viable product (MVP) over the course of the week.","## Your primary role as the Web Application Architect:

You will use your skills to be responsible for the Front End Architecture of this project. You will work directly with the UI Developer and the Back End Developer to ensure that all React components are wired up in proper fashion.","## Grading Rubric Link:

Use [this rubric](https://docs.google.com/spreadsheets/d/1dL5UfyiHJ2qxWWfot-FTOeU3KUvZaixAKvkJ0uLuhL8/edit?usp=sharing) to help guide your development processes",,,,,,,,Delivering a Single Page Application,,Build Week: Front End ,Full Stack Web Development Core,,1,1,,2
"distinguish between a website, web app, mobile app, and desktop app","Most digital UX designers design experiences for websites, web apps, mobile apps, and desktop apps. Understanding these contexts will help us create appropriate designs. ",,"Currently, there are four primary contexts that digital UX designers work with. They are websites, web apps, mobile apps, and desktop apps. Each of these contexts have different design requirements. Understanding these requirements and how to design for these contexts will help us create externally consistent user experiences and allow us to join different design teams and immediately make an impact. Let’s look at each of these contexts in turn.

## Websites
If you have browsed the internet, then you are familiar with websites. Websites are *static* pieces of content that are accessed via web browsers like Google Chrome or Firefox. They reside at a specific URL address, such as https://bbc.com, where users can find their content and consume them.

Websites are defined by their static, fixed nature. While we commonly use the term website to describe all of our dynamic interactions on the web, in UX design we make the distinction that websites are used for information consumption while web apps are where interactive experience occur. Examples of websites include news sites, blogs, marketing websites, etc. 

As we design these experiences, we need to emphasize information scent, text hierarchy, and information architecture so our users can consume content as easily as possible.

## Web Apps
We use the term web app to distinguish static websites from the interaction-heavy experiences that began to emerge on the web in the late 2000s. They are also accessed via web browsers on the internet and can live at a specific URL address.

Web apps are defined by their interactivity. They typically incorporate a lot of user feedback, actions, and interaction design so users can gain additional value through the experience. Examples of web apps include [Facebook](https://facebook.com), [Google Docs](https://www.google.com/docs/about/), [InVision](https://invisionapp.com), etc.

What makes matters confusing between web apps and websites are that given products can combine elements of both. For instance, InVision has a marketing website and blog but is also a web app product. Or a blog might be a website because it shares static content, but it has a dynamic comment system that acts more like a web app. 

Also, we tend to use the term website to refer to any experience accessed on the web. In practice, we tend to say that a web app lives on a website or we make the distinction that the website is a web app itself. For example, we could say that the website invisionapp.com is a web app.

The trick to defining a web app vs. a website is to look at the content and experience. If things are pretty static, then the experience more of a website. Whereas if there’s a lot of dynamic user interaction, then the experience is more of a web app.

As we design these experiences, we need to emphasize interaction design so our users can input appropriate information into the system to extract its value as output.

## Mobile Apps
Mobile apps are pieces of software or products that can only run on mobile phones. They are useful for encapsulating functionality that we can use on the go. Unlike websites that link to other websites or web apps, mobile apps tend to be self-contained units that accomplish specific tasks. We refer to them as apps because they typically involve a high degree of interactivity.

Examples of mobile apps include [Robinhood](https://robinhood.com/), [Bloons Tower Defense](https://itunes.apple.com/us/app/bloons-td-5/id563718995?mt=8), [Uber](https://www.uber.com/), etc.

As we design these experiences, we can utilize our mobile app’s hardware to enhance our users’ interactions. To do so, we’ll need to make sure we can collaborate closely with our developer counterparts to understand what is feasible and focus on our interaction design.

## Desktop Apps
Desktop apps are pieces of software or products that run directly on a computer. Since they are installed directly on a computer, they can take advantage of additional computing resources to enable more complicated users experiences. Prior to the rise of modern web browsers and faster internet speeds, desktop apps were the primary digital product experiences. 

Examples of desktop apps include [Slack](https://slack.com/), Apple [Keynote](https://www.apple.com/keynote/), and [Sketch](https://www.sketch.com/).",,,,,,,,Web application vs. website: finally answered,"- What is a website?
- What is a web app?
- What is a mobile app?
- What is a desktop app?",UI Patterns I,Active,Intermediate UI,UX Design Core,,1,,,1
design for CRUD,"CRUD is a concept that we have borrowed from software engineering. Most products that utilize a database follow the CRUD pattern at some level. So, being able to design for CRUD is a critical skill for UX designers.",,"There are four primary actions we can take when we interact with a database. They are Create a record, Read a record, Update a record, and Delete a record. This concept has become so ubiquitous that it has developed its own acronym: CRUD.

While CRUD describes these database interactions, it has evolved over time and now we also use it to describe a whole category of products or apps. These products focus on providing CRUD functionality on a certain piece of data through a user interface. They also tend to be simple, straightforward products that lack interaction design.

The classic example of a CRUD app is a simple to-do list. To have a basic to-do list, you just need to be able to Create to-dos, Read all of them, Update them, and Delete them when you’re done. As you can see, the whole experience revolves around the CRUD interactions.

Designing for CRUD is fairly straightforward. We just need to identify the type of data to focus on (like to-dos) and then we can design a way to Create, Read, Update, and Delete them. 

One nuance to this approach is that for our Read designs, we’ll typically need a way to Read a listing of all the records and then a separate way to Read a single record. For example, a blog is a CRUD app as well - we just need to Create posts, Read posts, Update posts, and Delete posts. But, we’d likely need a page to Read all of the posts to select the one we’d like to view and then a separate page where we can actually Read that post. This won’t always be the case, but you should always consider it when designing for CRUD.",,,,,,,,,,UI Patterns I,,Intermediate UI,UX Design Core,,1,,,1
design for different user roles,Users can have different roles that correspond to the amount of access they require to a product’s data. Knowing how to design for these different roles is critical to ensuring your users receive the appropriate user experience for them.,,"In our products, we will frequently need to provide users with different roles depending on what they need to accomplish. Roles correspond with the level of access or permissions for a user. Access levels define and limit what actions a user can have with a product. In a simple blog, most users would have a visitor role where they can just read the content. But, the users writing the content would have an administrator role so they can upload new content to the website.

For a real-world example, consider Lambda School’s Slack account. It has two types of user roles: regular and admin. All of the students are regular users, while most of the staff are admins. It is important for us to make this distinction because we need our staff members to have access to extra Slack features that would be unnecessary for our students. For instance, admins can moderate uploaded emojis to make sure they stay inclusive and work appropriate. We wouldn’t want students to be able moderate emojis because then a single, upset student could delete all of the emojis 🙀

So, we can think of user roles like a trust system for our products. Users with a higher level of trust can have access to more permissions through their role level. Not every product will require user roles, but a common role hierarchy is as follows.

- **Owner**: There is typically only one user for an account. They are the person who has created it or had it transferred to them. They have the most permissions and are usually the only person who can delete an account.
- **Admin**: An admin has almost all of the permissions that an Owner does, except they can’t delete an account. These are usually only given to extremely trustworthy users who can be entrusted with an account’s settings.
- **Moderator**: Moderators are usually just a step above Default users. They can help with some more advanced interactions, but they usually can’t change any critical details. This role is the most dependent upon your product’s structure. Sometimes there can be many roles between Default and Admin users, while other times there are none. So, keep your user experience in mind when developing this role.
- **Default**: Default users have an account to access the authenticated details of your product, but don’t have permissions beyond what is required for them to use the product.
- **Visitor**: Visitor users do not have an account to access the authenticated details of your product. So, they can only see public-facing information.

Keep in mind that this is just an example of a common hierarchy. The roles that are required for a specific experience can change dramatically. Some products only need one or two roles, while others can have close to a hundred or more.

## Authentication Roles
One important distinction to make clear is the difference between visitors and the rest of your product’s user roles. If your product includes authentication or user accounts, then we make a distinction between people with and without an account. People without an account are referred to as Visitors while people with an account are referred to as Users.",,,,,,,,,,UI Patterns I,,Intermediate UI,UX Design Core,,1,,,1
design a form,Forms are the primary way for users to input data into products. Understanding form design best practices will ensure that you’re forms have a high baseline of usability.,,"Forms are how our users provide input to our products so we can deliver value. By ensuring that our forms are well-designed and usable, we guarantee that our users can interact with our user experiences. Furthermore, we can dramatically improve business outcomes as well because usable forms are more likely to be completed by users. So, clearly form design is incredibly important, but what are the best practices for designing one?

The Nielsen Norman Group (NNG) has compiled their research into 10 guidelines that we can use to improve our form usability. These guidelines are:

1. Keep it short
2. Visually group related labels and fields
3. Present fields in a single column layout
4. Use logical sequencing
5. Avoid placeholder text
6. Match fields to the type and size of the input
7. Distinguish optional and required fields
8. Explain any input or formatting requirements
9. Avoid Reset and Clear buttons
10. Provide highly visible and specific error messages

Usually, we’ll try and extract as much information into Training Kit as possible for you. In this case, the NNG guidelines for form design are such a canonical work that you would be better served by reading them directly. So, you can read the guidelines [here](https://www.nngroup.com/articles/web-form-design/) and explore their related writings on form design as well.",,,,,,,Website Forms Usability: Top 10 Recommendations,Placeholders in Form Fields Are Harmful,,UI Patterns I,,Intermediate UI,UX Design Core,,1,,,1
understand and use an AutoML system to train and tune a predictive model,"Tech has automated lots of tasks, but us people who *make* the models have safe jobs, right?

Maybe not - there are already capable and flexible AutoML systems, which don't just fit models but perform an appropriate search to optimize hyperparameters. Such systems could plausible select and compare a variety of models, as we do, and ultimately commoditize predictive modeling into a simple service or API.","Lean a bit into the ""this could even affect us"" angle, in terms of job security - but soften with the many other things we can do, and emphasize e.g. A/B tests and other areas where human judgment is still critical.",,,,,,,,,,,Artificial General Intelligence and The Future,,State of the Art Machine Learning,DS - Machine Learning,,0,,,0
"separate the AI hype from the reality, and offer an informed opinion on the direction of Data Science","> ""Any sufficiently advanced technology is indistinguishable from magic.""
> -- Arthur C. Clarke

> ""AI is whatever hasn't been done yet.""
> -- Douglas Hofstadter

In the past sprints, you've learned that, though the results are impressive, Data Science is not magic. In fact, the ""magic"" (modeling) is the easy part! The work is usually in finding, understanding, loading, cleaning, and generally handling the underlying *data*, and making sure it aligns with the technique(s) applied to it.

These results are valuable - and in some contexts, should genuinely be described as artificial intelligence. They allow us to use a system to predict things and gain human-like (or better) insight.

But what do most people *mean* by ""AI""? They probably mean something that can *adapt* and *learn* flexibly, unsupervised, like us. And the tech isn't there... yet. However, it's still valuable to understand both what people want from technology, and where it actually is going.","Overall emphasize sobriety/balance rather than hype. Our students should be ""straight shooters"" and realistic, with substance to back up excitement.",,,,,,,,"Computers Don't Argue,Paperclip maximizer",,,Artificial General Intelligence and The Future,,State of the Art Machine Learning,DS - Machine Learning,,0,,,0
understand the structure and use cases of a Generative Adversarial Network,,,,,,,,,,,,,Generative Adversarial Networks,,Major Neural Network Architectures,DS - Machine Learning,,0,,,0
run a simple GAN to generate pictures based on training data,,,,,,,,,,,,,Generative Adversarial Networks,,Major Neural Network Architectures,DS - Machine Learning,,0,,,0
train a basic LSTM with TensorFlow,,,,,,,,,,,,,Recurrent Neural Networks and LSTM,,Major Neural Network Architectures,DS - Machine Learning,,0,,,0
use an LSTM to generate text,,,,,,,,,,,,,Recurrent Neural Networks and LSTM,,Major Neural Network Architectures,DS - Machine Learning,,0,,,0
use transfer learning to run a cutting edge CNN for high accuracy image classification,,,,,,,,,,,,,Convolutional Neural Networks,,Major Neural Network Architectures,DS - Machine Learning,,0,,,0
understand and run a basic CNN with Keras,,,,,,,,,,,,,Convolutional Neural Networks,,Major Neural Network Architectures,DS - Machine Learning,,0,,,0
understand foundational UI design,"UI design is an art form. When we move from wireframes to high-fidelity designs, there are important subtleties that we must not ignore. These subtleties include, but are not limited to, color, composition, size, and most importantly, what to leave out.",,"Luke Wroblewski wrote a fantastic paper on visual hierarchy in UI design titled 'Communicating with Visual Hierarchy.' In this paper, Luke explains why the visual presentation of a web interface is essential. He breaks it down into three critical reasons:

Informing Users - We want to guide users through our interface seamlessly. We never want our users to be confused or not know what to do next. For example, we want to make sure the broadest content is at the top of the page, followed by other content in order of importance.

Communicating Content Relationships - We should present content within the interface in a way that matches our users' expectations.

Creating Emotional Impact - We often visit places and do things for more than what they offer at face value. For example, we visit a coffee shop for more than just coffee. We enjoy the ambiance, the people, and the atmosphere the coffee shop provides. Websites are similar in that we also want to provide a positive emotional impact on our users. 

We mainly want to answer a few critical questions for our users. First, what is this? In other words, is this experience going to provide me with the value that I need right now? Second, how do I use this experience? Finally, why should I care about this experience? If we're able to answer these three questions right away when a user visits our site.

As we're creating our high-fidelity designs, we must keep this information in mind to ensure that our plans are not only aesthetically pleasing but give our users the information that they need, when they need it.",,"Choose your favorite news site. Take 15 minutes, and write down a paragraph how your site either meets or fails to meet the foundational UI concepts that we've covered thus far today and we'll discuss your findings afterward. Raise your hand in zoom when you're finished.",,,,,"Intro to the 8-Point Grid System,User Interface Design Basics",,,Transitioning from Wireframes to High-Fidelity Design,,"Advanced Ideation and UX Leadership, Prototyping","UX Design Core [v1 deprecated], UX Design Core",,1,1,,2
Identify jobs that you are a fit for,"Job searching takes a lot of time and energy- the purpose of today’s lesson is to help demystify the process a bit. After this presentation, you might feel a little overwhelmed with everything you have to do, but don’t worry- we’re going to make this as clear as possible! ",,"# Job Search Strategy

**Job searching takes a lot of time and energy- the purpose of today’s lesson is to help demystify the process a bit. After this presentation, you might feel a little overwhelmed with everything you have to do, but don’t worry- we’re going to make this as clear as possible!**


## Goals:
-   Know where to search for jobs and how to identify roles you are a fit for
-   Start taking steps involved in the job search
-   Position yourself as a strong candidate from the first point of contact

## Preparing for the search

-   Fun fact; job searching takes (on average) four months!! Some searches will take longer, others will take less time, but it’s impossible to know how long yours will take so it’s important to start searching months before you actually want to start working
-   Your job search is yours- you have a whole team of people backing you up here at Lambda School, but you are going to be most satisfied if you’re the one putting the effort in to finding the right fit! 
-   Job searching is a marathon; the average job search takes 4 months! Yours might be shorter, or it might be longer, but we’re introducing career curriculum so early into Lambda because no matter how skilled you are technically, you still need to be prepared for the challenges of job searching so you feel confident.
-   Job searching can be overwhelming; just like when you’re starting a new web page, app, design, etc. and you need to break down your project into stages, it’s important to have goals and an action plan when approaching your job search.

## Steps in the job search process

-   Job searching can be broken down into four main steps: identifying jobs you’re qualified for, applying, interviewing, and negotiating.
	-   Often these occur in order, but you should be prepared for any step at any point; if you hear about an opportunity through someone in your network, you may actually have a conversation with someone before you ever formally apply. And while the final negotiation almost always happens at the end of the process during the offer stage, often you will be asked during the phone screen what your salary expectations are, so it’s important to be prepared for any of these steps at any point. We’re going to break each of these down into their step-by-step components.

## Identifying jobs you're qualified for
-   Make a list of 20-30 companies you’d be interested in working at. Follow them on LinkedIn, social media, and set job alerts
- List out anyone **and everyone** you know, and where they work.
	- This can be friends, family members, former (or current) classmates, coworkers, people you know from sports, church, online, or other social groups
-   These two lists should be your starting point for job searching; see if any of these companies are hiring for jobs you’d be qualified for


### When you're ready to start applying...
-   This is where the research you’ve done in the past on companies you’re interested in, or people you know in your network, comes into play. Start with companies you think you’d like to work at, or where you know people, and see if they have job openings you’re a fit for.
-   Where to go to find job postings: LinkedIn, Hired, Dice, social media, and many, many more places! 
-   You can set posting alerts on many job boards for a range of titles, so you’re among the first to find out when new roles open up in a specific geographic area
-   A note on qualifications: you do not need to meet all of the requirements for a job in order to apply; think of this as a “wish list” for a company- they know they won’t find someone who checks every box. Aim to meet 50-80% of the requirements. Often the most important requirements will be listed first, and the least important will be listed last
	-   This is true for education requirements and years of experience. Most companies still ask for a bachelor’s degree and a few years of experience even for a junior role. Don’t let this turn you off!
-   Use the job search tracker (linked below) to keep track of all the jobs you find; it can be tough to keep track of them mentally!
-   Search regularly and often; new opportunities arise every day, and if you’re one of the first applicants, you’re more likely to get invited for an interview. Don’t wait to apply!

## Applying for jobs
-   Not every job will have the same process; some may just require a resume, others will require a cover letter or additional form to fill out with your application
	-   If anything is listed as optional, **do not treat it as such!** Taking the extra time to write a cover letter when it’s not required just shows your excitement and passion, and helps you stand out
-   You should always tailor your resume to the job you’re applying for
	-   An easy way to do this is to print or copy the content of the job description into a word/google doc, and search for any key words that stand out to you. For example, if a job lists “prototyping” 4 times, that’s a clear signal that experience with this is an important skill, and you should make sure that a project where you applied different types of prototyping techniques is at the top of your resume where it will stand out.
-   Write a thoughtful cover letter: use this template (linked below) to help you tailor your cover letter
- PROOFREAD!!!!
-   Once you’re sure your portfolio, resume, cover letter, and any other materials are finalized, go ahead and submit via whatever process the company requires. Follow up after one week if you haven’t heard back; it’s ideal if you have an email for the hiring manager, but if not, do your best to find a general HR email that you can message.

## After you've applied
-   Do you know anyone at the company? Can you figure out who the hiring manager is on LinkedIn? Do your best to follow up with some personalized outreach to someone at the company. A brief email intro is fine; this helps you stand out and shows you going above and beyond. Use the templates below to help you craft a personalized message
-   Change the status of your job application status in the tracker so you remember that you’ve applied
-   Follow up after one week if you haven’t heard back
-   Continue to research the role and company; you never know when you're going to hear from someone!
	-   Be prepared to do a phone screen on short notice (sometime next-day, or even same day!) You might not hear from anyone for two weeks, then getting an email setting up an initial conversation the following day.
	-   Be prepared to discuss your salary expectations as early as the phone screen. Use Glassdoor to find average pay ranges based on your local area; be sure to take your experience level and field into consideration. If you can't find salaries for the exact company you're applying to, see if there are similar companies that have more data points you can use to figure out an appropriate starting range.
		- If you're nervous about salary negotiations, check out the talking points linked below to help you get more comfortable with these conversations.

## Pro Tips
-   Set daily goals! This is a lot of steps, and it helps to carve out some time each day to make chunks of progress so you don’t burn out. The job search tracker has a calendar built in where you can set a schedule, but feel free to use whatever platform you like for scheduling
-   Submit job applications on Sunday evening or Monday morning when possible. That way, yours is more likely to be at the top of the inbox!
-   Check your phone and email multiple times per day, and respond to any messages within 24 hours (at most). Jobs can move fast, and replying quickly demonstrates your communication, follow-through, and excitement for the role
-   Update your settings on LinkedIn so recruiters can see that you’re searching","# Going through the Job Search Tool

**You do not need to use this tool in your job search long-term if you have another preferred system for tracking, but we're asking you to complete this for Friday so you can test out different systems that you can use to track your applications, companies you're interested in, and people in your network. The most important thing is that you're tracking who's who and what's what in your search; it can be really easy to forget details when you're applying to dozens of different roles, so having an organization system here is key!**

## Job Search Tracker:
-   To use this, you'll need to make a copy of the tool and save it to your google drive
-   There are tabs for researching companies, listing out everyone in your network, jobs you're interested in applying to, and companies you've heard from (either through Lambda or on your own) and are in conversations with. There is also a tab for setting a daily and weekly schedule/plan; I really recommend using this or another scheduling system to hold yourself accountable!

## Finding Jobs on LinkedIn:
-  As you're researching, companies you might be interested in, and jobs, leverage LinkedIn; it's one of your best friends!
-  Narrow your search down by searching for a possible title and filtering by city/region. Look through all the companies that are hiring for that title in your area. You should see some small photo thumbnails below at the bottom of each posting if you know someone at that company. Consider prioritizing your company research by focusing on places where you know people; these are great places to start your search since you may already have a foot (or maybe just a toe!) in the door. "," - Fill in the “Companies of Interest” tab and “People in My Network” tab of the Job Search Tool with at least 5 companies and at least 15 people in your network

 - Start an action plan or create a schedule in the “Job Search Schedule” tab. No matter where you are in your search, remember that there are steps that you can start taking today to set you up for success in your search!

- If you’ve already started applying to jobs or have been in conversations with any recruiters, feel free to add those to the “Job Application” and “Outreach from Companies” tabs, too",W2RxtkkJs8c,http://youtube.com/watch?v=W2RxtkkJs8c,https://www.youtube.com/embed/W2RxtkkJs8c,,,"Cover Letter Template,Salary Negotiation Talking Points,Networking and Outreach Templates,Job Search Tool,Sign up for Huntr",,Job Search Strategy,,Job Search Strategy,Career Readiness,Job Search Strategy.key (https://dl.airtable.com/.attachments/319e85cd52672cb7078a5d55ecb95226/703f8a38/JobSearchStrategy.key),1,1,1,3
"Go through the steps required to search and apply for jobs, and feel confident starting the application process",,,,,,,,,,,,,Job Search Strategy,,Job Search Strategy,Career Readiness,,0,,,0
"Use LinkedIn to find connections, search and apply for jobs, and follow up with contacts ",,,,,"'- Identify 3 people on LinkedIn who work at companies you'd be interested in working at. Target people based near you or in areas that you'd be able to commute/relocate to. Send a message on LinkedIn to each of these people asking for an informational interview or to chat with them about their career journey, and be prepared to discuss with your PM on Friday.
- If cold outreach is intimidating, use outreach templates (linked below) to help you craft your message.
- Make these templates your own! Don't just copy and paste; try to insert your own flair (while keeping it professional, of course!)
- Remember, almost everyone got to where they are in their careers because someone helped them get there; reaching out and asking for advice/guidance is a normal part of the journey!",,,,,,Networking and Outreach Templates,,LinkedIn,,LinkedIn,Career Readiness,,0,1,,1
design a content management system (CMS),"Most digital products rely on a content management system (CMS) to organize and publish the content they use in their experience. Understanding how to design a CMS will help us support our business stakeholders, and thus the overall user experience.",,"A Content Management System (CMS) allows a business to organize, manage, and publish content for its digital products. CMS’s typically follow the CRUD pattern with minor nuances depending on the business needs. 

CMS’s are rarely customer-facing. Instead, they are internal tools used by business stakeholders to manage the content that customers consume in other parts of the user experience.

In many projects, the CMS feels like an afterthought. It’s easy to think that since customers don’t see it, we don’t have to worry about its user experience. However, a CMS can have a dramatic impact on the overall UX.

For example, what if there’s a typo that needs to get fixed via the CMS? If you have a poorly designed CMS, this could take several steps and a lot of time. Multiply that by the number of frequent content changes your team will need to make, and it’s easy to see how updating the CMS will start to feel like a nightmare. It can get so bad that your team might begin to ignore content fixes, improvements, and even new content initiatives. At this point, your overall UX is suffering because of a breakdown in your CMS. This example may feel hyperbolic, but sadly it is an all too common occurrence.

There tends to be a lot of variation in CMS design because they are designed to support their content and team considerations. However, there are some common patterns that we can leverage for external consistency.

CMS’s frequently follow the CRUD pattern. So, for a given piece of content, like a blog post, there is a way to Create, Read, Update, and Delete it. This pattern is repeated for each piece of content that is produced in the CMS.

Oftentimes, content is related to each other. For example, a blog post might have topic tags. These relationships are also important to highlight within a CMS. In the Create and Update sections, there are typically ways to add and remove these relationships, while in the Read section we can see the various relationships and navigate to their Read pages to see more details about them.

In addition to managing the required content, CMS’s also include ways to manage relevant meta content, assets, and images. A lot of UX friction stems from implementing these features in a way that supports the database instead of your users’ workflow. So, pay extra attention to how your users incorporate these details into the content and design your CMS to support those flows.

## Off-the-shelf vs. custom CMS’s
Since so many businesses rely on CMS’s, a number of companies have been developed that offer off-the-shelf CMS’s so you don’t have to build your own. 

The biggest player in this space is [Wordpress](https://wordpress.com/), but alternatives include [Drupal](https://www.drupal.org/), [Joomla](https://www.joomla.org/), [Contentful](https://www.contentful.com/), and many more. Additionally, many industries require specialized CMS’s to manage their specific context. For example, many educational institutions rely on [Learning Management Systems (LMS)](https://www.learnupon.com/blog/what-is-an-lms/), which are essentially CMS’s geared towards education.

It may seem like we don’t have to design anything if we use one of these solutions. While it’s true that we don’t have to design the core user experience, we can certainly help improve it by helping our developers customize your chosen solution to fit your team’s workflow and content needs.

While these off-the-shelf options are available, many companies opt to build their own CMS’s. They might not have enough content to require a full-blown off-the-shelf solution, or they might believe it’s cheaper for them to build it themselves.","Designing a CMS is just like any other design project we undertake. While we’ll follow a similar workflow, there are a few nuances to keep in mind.

## Content-Driven
It should come as no surprise that a CMS should be driven by its content and how users interact with it, but you’d be surprised how often these projects get taken over by engineering trying to replicate the database.

In order to design an effective CMS, you need to understand what content will be managed by it, what details each piece of content needs to include, and how your users are currently managing it. 

## CRUD Pattern
As we discussed earlier, CMS’s typically follow the CRUD pattern. So, once you have identified the content that you will be managing, you’ll need to be sure that the CMS can CRUD it as needed.

## User Roles
Ensuring that user roles are incorporated into a CMS are hugely important. While it might seem like everyone should be able to edit everything since this is an internal tool, in reality, the user roles need to well-considered. For example, having the permission to delete content might be reserved for admins, while any user can read the content that is available.

## Flexibility vs. Rigidity
It might not seem obvious at first, but CMS’s are designed on a spectrum of flexibility and rigidity. Flexible CMS’s allow users to add any and all details to its content and provide them with the means to style it as they see fit. Meanwhile, rigid CMS’s limit user choices and prescribe what content should be added and pre-define how it looks.

Both of these approaches have trade-offs. Flexible systems allow for a high degree of customization and edge-case handling, while rigid systems are more consistent and easier to interpret.

When you’re designing a CMS, you don’t have to formally pick one approach over the other. Instead, recognize that your CMS will operate on this spectrum, and so you’ll need to consider which approach is most appropriate for your users.

## Support
Many CMS’s were designed without user support in mind. Therefore, it becomes extremely difficult to train new users on how to use it and to keep existing users familiar with infrequently used workflows.

Incorporating contextual help, field explanations, and accurate support documentation goes a long way towards improving the overall user experience of your CMS because it empowers your users to master the system.",,,,,,,,,UI Patterns II,,Intermediate UI,UX Design Core,,1,,,1
design a Client-Relation Management (CRM) System,"Many businesses rely on Client-Relation Management (CRM) Systems to keep track of their clients, customers, and sales. Understanding how to design a CRM will help us support our business stakeholders, and thus the overall user experience.",,"A Client-Relation Management (CRM) System is used by businesses to organize and keep track of their clients, customers, and sales. While they tend to follow the CRUD pattern for managing data, they also include dashboards and analytics that allow the business to gauge the success of their sales efforts.

CRM’s can be used by just about every business stakeholder; however, they are heavily used by the sales and marketing teams because it is highly aligned with their roles.

A CRM is an incredibly important part of a business’ operational software because it helps manage and uncover insights about the people who are paying it money! Therefore, improving its user experience can help our business keep making money and even improve it so it makes more money. While money isn’t everything, it is necessary to keep the economic entities you’ll be working at alive and paying you. So, designing an effective CRM experience can have outsized impacts on your business’ performance.

There tends to be a lot of variation in CRM design because they are designed to support their business’ specific customer relations and sales pipeline. However, there are some common patterns that we can leverage for external consistency.

CRM’s frequently follow the CRUD pattern. So, for a given piece of content, like a customer, there is a way to Create, Read, Update, and Delete it. This pattern is repeated for each piece of data that is needed in the CRM.

Oftentimes, data is related to each other. For example, a customer might have many purchases. These relationships are also important to highlight within a CRM. In the Create and Update sections, there are typically ways to add and remove these relationships, while in the Read section we can see the various relationships and navigate to their Read pages to see more details about them.

In addition to managing the required data, CRM’s also include dashboards and analytics for measuring performance and uncovering insights. Oftentimes, your business stakeholders will be able to tell you what sort of metrics they would like to see in the CRM. But, by paying attention to their workflows and the type of insights they require, you can also design additional metrics that support them.

## Off-the-shelf vs. custom CRM’s
Since so many businesses rely on CRM’s, a number of companies have been developed that offer off-the-shelf CRM’s so you don’t have to build your own. 

The biggest player in this space is [Salesforce](https://www.salesforce.com/), but alternatives include [ZohoCRM](https://www.zoho.com/crm/), [SugarCRM](https://www.sugarcrm.com/), and many more.

It may seem like we don’t have to design anything if we use one of these solutions. While it’s true that we don’t have to design the core user experience, we can certainly help improve it by helping our developers customize your chosen solution to fit your team’s workflow and content needs.

While these off-the-shelf options are available, many companies opt to build their own CRM’s because they might not have enough data to require a full-blown off-the-shelf solution; they believe it’s cheaper for them to build it themselves; they want to retain ownership of their own data, or they want specialized analytics.","Designing a CRM is just like any other design project we undertake. While we’ll follow a similar workflow, there are a few nuances to keep in mind.

## Data-Driven
It should come as no surprise that a CRM is driven by its data and how users interact with it, but you’d be surprised how often these projects get taken over by engineering trying to replicate the database.

In order to design an effective CRM, you need to understand what data will be managed by it, what details each piece of content needs to include, how your users are currently managing it, and what metrics and reports will make that data actionable.

## CRUD Pattern
As we discussed earlier, CRM’s typically follow the CRUD pattern. So, once you have identified the data that you will be managing, you’ll need to be sure that the CRM can CRUD it as needed.

## User Roles
Ensuring that user roles are incorporated into a CRM are hugely important. While it might seem like everyone should be able to edit everything since this is an internal tool, in reality, the user roles need to well-considered. For example, having the permission to delete data might be reserved for admins, while any user can read the data that is available.

Another important consideration for CRM user roles is whether certain users even have access to all of the data. For example, maybe the C-suite and management needs access to the big picture metrics like total sales, while individual sales teams just need to see their performance.",,,,,,,,,UI Patterns II,,Intermediate UI,UX Design Core,,1,,,1
design a mobile app,More and more of our digital experiences are happening on mobile devices. Being able to design mobile apps helps us tap into this growing user base.,,"Mobile apps are pieces of software or products that can only run on mobile phones. They are useful for encapsulating functionality that we can use on the go. Unlike websites that link to other websites or web apps, mobile apps tend to be self-contained units that accomplish specific tasks. We refer to them as apps because they typically involve a high degree of interactivity.

We approach the design of a mobile app the same we approach any interface design. We start by understanding the content and features we’d like to include. Then we can consider the navigation and app structure before moving on to the design. That said, there are a few nuances to mobile app design that we need to keep in mind.

### Prioritize Features
Since mobile apps need to work on smaller devices, they have a limited amount of screen real estate. This makes it imperative that we deeply consider our core user experience and deliver it without any fluff. To do so, make sure you have a good understanding of the purpose of your app and be laser-focused on designing that experience.

### Clear Navigation
Our user experience suffers when our users can’t find the content or features they’re looking for. On mobile, we need to be especially diligent about our navigation design because we don’t have the space to incorporate tons of options. By following navigation guidelines from [Apple](https://developer.apple.com/design/human-interface-guidelines/ios/app-architecture/navigation/) or [Google](https://material.io/design/navigation/understanding-navigation.html) and aiming for external consistency, we can ensure our apps have usable navigation.

### Designing For Fingers
Our primary means of input for mobile apps are fingers. Unlike a mouse cursor that can be incredibly precise, our fingers are larger and less precise. Therefore, we need to ensure that any clickable element is large enough to be selected with ample whitespace around it so a user doesn’t accidently select something else.

![](https://tk-assets.lambdaschool.com/e17b7cb7-4c35-47b0-9c63-e54f046a3b13_10-dos-and-donts22.jpg)

As this image from UXMag demonstrates, we need to make sure that our clickable elements are between 7-10mm so they can be accurately tapped with a finger.

### Text Hierarchy
With their condensed screen sizes, we need to ensure that our mobile apps’ content is readable. By avoiding text that is smaller than 11 points and ensuring we have enough color contrast, users should be able to consume our content. As you’re designing mobile interfaces, make sure you test them out on an actual device to get a sense if they are legible or not.

### Avoid Unnecessary Inputs
Filling our forms and providing information is difficult on mobile devices. So, always try to keep your forms as concise as possible. When possible, consider presenting choices instead of inputs because it is easier for users to select an option from a list. Also, try to provide sane defaults so users don’t need to make an extraneous decisions.

### Delay Asking For Permissions
As Nick Babich explains in *10 Do’s and Don’ts of Mobile UX Design*, “Quite often the first thing we see when launching a just-downloaded app is a dialog box with a permission request (e.g. “Allow app X to use your location?”) When an app asks for permissions right at the start users often deny such permissions requests. Why? Because at this point, the user doesn’t have any context to make a decision. They don’t know why you need those permissions.

To mitigate such behavior, it’s better to ask for permissions in context and communicate the value the access will provide. Users are more likely to grant permissions if asked during a relevant task. Request permissions at launch only when it’s absolutely necessary for the core app experience.”

## Apple and Google’s Guidelines
In addition to the conceptual guidelines we just covered, Apple and Google have provided documentation that advises designers on creating usable mobile app designs.

### Apple’s Human Interface Guidelines (HIG)
The [iOS Human Interface Guidelines](https://developer.apple.com/design/human-interface-guidelines/ios/overview/themes/) is Apple’s design system for iOS or mobile devices. Not only does it detail specific application patterns, but it also provides additional guidance about the design principles to follow in order to deliver a consistent user experience.

By providing these guidelines, Apple is trying to improve the quality of apps on its mobile platforms and help them maintain their reputation for quality. While we could certainly disregard their advice for a compelling research-backed reason, we’ll almost always want to follow it. In doing so, we’ll deliver an experience that users will quickly adopt and thrive in.

As you start designing iOS experiences, frequently reviewing the guidelines will help you recognize when to use suggested patterns and when you’ll need to develop your own designs.

For example, oftentimes we’ll use a Tab Bar to switch between different sections of our app, like in this example from the guidelines:

![](https://tk-assets.lambdaschool.com/fad3f930-6406-4a3a-b689-dd74ce8368e3_TabBar.png)

This is a very common UI pattern, so we should definitely follow the guidelines. However, if we were working for Uber and needed to design their map experience, then we would use the guidelines as a starting point and add in our specific functionality.

Knowing when to use the guidelines and when to design your own solutions comes with familiarity and practice. To build up your understanding, start by reading the guidelines in their entirety. This will help you recognize scenarios when a guideline could help. Then, as you begin to design new iOS interfaces, try to break the screens into their component pieces.

For example, if you’re designing an app to share images then we’ll most likely need some sort of navigation and a way to view images. With our components in mind, we can review the documentation and figure out the common [navigation](https://developer.apple.com/design/human-interface-guidelines/ios/bars/tab-bars/) and [image presentation](https://developer.apple.com/design/human-interface-guidelines/ios/views/image-views/) patterns. If we reviewed the guidelines and there wasn’t any guidance, then we can start coming up with our own solution.

### Google’s Material Design
As its documentation explains, “[Material Design](https://material.io/design/introduction/) is a visual language that synthesizes the classic principles of good design with the innovation of technology and science.” It seeks to elevate user experiences across platforms by helping teams design tailored experiences that leverage a consistent and unified system. In other words, it’s Google’s own design system that can be used on the web, for apps, and any other medium.

If you’re familiar with Gmail, Google Drive, or other Google products then you’ve seen Material Design in action. It’s also used to design Android apps as well.

While the Material Design guidelines focus on the big picture design considerations, it also includes an extensive pattern library and various tools to help us implement Material Design in our work. Leveraging these assets can help us complete our Android designs faster and maintain our external consistency.

As you start designing Android experiences, frequently reviewing the guidelines will help you recognize when to use suggested patterns and when you’ll need to develop your own designs.

For example, oftentimes we’ll use a Tab Bar to switch between different sections of our app, like in this example from the guidelines:

![](https://tk-assets.lambdaschool.com/a2fabdd2-715b-4baa-9261-eb9f913c7587_mio-design2Fassets2F1PrVPyUvR5HvW5KcvIIy9s3T52Vy9jwN92Fbottom-app-bar-intro.png)

This is a very common UI pattern, so we should definitely follow the guidelines. However, if we were working for Uber and needed to design their map experience, then we would use the guidelines as a starting point and add in our specific functionality.

Knowing when to use the guidelines and when to design your own solutions comes with familiarity and practice. To build up your understanding, start by reading the guidelines in their entirety. This will help you recognize scenarios when a guideline could help. Then, as you begin to design new Android interfaces, try to break the screens into their component pieces.

For example, if you’re designing an app to share images then we’ll most likely need some sort of navigation and a way to view images. With our components in mind, we can review the documentation and figure out the common [navigation](https://material.io/design/components/app-bars-bottom.html) and [image presentation](https://material.io/design/components/image-lists.html) patterns. If we reviewed the guidelines and there wasn’t any guidance, then we can start coming up with our own solution.",,,,,,,,"Google Material Design,Apple's Human Interface Guidelines,A Comprehensive Guide To Mobile App Design,10 Do’s and Don’ts of Mobile UX Design",,UI Patterns II,Active,Intermediate UI,UX Design Core,,1,,,1
create a realistic budget/financial plan for yourself,,,"# Financial Planning, Offers, and Negotiation

**Personal finance directly ties in to how you approach your career choices, including a major source of stress for many candidates, offers and negotiations!**

**Many of you are trying to make a significant career change by joining Lambda School. While tech careers tend to pay pretty well, a lot of things will impact your income, including your previous experience and the local job market. It may take you a little more time to build up to a salary that can comfortably support you and your family, so understanding that reality and planning for it is crucial when approaching job offers and negotiations.**

**We’re covering this topic early on in your Lambda School journey because we want you to be prepared no matter when you are applying to jobs. Often, salary comes up in the first conversation you have with an employer, so it’s important to be ready for that conversation so you don’t sell yourself short!**

**Remember, negotiating your offers and planning your finances is deeply personal; there is no one right way to prioritize your money or career goals. Today we want to give you the information that you need to know your needs and your value so you can make an informed decision for yourself**


## Things to consider outside your control:
-   **The local job and talent market:** depending on where you live, the cost of labor will vary. In areas where there is a growing economy and not enough talented people to meet that demand, companies will compete for the available talent through higher pay, benefits, office perks, etc.
	-   This works in reverse too; if there are too many people and not enough demand for that labor, companies don’t have as much of an incentive to offer high salaries or great benefits
-   **Cost of living:** expensive places to live are often economic hubs. But there are other metro areas with great job markets that have lower costs of living
	-   Generally, more expensive = higher salaries, but this doesn’t always offset the increased cost of living in those areas   
	-   Other places may be affordable to live in but not have a strong tech job market, which drives up the real cost of living for many people who struggle to find employment despite being skilled
-   **The economy:** When the economy is constricting, the stock market is leveling off or in a downturn, or when interest rates are high, companies may tighten their financial belts and hire fewer people.


## Things to consider within your control:
-   **Savings:** depending on your savings, you may be able to afford to take a lower-paying job that offers amazing learning and growth potential. Savings shouldn’t supplement your income as a long-term solution, but knowing that you already have that emergency fund there can relieve some pressure if you accept a role that doesn’t allow you to save as much as you’d like to.
-   **Social safety net:** if your spouse makes enough money, or if you have the option of living with your relatives, this can also allow you more flexibility when exploring jobs and pay ranges
-   **Your career goals:** are you someone who needs to work for a mission-based company or organization? Nonprofits need developers, data scientists, and designers just like everyone else, but often pay less than for-profit businesses. This maybe a tradeoff you’re willing to make, but you can’t expect the same pay across all industries.
-   **Benefits, job perks, flexibility:** are there benefits like health care or flex working hours that are really important to you? You might need these for reasons outside of your control, but they’re important to consider- you might be willing to take a lower-paying job that has excellent benefits
-   **Relocation:** not everyone can just pick up and move, but keep in mind that other job markets may have more opportunities or better pay.

## Negotiation Pro Tips
-   **Always negotiate!** This is an expected part of the job process; most employers have a range they can offer for a role; it’s in their best interest to offer the lower end of that range, and they also know that you may try to negotiate, so they want to start low
	- You will never lose an offer for trying to negotiate in a professional and respectful manner. If a company tries to threaten you with this, you probably don’t want to work for them.
	- Once you have an offer, this is when you have the leverage; the company has decided you are the best person for the job and they want you, so now you have all the power in the situation! Use it!
-   **Do your research!**
	-   Being prepared is key; Glassdoor, Payscale, Ziprecruiter, and other sites are your friend! Start with a simple google search of “how much does a X developer get paid in Y city/town/region” and see what comes up. Try to narrow it down by company, but for smaller companies this might not be possible.
	-   ALWAYS consider the local job market/economy/talent pool. If you live in Jacksonville and ask for a salary that someone in Washington DC makes, the recruiter won’t take you seriously. Similarly, if you live in an area where the cost of labor is high, and ask for the national average for your role, you might miss out on ten of thousands of dollars per year
-   **They often start in the phone screen:** be prepared for this to come up in the very first conversation! Do your research, have a range in mind, and practice having the conversation multiple times so you’re ready for it.
	-   What you say in the first conversation will impact your negotiating power later on, so it’s important to not miss this opportunity
-   **Always give a range, and aim high:** If and when you do have to give a number, always give a range so you’re not locked into one amount. Research your expected range for the role, and always offer the higher end of that. So, if a junior data scientist makes on average $90-100k in your region, it’s appropriate to ask for $95-$105k
-   **Be realistic:** don’t ask for $200k for a junior developer role; you’ll look unprepared and the employer won’t take you seriously. But don’t ask for $50k when the average junior developer in your area is making >$80k!
-   **Treat it like a conversation:** it’s easy to feel like salary negotiation is a confrontation, with two people competing to get their way.
	-   You both have your priorities, so negotiation is just about understanding the other person’s (or company’s) needs and addressing how you can meet them.
	-   If you get an offer that seems way lower than you were expecting, it’s ok to ask how they arrived at that amount. After they explain, you can gently push back and say “based on my research, it seems like a range of $x-$y is standard for the local market; could you share how your compensation package aligns with that?”
-   **Compensation is about a lot more than just the salary**
	-   Compensation includes benefits, bonuses, equity, and perks in addition to cash.
	-   Consider the whole compensation package; this is another example of why it’s so important to know your financial needs and priorities going into any conversation with a company!
-   **Everything is negotiable:** you may not be able to negotiate your salary, but you could maybe negotiate an extra week off. You can also ask for a review at 3 or 6 months with consideration for a merit increase if your performance is good.
-   **Take at least 24 hours to consider an offer:** you never have to accept or even negotiate on the spot, and taking some time to think about things ups the ante a bit for the company, and gives you the chance to really evaluate the offer and prepare for a negotiation. You may ask for up to a week to consider an offer, but some companies may request you give them a final answer much sooner depending on their timeline.
-   **Always get it in writing:** if it’s not in writing, it doesn’t exist. You might agree on something verbally with your new manager, but what happens if your manager leaves 2 months in and the new person refuses to honor that agreement?
	-   Never sign anything until you have the full, agreed-upon offer in writing and you’ve reviewed everything thoroughly.

## Navigating Offers
-   **An offer isn’t an offer until it’s formal and in writing:** a recruiter reaching out to you on LinkedIn asking if you want to talk about a job isn’t an offer. Talking with a hiring manager at a networking event and setting up a time to chat about opportunities isn’t an offer.
	-   Until you go through an interview process and have a formal offer in writing, including salary and benefits, keep every door open and keep your eggs in multiple baskets.
-   **Don’t lie, but don’t be *too* transparent either:** some companies will ask if you’re interviewing at other companies. Give a vague, non-committal answer, and find a way to shift it back to the role you applied to with them
	- Ex. “I’m currently exploring all of my potential next career opportunities, and I was really excited to see how your company aligned with my skills in X, Y, Z and shares my values of A, B, C.”
-   **Once you’ve accepted an offer, stick with it:** accepting an offer, then ditching it if a better offer comes along, is a major faux-pas.
	-   This can be tough if your dream company wants to interview you, but consider that rescinding your acceptance or leaving a new job early can burn that bridge forever.
	-   People also talk; you never know who your manager or team member at that burned company knows
-   **If you get an offer while you’re still interviewing elsewhere, tread lightly:** if you get an offer while interviewing for another role you want more, it’s ok to ask for some time to consider the offer (up to a week is standard).
	-   They might say no- ask for as much time as they’re willing to offer, and immediately reach out to your first choice job to see if they can expedite the process
	-   Make it clear that while you’ve been offered another position, this job is your first choice, and ask if there is anything you can do to clarify your qualifications for the role. Also let them know when you need to get back to the other company by.
	-   At the end of the day, you may need to take a risk and turn down the offer in the hopes that the other job works out, or accept the offer you’re less excited about.
	-   No matter what you choose, own your decision!
-   **If you accept an offer, tell other companies:** don’t ghost! It’s a professional courtesy to send a brief email thanking the other company(ies) for their consideration, and that you’ve accepted a role elsewhere.
	-   BONUS: keep the door of communication open; you might want to come back to that company one day so end on good terms!",,"1) Complete the budgeting spreadsheet (copy it and create your own copy) and prepare a paragraph to discuss with your PM on Friday about what you learned about your current or goal financial habits (you should not share your budget with your PM, or any personal information that makes you uncomfortable!): https://docs.google.com/spreadsheets/d/1Avpn9zSrcvMbWCr7FomzHRuPHGAOTnc3tZ_x7nwNb2c/edit#gid=663212638

2) Research 5 job titles that you are interested in and would be qualified for. Research the average salary and standard benefits for these roles. Document the high end and low end for these roles, your non-negotiables (benefits), and your walk-away figure for each title. (Glassdoor is a great resource!)",,,,,Money Moves: Financial Planning and Salary NegotiationsAll changes saved.,"Considering the Offer 1-Pager,Budgeting Spreadsheet,Salary Negotiation Talking Points",,"""Financial Planning, Offers, and Negotiations""",,"""Financial Planning, Offers, and Negotiations""",Career Readiness,PersonalFinances (1).key (https://dl.airtable.com/.attachments/730d1af1a3c9485d6eed3a57162e431e/8dc7b5a4/PersonalFinances1.key),0,1,,1
begin to research salary and benefits for a company/role,,,,,,,,,,,,,"""Financial Planning, Offers, and Negotiations""",,"""Financial Planning, Offers, and Negotiations""",Career Readiness,,0,,,0
navigate salary conversations at any point in the interview process,,,,,,,,,,,,,"""Financial Planning, Offers, and Negotiations""",,"""Financial Planning, Offers, and Negotiations""",Career Readiness,,0,,,0
present their work in a professional and engaging manner,Many stakeholders are involved in the design process. We need to be able to present our work to keep them well informed and aligned.,,"Design doesn’t happen in isolation. It is a collaborative enterprise that involves users, business stakeholders, engineers, other designers, and everyone else interested in the success of our products. Keeping all of these people informed about our progress and work is part of our job as UX designers. To do so, we’ll frequently give presentations that provide this information.

While we typically picture presentations as these big, formal events, there are actually many different types. Of course, you will have to give big, formal presentations to large groups of people, but there are also many ad-hoc presentations that occur throughout the workday. In these ad-hoc presentations, you could be sharing your work with a coworker, your boss, or even a small group of teammates. 

As [Jon Kolko](http://www.jonkolko.com/) explains, regardless of the fidelity of your presentation, there are three important concepts to keep in mind when presenting.

First, every presentation is a change for you to gain or lose something. If you can deliver an effective presentation, then you’ve gained buy-in and credibility, and your audience will leave with a positive view of your content and you. In a professional setting, this is incredibly important because ideas live or die based on how people feel, not on objective criteria or assessment. As much as we like to believe we are these hyper-rational creatures, emotions play an enormous part in our decision-making process. 

If you deliver a poor presentation, you’ve lost the opportunity to gain something, like funding, credibility, acknowledgment, or helpful criticism. Every presentation you give can have positive or negative outcomes. The stakes are high, even for ad-hoc presentations, so we need to prioritize our presentations as importantly as our design work.

Second, every presentation is a structured conversation – even if you are the only one talking. When you’re conversing with someone, you don’t jump straight to your main point. Instead, you try to understand the viewpoint of the people you’re talking to and weave your ideas together with theirs. A conversation is empathetic because we try to understand the other person’s point of view and feelings. In doing so, our conversations revolve around sharing an idea or a story.

Presentations are the same. We need to actively consider our audience and consider what they know and don’t know. If we deliver a presentation without considering our audience, we can jump right into information that they have no context to parse. If they have no context, then they’ll just make free associations with the information we’ve provided, and they won’t help us gain the insights we need.

So, we need to focus on telling a narrative arc through our presentations to ensure that our audience has the context to interpret everything. Only then can they provide the targeted feedback, advice, and support we need.

Lastly, you feed the energy in the room, while your participants consume it. You should be leaving a presentation feeling proud but exhausted because only then have you truly put your energy into it. Presentations are often a show, which means that the audience needs to understand the content and feel good about the decisions they made or the concepts they learned. Your demeanor dramatically impacts your audience’s takeaways. Talking in a low, monotone voice will bore your audience to tears and prevent them from absorbing the information you worked so hard to organize. But, if you’re excited about what you’re presenting, then that enthusiasm is contagious.","To deliver an effective presentation, there are three primary areas that you must focus on: content, audience, and delivery. Let’s look at each of these in more detail.

## Content
Without content, you don’t have a presentation. Making sure your content is well structured, clear, and conveys a narrative is critical to ensuring your presentation’s success. To create compelling content, there are several guidelines that you can follow.

### Tailor your material to your audience
The point of giving a presentation is to inform your audience about something. So, you must make sure your content is tailored to them. Giving a presentation to your senior managers will need a different tone and content than a presentation for other designers on your team.

### Build a narrative arc
Our presentations can leverage many story-telling techniques to be more effective. A narrative arc is a classic technique for organizing a story. It starts by setting context, then builds towards a key message, or climax, and finally wraps everything up.

![](https://tk-assets.lambdaschool.com/722e4ba2-b66a-4abe-b988-8dbf012f7f35_download.png)

By leveraging this technique, we can make our presentation more engaging and effective.

### Frame the discussion
As you build a narrative arc, the way you organize your content will have a dramatic impact on the story you tell. Framing the discussion helps ensure that our audience leaves with the message we want to impart and keeps them focused on the task at hand. To do so, we can keep in mind these concepts as we develop our content.

#### Set context and relevance
To shift the audience’s mind to your context and develop some early common ground, you must clearly set the context and relevance of the facilitation to the audience. 

#### Gain early buy-in
Create the opportunity for the audience to see the direct benefit and gain early buy-in. Use language to develop unconscious buy-in.

#### Deal with concerns
Where there are known or clearly anticipated objections that will influence the receptiveness of the audience, acknowledge them to consciously set them aside. 

#### Guide thinking/establish rules
Direct the audience’s mind to issues you want them to be focusing on and the mindset they need to successfully work through the agenda. Suggest to them how you want them to think and behave during the meeting. 

### Detayls mater!
It goes without saying that your presentations should be free from grammatical and spelling errors. We also need to make sure that the visual design is consistent and organized as well. People will immediately pick up on these details and each error puts a dent in your credibility.

### A powerpoint is for you, not them
This concept might be counterintuitive at first, but having a powerpoint is for you, not your audience. It is for your reference to make sure that your pacing and narrative arc are on the right track. The powerpoint should never be an information dump of everything you want to say or the primary focus of the audience. Instead, it should support your dialogue with key points, supporting details, and additional imagery.

### One thought per slide
You can have as many slides in a powerpoint as you like. So, don’t try to cram all of your content into the smallest number of slides possible. Instead, think about the logical transitions between each piece of content, and use new slides to help reinforce that transition. Doing so will help your presentation feel more fluid and on point.

### Do. Not. Read. Your. Slides.
If you’re going to read your slides, why didn’t you just put everything in an email instead of wasting everyone’s time with a presentation? Reading your slides is the most mind-numbing, ineffective, and lazy way to create a presentation. If you read your slides, you are telling everyone in that room that you do not care about their time or this information. 

Your slides should be used to support your presentation, not as an information dump. It’s up to you to actually deliver the information.

### You must intimately know the content
To deliver a presentation, you must be familiar with not just the content of the presentation but also the topic it is covering. If you do not know the material, then you don’t know enough about it to field questions, feel confident, or put it together in the first place.

If you need to present on a topic that’s unfamiliar to you, then the first thing you need to do is research and learn about it.

### Practice, but do not memorize
Memorizing our presentations makes us seem rigid and closed off, It also makes it easy to default to auto-pilot and lose the enthusiasm we need to deliver a good presentation. Practice, on the other hand, helps us feel prepared and comfortable with the material while still leaving room for tangents, questions, and unforeseen circumstances.

### Confidence
Confidence stems from knowing the content, from being prepared, and from practicing. It’s perfectly alright to feel nervous before presenting, or even a bit of stage fright. But, when you walk up to give that presentation your confidence will stem from you knowing that you did everything possible to prepare for this moment.

### Your introduction must be delivered well - rehearse it until you know it cold
The introduction is the first moment you have with your audience. It’s where you can set the stage, tone, and expectations for the rest of the presentation. Thus, it is the most important part of the entire presentation. Spending some extra timing polishing this content and practicing it will go a long way towards improving the outcome of your presentation.

### Conclude in control
Oftentimes our conclusions feel like an afterthought. However, this is one of our best chances to leave a lasting impression on the audience and frame any further discussions. As Jon Kolko explains, leaving an audience with a statement like ““Well, that’s about it.” is probably the worst way to end a presentation. It leaves the audience feeling a sense of doubt instead of a sense of confidence. Additionally, it leaves the room open to a chaotic question and answer session.

Instead, you need to end with a more confident summary of what you’ve presented and set the stage for the types of questions you would like to address. For example, if you’ve been presenting a new way of thinking about a business strategy, you can conclude by saying, “Today, we’ve discussed the new business strategy I’m proposing. We covered why I think it’s important, and the actionable way we’ll implement it. At this point, I would like to take questions. Specifically, I would like to hear about implementability. Do you feel that this work can be easily implemented?”

This type of ending is valuable for a few reasons. First, it summarizes the content—it helps the audience remember why they are there, and what they should take away from the presentation. It opens the room to questions, but only to questions of a certain type. And it steers the conversation to start with a specific area (can the work be easily implemented?) instead of leaving it open ended.”

## Audience
Ultimately, we give presentations to benefit our audience. If we didn’t think they would benefit, then why go through the trouble of creating a presentation? Understanding our audience and watching their reactions can help us deliver the best presentation possible.

### What do they know?
Always consider what your audience already knows about your subject. If you’re presenting to a bunch of designers, then you can use industry jargon as needed. If you’re presenting to senior management, then you’ll need to spend more time explaining or setting up the context for your design decisions.

By not considering what your audience knows, you easily bore people with information they already know or confuse them by jumping into details they have no idea about.

### What do they want?
We all want something. Understanding what your audience wants and aligning your presentation to fit those goals is an incredibly effective way of improving your presentation’s success. 

If you’re presenting a new design to your Chief Financial Officer, you might stress how it saves or makes the company money. If you’re presenting that same design to the engineering team, you might emphasize how they can leverage their existing technology to easily build it.

### What do the fear?
Whether they realize it or not, your audience is afraid of something. If your presentation can address and alleviate those fears, then the audience will be much more receptive to your proposals.

### Do your homework
Just like we conduct user research, we’ll need to research our audience to understand what the know, want, and fear. Setting up a few informal chats with members of your audience before your presentation can help you get more insight into them. Also, you’ll start to pick up on more of these details the longer you work at an organization.

### Watch their body language
If your audience looks bored, they probably are bored. Monitor your audience’s body language throughout your presentation and try to adjust your delivery and content on the file to make sure they stay engaged.

## Delivery
It’s a shame to see a good presentation completely derailed by poor delivery. Being able to deliver your presentation in an engaging, relatable, human way will guarantee its success.

### Set up the room
You should arrive at the space you’ll be presenting at least 30 minutes in advance of your presentation. You can use this time to get your presentation set up, sweep the floors, pick up any trash, adjust the blinds, clear the whiteboards, clean the table, push in the chairs, and design the environment for your presentation.

### Know your technology
The middle of your presentation is not the time to figure out how powerpoint works. Not knowing how to use your technology makes you look incompetent and damages your crediblity with everyone in the room. So, make sure you practice with all of the technology you plan to use so your presentation doesn’t get derailed.

### Emergencies
Things happen. Computers stop working or update randomly, projectors malfunction, screens go missing, the list goes on and on. No matter what happens, you still need to be prepared to give the presentation. So, you’ll need to make sure that you have prepared contingency plans in case something goes wrong.

- Backup presentation on USB
- Backup presentation on PDF
- Backup presentation on your phone
- Backup presentation printed
- Backup presentation in your head

### Body language
Your body language will communicate a great deal of information to your audience. At first, it may feel a bit awkward or unnatural to hold these positions. But, it will become easier with practice.

- Posture: Your back should be straight, your shoulders relaxed, and your feet should be planted.
- Facial expression: Try to maintain a friendly facial expression throughout the presentation.
- Eye contact: You should be making eye contact with each member of the audience as slowly as possible.
- Movement: When you’re just starting out, try to remain planted in one spot and avoid swaying in place. As you gain more experience, you can use movement to elicit different responses from the audience.
- Voice: You should speak in a loud, clear, slow, and upbeat voice.
- Gesture: Use your hands to make appropriate gestures that support your narrative. Otherwise, keep your arms by your sides and avoid crossing them or putting your hands on your hips.

### Questions
Fielding questions from your audience is a bit of an art that takes lots of practice to master. However, there are several best practices we can follow to help make this easier.

- Encourage questions throughout, but be ready to defer
- Understand the question, or don’t answer it
- Ask for clarification
- Remember to repeat or rephrase the question

### Do not get defensive
When someone is challenging your decisions or presentation, it can be easy to shut down and get defensive. However, everyone in that room is watching how you will respond. If you get defensive then everyone will see that is how you handle criticism. Instead, try to breathe, and focus on contextualizing the feedback within your presentation. Then, consider how it could help or hurt your objectives and respond appropriately. While it can be tempting, don’t raise your voice, try not to look too flustered, and don’t maintain your friendly demeanor.

### Take the applause
At the end, don’t demur any applause. Stand tall, smile, and say thank you - you’ve earned it.",,,,,,,,,Design Communication,,Intermediate UI,UX Design Core,,1,,,1
defend their design decisions,"Throughout your career, you will have to defend your design decisions to stakeholders, other designers, your boss, users, random people on the street, and pretty much everyone else. Being able to do so in a calm, thoughtful manner will help you stand out as a professional designer.",,"When it comes to design, everyone seems to have an opinion about it. While we should usually be open to hearing different perspectives and gathering opinions, at some point we’ll need to put out foot down and defend our design decisions to keep the project moving forward.

There are many ways to defend your design decisions. You could storm out of the office threatening to quit unless things go your way, or you could calmly walk people through your thought process so they understand your context and how you arrived at your decisions. One of these approaches is a bit more effective than the other and significantly increases your chances of keeping your job.","Being able to clearly and rationally articulate your design decisions and make a compelling case for them is a critical skill for any designer. To do so effectively, we can use the following process.

- Get on the same page
- Focus on the work
- Explain your rationale
- Support with facts, research, analytics, and best practices
- Success?",,,,,,,,,Design Communication,,Intermediate UI,UX Design Core,,1,,,1
professionally and empathetically critique work,Critiques are powerful tools for generating feedback and design direction.,,"A critique is a special, structured format for identifying problems and proposing solutions. For classically trained designers who went to art school, critiques were an essential part of their learning experience. Since a large portion of existing designers went to art school, we’ll frequently use critiques in the workplace to identify improvements in our designs.

Critiques are not the same as presentations. While presentations involve constructing a narrative and sharing your work, critiques solely revolve around identifying problems and proposing solutions. They are also only conducted within the design team and between designers.

Critiques follow a very structured format. Once the group has gathered, the person receiving the critique pins up all of their work in a physical space so everyone can see everything. This helps everyone grasp the larger context of the work and using physical documents makes it easier to suggest improvements because they can be directly written on. In a digital critique, we can use a tool like InVision to replicate many of the same benefits.

After the work has been presented, the person receiving the critique gives a big-picture summary of the work and what it is trying to accomplish. This should not be a thorough, detailed overview. As Jon Kolko explains, “The work should be self-explanatory. An explanation seems harmless, but it actually presents a defensive position, as if the student needs to rationalize their design decisions. That creates a dynamic of “me vs. them”, and that’s not healthy in a critique.”

Instead of focusing on the details of the design, the person receiving the critique shout set the boundaries or parameters of the critique. For example, they may say, “For this critique, I want to focus on the way I’ve laid out the navigation for the user. I would like feedback on if the navigation is clear. Please don’t offer feedback on the graph down here, because I’m still working on that.” Setting up these boundaries helps them receive the feedback they are looking for while providing a focus for the people giving the critique.

At this point, the critique is ready to begin. You will have different things to do depending on whether you are giving or receiving feedback.

## If you are critiquing… 
- Think before you speak
- Be succinct and very, very detailed
- Have a solution or at least the idea of one
- Don’t point out something good
- Critique the design, never the person

## If you are receiving the critique…
- Don’t defend your work
- Be quiet
- Write it all down
- Extract more details
- You don’t have to agree",,,,,,,,,,Design Communication,,Intermediate UI,UX Design Core,,1,,,1
write code that utilizes Python Collections,This objective is designed to introduce students to the similarities and differences Python Collections (compared to what they have implemented in previous languages).,"Covers Lists, Tuples, Sets, Dictionaries","There are several ways for us to store groups or _collections_ of data in Python. Four built-in ***Collections*** we will explore are `Lists`, `Tuples`, `Sets`, and `Dictionaries`. Additional collections are available if you import other modules into your project.","Let’s learn about how some of the built-in containers in Python differ from similar containers that you've used in other languages. 

We will write programs to see how Python implements:

* `Lists` (arrays in other languages)
* `Tuples`
* `Sets`
* `Dicts` (hashes or objects in other languages)","Can you write the line(s) of code that will...
1. Create a `list` of with _10_ random numbers between **-25 and 25**?
2. Use the `list` from question 1 and, utilizing a `list comprehension`, to create a new `list` that only contains the _negative_ numbers?
3. Create a `tuples` with _3_ of your favorite foods, loop through the `tuple` and print out each item?
4. Create a `set` of 10 random numbers between **1 and 100**, search the `set` for the value **50** and then print out a statement indicating whether or not the set contains **50**?
5. Create a `dictionary` containing some of your favorite books or movies and a **numerical rating from 1 to 5** for each item?
6. Remove one of the original entries from the `dictionary` you created in questions 5 and add a new entry.",fxDQzub2AtI,http://youtube.com/watch?v=fxDQzub2AtI,https://www.youtube.com/embed/fxDQzub2AtI,,,,,Introduction to Python I,,Intro to Python/OOP,"Computer Science, DS - Computer Science",,1,1,1,3
demonstrate an understanding of association through appropriate class design,"Now that you have explored inheritance relationships, we will look at another category of class relationships - ***association***.",,"There are many examples of objects or constructs that exist in the real-world and _are_ related to each other that **do not** have hierarchical, inheritance relationships. We need another way to describe relationships that are more accurately described as _""has-a""_ relationships. In object-oriented design, these relationships are known as ***associations***.","We will practice implementing association by:
* Creating custom classes that exhibit _""has-a""_  relationships
* Using one custom class when creating attributes of another custom class

For example, let's think about the relationship between a `Book` and its `Author`. These classes are definitely related. However, it doesn't make sense to say that a `Book` _""is-an""_ `Author` (or vice versa), so we wouldn't define the relationship as inheritance though. However, since a `Book` does _""have-an""_ `Author`, we could classify this as ***association*** and implement the Author as an `attribute` in our `Book` class.

```python 
class Book:
    def __init__( self, name, year, author_first, author_last ):
 	self.name = name
        self.year = year
	self.author = Author( author_first, author_last )

    # class functions would be added here  
```

`Book` _""has-an""_ `Author`

```python
class Author:
    def __init__( self, first, last ):
 	self.first = first
        self.last = last

    # class functions would be added here  
```","1. What is an example of two classes that would be related through ***composition***?
2. What is an example of two classes that would be related through ***aggregation***?",Dpc0Ajah2Ns,http://youtube.com/watch?v=Dpc0Ajah2Ns,https://www.youtube.com/embed/Dpc0Ajah2Ns,,,,,Introduction to Python II,,Intro to Python/OOP,"Computer Science, DS - Computer Science",,1,1,1,3
"work with a team to deliver a product that an end user will perceive as being done, professional looking, and largely similar to the other apps and sites the use every day","Humans are visual, tactile creatures.  How something looks and feels is as important as how well it is engineered behind the facade.  Developers are responsible for implementing the vision of a designer and creating a product that looks as good as it works.",,,,,,,,,,,,Project Milestones - Presentation,,Labs IV - User Testing and UX Planning,Lambda Labs,,0,,,0
understand the design handoff process,"Handing off your designs is a common practice that occurs several times throughout the product creation process.  The better you understand the process and the parties involved, the better equipped you’ll be to make a successful handoff.",,"A design handoff happens when a designer passes off the design to the development team for final implementation. Do not get hung up on the word 'final' here. Even though we are handing our designs over for execution, it does not mean that the design process is over. Usability testing, iteration, and additional design to development handoffs can and likely will continue to happen after this point. The design handoff marks a spot in the process where developers need to implement the design in its current state. Regardless if the design will be executed or not, it is essential that we, as designers, keep several things in mind throughout this process.

Designers and developers generally come from different backgrounds. They have different skill sets and different interests throughout the design and development process. Designers and developers also think about challenges differently. As designers collaborating with development teams, we need to understand how our needs differ, and what we can do to make the process as smooth as possible. Fortunately, we have several tools at our disposal to help us smooth over any potential communication gaps with ease. InVision is one such tool.

Design to development handoffs can fail. The reason for failure can include issues on both sides of the aisle. These issues include a lack of knowledge sharing, additional feedback loops, lack of handoff tools or inability to properly use handoff tools, among several others. According to InVision, the most common problem is a lack of communication between designers and developers. Streamlining the handoff process and using the proper tools will immensely help to alleviate these issues.

We know that communication is one of the most significant issues with design handoffs. That begs the question, how do we improve communication? Bringing developers into the design process early on will help prepare developers for the designs that you're creating. Getting feedback from developers is another way to ease your design handoff. If we can get our designs in front of developers early, we have the opportunity to address issues well before the handoff. Also, ensuring that we incorporate developers ideas into prototyping and brainstorming sessions will ensure that we're all on the same page early in the design process. Remember, although we are designers, great ideas can come from anyone.

Design systems have a significant effect on the success of the design handoff. From our experience, we know that design systems are an investment. Design systems take time to make, and time to maintain. Some companies even employ people full-time to focus their efforts on supporting a design system. Lacking a design system makes both the job of the designer and the developer more difficult. Design systems contain clear parameters to work within. These parameters significantly alleviate inconsistencies in the experience for all parties involved.",,,,,,,"A Comprehensive Guide to Executing the Perfect Design-To-Development Handoff,Design Handoff Guide: What Makes Good Designer-Developer Collaboration?",,,Design Handoffs and Dev Collaboration,,Prototyping,UX Design Core,,1,,,1
understand how to prepare your designs for handoff,"When handing off design artifacts, it’s important to understand the needs of the audience that you’re handing off to. The design handoff process is as much about your workflow as it is about the person consuming the artifacts.",,"Before we handoff our designs, we need to ensure that we clean up our document to the best of our ability. First, we want to ensure that your layers are appropriately named. Take time to meet with your developers and ask them if they have preferences for naming layers. Aside from developer preferences, make sure that you sensibly name your layers in a way that describes the purpose of that layer. For example, change layer names with the word 'copy' in their title. Cleaning up your document and correctly naming your layers will save you and the developers time during handoff and in future iterations.

You will also want to communicate to your developers the type of grid system you're using. Although the spacing will be outlined in the spec document (we'll get to that), communicating the grid system will make their job all the easier. For example, when we were using the Material design system, we were leveraging an 8pt grid, with 4pt spacing in unique instances. It's important to note that the 8pt grid system is a great system to use with today's multitude of screen sizes as almost all the screen-sizes today are divisible by 8.

What about design interactions? Our designs may include complex interactions that are difficult to understand by looking at a static mockup. If you're able to make an interactive mockup out of your designs, you may not need to do any additional work. You'll need to tell the developers to reference the interactions in your prototype to understand the interaction design better. You may also use intelligent commenting in InVision or a similar application to inform the developers of specific interactions throughout your designs if you choose to forgo (or cannot reasonably create) and interactive prototype.

Let's talk about copy for a moment. Because the copy is likely to change several times, possibly even after you high-fidelity designs are complete, I recommend listing all text in a table using an independent tool. A few tools that I support include Google Sheets, Microsoft Excel, and Paper by Dropbox. Begin creating a 3-column table. First, you'll want to specify where the copy is located. The table can be grouped by page if it makes sense for your design. In the next column, you'll want to add the context of the copy or the heuristic. For example, this includes if the text is for a member vs. a non-member. Finally, you'll want to add the message or copy itself. 

Last, but not least, you should maintain a checklist of missing features and cases that still need designs. This checklist does not need to be managed by the designer. The list of screens should be maintained by whoever keeps track of design completion. This checklist should include the pages or states that you need to design, the status of the design (not started, in progress, complete), a dependency (if there is one), and a comment describing the need. You will need to ensure that this checklist functions as a single source of truth for the project. In other words, if participants don't list a screen on the checklist, the screen doesn't need to be created.",,,,,,,Decreasing friction in the design-to-development handoff,,,Design Handoffs and Dev Collaboration,,Prototyping,UX Design Core,,1,,,1
understand how to uplaod your designs to InVision to prepare for a proper handoff,There are several tools and processes that can be used for a design handoff. Your personal preferences and the needs of the team will dictate the tools and processes that work best.,,"There are several tools that you can use to conduct your design handoff. These tools include InVision (our tool of choice for today) Marvel App, and Zeplin to name a few. Of course, I'm only mentioning tools that will create most of the specs for you. If you choose to go it alone, you can use nearly any tool you wish. However, the tools that I've mentioned will make the design handoff process much simpler for everyone involved.

We'll be uploading our designs to InVision the same way we have before; with the Craft plugin via Craft Sync.  Once we are in InVision, there are specific tools that I'll review that will allow our team to access measurements, colors, and assets for desktop and mobile prototypes. Team members will also be able to export assets and generate code for any design element! Getting our designs into InVision and Inspect is just a matter of us properly organizing our layers in our Sketch file and letting the tools do the rest.

If we choose to use a tool like Inspect by InVision for our project, we need to inform everyone on the team of our intent and explain exactly how we plan to use the tool. If we're collaborating with developers, we'll want to introduce them to the tool (if they aren't familiar), give them access, and provide them with a chance to ask any questions before we hand off design assets. 

There may be instances where we want to include additional comments without our prototypes. For example, we may want to explain how a specific element behaves in a particular situation. Or we may want to call out a particular difference between two similar looking screens. We can do this by using comments. InVision, Marvelapp, and Zeplin all can leave public comments directly on our mockups. When a team member views these comments, they will also be able to respond with additional questions if they need further clarification. 

Another useful function that many of the tools as mentioned earlier have is History Mode. Specifically, InVision allows users to use History Mode to see previous iterations of a design. Designers can leverage this tool to view older versions of their work. On the other hand, developers may want to know how a design has changed since they last saw them. If developers are aware of how to use History Mode, this can save both time and effort for designers. With History Mode, you no longer have to dig through old files and try to remember what you presented at what meeting. All designs are available at all times. ",,,,,,,InVision Inspect,,,Design Handoffs and Dev Collaboration,,Prototyping,UX Design Core,,1,,,1
work with combinations of parent and sub-classes,,,,,,,,,,,,,Inheritance and Polymorphism,,Intermediate Java,Android Development Core,,0,,,0
override methods in a subclass,,,,,,,,,,,,,Inheritance and Polymorphism,,Intermediate Java,Android Development Core,,0,,,0
write a set of inherited classes,,,,,,,,,,,,,Inheritance and Polymorphism,,Intermediate Java,Android Development Core,,0,,,0
explain what it means to inherit from a class,,,,,,,,,,,,,Inheritance and Polymorphism,,Intermediate Java,Android Development Core,,0,,,0
use interfaces as callbacks,,,,,,,,,,,,,Abstraction and Interfaces,,Intermediate Java,Android Development Core,,0,,,0
define and implement interfaces,,,,,,,,,,,,,Abstraction and Interfaces,,Intermediate Java,Android Development Core,,0,,,0
work with abstract classes,,,,,,,,,,,,,Abstraction and Interfaces,,Intermediate Java,Android Development Core,,0,,,0
define abstract methods,,,,,,,,,,,,,Abstraction and Interfaces,,Intermediate Java,Android Development Core,,0,,,0
write generic classes,,,,,,,,,,,,,Java Generics,,Intermediate Java,Android Development Core,,0,,,0
write generic methods,,,,,,,,,,,,,Java Generics,,Intermediate Java,Android Development Core,,0,,,0
explain what a generic object is,,,,,,,,,,,,,Java Generics,,Intermediate Java,Android Development Core,,0,,,0
explain the role of the Object class,,,,,,,,,,,,,Java Generics,,Intermediate Java,Android Development Core,,0,,,0
avoid code which could result in deadlocks,,,,,,,,,,,,,Concurrency,,Intermediate Java,Android Development Core,,0,,,0
use locks and semaphores to share data safely,,,,,,,,,,,,,Concurrency,,Intermediate Java,Android Development Core,,0,,,0
identify code that could cause race conditions,,,,,,,,,,,,,Concurrency,,Intermediate Java,Android Development Core,,0,,,0
identify situations where multiple threads are useful,,,,,,,,,,,,,Concurrency,,Intermediate Java,Android Development Core,,0,,,0
inspect the user interface using layout inspector,,,,,,,,,,,,,Performance Testing,,Android Code Quality,Android Development Core,,0,,,0
inspect CPU activity and traces with CPU Profiler,,,,,,,,,,,,,Performance Testing,,Android Code Quality,Android Development Core,,0,,,0
inspect energy usage with Energy Profiler,,,,,,,,,,,,,Performance Testing,,Android Code Quality,Android Development Core,,0,,,0
inspect network traffic with Network Profiler,,,,,,,,,,,,,Performance Testing,,Android Code Quality,Android Development Core,,0,,,0
inspect the Java heap and memory allocations with Memory Profiler,,,,,,,,,,,,,Performance Testing,,Android Code Quality,Android Development Core,,0,,,0
work with the high level Android Profiler,,,,,,,,,,,,,Performance Testing,,Android Code Quality,Android Development Core,,0,,,0
use Roboelectric to test activity functionality,,,,,,,,,,,,,Unit Testing,,Android Code Quality,Android Development Core,,0,,,0
perform additional setup to test more complicated code,,,,,,,,,,,,,Unit Testing,,Android Code Quality,Android Development Core,,0,,,0
implement simple unit tests using JUnit,,,,,,,,,,,,,Unit Testing,,Android Code Quality,Android Development Core,,0,,,0
understand and explain the purpose of unit testing,,,,,,,,,,,,,Unit Testing,,Android Code Quality,Android Development Core,,0,,,0
understand the iterative workflow with test driven development,,,,,,,,,,,,,Unit Testing,,Android Code Quality,Android Development Core,,0,,,0
create a custom matcher tor testing,,,,,,,,,,,,,UI Testing,,Android Code Quality,Android Development Core,,0,,,0
create an espresso test,,,,,,,,,,,,,UI Testing,,Android Code Quality,Android Development Core,,0,,,0
setup to test an activity,,,,,,,,,,,,,UI Testing,,Android Code Quality,Android Development Core,,0,,,0
configure an app to be tested with espresso,,,,,,,,,,,,,UI Testing,,Android Code Quality,Android Development Core,,0,,,0
understand and explain the purpose of UI Testing,,,,,,,,,,,,,UI Testing,,Android Code Quality,Android Development Core,,0,,,0
manipulate media playback,,,,,,,,,,,,,Media Programming,,Additional Android,Android Development Core,,0,,,0
prepare media asynchronously,,,,,,,,,,,,,Media Programming,,Additional Android,Android Development Core,,0,,,0
play video files from either location,,,,,,,,,,,,,Media Programming,,Additional Android,Android Development Core,,0,,,0
play audio from the local file system or internet,,,,,,,,,,,,,Media Programming,,Additional Android,Android Development Core,,0,,,0
play audio from app resources,,,,,,,,,,,,,Media Programming,,Additional Android,Android Development Core,,0,,,0
enable and work with a navigation drawer in Java,,,,,,,,,,,,,Menus,,Additional Android,Android Development Core,,0,,,0
define a navigation drawer in XML,,,,,,,,,,,,,Menus,,Additional Android,Android Development Core,,0,,,0
respond to options menu selections,,,,,,,,,,,,,Menus,,Additional Android,Android Development Core,,0,,,0
add an options menu to the action bar,,,,,,,,,,,,,Menus,,Additional Android,Android Development Core,,0,,,0
define a menu in XML,,,,,,,,,,,,,Menus,,Additional Android,Android Development Core,,0,,,0
understand and explain where menus are used,,,,,,,,,,,,,Menus,,Additional Android,Android Development Core,,0,,,0
upload app,,,,,,,,,,,,,Google Play Store,,Additional Android,Android Development Core,,0,,,0
create a store listing,,,,,,,,,,,,,Google Play Store,,Additional Android,Android Development Core,,0,,,0
set up account,,,,,,,,,,,,,Google Play Store,,Additional Android,Android Development Core,,0,,,0
sign app,,,,,,,,,,,,,Google Play Store,,Additional Android,Android Development Core,,0,,,0
build apk file,,,,,,,,,,,,,Google Play Store,,Additional Android,Android Development Core,,0,,,0
version app,,,,,,,,,,,,,Google Play Store,,Additional Android,Android Development Core,,0,,,0
prepare app for release,,,,,,,,,,,,,Google Play Store,,Additional Android,Android Development Core,,0,,,0
move coroutine execution from one thread to another,,,,,,,,,,,,,Kotlin Coroutines,,Kotlin,Android Development Core,,0,,,0
spin up coroutine,,,,,,,,,,,,,Kotlin Coroutines,,Kotlin,Android Development Core,,0,,,0
prepare methods to be run on coroutines,,,,,,,,,,,,,Kotlin Coroutines,,Kotlin,Android Development Core,,0,,,0
use annotations to ensure proper threading,,,,,,,,,,,,,Kotlin Coroutines,,Kotlin,Android Development Core,,0,,,0
set up app to work with coroutines,,,,,,,,,,,,,Kotlin Coroutines,,Kotlin,Android Development Core,,0,,,0
explain the advantage of Coroutines other Async patterns,,,,,,,,,,,,,Kotlin Coroutines,,Kotlin,Android Development Core,,0,,,0
feel welcomed to and informed about Lambda School's Java Back End course!,,,,,,,,,,Introduction Document,,,Introduction and Software Installations,,,,,0,,,0
install software on their Windows Based Computer.,,,,,,,,,,Install JDK 11 on Windows,,,Introduction and Software Installations,,,,,0,,,0
install JDK version 11 on a Windows 10 based Computer,,,,"The basic steps to installing the software are:

* Download and install the Windows software from:  
https://www.oracle.com/technetwork/java/javase/downloads/jdk11-downloads-5066655.html

Note that you have to accept the licensing agreement before you can download the software
* add to environment variable JAVA_HOME C:\Program Files\Java\jdk-11.0.2
* add to path C:\Program Files\Java\jdk-11.0.2\bin

To test the installation
* java -version
* javac -version",,XQfRnglIcYE,http://youtube.com/watch?v=XQfRnglIcYE,https://www.youtube.com/embed/XQfRnglIcYE,,,,,Software Installations for Windows 10,,Java Back End Introduction and Software Installations,Java Backend Development,,0,,1,1
configure Jet Brains IntelliJ IDEA IDE to their preferences,,,"The Jet Brains IntelliJ IDEA Ultimate Version is installed from your GitHub Student Package. We do need the Ultimate Version for the class. When installing, taking the defaults is the best way to proceed.

This video shows how your instructor has configured his IDE. You may have your own preferences.","Some notes on configuration:

* Under Code Folding, only the show Code Folding Menu should be checked
* All Braces placement should say Next Line
* All places should say Force Braces
* Only Annotations should be wrapped
* Remember to connect your GitHub profile to IntelliJ",,OswS2dkvjnU,http://youtube.com/watch?v=OswS2dkvjnU,https://www.youtube.com/embed/OswS2dkvjnU,,,,,"Software Installations for Windows 10,Software Installations for Mac,Software Installations for Linux (Ubuntu 18)",,"Java Back End Introduction and Software Installations, Java Back End Introduction and Software Installations, Java Back End Introduction and Software Installations","Java Backend Development, Java Backend Development, Java Backend Development",,0,,1,1
install the Sublime Text Editor on a Windows 10 based computer,,,,Download and install the Windows software from https://www.sublimetext.com/,,Rk6sm0i2luE,http://youtube.com/watch?v=Rk6sm0i2luE,https://www.youtube.com/embed/Rk6sm0i2luE,,,,,Software Installations for Windows 10,,Java Back End Introduction and Software Installations,Java Backend Development,,0,,1,1
install Git and Git Bash on a Windows 10 based computer,,,,"Surf to the site https://gitforwindows.org/
Download and install the software

To configure Git, enter the following from a command prompt
* git config --global user.name ""<Your Name>""
* git config --global user.name ""<Your GitHub email address>""",,QElJOX2wdfc,http://youtube.com/watch?v=QElJOX2wdfc,https://www.youtube.com/embed/QElJOX2wdfc,,,,,Software Installations for Windows 10,,Java Back End Introduction and Software Installations,Java Backend Development,,0,,1,1
install Postman on a Windows 10 based computer,,,,Download and install the software from https://www.getpostman.com/,,q-cw1IVvgzQ,http://youtube.com/watch?v=q-cw1IVvgzQ,https://www.youtube.com/embed/q-cw1IVvgzQ,,,,,Software Installations for Windows 10,,Java Back End Introduction and Software Installations,Java Backend Development,,0,,1,1
install Heroku CLI on a Windows 10 based computer,,,,"* Create a free Heroku Account at https://www.heroku.com
* Download and install the Heroku CLI software from https://devcenter.heroku.com/articles/heroku-cli
* To test, from a command prompt type
heroku login
",,s6QI9rHUd9E,http://youtube.com/watch?v=s6QI9rHUd9E,https://www.youtube.com/embed/s6QI9rHUd9E,,,,,Software Installations for Windows 10,,Java Back End Introduction and Software Installations,Java Backend Development,,0,,1,1
install Tomcat on a Windows 10 based computer,,,,"* Download and install the software from https://tomcat.apache.org/download-90.cgi
* Tomcat by default installs as a Windows Service running on port 8080
* To test surf to localhost:8080 and see the Tomcat opening page appear",,ujTiDoTkcQ4,http://youtube.com/watch?v=ujTiDoTkcQ4,https://www.youtube.com/embed/ujTiDoTkcQ4,,,,,Software Installations for Windows 10,,Java Back End Introduction and Software Installations,Java Backend Development,,0,,1,1
install PostgreSQL on a Windows 10 based computer,,,,"* Download and install the software from https://www.enterprisedb.com/downloads/postgres-postgresql-downloads
* Install all the available software from the download. At the end, you do not need to launch Stack Builder at this time.
* You must restart your machine after this install.",,y1DV86i9vDY,http://youtube.com/watch?v=y1DV86i9vDY,https://www.youtube.com/embed/y1DV86i9vDY,,,,,Software Installations for Windows 10,,Java Back End Introduction and Software Installations,Java Backend Development,,0,,1,1
install RabbitMQ on a Windows 10 based computer,,,,"Install the Erlang software. RabbitMQ requires this development system to be installed first:
* Surf to http://www.erlang.org/downloads
* Download the 64 bit software for Windows
* Install the software as an Administrator

Now install the actual RabbitMQ Server
* Surf to https://www.rabbitmq.com/install-windows.html and install the software
* Add the RabbitMQ installation directory to your path
* Test by running from the command prompt: rabbitmqctl version. You should get a response showing the version of rabbitmq installed.",,EjSuWP7m0kk,http://youtube.com/watch?v=EjSuWP7m0kk,https://www.youtube.com/embed/EjSuWP7m0kk,,,,,Software Installations for Windows 10,,Java Back End Introduction and Software Installations,Java Backend Development,,0,,1,1
install Redis on a Windows 10 based computer,,,,"Redis only runs on Linux. In order to run a Windows 10 based computer, a Linux subsystem must first be installed.
* Verify that the Windows 10 version is greater than 1709 by running winver from a command prompt. If the Windows version is less than 1709, upgrade the system. The upgrade is available free from Microsoft through the Windows Update Process.
* From a Powershell prompt being run as Administrator, enable a Linux subsystem with the command: 
Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux
* Surf to https://www.microsoft.com/en-us/p/ubuntu-1804/9n9tngvndl3q
* Download and install the Ubuntu 18 subsystem. Ubuntu is a version of Linux

After launching the subsystem, run the following commands to install Redis
* sudo apt-get update
* sudo apt-get upgrade
* sudo apt-get install redis-server
* sudo service redis-server restart

To verify the installation:
* from a command prompt, run redis-cli -v
This should return the version of Redis installed on the computer.
* from a command prompt, run redis-cli ping
Redis should respond with pong",,onPnY7Y08tM,http://youtube.com/watch?v=onPnY7Y08tM,https://www.youtube.com/embed/onPnY7Y08tM,,,,,Software Installations for Windows 10,,Java Back End Introduction and Software Installations,Java Backend Development,,0,,1,1
install Homebrew on a Mac computer,,,,"To install Homebrew, first install the Xcode CLI. Alternatively, install the full Xcode software provided by Apple.
* To install the Xcode cli, from a terminal prompt enter 
xcode-select --install
* To install Homebrew, from a terminal prompt enter
ruby -e ""$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)""
* To test the Homebrew installation, from a terminal prompt enter
brew doctor
",,51jnG_-_7tE,http://youtube.com/watch?v=51jnG_-_7tE,https://www.youtube.com/embed/51jnG_-_7tE,,,,,Software Installations for Mac,,Java Back End Introduction and Software Installations,Java Backend Development,,0,,1,1
install the JDK 11 on a Mac computer,,,,"Download and install the dmg software from https://www.oracle.com/technetwork/java/javase/downloads/jdk11-downloads-5066655.html
In order to download the software, first accept the licensing agreement.

To configure the software
* determine the java home path. From a terminal prompt enter
/usr/libexec/java_home -v11
* Go to your home directory. Enter
cd 
* Edit your user profile. Enter
nano .bash_profile
* At the end of the file, add
export JAVA_HOME=""<directory found earlier>""
* Exit nano and restart your computer.

To test the software, from a terminal prompt enter
* java -version
* javac -version
both should respond with version numbers
",,SEhvkT_eQ5k,http://youtube.com/watch?v=SEhvkT_eQ5k,https://www.youtube.com/embed/SEhvkT_eQ5k,,,,,Software Installations for Mac,,Java Back End Introduction and Software Installations,Java Backend Development,,0,,1,1
install Sublime Text editor on a Mac computer,,,,Surf to the website https://www.sublimetext.com/ and install the software,,XvgrHxmNsvQ,http://youtube.com/watch?v=XvgrHxmNsvQ,https://www.youtube.com/embed/XvgrHxmNsvQ,,,,,Software Installations for Mac,,Java Back End Introduction and Software Installations,Java Backend Development,,0,,1,1
install Postman on a Mac computer,,,,Surf to the website https://www.getpostman.com/ and install the software,,PSrRNnZgLXI,http://youtube.com/watch?v=PSrRNnZgLXI,https://www.youtube.com/embed/PSrRNnZgLXI,,,,,Software Installations for Mac,,Java Back End Introduction and Software Installations,Java Backend Development,,0,,1,1
Install Heroku CLI on a Mac computer,,,,"Create a free Heroku account at the website https://www.heroku.com

Install the Heroku CLI. At a terminal prompt, enter
brew tap heroku/brew && brew install heroku

Test Heroku by entering a terminal prompt
heroku login
",,ty5xkk-P8qs,http://youtube.com/watch?v=ty5xkk-P8qs,https://www.youtube.com/embed/ty5xkk-P8qs,,,,,Software Installations for Mac,,Java Back End Introduction and Software Installations,Java Backend Development,,0,,1,1
install Tomcat on a Mac computer,,,,"To install the software
* brew install tomcat
* brew services start tomcat
The configuration file can be found at
/usr/local/Cellar/tomcat/9.0.17/libexec/conf",,vM0TDbm09LM,http://youtube.com/watch?v=vM0TDbm09LM,https://www.youtube.com/embed/vM0TDbm09LM,,,,,Software Installations for Mac,,Java Back End Introduction and Software Installations,Java Backend Development,,0,,1,1
install PostgreSQL on a Mac computer,,,,"* Download and install the software from https://www.enterprisedb.com/downloads/postgres-postgresql-downloads
* Install all the available software from the download. At the end, you do not need to launch Stack Builder at this time.
* You must restart your machine after this install.

NOTE:

If you run into issues, try entering the following command in a terminal window. Then try to reinstall!  
sudo spctl --master-disable",,JU7rIkXyQYs,http://youtube.com/watch?v=JU7rIkXyQYs,https://www.youtube.com/embed/JU7rIkXyQYs,,,,,Software Installations for Mac,,Java Back End Introduction and Software Installations,Java Backend Development,,0,,1,1
install RabbitMQ on a Mac computer,,,,"Using Homebrew from a terminal prompt, enter
* brew update
* brew install rabbitmq

* Go to your home directory. Enter
cd 
* Edit your user profile. Enter
nano .bash_profile
* At the end of the file, add
export PATH=$PATH:/usr/local/opt/rabbitmq/sbin
* Exit nano and restart your computer.
* After machine has restarted and from a terminal prompt, enter
brew services start rabbitmq

To test RabbitMQ, from a terminal prompt enter
rabbitmqctl version
A version number should be the response.

NOTE:

If you are still having trouble running rabbitmqctl, try adding another export PATH statement to your .bash_profile 
export PATH=$PATH:/usr/local/sbin",,KygNhA0-VQk,http://youtube.com/watch?v=KygNhA0-VQk,https://www.youtube.com/embed/KygNhA0-VQk,,,,,Software Installations for Mac,,Java Back End Introduction and Software Installations,Java Backend Development,,0,,1,1
install Redis on a Mac Computer,,,,"Using Homebrew from a terminal prompt enter
* brew update
* brew install redis
* brew services start redis

To test the installation from a terminal prompt enter
* redis-cli ping
Redis will respond with pong",,8o8CWZTb1j0,http://youtube.com/watch?v=8o8CWZTb1j0,https://www.youtube.com/embed/8o8CWZTb1j0,,,,,Software Installations for Mac,,Java Back End Introduction and Software Installations,Java Backend Development,,0,,1,1
install JDK 11 on a Linux (Ubuntu 18) based computer,,,,"From a terminal prompt, enter 
* sudo add-apt-repository ppa:linuxuprising/java
* sudo apt update
* sudo apt install oracle-java11-installer
* sudo apt install oracle-java11-set-default

To test the installation, enter
* java -version
* javac -version
Both should respond with version numbers",,LRBot07vRsU,http://youtube.com/watch?v=LRBot07vRsU,https://www.youtube.com/embed/LRBot07vRsU,,,,,Software Installations for Linux (Ubuntu 18),,Java Back End Introduction and Software Installations,Java Backend Development,,0,,1,1
install Sublime Text Editor on a Linux (Ubuntu 18) based computer,,,,"From a terminal prompt, enter 
* wget -qO - https://download.sublimetext.com/sublimehq-pub.gpg | sudo apt-key add -
* echo ""deb https://download.sublimetext.com/ apt/stable/"" | sudo tee /etc/apt/sources.list.d/sublime-text.list
* sudo apt update
* sudo apt install sublime-text",,SgdmgSasU30,http://youtube.com/watch?v=SgdmgSasU30,https://www.youtube.com/embed/SgdmgSasU30,,,,,Software Installations for Linux (Ubuntu 18),,Java Back End Introduction and Software Installations,Java Backend Development,,0,,1,1
install Git on a Linux (Ubuntu 18) based computer,,,,"From a terminal prompt, enter
* sudo apt upgrade
* sudo apt install git

To configure Git, enter the following from a terminal prompt
* git config --global user.name ""<Your Name>""
* git config --global user.name ""<Your GitHub email address>""",,3kh_c9Os_z4,http://youtube.com/watch?v=3kh_c9Os_z4,https://www.youtube.com/embed/3kh_c9Os_z4,,,,,Software Installations for Linux (Ubuntu 18),,Java Back End Introduction and Software Installations,Java Backend Development,,0,,1,1
install Postman on a Linux (Ubuntu 18) based computer,,,,,"To install Postman, from a terminal prompt enter
* sudo apt update
* sudo apt install libgconf-2-4

Surf to the website https://getpostman.com
* Download the software in a compressed file
* Extract the file to some location, like your home directory

Create a Desktop entry for Postman. It should be saved as ~/.local/share/applications/Postman.desktop
and contain the following
[Desktop Entry]
Encoding=UTF-8
Name=Postman
Exec=/home/<your account>/Postman/app/Postman %U
Icon=/home/<your account>/Postman/app/resources/app/assets/icon.png
Terminal=false
Type=Application
Categories=Development;",4yMn6h0_MGI,http://youtube.com/watch?v=4yMn6h0_MGI,https://www.youtube.com/embed/4yMn6h0_MGI,,,,,Software Installations for Linux (Ubuntu 18),,Java Back End Introduction and Software Installations,Java Backend Development,,0,1,1,2
install RabbitMQ on a Linux (Ubuntu 18) based computer,,,,"To install the software, first install Erlang and then the RabbitMQ server by doing the following from a terminal prompt:

* sudo apt update
* sudo apt install curl
* wget -O - ""https://github.com/rabbitmq/signing-keys/releases/download/2.0/rabbitmq-release-signing-key.asc"" | sudo apt-key add -
* sudo apt install apt-transport-https
* sudo nano /etc/apt/sources.list.d/bintray.erlang.list
** Add the line
deb http://dl.bintray.com/rabbitmq-erlang/debian bionic erlang
** exit nano
* sudo apt update
* sudo apt install erlang-nox
* sudo nano /etc/apt/preferences.d/erlang
** Add the three lines
Package: erlang*
Pin: release o=Bintray
Pin-Priority: 1000
** exit nano
* sudo apt update
* sudo apt-cache policy
* curl -s https://packagecloud.io/install/repositories/rabbitmq/rabbitmq-server/script.deb.sh | sudo bash
* sudo apt update
* sudo apt install rabbitmq-server
* sudo service rabbitmq-server start

Test the installation by entering the following at a terminal prompt
* sudo rabbitmqctl version
RabbitMQ should respond with a version number",,jDPsisgWpr0,http://youtube.com/watch?v=jDPsisgWpr0,https://www.youtube.com/embed/jDPsisgWpr0,,,,,Software Installations for Linux (Ubuntu 18),,Java Back End Introduction and Software Installations,Java Backend Development,,0,,1,1
install Heroku CLI on a Linux (Ubuntu 18) based computer,,,,"Create a free Heroku account at the website https://www.heroku.com

Install the Heroku CLI. At a terminal prompt, enter
sudo snap install --classic heroku

Test Heroku by entering a terminal prompt
heroku login",,6Wm2Oo2ixXI,http://youtube.com/watch?v=6Wm2Oo2ixXI,https://www.youtube.com/embed/6Wm2Oo2ixXI,,,,,Software Installations for Linux (Ubuntu 18),,Java Back End Introduction and Software Installations,Java Backend Development,,0,,1,1
install Tomcat on a Linux (Ubuntu 18) based computer,,,,"To install Apache Tomcat, enter the following from a terminal prompt:

* sudo groupadd tomcat
* sudo useradd -s /bin/false -g tomcat -d /opt/tomcat tomcat
* cd /opt/
* sudo wget http://apache.cs.utah.edu/tomcat/tomcat-9/v9.0.17/bin/apache-tomcat-9.0.17.tar.gz
* sudo tar -xzvf apache-tomcat-9.0.17.tar.gz
* sudo mv apache-tomcat-9.0.17/ tomcat/
* sudo chown -hR tomcat:tomcat /opt/tomcat
* sudo chmod +x /opt/tomcat/bin/
* sudo nano ~/.bashrc
** Add the following line
export CATALINA_HOME=/opt/tomcat
** exit nano

* source ~/.bashrc
* echo $CATALINA_HOME
You should see /opt/tomcat

* cd /etc/systemd/system/
* sudo nano apache-tomcat.service
** enter the following 18 lines
[Unit]
Description=Apache Tomcat 9 Servlet Container
After=syslog.target network.target

[Service]
User=tomcat
Group=tomcat
Type=forking
Environment=JAVA_HOME=/usr/lib/jvm/java-11-oracle
Environment=CATALINA_PID=/opt/tomcat/tomcat.pid
Environment=CATALINA_HOME=/opt/tomcat
Environment=CATALINA_BASE=/opt/tomcat
ExecStart=/opt/tomcat/bin/startup.sh
ExecStop=/opt/tomcat/bin/shutdown.sh
Restart=on-failure

[Install]
WantedBy=multi-user.target
** exit nano

* sudo chown -hR tomcat:tomcat /opt/tomcat
* sudo chmod +x /opt/tomcat/bin/

* systemctl daemon-reload
* systemctl start apache-tomcat
* systemctl enable apache-tomcat

To test Tomcat, surf to localhost:8080
* You should see the Tomcat default webpage
* Tomcat defaults to listening on port 8080",,PbFgS2SfaZE,http://youtube.com/watch?v=PbFgS2SfaZE,https://www.youtube.com/embed/PbFgS2SfaZE,,,,,Software Installations for Linux (Ubuntu 18),,Java Back End Introduction and Software Installations,Java Backend Development,,0,,1,1
install PostgreSQL on a Linux (Ubuntu 18) based computer,,,,"To install PostgreSQL, enter the following from a terminal prompt

* sudo nano /etc/apt/sources.list.d/pgdg.list
** enter the following line
deb http://apt.postgresql.org/pub/repos/apt/ bionic-pgdg main
** exit nano
* wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -
* sudo apt update
* sudo apt install postgresql-11
* sudo apt install postgresql-client-11
* sudo apt install pgadmin4

* sudo -u postgres psql
* ALTER USER postgres PASSWORD 'password';
* \q

* run pgadmin4 from APPs
Create a link to the server",,XuiaSJAVtNo,http://youtube.com/watch?v=XuiaSJAVtNo,https://www.youtube.com/embed/XuiaSJAVtNo,,,,,Software Installations for Linux (Ubuntu 18),,Java Back End Introduction and Software Installations,Java Backend Development,,0,,1,1
install Redis on a Linux (Ubuntu 18) based computer,,,,"To install Redis, enter the following at a terminal prompt

* sudo apt update
* sudo apt install redis-server
* sudo nano /etc/redis/redis.conf
** search for supervised change line to supervised systemd
** exit nano
* sudo systemctl restart redis.service

To test Redis, enter the following at a terminal prompt
* redis-cli ping
Redis will respond with pong",,wWRxgPFO1zE,http://youtube.com/watch?v=wWRxgPFO1zE,https://www.youtube.com/embed/wWRxgPFO1zE,,,,,Software Installations for Linux (Ubuntu 18),,Java Back End Introduction and Software Installations,Java Backend Development,,0,,1,1
Recognize different types of recruiters and now how to best work with them,,,,,,,,,,,,,Sourcing Opportunities,,Sourcing Opportunities,Career Readiness,,0,,,0
identify common scams and other things to watch out for in your search,,,,,,,,,,,,,Sourcing Opportunities,,Sourcing Opportunities,Career Readiness,,0,,,0
"Understand what the primary interviews formats are and the primary types of interview questions, and what each interview involves","An interview is designed to do two things: 1) Confirm that you have the right skills (both technical and interpersonal) to do the job well, and 2) evaluate if you’re someone the team wants to work with. Every interview will be driving towards one or both of these things, and it’s critical to understand that as you prepare so your answers can drive towards these two goals and make it as easy as a company to hire you! No matter your experience, by choosing the most relevant words, skills, and examples, you can pull from a limited about of experience to stand out in a variety of interview settings.",,"## Types of Interviews
-   Phone screen:
	- Most roles will start with a phone screen, sometimes a video call. This is generally with a recruiter who may or may not (but likely not) be intimately familiar with the technology you’ll be using in the role you’re interviewing for.
	-  Be prepared for any question, but most often you’ll get general questions about your past experience, skills, credentials, and working style.
	-   The purpose is to make sure that your application accurately represents your experience, and that you’d be a decent culture fit for the company.
	-   Also be prepared to talk about your salary expectations in this conversation!
-   1:1 Interviews:
	-   The most standard kind of interview; this is where you sit 1:1 with a member of the team
-   Back-to-back interviews:
	-   These consist of 2 or more back to back conversations (generally ~30 min each) with various members of the team.
	-   Be prepared to get the same or similar questions; these types of interviews can be looking for consistency in your response
	-   They are also a good way for a company to get a feel for how you adapt to different personalities
-   Panel interviews:
	-   This is with you and a group of interviewers, 2 or more. Your interviewers will take turns asking you questions
	-   Companies do this when it helps to get multiple perspectives on your answer to a single question;
	-   For example, you might be asked about your iteration process for designing a mobile app. It may make sense to have a UX designer, Android developer, and QA engineer in the room, since each person will pick out different aspects of your answer
	-   While one person might ask you a question at a time, there’s a reason there are other people in the room! Engage your full audience by making eye contact; this communicates that you are someone who considers the needs of others in your work.
-   Group interviews: this is when multiple candidates interview at once, and can be stressful!
	-   You might find that other candidates are competing hard for more talk time; be careful with how you approach this. You want to make sure that your voice is heard, without making it seem like you’re trying to steal the spotlight for yourself.
	-   Very outgoing and very shy people may struggle with this format, since they may be inclined to either dominate the conversation or retreat from it; if you fall into one of these categories, it’s important to check in with yourself to make sure you’re not talking too much, or that you’re talking enough
-   Project/assignment-based: You may be asked to take home a project and present it for your next interview, or you may need to work through a project/task live during the interview.
	-   The interviewer rarely expects perfection; they want to know how you approach projects, how you think, and get a feel for your creativity!

## Types of Interview Questions:
-   Skills-based: this is to understand more about the hard skills you’re bringing to the role.
	-   To prepare, make sure you’re comfortable talking about how you’ve used all of the tools/skills/software advertised on your resume and LinkedIn. Anything on either is fair game in an interview, so you need to be ready to talk about them!
-   Scenario/situational: These questions are designed to see how you would think on your feet when faced with a situation.
	-   To prepare, search for “common scenario interview questions” and make a list of 20 of the most common ones you find.
	-   Practice answering these. Even if you aren’t asked the same exact questions in an interview, prepping using similar questions will help you feel comfortable tackling them
-   Behavioral: This is to hear more about your past experience, and how you handled situations in real life
	-   To prepare, search for “common behavioral interview questions” and make a list of 20 of the most common ones you find
-   Curveballs: These are just to catch you off guard, and aren’t about giving a right or wrong answer- they’re to see your thought process around things and how creatively you can think
	-   Prepare by searching for curveball interview questions and have fun answering them in different ways.
	-   If you need to buy time, it’s ok to ask for a moment to think about it!
	-   The only wrong answer is “I don’t know.” Nobody actually expects you to be able to figure out how many golf balls can fill a school bus, they want to hear you ask “what size bus?” “are the seats still in it?” And then “my first step to figure this out would be…”

## How to Respond:

-   STAR Method: It describes the setting, presents a challenge or goal, goes over the action taken to reach the goal or solve the challenge, and then the final result.
-   FEB Method: Ideal for broader questions that aren’t rooted to one specific situation/episode, like “how do you stay on top of changes happening in the data science field”, “what is your greatest strength?”, or “what makes it challenging for you to get your work done?”
-   No matter the question, you want to end on why your response benefits the company/team. Even questions like “what is your greatest weakness?” can be spun to focus on the positives (i.e. your ability to proactively identify and respond to challenges, your growth mindset, your ability to take feedback well, etc.)
-   Both STAR and FEB help keep what could easily be a rambling answer on track and provides structure for your interviewer to follow what you’re saying.
-   Both STAR and FEB leverage storytelling techniques to reinforce key information in interviewers’ brains.
-   Human brains are wired to like stories; we’ve known that humans have been telling stories through verbal language and pictures since as early as 15,000 BC, but writing wasn’t invented until about 3,200 BC. Oral stories are how customs, traditions, history, and survival skills were communicated between humans for thousands of years, so our brains are good at anchoring key facts in narrative stories.

## Preparing Stories:

-   PRO TIP: think of 5-6 stories that could apply to multiple behavioral questions. For example, you may be able to use the same story to answer “tell me about a time you had a conflict with a coworker”, “tell me about a time you overcame a challenge at work”, and “tell me about a time you needed to persuade multiple stakeholders on an idea.”
-   Similarly, you could use the same story to answer “tell me about a time you improved a process”, “what’s a professional accomplishment you’re particularly proud of”, and tell me about a time you took leadership over a task or project without being instructed to”

## Transferable skills:

-   What about people who have never worked in tech, or who haven’t worked in their track before? How can they answer questions that are tailored to the job they’re interviewing for? That is where transferable skills come in!

-   Transferable skills, also known as “portable skills,” are qualities that can be transferred from one job to another. This can include communication, project management, adaptability, leadership, and more.

-   Retail experience: This could translate to a LOT of skills, but one is Communication. Being able to communicate with customers and colleagues to keep a store running smoothly directly translates to having empathy for the user experience (important across ALL fields, not just UX!), considering the needs and priorities of others on your team, and responding quickly to rapidly changing needs and conditions.
-   Admin experience: One transferable skill involved in any admin role is project management. Usually, as an admin, you are juggling various people’s needs, and making sure that all i’s are dotted and t’s are crossed. This attention to detail is the same skill needed to oversee a website/app build from start to finish, or to make sure your data has been thoroughly and accurately parsed through, or that your design is adaptive to all possible use cases
-   Team sports: this may be obvious, but collaboration is one of the things that makes team sports such a valuable learning experience! This would translate to any other elective teams you’re part of that require collaboration and partnership to achieve a common goal. You’ll almost never be working totally independently in your career; even if you freelance, you still need to work with the people who hire you to build something, so collaboration is one of the most important skills you can bring to any role.

## Do’s and Don’ts:

**DO:**
-   Ask clarifying questions (if needed): it’s ok to make sure you understand a question before responding, or to ask follow-up questions if you need more information before you feel comfortable answering. People ask questions on the job all the time, so this demonstrates curiosity, thoroughness, and a focus on clarifying before diving into something.
-   Take notes, and bring notes: you should always take notes, especially when you’re asking questions, but you can also bring notes to the interview with you. You never want to answer from your notebook, but if there are key skills that you want to remind yourself to touch on, it’s fine to jot a list down and glance at it periodically to make sure you’re driving at the right points.
-   Reference the job description frequently: similarly, come prepared with a printout of the description, and it’s ok to have written notes on it too! If there are specific areas you want to learn more about or reference in your response, this can be a helpful reminder
-   Make eye contact: this is easy to forget when you’re nervous! If you’re uncomfortable with too much eye contact, it’s ok to look away briefly at organic points in the conversation (when thinking about what you’re going to say, when transitioning from one idea to the next, etc.)
-   Take a few moments to think before answering: you don’t need to spurt an answer out immediately! It’s ok to say “hmm, that’s a great question” or repeat the question to yourself before answering, or even just saying “let me think about that for a moment”. As long as you’re not silent for an awkward amount of time, it’s totally appropriate to take a moment to think
-   Repeating the question at the end of your response is a great way to avoid those awkward tails after you finish a story. Saying, “and that’s why I consider teamwork to be my greatest strength” is a lot better than ending with “and…yeah, that's it!”

**DON’T**
-   Say “I don’t know” or “I’ve never been in that situation before”- even if it’s true, think of a different experience that you can spin to get at what the person wants to know in their question. For example, if someone asks about a time you had a conflict with a coworker, and you have never been in that situation, you could answer it by saying, “While I’ve never had what I would call a conflict with a coworker, there have been plenty of times when my peers and I had differing goals and priorities, and often needed to work through those to meet overarching company/business goals. An example of this is…”
-   Provide the same answers in every interview: even if you use the same examples in multiple interviews, your answers should ALWAYS be tailored to the role you’re interviewing for. Different companies value different skills, have different cultures, etc. Your answers should reflect the role, team, and company you’re at, and it’s unlikely that you’ll be interviewing identical environments
-   Similarly, if you have interviews with multiple people for the same role, and they each ask you similar questions, your answers should be tailored to them. You can acknowledge this by saying, “I’m glad you asked about this- Sarah asked me a similar question, but given her perspective on X team and your perspective on Y team, I think it’s important to view issues like this from multiple angles.”
-   Ramble: You want to say as much as possible with as few words as possible. STAR and FEB help with this, but practice timing your answers by timing yourself when you’re doing mock interviews to prepare; look at how long your answers are on average. Are you responding for 5 minutes? Unless you’re going through a multi-step technical challenge, that is almost certainly too much time! Try to keep your responses between 1-3 minutes in length, and get used to how it feels to talk for that long so you can gauge yourself mentally in live interviews
-   Answer questions without examples to back yourself up: if someone asks about your strengths and you just say “teamwork- I really like working with others and think it’s one of my strengths” then what does that actually tell them about you? Give an example of a time you worked really well on a team; you need to prove that what you’re saying is true and relevant.
-   NEVER LIE!!! Even if you don’t have a good example, try to rework a real story. There are ways to selectively tell the truth, but you should never lie.","'-   By breaking down the job description into individual components, we can figure out what key skills and themes we want to focus on when preparing for an interview    
-   First, try to figure out what’s flexible.    
	-   Note that the first line says “or equivalent experience”; this means that the degree requirements have some flexibility to them, you’ll just have to be ready to dig into your education and training with Lambda School and any other programs    
	-   Generally, when you see a job posting asking for less than 3 years of experience, that indicates it’s a junior-level position. Rarely will you see a JD that says “0 years exp”, so if the years of experience is relatively small, don’t worry about not meeting the exact request    
	-   Finally, we see that “other mobile development experience is a plus”- you should try to talk about these skills if you have them, but they shouldn’t be your focus.    
-   Read through the description and pull out any technical skills that are specifically referenced; these are the key things to focus on when talking about your technical background    
-   Then, do the same for soft skills. These can be a bit harder to pluck out, but this description seems to be looking for someone forward-thinking with research skills, and who can operate with little oversight and bring a creative lens to the role.    
-   Next, look for concepts that you need to research. These aren’t necessarily things that you need experience in, but these are the things that are low-hanging fruit for you as a candidate. The company is giving you direct suggestions on the types of things they’ll want you to work on if you were to start in this role, so make sure you can dig into any of these concepts in your interview!   
	-   A MAJOR flag for you as a candidate is here in the lower left corner, where the JD directs you to “check out our existing apps and start envisioning how you can help us maximize these programs.”    
	-   If you show up to an interview without having thoroughly researched these apps and brainstormed a bunch of creative, forward-thinking ideas for how you could improve them, there is a 99% chance you are going to be underprepared.    
	-   Depending on your previous experience/knowledge areas, the other concepts in orange boxes are some things you may want to look into. They aren’t required experience for the job, but they’re clearly important!    
-   Finally, look for themes in the job description that can give you a hint about the company and team culture.    
	-   Innovative, cutting edge, and futuristic thinker: these all indicate that the company and team values being ahead of the curve    
	-   Changing the world and lives of millions: these both show that the team thinks about their impact on a global scale, and thinks big when it comes to how people can use their apps    
	-   Small and agile, freedom, we don’t micromanage, and maximize their work: all these words/phrases indicate the working style that someone needs to be successful on the team. This would not be a good fit for someone who likes a lot of direction and frequent check-ins, or who requires a lot of structure and definition to their role to be happy.
-   This might look like a lot, but only takes 5-10 minutes per JD, and can save you a whole lot of time when preparing for your interview, because you know the most important things to focus on!
	-   Hard skills, soft skills, and culture/team dynamics are the things you want to try to incorporate into your answers.
	-   The orange boxes (things to research/learn more about) are things you can proactively bring up, but are more important for you to be ready to talk about in case the interviewer asks, “can you tell me about your experience, if any, modernizing and improving existing apps’ UIs?”","'-   You have options depending on your familiarity and comfort level with interviewing; please complete the assignment that is the best match for you!    

**If you are a very nervous interviewer or have limited experience:**   
-   Complete the STAR & Common Interview Questions worksheet (linked below) with general responses that could apply to a range of technical work settings. Submit on Friday.    
-   BONUS: practice answering these questions aloud, and *extra bonus,* film yourself doing it! You don't need to submit this, but it's a great way to build your comfort level talking about your skills.    

**If you are familiar with STAR/FEB but want to build your confidence relating your past experience to technical roles: **  
-   Find a job description that you are fairly qualified for (you meet 50%-80% of the requirements), go through the mapping process we just did together, and write out responses in the STAR & Common Interview Questions worksheet (linked below) that are specifically tailored to that role. Submit on Friday, and be sure to include a link to the description in your STAR worksheet.
-   BONUS: practice answering these questions aloud, and *extra bonus,* film yourself doing it! You don't need to submit this, but it's a great way to build your comfort level talking about your skills.",bySCsqOiltY,http://youtube.com/watch?v=bySCsqOiltY,https://www.youtube.com/embed/bySCsqOiltY,,,STAR and Common Interview Questions Worksheet,,Interviewing and STAR Stories,,Interview/Star Stories,Career Readiness,,1,1,1,3
Use the STAR and FEB methods to respond to interview questions,,,,,,,,,,,,,Interviewing and STAR Stories,,Interview/Star Stories,Career Readiness,,0,,,0
Brainstorm 6-8 strong stories they can recycle when interviewing,,,,,,,,,,,,,Interviewing and STAR Stories,,Interview/Star Stories,Career Readiness,,0,,,0
Apply their transferable skills to careers in tech ,,,,,,,,,,,,,Interviewing and STAR Stories,,Interview/Star Stories,Career Readiness,,0,,,0
Map out a job description to help them know how to tailor their responses ,,,,,,,,,,,,,Interviewing and STAR Stories,,Interview/Star Stories,Career Readiness,,0,,,0
Use a popular library for testing components,"In the Node ecosystem, small and specialized libraries prevail over large, batteries-included frameworks. In a similar way architecting a React application requires putting together a stack made of several different libraries, testing our React components require that we choose libraries depending on the methodology we favor, and use them together.",,"For fast tests that care a lot about the internal management of props and state, **Enzyme** is the most commonly used library. On the other hand, for tests that deliberately ignore the inner workings of a component and instead focus on actual output in terms of DOM elements, **react-testing-library** is very popular. Because the industry is trending towards the latter approach, we will learn to set up react-testing-library and use it alongside Jest. We will also bring in **jest-dom**, which extends Jest with matchers designed to test the state of the DOM.","1. **Create a React project** with `create-react-app`.

2. **Install `jest-dom` and `react-testing-library`** with yarn or npm.

3. **Open `App.test.js`** (inside the `src` folder). We won't be needing `react-dom` as `react-testing-library` includes a `render` method to mount our components to an in-memory DOM. Let's delete the contents of the test and bring in our dependencies:

    ```javascript
      import React from 'react';
      import * as rtl from 'react-testing-library';
      import 'jest-dom/extend-expect';

      afterEach(rtl.cleanup);

      it('renders without crashing', () => {
        // ready to test!
      });
    ```

4. **Note** a few things about the imports:

    - `React` has to be in scope because we will be using JSX.
    - `react-testing-library` exposes a number of named functions we bring in using the `import * as` syntax.
    - Code we need for its side effects can be imported and not saved into a variable, like we do with `jest-dom/extend-expect` to extend Jest's repertoire of assertions.
    - We need to clean up after each test! Otherwise the simulated, in-memory DOM we render our components in will just get larger and larger.

5. **Render a React element** containing a ""Hello World"" message, and run tests as usual:

    ```javascript
      it('renders without crashing', () => {
        const wrapper = rtl.render(
          <span className=""greet"">hello world</span>
        );
      });
    ```

6. **Inspect the output** by logging `wrapper.debug()`. See how the element is rendered into a in-memory document-like structure:

    ![alt text](https://tk-assets.lambdaschool.com/f9be6244-1d0a-4386-ae0e-cf01e20b98f7_ScreenShot2019-04-15at13.56.43.png)

7. **Capture the node of interest.** Let's assume the true, actual purpose of some React component returning the jsx `<span>hello world</span>` is to have a ""hello"" message rendered to the screen for the user to see. We could assert, that by mounting such a component, a span containing this language will be rendered by the browser. We can use a `dom-testing-library` **query** to capture such an element:

    ```javascript
      it('renders without crashing', () => {
        const wrapper = rtl.render(
          <span className=""greet"">hello world</span>
        );
        // the querying functionality is accessed through the wrapper:
        const element = wrapper.queryByText(/hello/i);

        // assertions will come in here
      });
    ```

8. **Run assertions** about the actual output:

    ```javascript
      expect(element).toBeTruthy(); // jest matcher
      expect(element).toBeInTheDocument(); // jest-dom matcher
      expect(element).toBeVisible(); // jest-dom matcher
    ```","Find out what people have to say about **Enzyme** vs. **react-testing-library**. Try and go to the bottom of why your fellow developers favor one or the other.

Give Enzyme a try! [Here](https://github.com/LambdaSchool/Web-ReactSetup-Guided-Project) is a React boilerplate with Enzyme installed and configured.",uFXGcLpbBMU,http://youtube.com/watch?v=uFXGcLpbBMU,https://www.youtube.com/embed/uFXGcLpbBMU,,,,,Testing React,,Testing,Full Stack Web Development Core,,1,1,1,3
select DOM nodes using queries,"The philosophy of `dom-testing-library` is to test UI the same way a user would. We as users would probably test an application by confirming that the visual pieces that are supposed to be there are actually there (like buttons, inputs, links or labels). We would ensure critical content can be read, inputs filled in, and that clicking buttons has the desired effect of having other pieces appear (or go away).",,"We test a piece of interface by capturing what we expect that be (or not) in the DOM using queries. What should (or not) be there -- the DOM node of interest (a certain button, a label containing a specific text, an input with some specific value) -- is rendered to a virtual DOM by the library's renderer. We can run jest's matchers against that piece of DOM to assert, for example, that the selection exists in the document, or that it's visible.","1. **Change** `App.js` to output different jsx:
    ```javascript
      class App extends Component {
        render() {
          return (
            <section aria-labelledby=""KittensHeader"">
              <h2 id=""KittensHeader"">All About Kittens</h2>
              <p className='content'>Lorem ipsum dolor sit amet</p>
            </section>
          );
        }
      }
    ```

2. **Import** the App component into our test file `App.test.js` and render it. You may pass any props you want!
    ```javascript
      import React from 'react';
      import * as rtl from 'react-testing-library';
      import 'jest-dom/extend-expect';
      import App from './App';

      it('renders ""all about kittens"" text', () => {
        const wrapper = rtl.render(<App foo=""you may inject props!"" />);
      });
    ```

3. **Capture** a piece of the output! We expect some text cointaining ""All About Kittens"" to be rendered.
    ```javascript
      it('renders ""all about kittens"" text', () => {
        const wrapper = rtl.render(<App />);
        const hasKittensText = wrapper.queryByText(/all about kittens/i);
      });
    ```

4. **Assert** that the `hasKittensText` is actually in the Document. If it's not, the value of `hasKittensText` will be null. 
    ```javascript
      it('renders ""all about kittens"" text', () => {
        const wrapper = rtl.render(<App />);
        // IMPORTANT
        // wrapper.queryByText() returns either the node, or null:
        const hasKittensText = wrapper.queryByText(/all about kittens/i);
        expect(hasKittensText).toBeInTheDocument();
      });
    ```

5. **Try out** `wrapper.getByText()` as an alternative to `wrapper.queryByText()`.
    ```javascript
      it('renders ""all about kittens"" text', () => {
        const wrapper = rtl.render(<App />);
        // IMPORTANT
        // wrapper.getByText() returns either the node, or **FAILS THE TEST** outright:
        expect(wrapper.getByText(/all about kittens/i));
      });
    ```

6. **Break the test!.** Remember that `getByText`, as well as the rest of the queries that have `get` prefix in their names, will cause a test fail, instead of returning a null value. Queries that have the `query` prefix return `null` if the element is not found.
    ```javascript
      it('renders ""all about kittens"" text', () => {
        const wrapper = rtl.render(<App />);
        // no matcher needed, although it may be added to improve readability
        expect(wrapper.getByText(/THIS WILL MAKE THE TEST CRASH AND BURN/i));
      });
    ```
    ![alt text](https://tk-assets.lambdaschool.com/8fdc962c-fff0-427f-aa69-41108cf491bb_ScreenShot2019-04-15at17.39.25.png)

7. **Capture using different criteria.** We have many other queries available to us. In our component, we have an `aria-labelledby` attribute on the `section` to inform screen readers that the element `<h2 id=""KittensHeader"">All About Kittens</h2>` is actually a label for the `section` element. Let's capture the `h2` by label text! The point is to test like a user would. We expect a particular label to be there for our users!
    ```javascript
      it('renders ""all about kittens"" text', () => {
        const wrapper = rtl.render(<App />);
        expect(wrapper.getByLabelText(/All About Kittens/i));
      });
    ```","There are many queries available, for single and multiple elements, and with three different prefixes: `query`, `get` and `find`. Research the differences between them using the `dom-testing-library` docs.",vItkiDBCVcc,http://youtube.com/watch?v=vItkiDBCVcc,https://www.youtube.com/embed/vItkiDBCVcc,,,,,Testing React,,Testing,Full Stack Web Development Core,,1,1,1,3
understand what to expect in the Java Back End course,,,[Slide Deck for Presentation Welcome](https://drive.google.com/file/d/1yR0coNqCfnD9gzQPts8mjj0WP8xSe4xy/view?usp=sharing),,,,,,,,,,Java Back End Course Introduction,,Java Back End Introduction and Software Installations,Java Backend Development,,0,,,0
fire events and test async operations,"Often, new pieces of UI will mount (or unmount) in response to async operations. Our tests need to be able to await for promises to resolve. We also need to be able to fire the events that can trigger such operations.",,"Following the philosophy of testing the UI the same way a user would, we will simulate a click event on a button which triggers an async operation that results in a new piece of DOM being mounted. To this effect, we will refactor `App.js` so it renders a flash message obtained from a fake api, and assert that the message is actually there.","1. **Change** `App.js` to include an async click handler that results in a new 'Success!' message being rendered:
    ```javascript
      import React, { Component } from 'react';

      export default class App extends Component {
        state = { message: '' }

        fakeApiCall = () => Promise.resolve('Success!')

        onClickHandler = async () => {
          const message = await this.fakeApiCall();
          this.setState({ message })
        }

        render() {
          return (
            <div>
              <span>{this.state.message}</span>
              <button onClick={this.onClickHandler}>
                Get message!
              </button>
            </div>
          );
        }
      }
    ```

2. **Add a custom `data-testid` attribute to the button.** This way we can practice getting elements by their `dataId`. This is not the preferred way to grab elements, because a `testId` value, unlike a label text or an input value, is an entity a user cannot perceive with his senses nor with a screen reader.

    ```javascript
      <button
        onClick={this.onClickHandler}
        data-testid='messageButton'
      >
        Get message!
      </button>
    ```

3. **Start a test** inside `App.test.js`. Note the `async` keyword.

    ```javascript
      import React from 'react';
      import * as rtl from 'react-testing-library';
      import 'jest-dom/extend-expect';
      import App from './App';

      it('renders ""success"" text', async () => {
        const wrapper = rtl.render(<App />);
        // ready to rock and roll!
      });
    ```

4. **Assert the non-existance** of a ""Success!"" text in the DOM and run tests:

    ```javascript
      it('renders ""success"" text', async () => {
        const wrapper = rtl.render(<App />);
        expect(wrapper.queryByText(/success/i)).not.toBeInTheDocument();
      });
    ```

5. **Fire a `click` event on the button.** The `fireEvent` object exposed by `react-testing-library` has many events to choose from. These events take two arguments: the target and an event object. To a `click` event we will pass our button, selected by its `data-testid` attribute. The second argument is not necessary in this case. A `change` event on an input on the other hand would require an event object with the `target.value` as the second argument.

    ```javascript
      it('renders ""success"" text', async () => {
        const wrapper = rtl.render(<App />);
        expect(wrapper.queryByText(/success/i)).not.toBeInTheDocument();
        // fire event like a user would! Pass the target.
        rtl.fireEvent.click(wrapper.getByTestId('messageButton'));
      });
    ```

6. **Assert that the success message shows up eventually.** Here we introduce queries with the prefix `find`. These will retry for some certain configurable time, before failing the test without the need for the `toBeInTheDocument()` part (behaving similarly to the `get` queries in this regard: the test fails if the element is not found, instead of returning `null` like the `query`-prefixed queries do).

    ```javascript
      it('renders ""success"" text', async () => {
        const wrapper = rtl.render(<App />);
        expect(wrapper.queryByText(/success/i)).not.toBeInTheDocument();
        rtl.fireEvent.click(wrapper.getByTestId('messageButton'));
        // ""find"" queries support async/await!
        expect(await wrapper.findByText(/success/i));
      });
    ```","Change `App.js` so that three identical success messages are rendered, and assert that the correct number is put to the DOM, using the `all` queries (such as `getAllByText`) and a jest array matcher.",hmvQkl-xjKg,http://youtube.com/watch?v=hmvQkl-xjKg,https://www.youtube.com/embed/hmvQkl-xjKg,,,,,Testing React,,Testing,Full Stack Web Development Core,,1,1,1,3
explain what automated testing is and its importance,Testing is essential for software quality. It should be integrated into the development process from beginning to end. We should not wait until a feature is complete to start testing it. Testing software manually on every commit to source control or every time we make a change does not scale! Automated testing works by using software to test our code.,,"### Why test

Automated testing minimizes the risk of bugs finding their way into production code. **Testing is NOT optional**, it should be a part of every developer's workflow. The feature is not done until it's fully tested!

**In terms of benefits, testing:**

- Surfaces bugs faster.
- Reduces the risk of regressions.
- Allows us to trust the code.
- Makes us think about the edge cases.
- Acts as a safety net when making changes or refactoring.
- Acts as documentation for the code.
- Encourages us to write more testable (better!) code.

**On the other hand, NOT testing:**

- Forces to use very expensive manual testing.
- Causes bugs and edge cases to be encountered later.
- Makes refactoring or adding features risky and scary.
- Can make codebases fragile and expensive to maintain.
- Makes less documented codebases much harder to understand.

Not writing tests can be thought of as **taking a loan with a very high interest rate**. The quick payoff is being able to write spaghetti code unhindered. The costs long term can become enormous and surpass hundreds of times over any marginal time gains obtained by not writing tests. Eventually, entire teams of developers can get so bogged down in bugs and regressions that the product can't move forward.

### Types of testing

There are many different ways of classifying tests. Here are some common levels of testing:

##### Unit testing

They test the smaller units of a software (often functions or methods) in isolation. There are usually many unit tests in a codebase, and because these tests are meant to be run often, they need to run fast.

##### Integration testing

In this level, several units of a software are tested as a group to ensure they work together correctly.

##### End-to-end testing

E2E testing is where the whole application is tested, simulating real user scenarios closely. Because these tests are slow and expensive, it's desirable that there be a thick ""cushion"" of unit tests in a codebase.",,"Research other types of tests: sanity testing, smoke testing, regression testing, system testing, snapshot testing, acceptance testing.",jyWUNzzV29U,http://youtube.com/watch?v=jyWUNzzV29U,https://www.youtube.com/embed/jyWUNzzV29U,,,,,Unit Testing I,,Testing,Full Stack Web Development Core,,1,1,1,3
use Jest to unit test functions,"In the JavaScript world, it is very common to use different programs to handle different aspects of unit testing. There are _test runners_ like Mocha. _Assertion libraries_ like Chai. _Mocks and spies_ libraries like Sinon.

However, in recent years the **Jest** library has acquired tremendous popularity and includes all of the above out-of-the-box, so we will use it for testing.",,"Pure functions are easy to unit test as they always return the same value given the same input. Testing them is a matter of comparing actual output against expected output, for a variety of arguments.","1. **Configure** the project:

    - Make a new project by creating a folder and running `npm init -y` inside it.
    - Make a `src` folder. Inside it, Create a `helpers.js` and a `helpers.test.js`.
    - Install jest as a dev dependency.
    - Create a jest config file by running `npx jest --init`. You will have to answer a few questions and the default answers are fine. Note how you can choose environments (browser-like vs. node), which results in different global variables existing in our test scripts (`window` object vs. `global` object, for example).
    - Take a look inside the generated `jest.config.js` file to get an idea of the available settings.
    - Edit `package.json`. On the `""scripts""` key, give `""test""` a value of `""jest --watchAll""`. This way we don't need to run tests manually every time we change our code.

2. **Run tests** using `npm test` or `yarn test`. We should get our first failure: no tests.

3. **Write a function** we can unit test! Head over to `helpers.js`:

    ```javascript
    exports.sum = function (a, b) {
      return a + b;
    }
    ```

4. **Write our first _describe_ block** in `helpers.test.js`. The variable `describe` is a global injected by Jest, and don't forget to import the module we intend to test:

    ```javascript
    const help = require('./helpers');

    describe('sum function', () => {
      // This is a describe block. You can nest them,
      // to group your tests
    }); 
    ```

5. **Start a test** inside the describe block! You may add any number of tests to a describe block. We usually want each test to test a single thing. Let's state how the function should behave:

    ```javascript
    describe('sum function', () => {
      it('sums two integers', () => {
        // This is a test block. Note the test runner
        // is reporting a success. Not so soon!
        // This test is not done.
      });
    }); 
    ```

6. **Wrap up the test** by comparing _expected_ output with _actual_ output. Note that `.toBe()` compares values looking for strict equality, which won't work when comparing objects.

    ```javascript
    describe('sum function', () => {
      it('sums two integers', () => {
        const expected = 3;
        const actual = help.sum(1, 2);
        expect(actual).toBe(expected); // .toBe() looks for strict equality!
      });
    }); 
    ```

7. There are many _matchers_ other than `.toBe()`. Try out a few!
    ```javascript
    expect(actual).toBeDefined();
    expect(actual).toBeTruthy();
    expect(actual).not.toBe(0);
    expect(actual).not.toBeNaN();
    expect(actual).toBeGreaterThan(2);
    expect(actual).toBeLessThan(4);
    ```","Change the `sum` function so it will take any number of arguments (not just two) and add them up together. This change should be backwards compatible, so once it's done the test should pass.",Rg-BErMc8Fo,http://youtube.com/watch?v=Rg-BErMc8Fo,https://www.youtube.com/embed/Rg-BErMc8Fo,,,,,Unit Testing I,,Testing,Full Stack Web Development Core,,1,1,1,3
use mocks and spies in unit tests,"Unfortunately our functions don't live in a vacuum, but have entanglements with the outer world, such as dependencies on other modules. Or they might take callbacks as arguments, which creates the interesting problem of how to test that the callbacks were invoked and the correct arguments passed. To handle both these problems we use Jest's mock functions.",,"A function being tested may have inconvenient dependencies on other objects. To isolate the behavior of the function it's often desirable to replace the other objects with mocks that simulate the behavior of the real objects. This is useful if the real objects are impractical to incorporate into the unit test.

Another use of mocks is as ""spies"", because they let us spy on the behavior of a function that is called by some other code. Mock functions can keep track of calls to the function, as well as the parameters passed in those calls. We can optionally define an implementation for the mock. Simpler mocks that implement just enough behavior to have the test execute are sometimes referred to as ""stubs"".","1. Let's implement a helper in `helpers.js` with an uncomfortable dependency that makes the helper _impure_ and therefore harder to test (you'll need to install the `uuid` npm module).

    ```javascript
    const uuid = require('uuid');

    exports.makeUser = function (firstName, lastName) {
      return {
        id: uuid(),
        fullName: `${firstName} ${lastName}`,
      }
    }
    ```

2. Testing expected output against actual output will be hard, because `uuid()` generates a new, random id each time. We can give it a try, though. Note the use of `.toEqual()` instead of `.toBe()`. The former compares properties of objects, whereas the latter uses strict equality.

    ```javascript
    describe('makeUser function', () => {
      it('generates a user with an id and a full name', () => {
        const expected = { id: 'abcde', fullName: 'Peter Parker' }; // fishy...
        const actual = help.makeUser('Peter', 'Parker');

        expect(actual).toEqual(expected);
      });
    }); 
    ```
    ![alt text](https://tk-assets.lambdaschool.com/6db480a0-84b6-4210-91a2-091475a1c731_ScreenShot2019-04-16at19.33.30.png)

3. To get around this problem, we can stub out a fake version of `uuid` that will replace the real one during the execution of the test. Outside of the `describe` block, at the top level of `helpers.test.js`, place the following code:

    ```javascript
    jest.mock('uuid', () => () => 'abcde');
    ```

    Let's break it down. As the first argument to `jest.mock()`, we pass the path to the module we want to replace. As the second argument, we pass a callback that _returns_ whatever it is _we want the faked thing to be_. We wish for `uuid` to become a silly stub function that always returns the same string: `uuid() // ""abcde""`. Our tests should be passing now!

4. Let's try something else. Move to `helpers.js` and implement this new function:

    ```javascript
      exports.executeIfEven = function (number, callback) {
        if (number % 2 === 0) {
          callback(number);
        }
      }
    ```

    This is an interesting one. This function returns no value. Instead, invokes the callback if the number is even. We are probably looking at least at two tests:

    ```javascript
    describe('executeIfEven function', () => {
      it('executes callback with number, if number is even', () => {

      });
      it('does not execute the callback, if number is odd', () => {

      });
    });
    ```

5. The trick here is to pass a callback whose behavior we can spy on:
    ```javascript
    it('executes the callback with number, if number is even', () => {
      const spy = jest.fn(); // Arrange!
      help.executeIfEven(2, spy); // Act!
      expect(spy).toBeCalledWith(2) // Assert!
    });
    it('does NOT execute the callback, if number is odd', () => {
      const spy = jest.fn();
      help.executeIfEven(1, spy);
      expect(spy).not.toBeCalled()
    });
    ```","There is a way to centralize mocks that are used often (think `uuid`, or `axios`) in external files, so that they are used in test suites without even bothering with imports. Go to the Jest docs and see if you can find out how!",31RbxiI3zQY,http://youtube.com/watch?v=31RbxiI3zQY,https://www.youtube.com/embed/31RbxiI3zQY,,,,,Unit Testing II,,Testing,Full Stack Web Development Core,,1,1,1,3
"research companies’ norms to assess for dress, communication, and culture prior to an interview, and talk fluently about a company’s history, values, and products prior to interview","**First impressions matter; many interviewers say they make up their mind about a candidate within the first 10 seconds of meeting them, so knowing how to dress and feel comfortable within the culture of the company matters! You can learn a lot just by doing a few minutes of research, but this small extra step can make all the difference in the impression you make. In this lesson, you’ll learn how to research and narrow down a company’s culture and norms before the interview.**",,"'-   Look at the company’s website; try to find photos of people working there. How are they dressed? Are they playing skeeball in the company arcade? Or are they heads down at their desks, working hard? This will give you an idea about the formality vs casualness of the company
	-   Similarly, know their website in and out. Be able to talk about their values, history, and milestones. Look for links to mentions in the press (or just google the company to see what comes up) and follow them on social media and LinkedIn to find updates.
-   Go to Glassdoor.com; read others’ interview reviews and employee reviews. You can find a lot of honest insight about a company there
-   Do you know people who work there? The best thing to do is ask.
-   If you don’t know someone at the company, ask the recruiter you’ve been talking to; this is entirely appropriate and many recruiters will be happy to give you an idea of how to dress, whom you’re meeting with, and what to expect.
-   Remember, you always want to dress one step above the people already there. For more formal environments, wear business attire. For a company where people wear sweats to work, consider dark, unripped jeans and a well-fitting blouse or button-down. Wearing a suit and tie to this type of company would be as much of a faux-pas as wearing jeans and a t-shirt to a law firm!
	-   Find workplace dress code definitions here: [https://www.thebalancecareers.com/what-is-business-attire-1918075]
-   Once you’re in the interview, feed off of your interviewers’ vibes. Are they leaned back and casual? That might be an indicator that you can relax a bit too, but be mindful- you want to be comfortable without acting like you already work there.
	-   No matter what, avoid cursing, slouching, chewing gum, fidgeting, etc. even if your interviewer is doing it too! You still want to present your best professional self.",,"'-   Find a company you would be interested in working at. Research that company and answer the following questions:
	-   How casual/formal is it? What would be the most appropriate clothing to wear to an interview?   
	-   What are their products?
	-   What are their values? How do their values influence their culture and products?
	-   What is a brief history of the company? When it was founded, key milestones (i.e. first international office, IPO year, etc.), and how has it evolved over time?
	-   Has it been in the news recently? If good things, write down notes you can incorporate into your interview! If less positive, prepare a couple thoughtful and appropriate questions to understand the challenges they face.
	-   What is the company’s (or the team’s) goals and future trajectory, and how does your expertise tie into that?
-   Use the Job Search Tool to track your research (or preferred organization tool) to track your research: https://docs.google.com/spreadsheets/d/1NCAaKLBLu8YQayvffvR4tmxnggcx84O9yVjH06Yf1yo/edit?usp=sharing
-   Submit your organizer with your research on the company to your PM on Friday",02HjfxzpCWw,http://youtube.com/watch?v=02HjfxzpCWw,https://www.youtube.com/embed/02HjfxzpCWw,,,"Work Dress Codes,Job Search Tool",,Interviewing Etiquette,,Interview Etiquette/Strategies,Career Readiness,,1,1,1,3
"present themself professionally via body language, eye contact, handshake, enthusiasm, and demeanor","**Remember how interviewers may make up their mind about you in the first several seconds? This isn’t just about how you’re dressed- it’s about how else you present yourself, too. While some things will vary depending on the company, other things, like a firm handshake and solid eye contact, are critical in every industry. While this may seem intuitive to some, plenty of people can crack under pressure, so we will be sharing some tips in the lesson ahead to help these strategies feel like second nature.**",,"'-   Your first impression starts well before you ever meet the interviewer. Any interactions you have with a recruiter, admin who is helping you schedule your interviews, or front desk coordinator who greets you when you arrive for your interview should be courteous; many managers ask their staff how interviewees treated them when they weren’t looking as a way to weed out disrespectful candidates.
-   There is nothing worse than showing up to an interview right before it’s scheduled to begin, or worse, late! Coming in sweaty, frantic, and stressed out is not going to prime you to make a good first impression.
	-   Always plan to arrive 15 minutes early for your interview. Leave even more if you’re relying on public transit or live in a high traffic area. If you’re too early (more than 15-20 minutes) then sit in your car or a coffee shop or park nearby.
-   Handshakes: for something we’ve likely done thousands of times, handshakes can trip up a lot of people! Striking the right balance between a limp fish and breaking someone’s fingers is easier said than done, especially if you’re nervous.
	-   Stand whenever possible; someone else might initiate the handshake while you’re still sitting, but if you’re able to stand up, that is ideal so you’re close to being eye-to-eye with the person
	-   Aim for the webbing: tilt your hand at a slight angle, and align the webbing between your thumb and index finger on your right hand with theirs. Aiming here sets a solid grasp. It’s ok to glance at their hand briefly to make sure you’re coming in at the right trajectory!
	-   Keep it dry: if your hands get sweaty, don’t clutch onto something tightly right before your interview, and when your interviewer comes out, subtly wipe your hand on your pants before shaking theirs. If it comes down to it and your hand is damp, don’t sit there hoping they didn’t notice (spoiler: they definitely noticed). It’s ok to laugh it off and excuse yourself by saying “apologies, I’m a little excited about this opportunity!”
	-   Grasp the person’s hand firmly, but not tightly, and give two pumps. Shake from the elbow, not the wrist or the shoulder.
	-   Don’t forget to maintain eye contact and smile!
	-   If this sounds repetitive, then great- you’re already a pro. But no matter how confident you feel, take some time to practice with friends or family. A strong, solid handshake conveys confidence, and nonverbally conveys to the interviewer “I’ve got it together, and I know what I’m doing here.” It’s more important than you may realize.
-   Eye contact: eye contact can feel awkward for some people, especially when you’re getting grilled. A trick is to stare between the other person’s eyes; they won’t be able to tell the difference.
	-   Making too little eye contact can convey that you’re insecure, or worse, not trustworthy.
	-   Too much eye contact can be awkward too. Find natural points in the conversation where you can look away. Bringing a notepad and jotting down their questions when they ask them is a great way to do this, as is staring up at the ceiling or down at the floor when you’re pondering your answer.
-   Posture and the rest of your body: sit up straight, avoid fidgeting (with objects or with your hair, cuticles, etc.), smile regularly, nod along, relax. All of these convey engagement and show respect for the speaker.
	-   If you can, find a private place (like a bathroom or empty elevator) to breathe deeply and power pose for ~2 minutes before your interview. Power posing has been shown to boost confidence, happiness, and creativity; all things you want up before an interview. (Note: the scientific validity of power posing has been contested, but its anecdotal value is clear to many people. See Amy Cuddy’s original talk on this, and her response to the disputes, in supplementary links. Worst case scenario, you spend 2 minutes realigning your posture before an interview).
	-   If you’re a fidgeter, consider bringing a malleable eraser with you; it’s small and silent, so you can easily hide it under the table. Wiggling your toes inside your shoes can also work.
	-   Remember to relax! You want to look alert, but not like you’re carved from stone or smelling for predators.
-   Other things to avoid: don’t text or scroll through social media when you’re waiting. Put your phone on silent, and definitely keep it tucked away during your interview. Take out your headphones when you walk into a building. A cup of coffee or tea is appropriate to bring, but throw out your red bull before you come in (or at least pour it into an opaque water bottle so they can’t see what it is).",,"'-   Record yourself answering an introductory interview question like “tell me about yourself” or “what attracted you to this role?” Watch the recording and look out for the following things:
	-   Eye contact (the camera will be your interviewer here)
	-   Facial expressions
	-   Posture
	-   Body language (do your hand gestures add to or distract from what you’re saying?)
-   Don’t wing it! Prepare for the question like you would in a normal interview
-   Rate yourself using the rubric, and submit your ratings along with a link to your uploaded video to your PM with your retrospective on Friday.",02HjfxzpCWw,http://youtube.com/watch?v=02HjfxzpCWw,https://www.youtube.com/embed/02HjfxzpCWw,,,"What Body Language Says About You,Amy Cuddy: Your Body Language Shapes Who You Are,Self-evaluation Rubric for Interviewing",,Interviewing Etiquette,,Interview Etiquette/Strategies,Career Readiness,,1,1,1,3
"prepare for a variety of interview formats, including phone, group, panel, 1:1, technical challenges, and executive/managerial interviews","**Not all interviews are created equal; last week, we went over the different types of interviews you can expect. In this lesson, we’re going to dive into how you can prepare for these a little bit more.**",,"'-   Phone interviews: these are often (but not always) held with a recruiter, and are generally designed to assess your general fit for the role. The person you’re talking to likely doesn’t have direct insight to the team you’d be working on, but do your research first to make sure you know whom you’re talking to!
	-   Phone screens are tough because you can’t use the other person’s body language as feedback. They can be particularly challenging for quieter people, or people who may have a more mellow manner that doesn’t necessary convey “excitement” as naturally as a peppy person.
	-   Tips: make sure you’re in a quiet environment with good service. If it’s a video call, make sure you have a clean and professional background.
		-   Smile on the phone; even if they can’t see you, it can actually impact your vocal intonation!
		-   Sit at a desk or table (not rolled up in bed or on the couch), and dress professionally; again, even if they can’t see you, if you feel the part, it will come through in your tone.
		-   If you need to take time to think or write down a note, just let the interviewer know so they aren’t met with an awkward silence.
-   Group interviews: these can be challenging because you’re interviewing alongside your “competition”, and need to balance that dynamic on top of being prepared for the interview itself.
	-   To prepare, know what makes you unique. One thing will likely be Lambda School; what is the unique value-add of Lambda School that the other interviewees with bootcamp certificates or college degrees lack? Practice working this strength into your interview responses while you prep; knowing how to tie it in to your responses will allow you to stand out without screaming “look at me I’m unique!”
	-   If you’re a talker, time yourself while preparing to make sure you aren’t taking up too much air time.
	-   If you’re on the shier side, then prepare extra so you feel very confident talking about your skills- you may need to force your way in a little bit to get equal attention, and knowing what you want to say before you need to say it will make that a lot more comfortable.
-   Panel interviews: these could be with anywhere from 2-5+ members of the team (or adjacent teams), and it’s crucial to do your research before a panel interview so you know whom you’re meeting with and how to tailor your responses to everyone.
	-   When responding to a question, make eye contact with everyone, not just the person who asked you.
	-   Consider the needs of others; if you’re interviewing for a UX position and there’s a web developer on your panel, make sure you have plenty of stories and examples from Build Weeks when you worked with other tracks. You won’t be expected to be fluent in their language, but they will want to see that you’re at least somewhat familiar.
-   Technical challenge interviews: these will be crucial for everyone, but vary depending on the field. Glassdoor can provide helpful insight into the types of challenges you may need to complete. During CS, you’ll have a lot more opportunity to dig into and practice these technical interview formats.
	-   An important thing to remember is that while you’ll need to show basic competence in the skills they’re evaluating you on, the most important thing is to demonstrate how you think. You’ll never know everything on the job, so it’s often more important to know how to ask the right questions, how to troubleshoot, how to create a plan to figure out the problem, and how to communicate your thought process clearly to others than it is to actually know the exact right answer.
	-   If you get stuck, then talk through how you’d get unstuck. You’re going to encounter new challenges at work all the time; you don’t need to know everything but you do need to know how to figure out anything
-   Executive and managerial interviews: you won’t always need to be in one of these, but they’re especially common at smaller companies or as you advance in your career and apply for more senior roles.
	-   Often, executives are most concerned with the costs, operations, and impact of their division. That’s not to say they won’t care about your teamwork skills, but you should be specifically prepared to discuss challenges faced by the company/team, and how you would approach them.
	-   They’re going to be looking for people who can make an impact. It’s ok to ask clarifying questions to make sure you understand the issues they’re presenting.
	-   Don’t be afraid to take some risks with your idea-sharing. If you think it’s too bold, offer a caveat of “I would need to learn more about x and y before confidently posing this idea to the team, but based on what I’ve learned so far, I think z could be an effective way to approach this issue because of a, b, and c. What do you think about an idea like that?”
	-   No matter the format, don’t take anything in an interview personally! Some interviewers will try to catch you off guard on purpose, or throw curveballs at you that they know you won’t be prepared to answer just to see how you respond under pressure.
-   If the panic is setting in, take a deep breath, put on a thoughtful face (furrowing your brow and saying “hm!” usually does the trick) to buy yourself a few seconds, and then ask clarifying questions. Or, ask for a few moments to think about the question.
-   It’s normal to be nervous in an interview; this can even be a good thing because it shows that you care about the opportunity.
	-   If you know that you’re visibly nervous, and it’s causing you to stumble over your answers or leave out key details, take a breath, and say to your interviewer, “I’m really excited about this opportunity, so my nerves are getting ahead of me a bit here- would it be alright if I answered that last question again?” Most of the time, they will be gracious about it.",,"'-   Find a job description you’re interested in and qualified for, or even better, use a description for an actual job you’ve applied for
-   Imagine you are interviewing with the head of that team, someone who works in a similar role on that team, someone who works in marketing or business development/sales, and someone who works in a different technical capacity (i.e. if you are in UX, then there may be a mobile web developer. If you are in data science, there may be a back-end engineer).
-   Prepare for some of the common interview questions, and tailor your responses to appeal to everyone in the room.",02HjfxzpCWw,http://youtube.com/watch?v=02HjfxzpCWw,https://www.youtube.com/embed/02HjfxzpCWw,,"Common phone screen questions and how to answer them,Interview Prep Tool",,,Interviewing Etiquette,,Interview Etiquette/Strategies,Career Readiness,,1,1,1,3
write a professional thank-you note,"**Writing a thank you note after an interview may only take <5 minutes of your time, but it can literally make or break an interview. Picture this: you interview two candidates, both of whom have similar skills and experiences, and both seemed like they’d fit in with your team pretty well. One wrote a thoughtful thank you email after the interview highlighting what they learned and why they’re so excited about the opportunity, and the other didn’t. If you have to pick one of those candidates, whom are you going to pick? While this seems like a rare circumstance, it happens to interviewers all the time, so this lesson will review how you can use thank you notes to stand out for the right reasons!**",,"'-   Thank you notes are sometimes viewed as old-fashioned, but they’re as important as ever when you’re a candidate in the job process!
-   They aren’t literal notes, but rather are emails, and should only take a few minutes to write
-   Thank you emails should be sent within 24 hours of an interview
	-   Avoid sending the email immediately after leaving (like in your car in the parking lot of the company). Give it at least a couple hours- this demonstrates that you’ve put some thought into your response and reflected on your interview
-   Thank you notes are more than just a courtesy; they are your opportunity to direct how the employer remembers you
	-   If you say, “I really enjoyed learning more about the team’s focus on X; as we talked about today, X was one of the things I enjoyed most about projects Y and Z that I worked on, and I’m excited about the opportunity to bring my experience and enthusiasm in this area to your team.” then that’s just one more opportunity you’re seizing to drive home why you’re the best person for the job!
-   Thank you notes also keep you top of mind- they’re a way to say “hey- remember me!”
-   Finally, they’re an opportunity to clear up any sticky spots in the interview, or to ask questions you didn’t have time for
	-   You may realize after an interview that you could have answered a question differently; in the thank you email, it’s entirely appropriate to add in “Additionally, I realized after the interview that X may be a better solution than Y, because of Z. It clicked for me shortly after leaving the interview, so I wanted to be sure to clarify my response.”
	-   Most interviewers will leave time for questions, but if they don’t, or if you have more questions than there is time for, you can use the thank you email to ask.
-   Both of these scenarios demonstrate that you are curious and reflective; traits that pretty much any employer want to see in candidates!
-   During the interview, remember to get business cards or the email address of everyone you meet with. If you forget, just follow up with the recruiter or main point of contact you’ve had at the company. Each person you meet with should get their own thank you tailored to them. An exception is if you had a panel interview and your follow up message is appropriate for everyone who was part of the conversation.",,"Write a thank-you letter for any job you’ve interviewed for in the past; ideally a recent job, but if you haven’t interviewed for any tech roles yet, that’s ok! Think about any previous interview you’ve had where you either didn’t write a thank you note for, or where your thank you note could have been improved. Submit to your PM on Friday.",02HjfxzpCWw,http://youtube.com/watch?v=02HjfxzpCWw,https://www.youtube.com/embed/02HjfxzpCWw,,,5 Reasons to Send Thank You Letters,,Interviewing Etiquette,,Interview Etiquette/Strategies,Career Readiness,,1,1,1,3
talk confidently and professionally about their journey to and through Lambda School,"**While everyone working in tech knows what a bootcamp is, many of the people you talk to may not be familiar with Lambda School or its model. Understanding what differentiates Lambda School from university or other non-college training programs and why that makes your skillset and experience unique is key to highlighting the full value-add you bring to a team and company. Ahead, we’ll be covering the key talking points to cover when introducing your experience.**",,"'-   You’ll constantly have opportunities to tell your story; in interviews, at networking events, when meeting people for the first time, on your blog/portfolio, on LinkedIn or your social media, etc.
-   How you tell your story will vary depending on the context; for interviews, you’ll be able to prepare to talk about your story and know exactly whom you’ll be sharing it with ahead of time. Networking events may be more of a surprise though, and you never know when you might meet someone on the street, in an Uber, waiting in line at the grocery store, etc. While your story might seem so personal and obvious that it’s not something you need to practice telling, it’s critical to get comfortable with knowing what to highlight and how to highlight it so the story you share with others is interesting and relevant.
-   Structuring your story: While how you structure your story might be a little different depending on the context, the general arc you want to follow is 1) how you got to Lambda School, 2) what you’re learning and how you’ve applied it so far, and 3) what you’re most excited to do next
	-   How you got here, aka knowing your “why”: You all had a reason for joining Lambda School; this is no small commitment!! What is your reason? What keeps you motivated to keep learning, even when you’re frustrated and burnt out? Is it wanting to provide a better life for your family? Knowing that you were not challenged or being utilized to your fullest potential in your previous career? A passion for your chosen field? Whatever the reason, it is probably pretty interesting to others and can tell people a lot about who you are as a person
	-   What you’re learning and how you use it: This part of your story is where you go more into your skills, experience level, and soft skills like creativity, teamwork, leadership, etc. Depending on the format of when you’re telling your story and how much time you have, you probably won’t be able to share all your skills and experience, so you should always try to share the most relevant and/or the most impressive ones.
	-   What you’re most excited to do next: This is your “closer”- how you end your story with something that will hopefully excite and energize the other person, and make them want to keep talking to you. Like with the middle section, you want to tailor this whenever possible to your audience. If you’re a DS student talking to the head of product at a company that is trying to create dashboards that will allow them to use their data better, then you want to end on something like, “As I get ready to transition from Lambda School into my career as a data analyst, I’m looking forward to bringing my skills to a small team looking to evaluate their impact through dashboards, visualizations, and user testing campaigns.” If you can tie your goals into the company’s goals, then you will have likely succeeded in continuing the conversation at a later date!
-   Talking about Lambda School: Currently, there are two main paths that someone who wishes to make a career change as a developer, data analyst or designer can follow: studying the subject in college or going to a bootcamp. While some people learn these skills on the job, this usually happens over the course of a person’s career, so most of the candidates that you’ll be going up against in interviews will be graduates of 4-year degree programs or bootcamps.
	-   While many people would assume that Lambda School is an online bootcamp, it holds key differences from other bootcamps, and digs into some of the areas that make other bootcamps less competitive compared to degree programs, so for this reason we don’t encourage you to call it a bootcamp, even if that is easier to communicate!
		-   Here are some value-adds to consider including when you talk about Lambda School:
		-   Lambda School is not a bootcamp; it is an online training program that helps people build the skills necessary to become a [developer, data analyst, UX designer, etc.]
		-   Lambda School is an intensive online learning experience that combines technical skill building with hands-on, cross-functional group projects every 5 weeks through Build Weeks, and then intensively through Lambda Labs. Combined with dedicated career readiness curriculum that starts within the first few weeks of the program, students graduate with both the hard and soft skills critical for their chosen field
		-   Since students only pay for Lambda School once they’ve gotten a job earning a minimum amount in their field, Lambda has more incentive than most programs that have students pay up front. LS directly works with hiring partners to make sure that the content students receive is the most relevant and in-demand for their field.
	-   As you go through the next several months with Lambda School, your instructors and PMs will give you the opportunity to talk about what you’ve learned that week in the context of your career. This will happen either at the end of the learning day during standup meetings, or during pre-class work time (depending on your track and sprint week). Use this time to gain comfort and fluency talking about your skills!!
	-   Most of telling your story comes down to confidence in talking about your technical skill areas, which only comes with practice
-   Additional tips for talking about your learning experience:
	-   Prepare some examples of skills or concepts that you found challenging, and how you worked through these challenges
	-   Similarly, be able to talk about the projects or skills that you really loved and took to right away
	-   Know what your goals and next steps are in terms of learning in your field, and know why they’re relevant to the field (i.e. this shouldn’t be something that you just want to learn without being able to tie it into how it would benefit a company)",,"'-   Write a paragraph (6-8 sentences minimum; it should take about 1 minute to read aloud) about your journey to/in Lambda School. Make it unique to you, and include the three components of sharing your story:
-   Your “why”
-   What you’re learning and how you use it
-   What you’re most excited about next
-   Practice saying your paragraph aloud; try to get to the point where you don’t need it as a prompt, and you can say it as if you’re thinking of the words on the spot. It shouldn’t sound scripted.",Q21Y3r4BYl8,http://youtube.com/watch?v=Q21Y3r4BYl8,https://www.youtube.com/embed/Q21Y3r4BYl8,,,,,Sharing Your Story and Networking Fundamentals,,Sharing Your Story and Networking Fundamentals,Career Readiness,,1,1,1,3
identify the right people to connect with,"**You might have your heart set on a specific company or industry, and a key to getting your foot in the door is to find people who are well-positioned to help you. Depending on the size of the company and competitiveness of the industry, you’ll need to tailor your outreach to make sure you’re targeting the best people. In this part of the lesson, we’ll review how you can identify these people for a range of company sizes and industries to help you maximize your time spent networking.**",,"'-   If you are starting out in your field, there are tens (if not hundreds) of thousands of people you will come across a quick search on LinkedIn whom you can connect with. Even if you filter by your local area, you’ll still have hundreds or thousands of potential people to connect with. So where do you begin?
-   The right person to connect with is anyone who can help you get a job, or answer questions about your desired field, or mentor you in your desired field, or anyone who knows anyone who can do any of those things. That probably doesn’t narrow it down much for most people, so here are some other ways to narrow down whom to connect with:
	-   Peers: These are people who are mostly at a similar level as you. They are likely juniors in the field with only a few years of work experience. These are great people to connect with if you want to learn more about breaking into the field and the day-to-day life of a junior in your field.
	-   Mentors: These are people who are more experienced than you and established in their field. They have worked in a couple different environments and can provide a variety of perspectives on how to be successful when you’re starting out. They may be able to provide longer-term, ongoing mentorship to you as you grow in your career.
	-   Hiring leads: These are people who lead teams, or hold influence at companies, or are recruiters; i.e. the people who can get you hired! Peers and mentors can be hiring leads too, but generally only become that after you’ve built a strong rapport. Strict hiring leads are people who you know are looking to bring people onto a team, and you should target them when you’re getting ready to make career moves.
-   Identifying people: once you know what type of people you want to connect with, you need to find them. Some ways you can find people:
	-   Through a connection: do you have a friend, family member, coworker, classmate, or anyone in your network of people you already know personally who can introduce you to someone? Start there. Once you start building your network, make it a habit to ask anyone you meet “who else do you recommend I talk to in order to learn about X field?”
	-   Through shared networks: make sure you’re a member of alumni, volunteer, interest, etc. groups on LinkedIn and social media. If you reach out to someone who is a member of the same tribe, they’ll likely feel more compelled to help you than someone whom they don’t know personally.
	-   At events: Do some professional (and ethical) stalking. Some events will allow you to see the attendee list, or other platforms (like Facebook) will show you who is interested in or RSVP’ed “yes” to events. Research people ahead of time to identify whom you want to talk to once you’re there.
	-   Cold outreach: we’re going to cover cold outreach more in a later lesson, but sometimes you just won’t have a connection to anyone via the routes above, and that person is someone you’re still very much interested in talking to. While cold outreach might have a lower response rate in terms of people getting back to you, it is absolutely a professional way to build new relationships!",,"'-   Use the Job Search Tool (or an equivalent platform of your preference) to brainstorm and organize your network in the “People in My Network” tab.
-   Include everyone whose interests or skills could be relevant for you in your job search- this can include people you’ve never met before but with whom you share a common connection.
-   If you’ve already done this with your existing network, then take it to the next level by going on LinkedIn to identify new people whom you may be interested in connecting with.",Q21Y3r4BYl8,http://youtube.com/watch?v=Q21Y3r4BYl8,https://www.youtube.com/embed/Q21Y3r4BYl8,,,Job Search Tool,,Sharing Your Story and Networking Fundamentals,,Sharing Your Story and Networking Fundamentals,Career Readiness,,1,1,1,3
maintain and grow relationships,"**Think about your closest relationships with family, friends, coworkers, classmates, teachers, etc. Chances are, these relationships didn’t form after just one or two interactions; they were built over months and years to become what they are now. While you don’t need to be best friends with everyone in your professional network, you do want to have close, genuine relationships with as many of them as possible; people are far more likely to go out of their way to help you if they trust you, and they need to know you well before they can trust you! While this might seem like an exhausting task, we’ll go over some ways to maintain and grow your relationship that are easy to fit into even the busiest schedules.**",,"'-   Organizational psychologist Adam Grant identified three main kinds of people when it comes to networking: givers, matchers, and takers.
-   Givers freely offer their time and resources to others without asking or expecting anything in return.
-   Matchers maximize their time spent networking by doing favors for people who have helped them out in the past, or helping those who they think will one day be able to help them. They may think of things as “what’s in it for me?”
-   Takers only tap their network when it suits them, and rarely think about how they can help others.
-   You want to be a balance of a reciprocator and a giver. Try to view your professional relationships as you would your personal relationships
	-   Often, we go out of our way to do things to help friends without keeping a running mental list of “the score” (hopefully, anyway!) We understand that there will be times we’ll give more to people and other times we’ll need/ask for more in return.
	-   By thinking of networking in this way, rather than as a tit-for-tat dynamic, you’ll be set up to build stronger, more authentic relationships that in turn will benefit you more in the long run.
-   But professional and personal relationships aren’t exactly the same. You aren’t going to put the same amount or frequency of energy into your professional network as you do with your friendships, nor do you need to. Here are ways that you can engage with your professional network in a more genuine way:
	-   When you meet people for the first time, try to learn about them as individuals, not just as professionals. Ask questions about their families, interests, etc. and jot down a few notes after each conversation so when you follow up with them, you can ask specific and targeted questions.
	-   Send regular emails. You might do this more often when you’re actively searching to keep them updated, but another great time to send updates to your network is whenever you hit a milestone. Have you meet with someone to discuss your job search? Make sure they know when you finally land an offer! Do they know you’ve been trying to learn a specific skill? Shoot them a quick email with a link to your app that you built using the skill you had talked with them about. While this may feel self-serving, keeping people who have helped you up to date on your progress makes them feel like a priority in your life, which is just another way of giving.
	-   Keep them in mind. This ties into #1 as well as professional opportunities. When you hear of things that might be of interest to them, tell them! Send articles you find that are relevant to their work or interests. And, when you get to a point in your career where you can help them, refer them to job opportunities they’d be a good fit for or connect them with people in your network as a way to pay it forward.
	-   Follow them on social media and LinkedIn , and keep an eye on their activity. Commenting on a post, retweeting them, congratulating them on a new job or achievement, or even just liking it can help you stay top of mind.
-   A good way to stay on top of your network is to track whom you know, and make it a point at least once a month (more if you’re actively searching) to check in with people. You don’t need to check in with every person every month, but you should check the list periodically so not too much time passes without them hearing from you. A good minimum cadence is every 6 months, but if they’re actively trying to help you in your search, as much as every 2 weeks could be appropriate.",,"'-   Building off the previous challenge, sort your network by relationship strength (in the Job Search Tool), and set goals/a timeline for staying in touch with different groups. The closer the relationship or the more relevant it is to your goals, the more proactive you should be in your maintenance and follow-up.
-   Send at least 5 check-in or follow-up emails before Friday, letting your network know what you’re currently doing in Lambda School and what your professional goals are. If these are people whom you’re interested in growing your relationship with, or if they’re potential mentors, then try to schedule coffee, lunch, or another in-person touchpoint for the coming weeks.
-   If you want guidance on how to frame your outreach, use the networking and outreach templates linked in class resources.",Q21Y3r4BYl8,http://youtube.com/watch?v=Q21Y3r4BYl8,https://www.youtube.com/embed/Q21Y3r4BYl8,,,"Networking and Outreach Templates,Job Search Tool",,Sharing Your Story and Networking Fundamentals,,Sharing Your Story and Networking Fundamentals,Career Readiness,,1,1,1,3
"Understand how Lambda School approaches Careers,  what support we provide in the search, and what Lambda School expects of students","Think of the Lambda School team as your combined team of coaches and cheerleaders, with your fellow students as your teammates. We’ll be here to offer guidance, feedback, and celebrate you every step of the way, and we hope that you each will do the same for each other, too! Lambda School will be here to support you every step of the way, but we can’t fill your portfolio with projects, go to your interviews, or show up on your first day of work for you. In this part of the lesson, we’ll cover why we’re starting careers so early, what you can expect from Lambda School, and what we expect from you.",,"'-   So, why are we talking about careers so early? There are four main reasons for this
	-   We’ve seen students get contacted for job opportunities as early as several weeks into their time with Lambda School, and we don’t want to prevent anyone from pursuing those opportunities!
	-   Career preparation takes time; some parts of job searching, like networking and researching companies you want to work for, should be done over the course of months. By starting with these concepts early on in the career content, we hope to give you a jump start on the most critical information you need to be successful in your search later.
	-   Getting a job in tech is not as simple as pulling together a resume and submitting applications. You need a portfolio, active GitHub or Dribbble, projects, practice in technical interviews, and more in order to be a competitive candidate. If we started careers later, you’d either have to spend a lot of time during some of the busiest parts of your technical content on careers, or do it after graduating from Lambda School, which would delay your ability to search for jobs.
	-   Finally, and not least of all, careers should be on your mind at all times!! Your instructors will tie in what you’re learning with how you will use it on the job, or talk about it in an interview, or highlight it on your resume, and you should constantly be asking yourself how you can do these things too. It can be hard to keep this perspective when you’re neck-deep in challenging technical concepts, though, so by kicking off your weeks with Career content and using your Monday afternoon PM meeting to review it, we hope to keep this top of mind for you.
-   So, what can you expect from us? Your coachees will…
	-   Review your LinkedIn, resume, and associated artifacts
	-   Provide feedback during interview prep
	-   Offer guidance in job offer negotiations
	-   Host open office hours Monday-Friday
	-   Support you through the job search after you graduate until you land a job
	-   Hook you up with some sweet swag once you land your first job!
-   What is it that we don’t provide?
	-   24/7 access to career coaches, or access to coaches before Sprint 15- we have daily office hours for any questions you have, and you will be matched with a coach after Sprint 15
	-   Guaranteeing or providing you with a job- we have hiring partners whom we work with and can connect you to them for opportunities, but that’s just a foot in the door. You will still need to wow employers in the interview, and we can’t do that for you!
	-   Doing the work for you- we will arm you with the skills and support that you need to efficiently find a job, but at the end of the day, your job search is yours and you will need to be prepared to put in the work to earn an offer!
-   Other resources in your job search:
	-   Mentorship: We’re excited to have recently launched a mentorship program for recent graduates of Lambda School! After you complete Sprint 30, you will have access to a Lambda School mentor. We match graduates with mentors based on region, field, and other student preferences, and while your mentor is there to provide feedback and guidance in your search, they’re also there to connect you to their network, too.
	-   Labs Continuing Education: After you graduate from Lambda School, then what? What if you don’t get a job right away? Labs Continuing Education (Labs CE) is there to provide continued structure and support as you enter your search. Morning time is devoted to job searching, and afternoons are devoted to projects with other searchers so you can keep building your skills up. Students who take a break after graduating, even for just one week, are 50% less likely to get a job in their field than students who keep their skills sharp, so it’s critical to stay engaged with your learning and search until you land your first opportunity.
	-   Partnerships: We have an entire team at Lambda School dedicated to finding companies that want to hire Lambda grads. While you shouldn’t rely solely on these partnerships (we can’t guaranteee a job in your local area, or in your preferred field, for example), we’re constantly working on building out these partnerships!
-   Setting goals: Each week of career lessons will have a theme, and every week will have an assignment to give you a chance to practice the skill covered, or build out your career toolkit (i.e. portfolio, artifact, or resume assignments)
	-   Depending on your previous experience, you may find that some of these assignments aren’t super challenging for you. Whenever possible we’ll offer options to cater to people at different points in their careers, but you should also think more about how you can take your skills to the next level with any of the assignments given or topics covered.
	-   For example, in the LinkedIn week, we’ll be assigning an updat to your LinkedIn profile- if you’ve been keeping your LinkedIn up to date regularly and it meets the expectations set by the rubric, great! You have options here: you could just submit your LinkedIn as-is to your PM and not do any extra work, or you could use this as an opportunity to find new LinkedIn connctions, reach out to established connections you havne’t talked to in a while, set up filters and job alerts, or publish a blog/article to your page. HINT:  you should do the latter!!!
	-   Remember, as with most things, the more work you do now in your search, the less you’ll need to do later, and the easier it will be to find a job!",,"-   Use the Job Search Tool, evernote, or organizer of your choice to start setting goals
-   Submit your organizer with your goals to your PM on Friday",9zslOC4KbsU,http://youtube.com/watch?v=9zslOC4KbsU,https://www.youtube.com/embed/9zslOC4KbsU,,Job Search Tool,,,Intro to Careers and the Tech Landscape,,Intro to Careers and the Tech Landscape,Career Development,,1,1,1,3
set expectations for the job search/tech field*,"Part of being successful in your search is knowing what you want, and part of being successful once you get a job is knowing what the expectations (both overt and unspoken) are of you as a junior in the field. People talk about “tech” a lot, and it’s both glorified and satirized in the media (any of you who watch Silicon Valley know what I mean!) But having a technical job doesn’t mean working at a tech company, and working at a tech company doesn’t mean happy hours and foosball tables to give you a break from your 80-hour weeks. Ahead, we’ll go over some of what to expect at different types of companies, and some basics for navigating different types of environments if this is your first time working in that setting.",,"'-   What to expect at a startup:
	-   Size: <100 employees
	-   You will “learn by doing”- expect to wear many different hats, and do things outside of your official job description
	-   Tend to be fast-paced; your work will be critical to the success of the company, and sometimes ownership won’t be clearly defined. This can be a challenge but can also mean more opportunity for quick advancement and recognition
	-   Job stability might be riskier
	-   Personality traits needed: self-starter, adaptable, ability to juggle many priorities in a fast-paced environment
	-   Salaries might be lower, but you may have perks uncommon at larger companies, and be prepared for equity to be part of your compensation package
	-   Tend to be smaller teams, more flexible, and more casual
-   What to expect at a mid-size company:
	-   Size: 50-500 employees
	-   Typically more structured and process-oriented than a startup, with more shared responsibility
	-   Systems for benefits, promotions, etc. may be more established, and there is often a clear path to career growth
	-   More opportunities for mentorship
	-   Salaries are reasonable, and equity may not be as common
	-   More stable than a start-up
	-   Work culture depends on location and specialty
-   What to expect at large corporations:
	-   Size: 500+ employees
	-   Might feel like another cog in the wheel rather than a critical part of making the machine run; your impact won’t be as large but the demands placed on you will likely also be smaller
	-   Salaries may be higher, benefits are often highly competitive (expect to earn and accrue PTO, though!)
	-   Hiring process may take longer, and depending on the company, roles may be more competitive
	-   Environment is structured with strict hierarchies; often job bands are established to promote equity among the workforce, and there may be very clear paths for promotion with freequent opportunities to advance
	-   Great opportunities for mentorship, and may have established in-house training opportunities, staff affinity groups, etc.
	-   Name recognition can be a major boost for your resume
	-   Work culture depends on location and specialty
-   Setting realistic expectations for yourself:
	-   Your first job will not be your dream job!! It’s a stepping stone
	-   Be targeted in your search, but be open to a range of opportunities. Don’t turn down any opportunity to interview.
	-   Willingness to relocate could open up a lot more doors depending on the local job market
	-   While remote jobs are a possibility, it can be more challenging to find junior-level positions that are remote, and we recommend your first job after Lambda be in person since it is much easier to get feedback, mentorship, visibility, and growth opportunities when you’re working somewhere in person
	-   Be prepared to stay in your first job ideally for a year; this helps you build your skills and credibility, and it’s a red flag for any employer when they see lots of movement early in your career
	-   Similarly, don’t take opportunities away from future grads! Sometimes we see alumni who have jobs coming back and applying to open roles through us. Your first job after Lambda School is your foot in the door; w’re hr to coach and support you but want everyone to have their shot.
	-   Rejections will happen- they’re part of the journey! They aren’t fun, but use them as a learning opportunity. If you’re not someone who believes “everything happens for a reason”, then think about it as “I will make the best of whatever situation I’m in no matter what.”
-   Success on the job:
	-   We’ll talk about this more later on, but some of this is relevant to share in the context of setting expectations!
	-   The interview lasts for 3-6 months. Your initial period at a new job is a trial phase; some companies even have formalized “probationary periods” when they evaluate new hires’ fit within the company, but even those who don’t are still scrutinizing your work heavily until you “prove yourself”
	-   It’s ok to make mistakes, but avoid the avoidable, and don’t make the same mistake twice.
	-   Ask for feedback!
	-   Build relationships with peers through social activities, but don’t spend hours a day at the ping pong table, even if you have that much time to spare
	-   Be mindful of alcohol, if there is a drinking culture at your company. Cut yourself off after one (if you’re an infrequent drinker) or maximum two drinks, even if your colleagues are getting drunk!
	-   Avoid asking for PTO in the first couple months; if you have a preplanned trip or event then it’s a good idea to bring that up during the offer stage of the interview, and otherwise avoid PTO requests except for emergencies.
-   What we expect from you:
	-   Create a gmail account using the following format: firstname.lastname@gmail.com
	-   Feedback is a gift! You’ll get a lot of it here; it’s not to discourage you or knock you down, it’s to help you grow. For feedback on your resume , portfolio, etc, trust your coaches and mentors- we get feedback all the time from companies who hire grads and we know what we’re talking about with this!
	-   Do your career assignments; you’re going to have to complete them all eventually, so do theem now so you don’t have to catch up unnecessarily later
	-   Don’t ghost your coach!
	-   Keep us in the loop- if you get an offer, tell us!
	-   Code or design every day throughout your job search… we mean literally 5 days a week. If you take a week off, your hirability decreases dramatically.
	-   Trust the process!",,"'-   Write out a paragraph describing your priorities in a company and what type of environment would be the best fit for you (small, mid, large, casual vs more formal, more or less fast-paced, etc.) and submit to your PM on Friday",9zslOC4KbsU,http://youtube.com/watch?v=9zslOC4KbsU,https://www.youtube.com/embed/9zslOC4KbsU,,,,,Intro to Careers and the Tech Landscape,,Intro to Careers and the Tech Landscape,Career Development,,1,1,1,3
explain the use importance of foreign keys,,,,,,BgPwDwW3FE8,http://youtube.com/watch?v=BgPwDwW3FE8,https://www.youtube.com/embed/BgPwDwW3FE8,,,,,,,,,,0,,1,1
 develop an objective understanding of imposter syndrome and how it appears when learning and on the job,"Imposter syndrome can show up in a lot of ways, but almost always is tied to the general feeling of, “I shouldn’t be here/doing this, I’m not smart or skilled enough.” If this is constantly on your mind, you may not want to take on new challenges, or volunteer for a leadership role in a project, or apply for your dream job, which then eliminates your chance to learn and grow from that experience. Some of you are still reading this thinking, “but really… I’m just terrible at ____.” so in this lesson, we’re going to cover how to recognize imposter syndrome as it crops up in your life.",,"-   Imposter syndrome can appear as the following:
	-   Perfectionism
	-   Fear of asking for help
	-   Avoidance of trying new things in case you aren’t good at them
	-   Deflected praise/compliments
	-   Overworking
	-   Anxiety when faced with academic or professional challenges
	-   Minimizing the time/work you dedicated to something
	-   Comparing yourself to others
-   Do any of these sound like you? You’re not alone- the majority of people experience these feelings at some point in their career, and it’s unsurprisingly common in cultures of high achievement, such as the tech field as a whole.
-   We see this with Lambda students and graduates all the time; despite excelling in their learning, taking on stretch projects, and landing stellar job offers, many still doubt their abilities or potential
-   Some students may look at others who started Lambda School with more technical experience, and assume that person is smarter than them or better in some way.
	-   There’s a big difference between knowing more about a specific topic and being smarter!",,,,,,,,,,Imposter Syndrome and Diversity and Inclusion,,Imposter Syndrome and Diversity and Inclusion,Career Readiness,,1,,,1
respond productively to imposter syndrome in a way that works through it,"Chances are, you can’t just get rid of imposter syndrome by thinking about it, but there are ways to prevent it from happening and to process it when you do feel it coming on so you can translate that anxiety into something more productive.",,"-   How to address imposter syndrome both before it starts and when you feel it coming on:
	-   Keep a record of your feedback from others; root your self-doubt in reality. By reviewing what others have said about you, you can identify what specifically you’re good at and what specifically you could improve on. Write down this feedback and read it regularly!
	-   Set goals: by setting specific, achievable, and measurable goals, you can easily evaluate if you’re meeting the expectations you set for yourself, which can give you a major confidence boost.
	-   Think about past challenges: there was a time in your life when you didn’t know how to read, drive a car, or boil an egg. But you learned how to do these, and probably much harder things! Coding or design might be tied to your livelihood and cause more stress as a result, but that has nothing to do with your ability to learn.
-   Overcoming imposter syndrome: internalize these points!
	-   You will never know everything- embrace this and lean into a life full of mistakes and learning.
	-   Everyone starts somewhere, and you won’t get anywhere by not starting. Sometimes you just need to go for it.
	-   Questions are your friend- they don’t mean you’re stupid, they mean you’re curious.    
	-   Ask for feedback- learn what you’re doing well and what you need to work on. If you aren’t getting specifics from the other people, ask for details.
	-   Keep track of everything you’re doing and learning- when you look at the list after a few weeks/months of keeping track, you’ll probably feel pretty good about yourself.
	-   Act confident, even when you don’t feel it. Putting on a confident face and posture can help you ask for help, ask questions, and accept tough feedback while still feeling powerful and qualified- in short, acting confident=feeling confident!
	-   When someone praises you, say “thank you.” Full stop. Unless you’re literally getting credit for someone else’s work, but you getting praised for an hour-long presentation you spent weeks preparing for and shifting the credit to your coworker who prepared one slide for the entire thing doesn’t count",,,,,,,,,,Imposter Syndrome and Diversity and Inclusion,,Imposter Syndrome and Diversity and Inclusion,Career Readiness,,1,,,1
differentiate between imposter syndrome and growth opportunities,"While you should never feel like an imposter, having a healthy awareness of your limitations and growth areas can help keep you grounded in your career and coachable when there are actual opportunities for you to become stronger in a certain aspect of your career.",,"-   This is not all to say that you’re 100% perfect at everything and don’t need to do anything at all differently. If you get feedback from a colleague or an instructor, use that feedback to help you grow!
-   It’s healthy to maintain just a tiny shred of imposter syndrome- this can help you keep your ego in check! If you are someone who brushes off feedback or thinks “psh, I’ve got this.” before a job interview and doesn’t prepare, then this might be you!","Ask yourself: 
- What skill do you feel most confident with? It can be a skill or a character trait
- What is one doubt or concern you’ve felt since starting Lambda School? 
- Do you consider yourself to be someone who feels imposter syndrome? How does it show up in your life? 
- What (if anything) has helped you recognize your value-add at Lambda School or in previous environments?","-   Write down your 5 greatest professional strengths. These can be technical or soft skills, but should be specific- “I’m nice” isn’t a strength.
-   How have these strengths helped you in your career/education with Lambda School so far?
-   What are 3 growth areas that you want to work on? Again, either technical or soft skills are fine, as long as they’re specific- no “I’m terrible at HTML”- what do you struggle with specifically about HTML?
-   What are 2 steps that you can start taking right away to improve in these growth areas? Create at least one goal for each growth area that you want to work on over the next two weeks
-   Submit your goals to your PM this Friday, and revisit your strengths, goals, and goal progress regularly. When you feel imposter syndrome coming on, they can help remind you of the strengths you already possess as well as your ability to overcome obstacles and challenges.",,,,,,,,,,,,,1,1,,2
send a cold outreach message via LinkedIn or email to someone they wish to connect with,"Jeff Henriod, Director of Partnerships at Lambda School, recently led a presentation on cold outreach. This is a major part of what his team does to generate new opportunities for Lambda grads, so review the recording of his presentation to learn strategies for successful cold outreach.",,,,"'-   Send at least 5 cold outreach messages to someone on LinkedIn (or via email if you have their email addresses)
-  Reference the [email outreach templates](https://docs.google.com/document/d/1owl_mvOeXt08TfEQlfYGimRzQ9QIDLY1ewBgK7SHC5I/edit?usp=sharing) or [300 characters or less LinkedIn message templates](https://docs.google.com/document/d/1HLfnzpXFY3vn1UzBEhE1g7pNnEzNZIfS2Dw6b3FORj8/edit?usp=sharing) for help crafting your message",2uqgQ3i1EEU,http://youtube.com/watch?v=2uqgQ3i1EEU,https://www.youtube.com/embed/2uqgQ3i1EEU,,,"LinkedIn Cold Outreach in 300 Characters or Fewer,Networking and Outreach Templates",,Cold Outreach,,Cold Outreach and In-person Networking,Career Readiness,,0,1,1,2
identify opportunities for in-person networking that are of interest to them,"Reaching out to people online is quick and easy, but there’s nothing like meeting people in person! You always want to transform a cold contact into a warm contact, and in order to do this, you want to meet with the person! Meeting people in real life, whether it be in person or online, in groups or 1:1, is a more impactful way to build meaningful relationships that will support you in your career.",,"'-   Ways to meet someone in person:
	-   Informational interview
	-   Mutual interest
	-   Networking or other professional event
	-   Social event
-   Informational interviews:
	-   These are the most common way you’ll build your network. Informational 	interviews are low-stress ways for you to learn more about your field while also getting your name out there.
	-   They are for you to learn about your desired company or field, so prepare questions! It’s good to let the conversation flow naturally, but you don’t want to not have anything prepared at all.
	-   Avoid asking for a job directly in informational interviews; if the person specifically mentions a role you may be interested in then great, but you don’t want to put the person on the spot.
-   Mutual interest:
	-   Sometimes you meet someone else in your field whom you click with and share many interests with. They might be as junior as you, so won’t necessarily be able to help you in the near future, but this is still a great way to build your network! They might know people who could help you, or keep you in mind if they get a job and then their team opens up another role a couple months down the road. It’s also nice to have an accountability buddy in addition to your Lambda peers, but who lives near you.
-   Networking or other professional event:
	-   We’ll talk more about networking/professional events below, but this is typically what people think of when they think “networking.” Your options may be limited depending on where you live, so online events and networks can also be a great resource for you.
-   Social events:
	-   You never know whom you’re going to meet and when or where! You might be out with friends, at a concert, waiting in line at the grocery store, or in an Uber when you meet someone who has your dream job, so don’t let the opportunity slip away! Ask them questions about their field, share what you’re learning, and ask if you can follow up at a later date to learn more.
-   Networking events: Before you attend an event, you need to find one. Depending on where you live, this might be easy; major cities tend to have meetups and events almost every night of the week, so you can pick the ones most interesting/relevant to you.
	-   If you live in a smaller city or remote area, you may have fewer options, or need to travel very far to take advantage of in person events.
	-   Depending on the event, it may be worth your while to travel, but weigh the potential advantages before going far out of your way
	-   You can also visit online networking/events; you can meet people in your area and elsewhere through hackathons, social media, GitHub, LinkedIn Groups, Facebook Groups, Stack Overflow, and more.
	-   For in-person events, Eventbrite, Meetup.com, and TechEvents.co are great starting points. A simple google search of “tech events near me” is also a great starting point.
	-   Types of networking events:
		-   Open networking: great for extroverts, these events are a free-for-all for attendees to meet and interact. They may have some structure, or they may just be an open space for people in a field/industry to mingle.
		-   Round-table: generally at a literal round table with 6-10 people, including a table leader, groups will be given discussion topics to kick off a conversation. It provides some guided conversation and prompts while often digging into specific topics relevant to the event
		-   Speed networking: just like speed dating, these events give you a chance to meet a lot of people 1:1 with guided conversation. Great for people who prefer intimate conversations or some help getting the ball rolling, speed networking also helps set the stage for follow-up conversations later during the open networking portion.
		-   Panel discussions: these usually focus on a specific topic, and a panel of 	industry experts will answer both prepared and live questions on that topic. These often are followed by open networking time where you have a chance to meet the panelists or other attendees, and the panel discussion often provides great material to kick off conversations.
		-   Conferences and project-based events (i.e. hackathons): These are generally not solely for networking, and may have a cost to attend/participate, but will also provide plenty of opportunity to get to know the other people there!
	-   Tips for making the most of networking events:
		-   Set goals for how many people you want to talk to before you attend, 	especially if you’re a more introverted person!
		-   Have some conversation-starters ready to go for any awkward silences: use the [conversation starters guide](https://docs.google.com/document/d/1_psIFrb87SnKHHF8oJnCZxXwI6SszCXssmpEoRwzkCA/edit?usp=sharing) to give you some ideas
		-   Follow up with the people you meet, and ask for help if they’re in a position to provide advice or an introduction
		-   Not every networking event will feel super relevant or interesting; you may find that you prefer 1:1 situations, and it’s ok to spend more time following up with your network and messaging cold contacts if that is a more rewarding networking experience for you. But give it a try!",,"-   Identify three upcoming networking events that you can attend over the next month or two. If you live in an area without many events like this, then instead join three online groups relevant to your field and interests and post an introduction.
-   Submit screenshots of your event RSVPs or your group posts to your PM on Friday.",pF8qQMlRSew,http://youtube.com/watch?v=pF8qQMlRSew,https://www.youtube.com/embed/pF8qQMlRSew,,,Conversation Starters,,Cold Outreach,,Cold Outreach and In-person Networking,Career Readiness,,1,1,1,3
prepare for signing non-disclosure agreements (NDA) and understand their implications,"-   While it’s common to sign an NDA before starting at a company, it’s becoming more common to sign them when you go in for interviews since you may be given information about products or initiatives that are not public knowledge. These are legally binding documents, and while they’re standard in the tech industry, could have significant consequences if violated, so it’s important to understand their implications.",,"-   When you visit a company, go in for an interview, or sign an offer, NDAs are frequently part of the process. While it’s a standard practice for employees to sign NDAs before starting, many tech companies ask candidates to sign NDAs before interviewing.
-   This generally means that the company plans to discuss “trade secrets”, or private company information with you in the process that is not available to the public. Signing an NDA allows the company the flexibility to show you things behind the screen that you wouldn’t otherwise have access to.
-   As with any legal document, it’s important to thoroughly read the document before signing so you know what you’re agreeing to.
-   You will need to be extra careful if you plan on posting a review of your interview experience on Glassdoor, even after you’re hired. The NDA may only cover technologies or certain proprietary information, but it could extend to everything from the reporting structure to the types of questions you were asked in the interview.
-   Even if you do not sign an NDA, it’s always a good idea to be discrete whenever talking about a company you interviewed at. Avoid posting about your interview on social media, LinkedIn, or in a blog/vlog.
-   If you want to share your interview experience as a way to help others or blog about your learning journey in Lambda School, that’s ok, but avoid mentioning the company’s name directly, and avoid mentioning anything very specific about the company that could be used to identify it. It’s also a good practice to avoid speaking negatively about an experience, no matter how discrete you’re being about the company, as it doesn’t reflect well on you as a candidate.",,,6Vu5xRhlWvM,http://youtube.com/watch?v=6Vu5xRhlWvM,https://www.youtube.com/embed/6Vu5xRhlWvM,,,Sample NDA,,Navigating Offers and Negotiations,,Navigating Offers and Negotiations,Career Readiness,,1,,1,2
manage multiple offers professionally and leverage them as a negotiation tool,"Having multiple job offers is a good thing, but can be tough to manage if you find yourself in that situation! What if you get a job offer at Company A the day after you get invited for a phone screen at Company B for your dream job? Can you delay giving Company A an answer while you interview at Company B? Can you accept the offer with Company A and then back out if Company B comes through with an offer? What if you decline Company A and then don’t get the offer with Company B after all? Sometimes there isn’t an easy answer to these questions, but we’ll cover how to navigate these tricky situations more in this lesson!",,"'-   When interviewing at multiple companies:
	-   Often you’ll be asked in an interview if you’re applying to other companies. While there’s nothing wrong with applying to multiple companies, interviewers are asking this question because they want to get a feel for how you’re prioritizing your search and evaluating your options.
	-   Wrong way to answer this: “Yes, and I’ve been invited to interviews at six other companies so far.”
	-   Right way to answer this: “As I consider my next steps after Lambda School I have been considering multiple different opportunities, but I’m really interested in how your company is addressing X in the market, and am particularly excited by how my skills in X fit into your need for Y, so I’m really looking forward to talking more about how I might be a fit for your team.”
	-   Always make it about the company you’re talking to!
-   If you get two offers at the same time:
	-   This is ideal! You can evenly compare the two offers and figure out which one you’re most excited about. This might be an obvious answer, or maybe you’re really excited about both and can’t immediately decide.
	-   Using one offer to negotiate another: like we just talked about in negotiations, you can use a job offer to negotiate another one. It’s important to never be demanding when negotiating; treat it as a conversation. But you have some leverage here because another company has decided they want to hire you too, making you immediately more desirable to any other company trying to hire you.
	-   If you want to work at Company A more, and Company B’s salary/benefits 	are better, you can say to Company A: “Thank you so much for the offer! I’m really excited about this opportunity, and loved learning more about the team/company’s focus on X. I wanted to see if there was any wiggle room in the compensation package; I recently was offered a position at Company B with [salary] and [benefits]. Like I said, I am really excited about the opportunity to work on X with your company and think that this would be an ideal fit for both me and the team, so I’m hoping we can find a way to close this gap.”
	-   If you want to work at Company A more, and Company B’s offer is comparable, you can say to Company A: “Thank you so much for the offer! I’m really excited about this opportunity, and loved learning more about the team/company’s focus on X. I wanted to see if there was any wiggle room in the compensation package; I recently was offered a position at Company B with a comparable salary and benefits. Like I said, I am really excited about the opportunity to work on X with your company, but I’m weighing my options to figure out what would be the best fit for me right now. Is there any wiggle room in the offer?”
-   If you get an offer while interviewing for another job: if the first company to make an offer was your first choice, then this is a no-brainer! That’s not always the case, though, and sometimes you might need to buy time or make a risky/tough gamble.
	-   If you’re in final stages with your preferred company (Company B) when you get an offer from Company A: It’s professional to ask for up to a week to think about an offer. Some companies will allow more time, but it’s not likely you’ll be able to get more time than this.
		-   If they agree to a week: reach out to Company B immediately and let them know that you received an offer from another company, but that Company B is your first choice. Ask if there’s anything you can do to clarify your experience, or information you can provide to facilitate their decision.
		-   If they say they need to know sooner: still reach out to Company B and see what can be done, if anything.
	-   If you can’t get your preferred company to budge in time, then you’re faced with a dilemma: do you decline an offer in the hopes that you get one you prefer? Or do you accept the offer and withdraw from your preferred company?
		-   Consider the odds of you landing the job you’re interviewing for; are you highly qualified? Have you gotten good signals from the interviewers so far? Is it a smaller or less competitive company?
		-   There’s no right answer here- but whatever you do, OWN YOUR DECISION!
-   If you start a job, and then hear from your dream company about a job there after less than a year working at your job:
	-   This is a tricky situation. Generally, you want to stay at a job for at least a year, unless the work environment is toxic or the job ends up being completely different than what was advertised during the interview process.
	-   No matter what, you never want to say anything to your employer until you’ve gotten an offer from another company.
	-   You can try explaining the situation to your dream company; they will likely respect your concern, and it’s likely that if they’re growing, the opportunity will still be there later on.
	-   Ultimately, you need to make the choice that’s right for you, but it’s generally a major professional no-no to leave one job after a short period for another job. It costs companies a lot of money to onboard a candidate, and when you consider that you’re probably not adding a ton of value for the first couple months after you join, if you leave suddenly then that translates into the company having a major productivity hole in one of their teams for maybe 6 months out of a year.
	-   You’re also an ambassador for Lambda School! Especially while the company is in its early stages, alumni have a lot of influence over companies’ perception of Lambda School.",,,,,,,,Considering the Offer 1-Pager,,Navigating Offers and Negotiations,,Navigating Offers and Negotiations,Career Readiness,,1,,,1
conduct market research to accurately estimate their value as an employee,"Knowing your value is the first step to negotiating your salary. Your value will vary depending on the company, industry, and the local market where you live/work. By knowing your value, you will prevent yourself from selling yourself short in a negotiation, and you will also prevent yourself from overselling yourself and sounding unprepared to an employer. We’ll cover where to go to do this research in the lesson ahead.",,"-   Your number one resource is Glassdoor, but PayScale, ZipRecruiter, and Google are also good places to go
-   Glassdoor can give salary ranges based on company, job title, industries, and regions, so it’s the best way to piece together what you as an individual may be worth in different scenarios.
-   Because Glassdoor depends on user contributions, however, it may not be as robust in areas where there isn’t as strong of an economy. If you can’t find what you need on Glassdoor, then a simple google search of “how much does a [title] make in [field] in [region]” should help you start to narrow things down.
-   Look at multiple resources; don’t rely on one website, because its data could be skewed. Try to find some consistencies and average out what you find from there.
-   You also need to consider your value when you’re applying to jobs; if you have skills or experience that are unique but desired by the employer, that increases your value. If you have intimate knowledge of the industry or the company’s product, that increases your value. If you’ve done a project before that closely relates to one of the main projects you’ll be asked to do in your role, that increases your value.
	-   Throughout each stage of the interview process, take notes. Look through those notes later, and highlight anything that you have a strong background/skill set in. When it comes time to negotiate an offer, you can reference those things from the interview, and prove that you’re worth more because you’ll be able to dive in early on in your role and add value right away.","-   We will go through how to research the market value for a data analyst, UX designer, and android developer in three different job markets in the US.",-   Research the market value for someone with your skill set in your local/desired market. List out any particular strengths you have that would make you more valuable to an employer. Submit both your research with a salary range and your competitive strengths to your PM on Friday.,,,,,Money Moves: Financial Planning and Salary NegotiationsAll changes saved.,,,Navigating Offers and Negotiations,,Navigating Offers and Negotiations,Career Readiness,,1,1,,2
apply basic negotiation strategies to a variety of compensation conversations ranging from phone screens to the final stage,"Negotiation can be stressful. Lots of people don’t even bother to do it because it’s so stressful. You don’t want to let this be you! You could miss out on tens of thousands of dollars over the course of your career by not negotiating in your very first job; this is because salaries frequently compound over time. The higher you start, the higher your earning potential. Negotiating is just as much a part of the job process as interviewing, so companies expect you to do it; you’ll never lose an offer if you try to negotiate, at least not at any legitimate company.",,"'- Always negotiate! This is an expected part of the job process; most employers have a range they can offer for a role; it’s in their best interest to offer the lower end of that range, and they also know that you may try to negotiate, so they want to start low
	-   You will never lose an offer for trying to negotiate in a professional and respectful manner. If a company tries to threaten you with this, you probably don’t want to work for them.
	-   Once you have an offer, this is when you have the leverage; the company has decided you are the best person for the job and they want you, so now you have all the power in the situation! Use it!
-   Do your research!
	-   Being prepared is key; Glassdoor, Payscale, Ziprecruiter, and other sites are your friend! Start with a simple google search of “how much does a X developer get paid in Y city/town/region” and see what comes up. Try to narrow it down by company, but for smaller companies this might not be possible.
	-   ALWAYS consider the local job market/economy/talent pool. If you live in Jacksonville and ask for a salary that someone in Washington DC makes, the recruiter won’t take you seriously. Similarly, if you live in an area where the cost of labor is high, and ask for the national average for your role, you might miss out on ten of thousands of dollars per year
-   They often start in the phone screen: be prepared for this to come up in the very first conversation! Do your research, have a range in mind, and practice having the conversation multiple times so you’re ready for it.
	-   What you say in the first conversation will impact your negotiating power later on, so it’s important to not miss this opportunity
-   Always give a range, and aim high: If and when you do have to give a number, always give a range so you’re not locked into one amount. Research your expected range for the role, and always offer the higher end of that. So, if a junior data scientist makes on average $90-100k in your region, it’s appropriate to ask for $95-$105k
-   Be realistic: don’t ask for $200k for a junior developer role; you’ll look unprepared and the employer won’t take you seriously. But don’t ask for $50k when the average junior developer in your area is making >$80k!
-   Treat it like a conversation: it’s easy to feel like salary negotiation is a confrontation, with two people competing to get their way.
	-   You both have your priorities, so negotiation is just about understanding the other person’s (or company’s) needs and addressing how you can meet them.
	-   If you get an offer that seems way lower than you were expecting, it’s ok to ask how they arrived at that amount. After they explain, you can gently push back and say “based on my research, it seems like a range of $x-$y is standard for the local market; could you share how your compensation package aligns with that?”
-   Compensation is about a lot more than just the salary
	-   Compensation includes benefits, bonuses, equity, and perks in addition to cash.
	-   Consider the whole compensation package; this is another example of why it’s so important to know your financial needs and priorities going into any conversation with a company!
-   Everything is negotiable: you may not be able to negotiate your salary, but you could maybe negotiate an extra week off. You can also ask for a review at 3 or 6 months with consideration for a merit increase if your performance is good.
-   Take at least 24 hours to consider an offer: you never have to accept or even negotiate on the spot, and taking some time to think about things ups the ante a bit for the company, and gives you the chance to really evaluate the offer and prepare for a negotiation. You may ask for up to a week to consider an offer, but some companies may request you give them a final answer much sooner depending on their timeline.
-   Always get it in writing: if it’s not in writing, it doesn’t exist. You might agree on something verbally with your new manager, but what happens if your manager leaves 2 months in and the new person refuses to honor that agreement?
	-   **Never sign anything until you have the full, agreed-upon offer in writing and you’ve reviewed everything thoroughly.**",,,,,,,,Salary Negotiation Talking Points,,Navigating Offers and Negotiations,,Navigating Offers and Negotiations,Career Readiness,,1,,,1
"understand how we approach Careers at Lambda School, what support we provide in the search, and what Lambda School expects of students","Think of the Lambda School team as your combined team of coaches and cheerleaders, with your fellow students as your teammates. We’ll be here to offer guidance, feedback, and celebrate you every step of the way, and we hope that you each will do the same for each other, too! Lambda School will be here to support you every step of the way, but we can’t fill your portfolio with projects, go to your interviews, or show up on your first day of work for you. In this part of the lesson, we’ll cover why we’re starting careers so early, what you can expect from Lambda School, and what we expect from you.",,"'-   So, why are we talking about careers so early? There are four main reasons for this
	-   We’ve seen students get contacted for job opportunities as early as several weeks into their time with Lambda School, and we don’t want to prevent anyone from pursuing those opportunities!
	-   Career preparation takes time; some parts of job searching, like networking and researching companies you want to work for, should be done over the course of months. By starting with these concepts early on in the career content, we hope to give you a jump start on the most critical information you need to be successful in your search later.
	-   Getting a job in tech is not as simple as pulling together a resume and submitting applications. You need a portfolio, active GitHub or Dribbble, projects, practice in technical interviews, and more in order to be a competitive candidate. If we started careers later, you’d either have to spend a lot of time during some of the busiest parts of your technical content on careers, or do it after graduating from Lambda School, which would delay your ability to search for jobs.
	-   Finally, and not least of all, careers should be on your mind at all times!! Your instructors will tie in what you’re learning with how you will use it on the job, or talk about it in an interview, or highlight it on your resume, and you should constantly be asking yourself how you can do these things too. It can be hard to keep this perspective when you’re neck-deep in challenging technical concepts, though, so by kicking off your weeks with Career content and using your Monday afternoon PM meeting to review it, we hope to keep this top of mind for you.
-   So, what can you expect from us? Your coachees will…
	-   Review your LinkedIn, resume, and associated artifacts
	-   Provide feedback during interview prep
	-   Offer guidance in job offer negotiations
	-   Host open office hours Monday-Friday\
	-   Support you through the job search after you graduate until you land a job
	-   Hook you up with some sweet swag once you land your first job!
-   What is it that we don’t provide?
	-   24/7 access to career coaches, or access to coaches before Sprint 15- we have daily office hours for any questions you have, and you will be matched with a coach after Sprint 15
	-   Guaranteeing or providing you with a job- we have hiring partners whom we work with and can connect you to them for opportunities, but that’s just a foot in the door. You will still need to wow employers in the interview, and we can’t do that for you!
	-   Doing the work for you- we will arm you with the skills and support that you need to efficiently find a job, but at the end of the day, your job search is yours and you will need to be prepared to put in the work to earn an offer!
-   Other resources in your job search:
	-   Mentorship: We’re excited to have recently launched a mentorship program for recent graduates of Lambda School! After you complete Sprint 30, you will have access to a Lambda School mentor. We match graduates with mentors based on region, field, and other student preferences, and while your mentor is there to provide feedback and guidance in your search, they’re also there to connect you to their network, too.
	-   Labs Continuing Education: After you graduate from Lambda School, then what? What if you don’t get a job right away? Labs Continuing Education (Labs CE) is there to provide continued structure and support as you enter your search. Morning time is devoted to job searching, and afternoons are devoted to projects with other searchers so you can keep building your skills up. Students who take a break after graduating, even for just one week, are 50% less likely to get a job in their field than students who keep their skills sharp, so it’s critical to stay engaged with your learning and search until you land your first opportunity.
	-   Partnerships: We have an entire team at Lambda School dedicated to finding companies that want to hire Lambda grads. While you shouldn’t rely solely on these partnerships (we can’t guaranteee a job in your local area, or in your preferred field, for example), we’re constantly working on building out these partnerships!
-   Setting goals: Each week of career lessons will have a theme, and every week will have an assignment to give you a chance to practice the skill covered, or build out your career toolkit (i.e. portfolio, artifact, or resume assignments)
	-   Depending on your previous experience, you may find that some of these assignments aren’t super challenging for you. Whenever possible we’ll offer options to cater to people at different points in their careers, but you should also think more about how you can take your skills to the next level with any of the assignments given or topics covered.
	-   For example, in the LinkedIn week, we’ll be assigning an updat to your LinkedIn profile- if you’ve been keeping your LinkedIn up to date regularly and it meets the expectations set by the rubric, great! You have options here: you could just submit your LinkedIn as-is to your PM and not do any extra work, or you could use this as an opportunity to find new LinkedIn connctions, reach out to established connections you havne’t talked to in a while, set up filters and job alerts, or publish a blog/article to your page. HINT:  you should do the latter!!!
	-   Remember, as with most things, the more work you do now in your search, the less you’ll need to do later, and the easier it will be to find a job!",,,9zslOC4KbsU,http://youtube.com/watch?v=9zslOC4KbsU,https://www.youtube.com/embed/9zslOC4KbsU,,,Job Search Tool,,Intro to Careers and the Tech Landscape,,Career Services Expectations/Tech Landscape,Career Readiness,,1,,1,2
set expectations for their job search and the tech field,"Part of being successful in your search is knowing what you want, and part of being successful once you get a job is knowing what the expectations (both overt and unspoken) are of you as a junior in the field. People talk about “tech” a lot, and it’s both glorified and satirized in the media (any of you who watch Silicon Valley know what I mean!) But having a technical job doesn’t mean working at a tech company, and working at a tech company doesn’t mean happy hours and foosball tables to give you a break from your 80-hour weeks. Ahead, we’ll go over some of what to expect at different types of companies, and some basics for navigating different types of environments if this is your first time working in that setting.",,"'-   What to expect at a startup:
-   Size: <100 employees
-   You will “learn by doing”- expect to wear many different hats, and do things outside of your official job description
-   Tend to be fast-paced; your work will be critical to the success of the company, and sometimes ownership won’t be clearly defined. This can be a challenge but can also mean more opportunity for quick advancement and recognition
-   Job stability might be riskier
-   Personality traits needed: self-starter, adaptable, ability to juggle many priorities in a fast-paced environment
-   Salaries might be lower, but you may have perks uncommon at larger companies, and be prepared for equity to be part of your compensation package
-   Tend to be smaller teams, more flexible, and more casual
-   What to expect at a mid-size company:
-   Size: 50-500 employees
-   Typically more structured and process-oriented than a startup, with more shared responsibility
-   Systems for benefits, promotions, etc. may be more established, and there is often a clear path to career growth
-   More opportunities for mentorship
-   Salaries are reasonable, and equity may not be as common
-   More stable than a start-up
-   Work culture depends on location and specialty
-   What to expect at large corporations:
-   Size: 500+ employees
-   Might feel like another cog in the wheel rather than a critical part of making the machine run; your impact won’t be as large but the demands placed on you will likely also be smaller
-   Salaries may be higher, benefits are often highly competitive (expect to earn and accrue PTO, though!)
-   Hiring processes may take longer, and depending on the company, roles may be more competitive
-   Environment is structured with strict hierarchies; often job bands are established to promote equity among the workforce, and there may be very clear paths for promotion with freequent opportunities to advance
-   Great opportunities for mentorship, and may have established in-house training opportunities, staff affinity groups, etc.
-   Name recognition can be a major boost for your resume
-   Work culture depends on location and specialty
-   Setting realistic expectations for yourself:
-   Your first job will not be your dream job!! It’s a stepping stone
-   Be targeted in your search, but be open to a range of opportunities. Don’t turn down any opportunity to interview.
-   Willingness to relocate could open up a lot more doors depending on the local job market
-   While remote jobs are a possibility, it can be more challenging to find junior-level positions that are remote, and we rcommend your first job after Lambda be in person since it is much eeasier to get feedback, mentorship, visibility, and growth opportunities when you’re working wonmewhere in person
-   Be prepared to stay in your first job ideally for a year; this helps you build your skills and credibility, and it’s a red flag for any employer when they see lots of movement early in your career
-   Similarly, don’t take opportunities away from future grads! Sometimes we see alumni who have jobs coming back and applying to open roles through us. Your first job after Lambda School is your foot in the door; w’re hr to coach and support you but want everyone to have their shot.
-   Rejections will happen- they’re part of the journey! They aren’t fun, but use them as a learning opportunity. If you’re not someone who believes “everything happens for a reason”, then think about it as “I will make the best of whatever situation I’m in no matter what.”
-   Success on the job:
-   We’ll talk about this more later on, but some of this is relevant to share in the context of setting expectations!
-   The interview lasts for 3-6 months. Your initial period at a new job is a trial phase; some companies even have formalized “probationary periods” when they evaluate new hires’ fit within the company, but even those who don’t are still scrutinizing your work heavily until you “prove yourself”
-   It’s ok to make mistakes, but avoid the avoidable, and don’t make the same mistake twice.
-   Ask for feedback!
-   Build relationships with peers through social activities, but don’t spend hours a day at the ping pong table, even if you have that much time to spare
-   Be mindful of alcohol, if there is a drinking culture at your company. Cut yourself off after one (if you’re an infrequent drinker) or maximum two drinks, even if your colleagues are getting drunk!
-   Avoid asking for PTO in the first couple months; if you have a preplanned trip or event then it’s a good idea to bring that up during the offer stage of the interview, and otherwise avoid PTO requests except for emergencies.
-   What we expect from you:
-   Create a gmail account using the following format: [firstname.lastname@gmail.com](mailto:firstname.lastname@gmail.com)
-   Feedback is a gift! You’ll get a lot of it here; it’s not to discourage you or knock you down, it’s to help you grow. For feedback on your resume , portfolio, etc, trust your coaches and mentors- we get feedback all the time from companies who hire grads and we know what we’re talking about with this!
-   Do your career assignments; you’re going to have to complete them all eventually, so do them now so you don’t have to catch up unnecessarily later
-   Don’t ghost your coach!
-   Keep us in the loop- if you get an offer, tell us!
-   Code or design every day throughout your job search… we mean literally 5 days a week. If you take a week off, your hirability decreases dramatically.
-   Trust the process! The guidance we provide you is based off feedback we get directly from our partners who hire Lambda School grads, so we do everything we can to make sure you're getting the most relevant information possible to help you in your search!",,"'-   Write out a paragraph describing your priorities in a company and what type of environment would be the best fit for you (small, mid, large, casual vs more formal, more or less fast-paced, etc.) and submit to your PM on Friday.",9zslOC4KbsU,http://youtube.com/watch?v=9zslOC4KbsU,https://www.youtube.com/embed/9zslOC4KbsU,,,,,Intro to Careers and the Tech Landscape,,Career Services Expectations/Tech Landscape,Career Readiness,,1,1,1,3
use knex seeding to add test data,,,,"To create a seed type: `npx knex seed:make 001-seedName`. Numbering is a good idea because `knex` will not add a timestamp to the name like migrate does. Adding numbers to the file name we can control the order in which they run.

In some Relational Database Management Systems it is not possible to delete records referenced by `foreign keys`. To deal with that we'll use an npm module called `knex-cleaner`. This module can empty all tables and reset all primary keys. We just need to guarantee that it runs before any other seed.

- Add `knex-cleaner` as a development dependency: `yarn add knex-cleaner --dev`.
- Add a new seed to clean all tables: `npx knex seed:make 00-cleanup`.
- Add the following content to the generated seed file.

```js
// ./seeds/00-cleanup.js
const cleaner = require('knex-cleaner');

exports.seed = function(knex) {
  return cleaner.clean(knex); // cleans all tables and resets the primary keys
};
```

- Add a new seed file for the `roles` table: `npx knex seed:make 001-roles`
- add the following content to the generated seed file:

```js
// ./seeds/001-roles.js
exports.seed = function(knex, Promise) {
  // the 00-cleanup.js seed already deleted all records
  // we just worry about seeding records in all other seeds
  return knex('roles').insert([
    { name: 'student' },
    { name: 'PM' },
    { name: 'TA' },
  ]);
};
```

Run the seed files by typing: `npx knex seed:run`.

Run the API and test it out from Postman, all endpoints should still work, only now they are working with the new database we created using migrations and seeding.",,,,,,,,,"""Querying Data, Migrations and Seeding""",,Adding Data Persistence to Web APIs,Full Stack Web Development Core,,0,,,0
use knex to run queries,,,,,,oScbRKaizMw,http://youtube.com/watch?v=oScbRKaizMw,https://www.youtube.com/embed/oScbRKaizMw,,,,,,,,,,0,,1,1
"Differentiate between diversity and inclusion, and reflect on the ways they can bring inclusive practices into their work relationships","D&I are buzzwords in the tech field right now, and it’s common to see companies put diversity statements on their website sharing their commitment to diversity. But there’s a big difference between diversity and inclusion, and putting a statement on the company website and having a line about it in the HR manual won’t ensure that a company lives this self-proclaimed value. In the lesson ahead we’re going to discuss what diversity and inclusion really mean, why they matter, and ways that you can bring more inclusive practices into the workplace.",,"-   Diversity vs Inclusion: Diversity can be thought of as what you have, whereas inclusion can be thought of what you do.
	-   Diversity is a mix of identities and experiences. When you’re in an environment that includes people of different races, ethnicities, gender identities, sexual orientations, religions, ages, socioeconomic classes, physical abilities, nationalities, and personal beliefs, that is diversity.
	-   Inclusion is the practice of welcoming people of diverse backgrounds and creating an environment that encourages everyone to participate, share ideas, and feel comfortable being themselves. It’s pretty easy to practice diversity, it’s a lot harder to practice inclusion.

-   As more studies are done on employee performance and satisfaction, there is mounting evidence that not only is having an inclusive workplace supportive of individuals who are underrepresented in the workforce, but it’s actually critical for the success and happiness of all employees. Benefits include:
	-   Higher job satisfaction and employee morale
	-   Lower turnover: happy, satisfied employees stay in their jobs for longer, reducing recruitment and onboarding costs
	-   Higher productivity, improved problem solving, and increased creativity: a diversity of experiences and backgrounds leads to more approaches to problems and a greater breadth of ideas. People with different strengths can lend these to help the team succeed, and ensure that projects can be done more efficiently and effectively.
	-   Stronger recruitment pipelines: Considering ~80% of jobs are found through networking, and most people’s networks reflect their own backgrounds, having a team with all similar backgrounds means that the majority of people they’ll be referring for opportunities will likely have very similar profiles.
	-   Access to a broader customer base: it’s tough to see the world through everyone’s eyes, and a one-size-fits-all approach to product development is often not sufficient to reach the largest audience possible. The more backgrounds are represented on your team, the more likely you will be able to view things from the perspective of your customers.


What if I mess up?!
-   Something I hear a lot is “the definitions of what is/isn’t PC changes so rapidly, I feel like no matter what I say I’m going to offend someone!” Keep in mind:
	-   Everyone makes mistakes. The solution isn’t not to try to be more aware of your words and actions, it’s to do your best, and if you mess up, then ike with anything, own your mistake!
	-   If a colleague provides feedback about something, listen: if someone is making themselves vulnerable to provide feedback that is likely challenging for them to deliver, listen to it. It’s a sign of respect that someone would give you feedback, because it means that they trust that you care and are open to listening.
	-   Avoid excuses or getting defensive: the best response, even if you’re a bit taken aback by the feedback, is to just say “Wow, I had no idea. Thank you so much for telling me, I’ll do my absolute best to avoid doing/saying this in the future.” You can always have a follow-up conversation later if you don’t feel comfortable in the moment.
	-   Assume good intent in others, and assume that others assume good intent in you: this ties into the above. If you trust that others assume good intent in you, it’s easy to not see sensitive feedback as an attack on your character. Everyone has room to grow in all areas, so it’s not an insult.
	-   Ask questions, and invite discourse: use this as an opportunity to learn! If someone offers feedback on something, you can say “thanks so much for telling me, I had no idea. Are there other things that I’ve done or should be aware of? I’m not familiar with X norms/Y culture/Z practices and would love to better consider what I do/say in the future.”

Best practices for inclusion 101:
-   Get to know your colleagues: Personal connection leads to strong professional connection. Getting to know your peers on a personal level means you will be better equipped to consider their needs and priorities, but it will also help establish trust so that when/if a tough conversation needs to happen, you both feel good about it.    
-   Invite participation: You don’t need to be a formal leader to encourage others to speak up. If you notice a colleague isn’t saying much, ask for their input. Or, when making a decision, try asking “does anyone think this isn’t the best plan moving forward?” Negative questions invite dissent better than “so, we all agree, right?”
-   Be an ally: If you hear a colleague use the incorrect pronoun, or mispronounce someone’s name, or pick a restaurant that doesn’t have halal options, don’t leave it up to the person to correct them- you can and should speak up!",,,,,,,,,,Imposter Syndrome and Diversity and Inclusion,,Imposter Syndrome and Diversity and Inclusion,Career Readiness,,1,,,1
tie in their previous experience to their career goals in order to craft a narrative that they feel confident sharing in an interview,"We’ve talked about sharing your story before (also referred to as an elevator pitch), but now that we’re nearing the time when you should be actively applying for jobs, it’s extra important to set aside time to practice telling your story with confidence.

Understanding what differentiates Lambda School from university or other non-college training programs and why that makes your skill set and experience unique is key to highlighting the full value-add you bring to a team and company. 

It can also be tough to tell your story when you have a non-traditional path. How do you talk about your previous unrelated experience? What if you don’t have any previous experience? What if the other person doesn’t “get it” or care? These are all valid concerns, but you control how your story is told, not other people, and in today’s lesson we’re going to go over how to craft a powerful narrative that you feel confident relaying to others.",,"'-   You’ll constantly have opportunities to tell your story; in interviews, at networking events, when meeting people for the first time, on your blog/portfolio, on LinkedIn or your social media, etc.
-   How you tell your story will vary depending on the context; for interviews, you’ll be able to prepare to talk about your story and know exactly whom you’ll be sharing it with ahead of time. Networking events may be more of a surprise though, and you never know when you might meet someone on the street, in an Uber, waiting in line at the grocery store, etc. While your story might seem so personal and obvious that it’s not something you need to practice telling, it’s critical to get comfortable with knowing what to highlight and how to highlight it so the story you share with others is interesting and relevant.

-   How to control your story
	-   Own your experiences: What if you come from retail? Or the food industry? Or customer service? Or were a truck driver? How can you tie these seemingly unrelated experiences into tech?
		-   First, think of the skills you got from these experiences. Not the hard skills, like using a POS system or driving an 18-wheeler. Think of the soft skills; collaboration, communication, independence, time management, creativity, etc.
		-   Identify one or two soft skills you feel are your strongest- how can those tie in to your technical career goals?
		-   Example: “After five years of working in retail, I was able to hone my communication and customer service skills, but I knew that my true passion was in design. I’ve succeeded in building off my customer-centered approach by creating user experiences that delight and engage people, and I’m excited to bring my design aesthetic and customer-first mentality to an agile and ambitious team.”
		-   Example: “I’ve always been passionate about coding, and took a couple free online android developer classes to try to get my own apps off the ground, but my schedule as a truck driver made it really difficult to find the time to work on my programming skills. When I finally committed to learning to become a developer full time with Lambda School, it was an easy and exciting transition. I’m used to long hours, pushing through challenges, and working hard to get my job done, and I’ve launched four fully functional apps in the past five months to prove it!”
	-   You get to control what others think about your past experiences. You can make almost anything relevant to your current situation and future goals, you just have to help the person you’re talking to make that mental leap.
	-   You don’t want to lie about your experiences, but you do want to be selective about what you focus on, and position certain experiences to fit the narrative you want to tell.

-   Structuring your story: While how you structure your story might be a little different depending on the context, the general arc you want to follow is 1) how you got to Lambda School, 2) what you’re learning and how you’ve applied it so far, and 3) what you’re most excited to do next
	-   How you got here, aka knowing your “why”: You all had a reason for joining Lambda School; this is no small commitment!! What is your reason? What keeps you motivated to keep learning, even when you’re frustrated and burnt out? Is it wanting to provide a better life for your family? Knowing that you were not challenged or being utilized to your fullest potential in your previous career? A passion for your chosen field? Whatever the reason, it is probably pretty interesting to others and can tell people a lot about who you are as a person
	-   What you’re learning and how you use it: This part of your story is where you go more into your skills, experience level, and soft skills like creativity, teamwork, leadership, etc. Depending on the format of when you’re telling your story and how much time you have, you probably won’t be able to share all your skills and experience, so you should always try to share the most relevant and/or the most impressive ones.
	-   What you’re most excited to do next: This is your “closer”- how you end your story with something that will hopefully excite and energize the other person, and make them want to keep talking to you. Like with the middle section, you want to tailor this whenever possible to your audience. If you’re a DS student talking to the head of product at a company that is trying to create dashboards that will allow them to use their data better, then you want to end on something like, “As I get ready to transition from Lambda School into my career as a data analyst, I’m looking forward to bringing my skills to a small team looking to evaluate their impact through dashboards, visualizations, and user testing campaigns.” If you can tie your goals into the company’s goals, then you will have likely succeeded in continuing the conversation at a later date!
-   Talking about Lambda School: Currently, there are two main paths that someone who wishes to make a career change as a developer, data analyst or designer can follow: studying the subject in college or going to a bootcamp. While some people learn these skills on the job, this usually happens over the course of a person’s career, so most of the candidates that you’ll be going up against in interviews will be graduates of 4-year degree programs or bootcamps.
	-   While many people would assume that Lambda School is an online bootcamp, it holds key differences from other bootcamps, and digs into some of the areas that make other bootcamps less competitive compared to degree programs, so for this reason we don’t encourage you to call it a bootcamp, even if that is easier to communicate!
		-   Here are some value-adds to consider including when you talk about Lambda School:
		-   Lambda School is not a bootcamp; it is an online training program that helps people build the skills necessary to become a [developer, data analyst, UX designer, etc.]
		-   Lambda School is an intensive online learning experience that combines technical skill building with hands-on, cross-functional group projects every 5 weeks through Build Weeks, and then intensively through Lambda Labs. Combined with dedicated career readiness curriculum that starts within the first few weeks of the program, students graduate with both the hard and soft skills critical for their chosen field
		-   Since students only pay for Lambda School once they’ve gotten a job earning a minimum amount in their field, Lambda has more incentive than most programs that have students pay up front. LS directly works with hiring partners to make sure that the content students receive is the most relevant and in-demand for their field.
	-   As you go through the next several months with Lambda School, your instructors and PMs will give you the opportunity to talk about what you’ve learned that week in the context of your career. This will happen either at the end of the learning day during standup meetings, or during pre-class work time (depending on your track and sprint week). Use this time to gain comfort and fluency talking about your skills!!
	-   Most of telling your story comes down to confidence in talking about your technical skill areas, which only comes with practice
-   Additional tips for talking about your learning experience:
	-   Prepare some examples of skills or concepts that you found challenging, and how you worked through these challenges
	-   Similarly, be able to talk about the projects or skills that you really loved and took to right away
	-   Know what your goals and next steps are in terms of learning in your field, and know why they’re relevant to the field (i.e. this shouldn’t be something that you just want to learn without being able to tie it into how it would benefit a company)","We are going to split up into breakout rooms so you can practice sharing your story in smaller groups. With the other students in your breakout, please answer the following:
-   What are 5 soft skills you learned through your previous experiences? (experiences don’t have to be a job. They can include educational, volunteer, PT work, etc.)challenging, and how you worked through these challenges
-   What are you most passionate about/best at in your current field?
-   What soft skills have been most helpful/relevant to you as you have learned skills for your current field?
-   What are you most excited for next? Focus on the things that add value to others- you might be most excited for your first paycheck, but pick one or two things that you would want to hear from a candidate you were interested in hiring for your team. 

Once you’ve written down the above, combine them into an 3-5 sentence introduction or story you want others to know about you.","Use the feedback you got from your peers to hone your story until you feel confident about it. Ask at least two more people (peers, friends, family, your coach) for feedback, and upload a short video of yourself sharing your introduction to your PM on Friday.",,,,,,,,"""Sharing Your Story, with Confidence!""",,"""Sharing Your Story, with Confidence!""",Career Readiness,,1,1,,2
Implement exception handling using a variety of Java constructs,,,,,,,,,,,,,"""Exception Handling, Java Front End""",,Building Java Web APIs,"Java Backend Development, Android Development Core",,0,,,0
manage a variety of team dynamics and challenging scenarios productively and empathetically,"Working with others, especially under deadlines, can be tough. Conflicting personalities (or priorities), differing work styles, diverse levels of expertise and experience can all lead to challenges, but can also be an opportunity to benefit from others’ input. In this lesson, we’ll cover some of the more common team challenges and how you can work through them.",,"'-   Knowing yourself is key to knowing how to work well with others. While it might seem obvious that you would know yourself, having the words to describe your priorities, motivation, and communication style can help others know how to work well with you.    
-   No personality test is going to give you a perfectly accurate picture of yourself, but it can help you describe yourself to others. If you haven’t taken a Myers-Briggs type test before, give it a try! You might find that it doesn’t describe you at all, or it could help you understand that the reason you’re frustrated with your colleague during a project is because their personality leads them to prefer spontaneity and flexibility when working on a project, while you’re someone who wants to plan out the process every step of the way so you know exactly what needs to be done when. Neither is right or wrong, but knowing how to recognize it can help you avoid a conflict.
-   Types of team challenges:
	-   Unclear or misaligned goals: sometimes a project is assigned to your group, but without a clear hierarchy of priorities. Maybe you need to ship a new app, and are working in a team with mobile developers, UX designers, data scientists, and marketers to make it happen, but do you all have the same goal? It’s natural for individuals on a team to prioritize their own work, so it’s critical to lay out goals and align on them before starting a project
	-   Lack of trust: this arises from two main causes- either another person has done something in the past that has demonstrated a lack of trustworthiness, or you do not know the other person well enough to feel inherent trust for them.
	-   Ambiguous ownership: this usually is realized as a problem once it’s too late- either someone in the group didn’t do something because they didn’t know it was their responsibility, or two people duplicated one another’s work because they each thought they were the owner. Neither situation is desirable, and can lead to lack of trust, frustration, and inefficiency.
-   Solving for team challenges:
	-   Unclear or misaligned goals: If you hit a point in a project where it seems like team members are working towards different goals than you, it’s worthwhile to stop the process, and take time to realign on goals.
		-   If another person’s goals don’t seem like a priority for the rest of the group, ask if there are ways they could shift their goal a bit so it can align better with the rest of the group. You can’t always make everyone happy, but it’s important for a project’s success to maintain buy-in from all contributors.
		-   Keep in mind that having different goals is not malicious, or an insult the value of your work. Try to avoid the temptation to think “this person just doesn’t care about this project” and instead ask yourself “if I were in their role, how might I be thinking about my approach to this project?” and go from there.
	-   Lack of trust:
		-   If the person has done something in the past that demonstrates a lack of trustworthiness: We’re going to get into feedback later in this lesson, but this is where feedback is so important! Everyone makes mistakes sometimes, or drops the ball- giving that person feedback so they understand the impact of their actions is critical to helping them avoid making the same mistake in the future. People also bring different strengths to a role- if you know that a person in your group struggles with attention to detail, then consider encouraging them to lead the ideation phase, where the focus is more on big-picture thinking.
		-   If you don’t know the person well enough to trust them: this can be solved by asking the other person what they enjoy and what their strengths are. Find opportunities for your skills and work styles to compliment one another’s! Avoid projecting past experiences onto people.
	-   Ambiguous ownership:
		-   If someone drops the ball: it happens to the best of us! While it’s easy to feel frustrated with someone for not doing what they say, avoid the tendency to blame it on laziness, not caring, or other assumptions about the person’s work ethic. Share feedback, and clarify what happened. Maybe the person did not realize they were accountable for that action item; maybe they did, and they just had too much on their plate so they forgot.
		-   If work is duplicated: rather than being annoyed with the other person for stepping on your toes, drive straight to the root of the problem; ask what their understanding was of ownership, reference past meeting notes, and reset ownership with the group so everyone is clear about who owns what.
		-   Ways to avoid both of these situations: take detailed meeting notes, track action items, and make sure that before the end of each meeting, owners are established and everyone is in agreement. Keep a living document that you update and can reference as you go; this will save a lot of headaches!

-   Approaching group projects and navigating team dynamics:    
	-   Working in groups is tough, and challenges are inevitable. Expect them, so when they arise you can focus on solving them right away.
	-   Stay in your lane: you bring a certain expertise to a project, and that is yours to own. It's great to share ideas, but trying to take over another person's responsibilities when you have your own is a quick way to create tension! If you are concerned someone isn't doing a good enough job, then it's on you to share feedback to help them get better (see pt. 2 of the lesson!)
	-   Be a leader... when needed: if you notice a need in your group that isn’t being addressed, then you should be the one to step up to own it. But that can border on micromanaging, so ask yourself if your peers actually need you to step into that role right now, or if you are stepping into it to project your own goals on your colleagues
	-   Assume best intent: if you find yourself questioning another person’s motivations, the right answer is rarely “they’re lazy”, “they don’t care”, or “they’re trying to make the rest of us look bad.” While it’s true these people may exist, as soon as you make up your mind about someone in this way, you’ve decided that they aren’t worth your time and may be missing an opportunity to build a productive working relationship.
	-   Ask questions: unsure about another person’s goals, skills, or strengths? Ask! This can help build trust among the group, and identify opportunities for delegating responsibility that allows each person in the group to play to their own strengths.",,"'- Take a Myers Briggs-type test, and do some research into your personality type. Submit your personality type along with a paragraph answering the following to your PM with your sprint retrospective:
	- How did your test results compare to your understanding of yourself?
	- Do you disagree with any aspects of your quiz results?
	- How can you use this information (or your own previous understanding of your personality and work ethic) to influence how you work in teams with others?

- Take the quiz for free here: http://www.humanmetrics.com/cgi-win/jtypes2.asp
- Start learning more about your personality type here: https://www.typefinder.com/view/types-workplace",,,,,,"Free Myers-Briggs type test,Learn more about the different personality types",,Team Dynamics and Feedback,,Team Dynamics and Feedback,Career Readiness,,1,1,,2
"deliver balanced, professional, conscientious feedback to a peer","Think about a time someone gave you feedback; it could have been about a strength or an area of improvement. What about that feedback stuck with you? Do you remember it for a good reason? How did it impact your behavior? 

When delivered well, feedback has the potential to have a positive and permanent impact on someone’s life. When delivered poorly, feedback can hurt relationships, damage productivity, and crush someone’s morale. We all have strengths and growth areas, but sometimes struggle to view them in ourselves, so feedback is how we can help one another take a more objective look at our work. Feedback is a critical professional skill, and one that many people struggle with, so the purpose of today’s lesson is to dig into how feedback can be practiced at Lambda School in a way that will benefit you throughout your career.",,"'-   You should expect to receive feedback throughout your career, both through formal channels such as annual performance evals, and through more informal, ad hoc day to day interactions.
-   We’ve all gotten that horrible piece of feedback from someone that made us feel like failures, or defensive, or hurt. That feedback may have been given with good intentions, but it was not delivered well.
-   At the same time, without feedback, we’ll never know how we can grow and improve. Even the most self-aware people cannot view their work from every angle at all times, so having a colleague or manager periodically share their observations is critical to our growth and development.
-   Taking someone aside for critical feedback can be nerve-racking; how do you deliver it without sounding too critical? Or how do you cushion it while still making sure they understand the intention?
	-   Similarly, so often we think about how we can critique someone’s work, but don’t necessarily think about praising them for a job well done as an equally critical part of professional development. Maybe you said, “great job on your presentation yesterday!”, but does that help your colleague know what they did well in the presentation? Treating strength-based feedback like you do critical feedback is important!
-   Fortunately, there’s a formula to delivering impactful, considerate, and professional feedback that translates to any work environment. When giving feedback:
	-   Keep it objective: you’re addressing a person’s behavior, not the person as a whole. Someone is going to be a lot more receptive to you saying “receiving your deliverable for our project two days after the deadline resulted in the rest of the group needing to push back the timeline by two weeks” is a lot easier for someone to understand and get behind than “your disorganization and poor time management pushed back our group’s timeline by two weeks.”
	-   Keep it balanced whenever possible: while you don’t need to always highlight a strength and a growth area, by all means, if you can share a strength along with a growth area and do so in a genuine way, you should! We often focus on what can be improved more than on what’s going well, so take the time to acknowledge your peers.
	-   Be specific: use examples to highlight your feedback. Saying “you should share more ideas in meetings” is vague, vs “In the past three brainstorming meetings for Project X, I’ve noticed you haven’t spoken up more than once or twice, and I think the team would really benefit from hearing from you about your experience in Y.”
	-   Consider the timing: did someone deliver a relatively sloppy presentation, but you know that they have 5 other urgent deadlines they’re juggling? You can still give the feedback, but acknowledge their reality in your feedback so they know you’ve considered it.
		-   When in doubt, ask before delivering! Saying “Do you have a few minutes to chat? I was hoping to share some feedback I have on the presentation you delivered this morning.” This primes the recipient and ensures you’re not catching them at a bad time.
		-   Don’t wait too long- if too much time passes, then the feedback loses its relevance.
	-   Make it a habit! Share feedback freely and often. The more you practice this skill, the easier it will be, and the better off everyone around you will be for it.
	-   Do it in person whenever possible. Feedback via email or DM can be misinterpreted. By having a face-to-face conversation (virtually or in person) you can connect with the recipient more.
-   When receiving feedback:
	-   Be open and receptive. Sometimes, our first inclination is to offer an excuse. It’s tough to be critiqued. Instead of offering an explanation (unless the person giving you feedback is really lacking critical context that would change their perspective), actively listen to what they’re saying and absorb it. Let it sit for a little while before you respond; if after several hours or a day, you still feel like you need to provide clarity to the person who gave you feedback, it’s appropriate to do so.
	-   Assume best intent: there will be times when we’re rubbed the REALLY wrong way by someone in their feedback. Rather than jumping to “this colleague is a jerk”, instead trust that they were doing their best. If, after letting the feedback sink in, you still feel uneasy about someone handled something, you can provide feedback on their feedback.
	-   Use the feedback! Not every suggestion you get will be useful, but try to implement the feedback you do get whenever possible.
-   Feedback formula: “I have noticed that you (strength/growth area), which has come up in (meetings/projects/conversations). The impact that this is having on me/the team/the project is (impact of behavior). I would encourage you to (ideas for reinforcing the strength/converting on the growth area)”
-   Tips for getting feedback:
	-   Ask for it! The best way to get more feedback is to make sure people know you want it. If you’re working on a project, and you are trying to improve your skills in a specific area, then ask a peer to keep an eye on your work using those specific skills, and tell them that you want feedback from them.
	-   Give it! If you are leading by example by regularly sharing feedback with others, people will see you as someone they can trust delivering feedback to.
	-   Use the feedback you get! Similarly, if your colleagues see you using the feedback they deliver to you, they will be more likely to share more since they will trust that you actually use feedback to grow.

",,"-   Deliver direct feedback to at least one colleague, instructor, or your PM over the coming weeks. Remember that your feedback should be balanced, relevant, timely, and thoughtful.
	-   Feedback should not be forced or rushed, so you are not expected to do this before your next sprint retrospective is due. This is to help you and others around you grow.
-   Make delivering feedback a regular part of your day- you will be doing a huge favor for those around you!",,,,,,,,Team Dynamics and Feedback,,Team Dynamics and Feedback,Career Readiness,,1,1,,2
"recall the main principles of searching in the tech field, managing team dynamics, and knowing their worth","One of the unique aspects of Lambda School is the opportunity to work with students across tracks on collaborative, real-world projects where you have the chance to apply your skills in a practical situation. In addition to your technical skills being directly relevant to your success in Build Weeks, many of the soft skills you’ve learned through both your technical classes and through career lessons are relevant to your success in Build Weeks.",,"**[Intro to Careers and the Tech Landscape](https://youtu.be/9zslOC4KbsU): key takeaways**
 -   Finding a job takes ~4 months on average; start early!
-   We help you pace your search via weekly assignments. You’ll need to do this eventually, so do it now and save time later
-   Lambda School provides coaching, mentorship, continuing projects to keep your skills sharp, and access to hiring partners
-   You’re expected to own your search; we can’t write your resume or go to informational interviews for you!


[Financial Planning and Knowing Your Worth](https://youtu.be/COqAMj3u9ug): key takeaways:
- Know your finances:
	- In addition to helping you manage the money you already have better, knowing your personal financial needs will help you figure out your priorities, needs, and “walkaway” criteria for your first job post-Lambda
- Know the market:
	- Depending on where you live, your earning potential will look very different from other students. Knowing your local market can help set your expectations or help you figure out if relocation is the best option for you.
- Set your priorities:
	- Don’t wait until you’re on the spot to think about your financial needs and priorities! Benefits might be more important for some, while cash income might be others’ priority. Think about your needs early.

**[Team Dynamics and Feedback](https://youtu.be/01kZcJ0BkEk): key takeaways**
- Common causes of conflict: 
	- Misaligned goals- avoid or solve by: 
		- Ask others up front about goals: 
		- Seek compromise   
		- Different goal ≠ no goal
	- Lack of trust - avoid or solve by: 
		- Provide feedback
		- Identify opportunities to pull in others’ strengths
		- Don’t project past experiences
	- Unclear ownership- avoid or solve by:
		- Confirm owners for each action item  
		- Reference roles and ownership regularly
		- Check for group’s understanding

- Team Dynamics, pro-tips:
	-   Know your working and communication style
	-   Expect challenges so you’re prepared to solve them
	-   Stay in your lane    
	-   Be a leader… when needed
	-   Assume good intent always
	-   When in doubt, ask!

Feedback: Recap:
- When Giving Feedback...
	-   Keep it objective
	-   Keep it balanced
	-   Be specific
	-   Consider the timing
	-   Make it a habit
	-   Aim for face-to-face	
- When Receiving Feedback...
	-   Be open and receptive
	-   Assume best intent
	-   Sit on it for a day or two
	-   Use it!",,"If you haven't already completed the past few weeks' career assignments, now is your chance to catch up. Use this week to complete the following: 


**Intro to careers:**
- Write out a paragraph describing your priorities in a company and what type of environment would be the best fit for you (small, mid, large, casual vs more formal, more or less fast-paced, etc.)
- Bonus: start identifying some companies near you/in an area you want to live that meet your above preferences


**Team dynamics and feedback:**
- Take the Myers-Briggs type personality quiz for free and start learning more about your personality type
- Deliver direct feedback to at least one colleague, instructor, or your PM this week. Remember that your feedback should be balanced, relevant, timely, and thoughtful.
- _HINT:_ Build Week is a great opportunity to share feedback if you haven’t done this yet! Feel nervous? Ask your peer first! “In the spirit of practicing delivering and receiving feedback, could I share some feedback with you from this week? After, I’d love to hear any feedback you have for me!” < This might sound a little forced, but it’s a great way to get the convo started if you’re nervous


**Financial planning and knowing your worth:**
- Complete the budgeting spreadsheet (or use an app of your choice) to better understand your financial status and needs
- Research a few job titles you may be interested in and qualified for after graduating- what is the average salary and benefits for these titles? Consider both high and low end, and the benefits you need/prioritize (PTO, health care, flexible work schedules, etc.)",,,,,"Intro to Careers and the Tech Landscape,Team Dynamics and Feedback,Financial Planning and Knowing Your Worth","Budgeting Spreadsheet,Free Myers-Briggs type test,Learn more about the different personality types",,Weeks 2-4 Recap and Goal-Setting,,Weeks 2-4 Recap and Goal-Setting,Career Readiness,,1,1,,2
set SMART goals to help them progress in their search,"Goals are important! At any point, we have hundreds of things that we could choose to be working on/growing in. Goals help us filter through the noise to zero in on the things that are most important, and they help us evaluate our progress objectively.",,"-  You may be familiar with the SMART acronym when setting goals. When making goals for anything, it’s important to make them SMART:
	-   Specific: “get a job” is not going to help you make progress. What are the steps to finding a job? Each step should have its own goal.
	-   Measurable: how many jobs will you apply to/people will you reach out to/mock interviews will you do each week?
	-   Achievable: you probably won’t succeed in your goals if you set out to apply to 100 jobs per week
	-   Relevant: practicing piano is a great personal goal, but is it going to help you get a job?
	-   Time-bound: “Network with 15 people” is not constrained enough- network with 15 people by the end of the week? Or the end of the year? That’s a big difference!
-   Having goals that check off these things is not just nice to have- it helps you stay accountable, it helps you make better progress, and it helps you ensure the progress you’re making is the progress you should be making.
-   You do not need to stick with the same goals forever- goals you set a month ago may no longer feel relevant, and you can change them without guilt.
-   Similarly, if you miss the mark with a goal, ask yourself why; is it because you weren’t following through on something? Or is it because you weren’t setting the right goals for yourself? Either way, you shouldn’t beat yourself up for not hitting a goal- just keep working towards it, or edit it to better align with where you should be tracking towards.",,"'-   Set 5 SMART goals relating to your job search- if you haven’t completed the challenges from previous careers lessons yet, then your SMART goals should focus on these!
-   If you have completed the challenges, then we recommend setting goals around job/company research, informational interviews, and networking; these are the most critical things to be focusing on right now for where you are in Lambda School since we do not recommend you start actively applying until Sprint 21 (i.e. once you have portfolio and your resume is finalized)",,,,,,,,Weeks 2-4 Recap and Goal-Setting,,Weeks 2-4 Recap and Goal-Setting,Career Readiness,,1,1,,2
represent a document as vector,,,,,,,,,,,,,Vector Representations,,Natural Language Processing,DS - Machine Learning,,0,,,0
describe the bag-of-words representation,Bag-of-Words representations are considered the baseline for NLP vectors. The vector represents some frequency of the words in a given document - ignoring any grammatical structure. ,,,"Step 1: Import a Supporting Library
There are several out there including Sklearn, NLTK, Spacy, and Gensim. We'll use Sklearn for now. 

```
from sklearn.feature_extraction.text import CountVectorizer

documents = [""The quick brown fox"", ""jumps over the lazy dog"", ""The previous two phrases are part of a famous pangram."" 
```

Step 2: Instantiate a Vectorizer 
*Hint:* There are many parameters you can pass to `CountVectorizer`.
```
vectorizer = CountVectorizer()
```

Step 3: Learn the Vocabulary of the Vectorizer
In bag-of-words vectorization approaches, the vectorizer must learn a vocabulary to use to count or score words with later. The vocabulary is fixed and new words in unseen documents will be ignored. 
```
vectorizer.fit(documents)
```

Step 4:  Transform the Documents
After the transformation step, you will have an array that that is equal in length to the number of documents and equal in width to the numbers of words learned in your vocabulary from the previous step. 

```
X = vectorizer.transform(documents)
print(X.shape)
```

*Note:* You use the `transform` method for new unseen documents when you need to vectorizer them with the same vectorizer.",,,,,,,,,Vector Representations,,Natural Language Processing,DS - Machine Learning,,0,,,0
tune a vectorizer method as part of a classification problem,,,,,,,,,,,,,,,,,,0,,,0
"identify, use, and understand the difference between the basic data types: `Int`, `Double`, `Bool`, `String`)",One of the first concepts it's important to understand in programing is how to represent basic data and the types available for storing that data.,,"What do the following having in common? `3`, `Lambda School`, `true`, `14.95`. The values listed all represent data of some kind, and all can be stored in variables in Swift. The tricky part is deciding how to store these and what data types to use. Let's take each one of these in turn and identify what kind of data they represent.","* `3` - This is a number, and a whole number at that. Whole numbers are represented in Swift as integers and we use `Int` to declare them in code. An example of this might be:
    * `let number: Int = 3`
* `Lambda School` - This is a collection of characters that form a phrase. In Swift this is known as a string, and declared using the type name `String`. Any collection of [Unicode characters](https://en.wikipedia.org/wiki/Unicode) is allowed inside a string. Let's assign this string to a variable:
    * `let bootcamp: String = ""Lambda School""`
    * Notice how you need to place a set of `""""` double quotes around the string value itself. This tells Swift exactly what characters are included in the string.
* `true` - This is a value that indicates the truthfulness of something. It's alternate would be `false`. Storing whether something is true or false is actually so common Swift contains a special type just for storing either true or false values. These are known as boolean values and the type is named `Bool`. A boolean value can be either true or false, and there are no other valid states than that. Let's see it in an example:
    * `let awesome: Bool = true`
* `14.95` - This is a number like in our first example, but the difference is that this number has a decimal value. It's neither `14` or `15` (both of which could be stored as an `Int`), but `14.95`. This type of decimal value is known generally in programming as a _floating point_ number. Specifically in Swift we use the type `Double` to store floating point numbers. Let's store this number in a relevant variable:
    * `let price: Double = 14.95`

So far we've seen several data types and with each an example line of code for representing them in Swift. In each case, we've explicitly typed the variable with a colon and the type name after we declare the name of the variable. Declaring variables in this way is fine and in fact lets the compiler understand exactly what kind of value will be stored in said variable. There is an even easier way to declare variables however. If the variable will receive a value immediately (like we've done in the examples above), the type isn't required. Let's look at an example:

`let bootcamp = ""Lambda School""`

The value on the right of the assignment operator (the = equal sign) is what's known as a _string literal_, meaning it is literally those characters in that order which form a string. Since the type of that value is unambiguous, the compiler can infer that `bootcamp` will store a string. Thus there's no need to explicitly name the type after the variable name. This is a technique known as _type inference_. While explicitly typing variables isn't wrong, and in some cases even necessary, variables with inferred types are the standard and preferred way to write this kind of code.",Try creating a playground in Xcode (open Xcode->File->New->Playground) and declaring a few different variables. Maybe try storing your name and your age in variables. Try out the different data types we discussed above and use both explicit typing as well as type inference to declare your variables.,4uF9aV3n9zM,http://youtube.com/watch?v=4uF9aV3n9zM,https://www.youtube.com/embed/4uF9aV3n9zM,,,,,Swift Fundamentals I,,Introduction to iOS Programming,iOS Development Core,,1,1,1,3
understand how to apply mutability to variables (`let` vs. `var`),"Once it becomes clear how to store various kinds of data using an identifier, it's important to understand how to protect that data and ensure its integrity. We use something called _mutability_ in Swift to accomplish that.",,,"Let's take an example we've already seen and examine it a bit further.

```swift
let bootcamp = ""Lambda School""
```

The above will always be true for our school and our students. We are a bootcamp and our name is ""Lambda School"". That is unlikely to ever change. Thus, in the code where we store this name, we declare the variable `bootcamp` with a `let`. To Swift, `let` means the value stored in the identifier can't be edited or modified after it is set. Thus, `bootcamp` is known as a _constant_ after it is declared and initialized with a value. A block of code like the following will not compile:

```swift
let bootcamp = ""Lambda School""
bootcamp = ""Funtimes University""
```

The value of `bootcamp` is constant due to the `let` in the declaration and cannot ever be changed after it is initialized. The code above would throw an error if you wrote it into Xcode. This can be quite powerful when used responsibly. One really common way to create bugs in your code is to have a variable's value change to something not expected by the logic of your algorithm, and then when that value is used, it causes a crash or other error during runtime. By declaring and initializing a piece of data to be constant, that data cannot be changed anywhere else in the code without generating a _compiler error_. This kind of error appears as soon as you try to build your project. This is much preferred over a _runtime error_. Runtime errors may or may not be caught by you and your testing regime. Compiler errors will always be caught and handled by the developers as a successful build and deployment of your app isn't possible with compiler errors.

That's great for data that isn't going to change, but what about data that does change? Let's look at another example:

```swift
var totalPrice: Double = 0
let socks = 3.50
let shoelaces = 0.99
totalPrice = totalPrice + socks + shoelaces
```

In the above code block, we've created a place to store the total price of a collection of items. Maybe this is for a part of a shopping app and this is the code on the shopping cart screen. Say the user has added socks and shoelaces to their cart, and now we've got to calculate the total. In the cases of the two items, their prices will never change, so they are both declared as `let` values, or constants. The `totalPrice` however is a number that will change as the user adds and subtracts items from their cart. So that one is declared with `var`, meaning it is variable, also known as _mutable_. The `let` values are also known as _immutable_. It's useful to think about the mutability of the data you'll be storing, and declare the variable with the most restrictive mutability possible for that piece of data. In other words, if you don't think you'll be modifying the data after it's initialized, make it a `let`. You can always go back and change it to a `var` if it turns out modification is needed.","In your Xcode playground, try declaring a few different variables with `let` or `var`. Try to modify these values by resetting them and see what kinds of errors may appear",j1oan2tAlnw,http://youtube.com/watch?v=j1oan2tAlnw,https://www.youtube.com/embed/j1oan2tAlnw,,,,,Swift Fundamentals I,,Introduction to iOS Programming,iOS Development Core,,0,1,1,2
use conditional logic to execute various code paths,It's often the case that code may have more than one path and the decision about which path to take will need to be decided when the app runs. We can use conditional logic to cause only certain code paths to run.,,"Imagine a scenario found in countless apps. A textfield is provided to the user to enter a username and password. When the user enters characters into those fields and taps the ""sign in"" button, the app should perform some checks to ensure there is valid data in those fields before sending them to the server for authentication. Let's see how we can use conditional logic to perform this validation.","### `if`

```swift
let username = ""Malcolm Reynolds""
let password = ""Serenity""

if username.count > 0 {
    login(with: username, password: password)
}
```

In the code block above, we want to call the `login()` function but we need to check that the strings contain valid data. By calling `if username.count > 0`, we can check how many characters long that string is. We don't want to send an empty string (`""""`) to the server, as we want to provide credentials that will be authenticated, so we check to see that the username string is nonempty. If a _conditional statement_ (the expression after the keyword `if` and before the opening brace) evaluates to `true`, the code within the braces is called. If it evaluates to `false`, the code block is skipped.

This is fine for the username, but what if we also wanted to check the length of the password as well? Since both strings need to be nonempty before we call `login()`, let's add a nonempty password string as a requirement in our conditional statement.

```swift
if username.count > 0,
   password.count > 0 {
    login(with: username, password: password)
}
```

By adding a comma and another conditional statement, we are requiring both expressions to evaluate to `true` for the overall statement to be `true`. We can compound as many conditions as we'd like. With this setup, we can create several requirements for a given block of code to run.

What if we wanted code to run specifically if the conditional statement was `false`? To do that, simply add an `else` code block below your `if` block:

```swift
if username.count > 0,
   password.count > 0 {
    login(with: username, password: password)
} else {
    // Show an alert on screen asking for user to enter a username and password
}
```

With the code block above, the `login()` function will be called if we have the data we need (the two strings are nonempty), or if either or both of them are empty, an alert will be shown to the user asking them to provide those credentials.

If you wanted to provide an additional condition for the `else` block, you can actually add another `if` condition, like so:

```swift
let x = -5
if x > 100 {
    print(""Found a large number"")
} else if x < 10 {
    print(""Found a small number"")
}
```

### `switch`

As you can see above, it's possible to chain a bunch of `if-else-if` blocks together to let you have multiple possible code paths, but only allow one path to execute at runtime. Let's see an example of this and then we'll look at how we can simplify it using a control flow concept called `switch`.

Here's a modified example from the [_Swift Programming Language_](https://swift.org/documentation/#the-swift-programming-language) book, a great resource from Apple that you should bookmark for later reference.

```swift
let vegetable = ""watercress""
if vegetable == ""celery"" {
    print(""Add some raisins and make ants on a log."")
} else if vegetable == ""cucumber"" {
    print(""That would make a good tea sandwich."")
} else if vegetable == ""watercress"" {
    print(""That would make a good tea sandwich."") 
} else if vegetable.hasSuffix(""pepper"") {
    print(""Is it a spicy \(x)?"")
} else {
    print(""Everything tastes good in soup."")
}
```

Despite its length and complexity of the conditionals, only one of these `print` statements will actually execute at runtime. Can you guess which one?

While the code above is perfectly valid Swift, it's not the most efficient to read or to process. When you have a collection of possible code paths and only want to execute one of them based on some condition, `switch` is a great way to express that in code. Let's convert the above into a switch.

```swift
let vegetable = ""red pepper""
switch vegetable {
case ""celery"":
    print(""Add some raisins and make ants on a log."")
case ""cucumber"", ""watercress"":
    print(""That would make a good tea sandwich."")
case let x where x.hasSuffix(""pepper""):
    print(""Is it a spicy \(x)?"")
default:
    print(""Everything tastes good in soup."")
}
```

As you can see above, the value used as a conditional is placed after the keyword `switch`, then each possible value of that variable is defined in separate `case` statements. Whichever case is `true` at runtime, the code underneath it will run. So in the above example, only one `print` statement will actually execute.

What will print if the above was executed?

A note with `switch` statements, the cases provided must be _exhaustive_ for the type of data being switched on. In this case, since the value is a `String`, there are an infinite set of permutations of characters that could be contained within the variable `vegetable`. Because of this, we provide a `default` case to run if any of the named cases are not found at runtime.","Try creating some if conditionals. Use the basic data types from the previous objective to create various expressions that evaluate to `true` or `false` (hint: `<`, `>`, `<=`, `>=`, and `==` are good ways to create a boolean expression).",fiCmq15b3pU,http://youtube.com/watch?v=fiCmq15b3pU,https://www.youtube.com/embed/fiCmq15b3pU,,,,,Swift Fundamentals I,,Introduction to iOS Programming,iOS Development Core,,1,1,1,3
iterate over an array using a loop to accomplish some task,"In some cases, only some code paths should be executed, and that's when conditional logic is useful. At other points in the code, a given block of instructions needs to be executed more than once. This is called looping and there are a few different ways we can accomplish this in Swift.",,There are two main types of loops in Swift: `for` and `while` loops. They are useful in different scenarios so let's look at them individually and examine their pros and cons.,"### `for`

`for` loops are great when the code to be executed needs to run a specific number of times. Say you want to print every number from 1 to 50. The code to do this will need to run 50 times exactly, so a `for` loop is perfect for this. Let's see how:

```swift
for n in 1...50 {
    print(n)
}
```

The syntax for a `for` loop is pretty simple. After the keyword `for`, an identifier is provided that will be used to reference the individual item inside the loop. Here we use `n` because the value is a number. Then we have the keyword `in` and what follows is a collection. This could be an array of objects, or in this case it is what's called a range. The range we specificed is every integer between 1 and 50, inclusive of 50. If you wanted to not include the upper bound, use the syntax `..<`, with the less than sign indicating not to include the upper number. The code inside the braces would run once for each value examined in the collection. Since there are 50 numbers, that means the print statement would run 50 times, printing the value being examined each time through.

Let's look at another `for` loop. This one also showcases a common scenario:

```swift
let groceries = [""apples"", ""cereal"", ""chicken broth"", ""milk"", ""oreos""]
var index = 1
for groceryItem in groceries {
    print(""\(index). \(groceryItem)"")
    index += 1
}
```

Here we have an array of `String` objects called `groceries`. It stores the items we need to purchase at the store. We're then using a `for` loop to print each item on its own line along with a number in front to indicate an order. The output of the above block would be as follows:

```
1. apples
2. cereal
3. chicken broth
4. milk
5. oreos
```

The `for` loop's code block (the lines between the braces) will run as many times as there are items in the collection. In this case, `groceries` has 5 items. The index value is used to have a number to display in front of the item. It is initialized to 1 and is incremented at the end of each loop. What would happen if we incremented the index _before_ we printed the grocery item?

### `while`

`while` loops are similar to `for` loops in that they allow a block of code to be repeated, but generally `while` loops are used when the code block needs to be repeated an unspecified number of times.

Think of it like this:

Imagine a classroom of children. Each child needs their homework assignment reviewed. Since the class size is fixed, you could create a `for` loop to iterate over each child in the class and call a function to ""grade"" the homework assignment.

Alternatively, imagine a teacher is assisting with daily dismissal from school. We don't know how many cars with parents will show up, but as long as another car pulls forward to pick up their child, we'll help find and walk that child to their car. This could be handled by a `while` loop.

The basic logic is as follows: while some condition is `true`, execute the block of code, then check the condition again. If it's still `true`, run the code block again. This continues until the condition evaluates to `false`.

Let's see an example:

```swift
while anotherParentArrived() {
    processStudentForDismissal()
}
```

In the above example, the `anotherParentArrived()` function will check to see another car has pulled up to the front of the school, return `true` if so, and `false` otherwise. If `true` the function `processStudentForDismissal()` will be called and we can process that child off school grounds. The loop then starts over and runs the checker function again. As long as cars keep showing up, we'll process them. As soon as that car stream runs out, our job is done for the day.","Try putting these code blocks into a playground and running them. See what happens when you change up some of the parameters, and specifically see if you can answer the question about the grocery list `for` loop.",Zv0NEM6mSaU,http://youtube.com/watch?v=Zv0NEM6mSaU,https://www.youtube.com/embed/Zv0NEM6mSaU,,,,,Swift Fundamentals I,,Introduction to iOS Programming,iOS Development Core,,1,1,1,3
group like instructions into a function and call that function to reuse/organize code,"Code can be extremely powerful and allow us to perform calculations in an instant that would be prohibitively lengthy if we did them ourselves. When a useful algorithm has been written to solve some problem, it would be great if we could package that code up and make it easy to use over and over. That's where functions come in.",,"Let's think about a math problem from grade school. To determine the circumference of a circle, you can use the following formula:

`2 multipled by pi, multiplied by the radius of the circle`

or

`2πr`

To turn that formula into code understood by the computer, we'd need to first define the constant Pi.

```swift
let pi = 3.14159
```

(That's just a rough estimation, but good enough for our use)

Next, we'd use this constant in a line of code that calculates the circumference:

```swift
let circumference = 2 * pi * 10
```

Here we've used an example radius of 10. This is great, but not very reusable. What if we defined a function that performed this calculation, but allowed the caller of the function to define any radius they wanted? Then, we could call it with any value we liked and it would always return the circumference.","Let's define a function in Swift to do just that:

```swift
func circleCircumference(radius: Double) -> Double {
    return 2 * pi * radius
}
```

In the _function signature_, which is the first line that sets up the function, we give it a name, a list of parameters, and a return type. The name is `circleCircumference` and while it is arbitrary, we pick a word or short phrase that is descriptive of what the function does. Notice we're using something called _camelCase_ to make it easier to read, while keeping the name a single string with no whitespace characters. Whitespace characters are not allowed in function names in Swift.

After the name, we list the parameters that can be _passed in_ to the function. This would be outside data that needs to be given to the function such that it can perform its task(s). Each parameter has a name, followed by a colon and then the data type for that parameter. If you had multiple parameters, you'd separate them with commas.

Finally, we list the return type of the function. If your function is to return a value, you would create and arrow at the end with a hyphen and a greater-than sign `->`, and then follow it with the type that the function returns. Our function will calculate a circumference which will be a floating-point value, so we return a `Double`.

Once we've defined a function, we can call it from somewhere else in our code. To call the function we just made, we'd use the following syntax:

```swift
let circumference = circleCircumference(radius: 10.0)
```

You can see we're calling the function by listing its name, and then providing values for each of the parameters defined. Since this function returns a value, we tell the compiler to store the answer in a constant called `circumference`. It may seem a little backwards to put the constant first in the line of code, but consider the order of operations here. The function must be called, the answer calculated, and then returned to the _call site_ (the line you see above). Imagine in your head that after the function returns, the answer takes its place in the above line. At that point it would look just like a simple assignment of a value to a constant.

Let's try another calculation; the area of a circle. That would be `πrr`.

```swift
func circleArea(radius: Double) -> Double {
    return radius * radius * pi
}
```

Calling this function would look like:

```swift
let area = circleArea(radius: 10)
```

Lastly, let's see what it looks like to call one function from another function. To do that, we'll analyze the calculation for the volume of a cylinder. It looks like the following:

`area*height`

As you can see, to calculate the volume, you first need to calculate the area of one of the ends of the cylinder. Rather than redoing all that work, we can simply call the function we've already defined.

```swift
func cylinderVolume(radius: Double, height: Double) -> Double {
    let area = circleArea(radius: radius)
    return area * height
}
```

The parameter passed into the outer function is called `radius`, and that is the same as the parameter name for that value in the area function. So at the call site for the area function, that's why we see `radius` listed twice. Once for the parameter name of the area function, and a second time to reference the `radius` variable of the volume function. Once we have the area, it's a simple matter of multiplying it by the height of the cylinder, and then returning the result.",Create a playground in Xcode and try to create functions for the area and perimeter of a rectangle. Then create a function for the volume of a cube. Call each with some example values and see what you get.,xUrcHnPuz4I,http://youtube.com/watch?v=xUrcHnPuz4I,https://www.youtube.com/embed/xUrcHnPuz4I,,,,,Swift Fundamentals I,,Introduction to iOS Programming,iOS Development Core,,1,1,1,3
understand the difference between internal and external parameter names in functions,,,,,,,,,,,,,,,,,,0,,,0
understand how braces `{}` are used to group code into blocks and how scope affects the lifespan of a variable,,,,,,,,,,,,,Swift Fundamentals I,,Introduction to iOS Programming,iOS Development Core,,0,,,0
,,,,,,,,,,,,,,,,,,0,,,0
"define custom types using class, struct, and enum","Swift is an object-oriented language and provides support for creating objects, structures, and enumerations. To create each of these types, we use the keywords `class`, `struct`, and `enum`.",,"Much like how you organize notes in a notebook, you need to organize information in an app. If you wanted to create an app that could track orders of products, you would need to think about what information you would need to keep track of in the app.","If you wanted to categorize the types of purchases in your inventory tracking, you might create a type to describe that data.

## `enum`

Using an enumeration, you can create a special type that will behave like a selection drop-down in an order form. The `enum` data type allows you to create a finite set of options to choose from, just like how `Bool` provides two options: `true` or `false`.

Create a `ProductType` data type using enum:

````swift
enum ProductType {
    case laptop
    case phone
    case tv
    case computer
    case accessory
}
````

Using product type, you can create variables that can only be one of these values.

You can initialize these types by using the full type, or using the dot notation if the type is already known via *type inference*.

```swift
let tv = ProductType.tv
let laptop: ProductType = .laptop
```

**Try it**

Create an Xcode Playground and then create a `ProductType` in a Playground.

## `struct`

You can use a `struct` to create a grouping of information that isn't all the same type. To keep track of a purchase at a store, you would want to store details about the product purchased, date of purchase, product type, and who bought it.

Create a `Purchase` structure to keep track of these kinds of information.

```swift
struct Purchase {
    let productName: String
    let purchaseDate: Date
    let productType: ProductType
}
```

You can now create an instance of a `Purchase` to represent someone buying a laptop computer.

```swift
let myNextLaptop = Purchase(productName: ""MacBook"",
                            purchaseDate: Date(),
                            productType: .laptop)
```

A struct automatically creates an initializer that you can use to populate all of the variables. 

Using the `Date()` initializer, you can create a purchase date at this exact instant in time.

**Try it**

Go ahead and make your own `Purchase` structure to represent a different type of purchase (i.e., phone, tv, etc.).

## `class`

Structures are great places to start when you are want to keep store basic information. Typically, you'll see them used to store points, rectangles, and sizes in an iPhone app.

Using a `class` you can create a reference data type that allows you to refer to specific instances throughout your app.

Referring to a specific instance of a `Customer` would allow you to keep track of all the purchases that the customer did. Since every living person is unique, a `class` would be a good fit to represent a `Customer`.

You can declare a class in a similar way that you can declare a structure.

```swift
class Customer {
    var name: String
    var address: String
    var dateOfBirth: Date
    var purchases: [Purchase]
}
```

With the declaration above you would have a red *Swift Compiler Error*: `Class 'Customer' has no initializers`

To fix the error, you need to provide an initializer that can set up all of the properties of the class to the parameters passed in, or to default starting values.

Update the class declaration to create an initializer method: `init()`:

```swift
class Customer {
    var name: String
    var address: String
    var age: Int
    var purchases: [Purchase]

    init(name: String, address: String, age: Int) {
        self.name = name
        self.address = address
        self.age = age
        self.purchases = []
    }
}
```

We use `self.name` to refer to the `Customer`'s `name` property, which is different from the `name` parameter passed into the `init()` method. Variables can have the same name, but the scope of a function or another code block `{}` can ""mask"" or ""shadow"" the outer variable name.

The assignments in the `init()` method allow you to map all of the provided data into the instances variables or properties of the `class`. 

Sometimes it makes sense to set your property values to default values. In the `init()` method, you are making an empty array of purchases: 

```swift
self.purchases = []
```

To create a new `Customer` object, you could write: 

```swift
var joe = Customer(name: ""Joe Smith"",
                   address: ""123 Apple Street, Rochester, New York 14623"",
                   age: 25)
```

**Try it**


Go ahead and create a `Customer` object using your name and address, and two of your friends or relatives.

## Class Relationships

Many times you will want to represent more information. Taking a step back, you may want to represent a Store or Shop that is tracking customers and their purchases.

Create a class to represent a `Store`. 


```swift
class Store {
    var name: String
    var address: String
    var customers: [Customer]

    init(name: String, address: String) {
        self.name = name
        self.address = address
        self.customers = []
    }
}
```

Add an initializer to set up the `class` since there is no auto-generated initializer like a `struct` provides.

Create an instance of a store, and add your first customer:

```swift
let bestBuy = Store(name: ""Best Buy"", address: ""125 Apple Street, Rochester, NY 14623"")
bestBuy.customers.append(Joe)
```

**Try it**

What other properties would you want to add to a `Store` object?","Create a struct, enum, and class to represent data for a NYC subway station that can list the upcoming train arrivals. 

![Subway arrivals display](https://tk-assets.lambdaschool.com/e53f9ee1-e962-473e-bc66-d0eafd61db89_jerome-1603044-unsplash.jpg)

1. What information will you need to store?
    1. Look at the image above for ideas
    2. Review the [5th Line on the NYC subway](http://web.mta.info/nyct/service/fiveline.htm)
    3. Study a [NYC Subway Map](http://web.mta.info/maps/submap.html) for more ideas
2. Make a list on paper or your digital notes to create a rough draft
3. In a Playground create data types that can represent the information
4. Create an array of ""Train Arrival"" types to display in the digital board, or within an iPhone app",s4Olw4wX8jo,http://youtube.com/watch?v=s4Olw4wX8jo,https://www.youtube.com/embed/s4Olw4wX8jo,,,,,Swift Fundamentals II,,Introduction to iOS Programming,iOS Development Core,Swift Fundamentals II.playground.zip (https://dl.airtable.com/.attachments/5019b5900f87274029393add955abb0a/896b09f8/SwiftFundamentalsII.playground.zip),1,1,1,3
understand and implement the `prepare(for segue` method,"You've now seen how to create a segue to navigate from one view controller to another. Often times and especially when using the ""master-detail"" pattern of presenting information to the user, you will want to pass some information from the first view controller to the one that is being segued to.",,"Every view controller subclass has a function that lets us do just that. It looks like this:

```Swift
override func prepare(for segue: UIStoryboardSegue, sender: Any?) {

}
```

We'll just refer to it as ""prepare for segue"" from its declaration. Prepare for segue is a function that will get called automatically when we trigger a segue, via tapping a cell, button, etc. When this function gets called, we need to think, ""Is there any information I want to send to the next view controller that is going to be presented?"". If the answer is yes, then we need to add some code to this function.

Something important to be aware of is that there is only one ""prepare for segue"" function for each view controller. What this means is if you have more than one segue from a view controller, no matter which segue gets triggered the same ""prepare for segue"" function will get called. A question arises which is, ""what if we want to pass different information depending on the segue, or depending on which view controller we are segueing to?"" Well luckily, we can uniquely identify _which_ segue is being triggered. We do this by adding an identifier to our segues. We can do it in the storyboard like so: 

![](https://user-images.githubusercontent.com/16965587/57660097-235d9c80-75a2-11e9-81ae-4f9db3ee7793.gif)

To summarize:

1. Select the segue (the arrow in-between view controller scenes)

2. In the Attributes Inspector (the fourth pane in the menu to the right of Xcode that looks somewhat like a downwards arrow), add a string to the ""Identifier"" text field. The string you enter doesn't matter; it should be descriptive of what the segue is meant to do though.


Before we can fully implement ""prepare for segue"", we need to prepare the view controller that the segue is going to, referred to as the ""destination view controller"" so that it can have somewhere to store the information being passed to it. Think about sending an email to someone. We need a place to send the email, which would be their email address. Without that, there's no way we can get the information in the email to that person. We need to add some ""mailbox"" to the destination view controller. This generally comes in the form of a variable that we can pass the information to. So if we wanted to pass the name that the cell has through to the view controller to display it, we might create a variable like this:

```
class ContactDetailViewController: UIViewController {

    var contact: String?

    // more (unrelated) code below
}
```

Now we can implement ""prepare for segue"" in the first (or ""source"") view controller:

```
// 1.
override func prepare(for segue: UIStoryboardSegue, sender: Any?) {

    // 2.
    if segue.identifier == ""ShowContact"" {

        // 3.
        guard let contactDetailVC = segue.destination as? ContactDetailViewController else { return }

        // 4.
        guard let indexPath = tableView.indexPathForSelectedRow else { return }

        // 5.
        let contact = contacts[indexPath.row]

        // 6.
        contactDetailVC.contact = contact
    }
}
```

Going off of the comments, let's run through this line by line:

1. The two arguments to this function are a `UIStoryboardSegue` called `segue`, and a `sender`. This segue is the same one as you made in the storyboard. The segue therefore knows a few key pieces of information; namely the view controller it's coming from, and the view controller it's going to. In other words, the source and destination view controllers. The `sender` is simply the object that triggered the segue. In this case, the `sender` would be the cell we tap on, but it could be a button, or even something that isn't UI related if you're triggering the segue in code yourself. We don't often need to do much with the `sender`.

2. This is where we can check which segue is being triggered. The `segue` argument also knows what its identifier is, and we can access it by writing `segue.identifier`. In the if statement, we are making sure that the segue's identifier is the ""ShowContact"" identifier that we set up in the storyboard. This ensures that we know for certain which segue is being triggered and we can handle passing the correct information based on that.

3. Like was stated in the first line, segues know what view controller is their destination. Sadly, it can't infer what kind of view controller it is. That is to say, it doesn't know that the destination view controller is a `ContactDetailViewController` specifically. This creates a problem; we need to access the `ContactDetailViewController`'s `contact` property which is the ""mailbox"" for us to pass information to. `contact` is a property that doesn't exist on any `UIViewController`, but only on our specific subclass of it. So, we need to help the segue out a bit by using the `as?` to ""cast"" the `segue.destination`'s type to `ContactDetailViewController`. This is specifically called ""downcasting"". If you want to read up on Type Casting in general, refer to [this page](https://docs.swift.org/swift-book/LanguageGuide/TypeCasting.html) of the Swift Programming Language Guide. We have to then unwrap the new `destinationVC` constant because we are conditionally casting using the `as?` operator. This means we assume the `segue.destination`'s type is `ContactDetailViewController`, but for whatever reason it happens to be some other view controller, it will simply return `nil`. In the same line we are using a `guard let` statement to unwrap that optional value. If the value is `nil`, then it will execute the else statement which just calls `return` in this case. Calling `return` essentially says ""I'm done with this function, stop running it.`

4. We see another guard let statement here. This time, we are trying to unwrap the value of the table view's `indexPathForSelectedRow`. This property gets updated every time the user taps a table view cell, thus ""selecting"" it. It allows us to know which of all the cells in a table view was last tapped through an `IndexPath` object. 
  - More info on `IndexPath`s: An `IndexPath` has two critical pieces of information; the first and most commonly used is its `row`. This refers to the index of a row or cell. The other piece is the `section` property. This refers to which section of the table view the `row` lives in. Often, you end up having a table view with a single section, so this isn't used quite as often. For example, if you tap on the third cell in a table view with a single section, the index path of that cell would be section 0, row 2.

5. We get the contact that corresponds to the `indexPath.row` from the array of all of the contacts, essentially corresponding to the cell that was tapped.

6. Finally, we have the destination view controller (`contactDetailVC`) and the information we want to pass to it, so we just access the contact detail view controller's `contact` property and set its value to the contact we got from step 5.

Now, looking at the step-by-step instructions, this may seem like a lot, but passing information through a segue is something you will get plenty of practice with.",,,NzKuOdy4jtA,http://youtube.com/watch?v=NzKuOdy4jtA,https://www.youtube.com/embed/NzKuOdy4jtA,,,,,First iOS App: Navigation Controller,,Introduction to iOS Programming,iOS Development Core,,1,,1,2
understand how coding pertains to UX,Learning to code as a designer is an incredible way to level up your design abilities. How can we design digital products if we don't understand how they are built?,,"For many designers, coding can feel like an intimidating black box. We're happy to focus on the design of our products, and the developers can take care of all that code business. However, learning about coding will make us better designers.

First and foremost, how can we design a digital product if we don't know how it's created? Could we design a pair of reading glasses if we didn't have an understanding of the materials and process for creating them? Of course not! If we completely ignored that information, we could end up with something that didn't work at all.

Likewise, we can understand more about the medium our products are created in by learning about coding. This understanding allows us to design products that work within code's constraints and fully utilize its features. In turn, this improves our designs' usability because we can leverage solutions that code already provides for us, like common input patterns and behavior.

Furthermore, learning to code helps us better understand our developer colleagues. Understanding what it takes to code a product helps us develop empathy for their roles and better communicate our designs in a language, they'll understand.

Coding also helps us prototype our design work. If we can code a prototype of our design, then we're already working in the highest fidelity medium possible. This increased fidelity makes user testing much more realistic, and it helps make feedback more targetted.

Having some coding skills under our belts also helps us stand out in our job searches. If you looked at two identical UX designers, and one of them had some coding experience, then they will be the better candidate. While you still need your fundamental UX skills to be considered for UX roles, knowing how to code will help tilt the odds in your favor during those close comparisons.

Finally, like design, coding is pretty fun to do! There's a magical feeling about being able to bring your designs to life in code and watch users find value in it.

Overall, learning to code has many benefits for us as UX designers, and it is a pragmatic, supplementary skillset for us to develop.",,,,,,,,,,HTML,,Intro to HTML & CSS,UX Design Core,,1,,,1
describe the differences between frontend and backend,Two common phrases you'll hear in development are frontend and backend. Understand what those contexts mean will help you be a better developer.,,"## What is meant by the term frontend?
Everything you have ever seen on the web is considered ‘frontend’. Frontend is what we see when we open a web page or app. Code is downloaded from a server and is rendered to the screen by a web browser. What happens when we interact with the code is also considered frontend. This is often referred to as the ‘Presentation Layer’ or ‘Client’ in software development terms.

The frontend is commonly built with three languages: HTML, CSS, and JavaScript. HTML allows us to put content on our page: text, headers, images, buttons, links, and etc. CSS is used to style our page. It allows the contents to have different text colors, background colors, as well as dealing with the positioning of the content on the page. JavaScript makes our page dynamic. It allows for the content to change on a mouse hover or click and also lets us submit data and have data rendered on our page (such as submitting a new blog post or having your feed populated when you open Facebook).

## What is meant by the term backend?
This term usually refers to what happens ‘behind the scenes’: servers, databases, etc. The backend is the place we don’t see as users. This consists of data storage (databases) and servers running to provide data for the front end. The backend can be a little harder to imagine, especially for someone without much experience with it. Backend is commonly referred to as the ‘data access layer’ or ‘server’ within software development terms. The back end computes the data and content sent to the frontend to be used and displayed by your browser.

Backend server code can be written using JavaScript. However, it can also be written using many other languages, such as Ruby, Java, or Python. The database logic required in back end development often utilizes a database language, such as SQL or MongoDB.

We will not be covering any back end within the UX course, but the JavaScript skills we are developing are core building blocks to writing a JavaScript backend.",,,,,,,,,,HTML,,Intro to HTML & CSS,UX Design Core,,1,,,1
use Knex.js to write SQL commands,Query builders like Knex.js allow developers to write modular javascript code to execute SQL commands and thus interact with the database,,,,,qishY3KQYkE,http://youtube.com/watch?v=qishY3KQYkE,https://www.youtube.com/embed/qishY3KQYkE,,,,,Inserting and Modifying Data,,Adding Data Persistence to Web APIs,Full Stack Web Development Core,,0,,1,1
set up their development environment,"In order to write code effectively, we need to set up a development environment.",,"To write code, we need to set up our development environments. A development environment refers to the software and processes we use to write code. At first, this may seem a bit intimidating. But, it helps to remember that writing code is just like writing a Word document.

Code is just a collection of files that we can edit with specialized software. In the same way, we use Word to edit word files or Sketch to edit sketch files; we use Integrated Development Environments (IDEs) to write code files. So coding is all about setting up our files and editing them with the right tool.

IDEs are the tools we use to write software. While we could technically use a tool like [TextEdit for Macs](https://www.lifewire.com/edit-html-with-textedit-3469900) and [Notepad for Windows](https://www.lifewire.com/writing-html-in-notepad-3469131) to write code, they lack many of the productivity-enhancing features of a full IDE. 

IDEs are powerful because they integrate many different functionalities into one piece of software. At a basic level, they allow us to navigate and edit our code quickly. But, they also bundle in other features like version control management, debugging, plugins, shortcuts, and more! While those extra features are great to have, we'll only focus on the basic ones in this course.

IDEs tend to specialize in different coding languages. For example, PHP developers might use an IDE called [PHPStorm](https://www.jetbrains.com/phpstorm/) because it is tailored to PHP development. Meanwhile, a JavaScript developer might prefer [VSCode](https://code.visualstudio.com/). Since there are so many different languages, a multitude of IDEs have arisen. Some of the most popular include:
- [Brackets](http://brackets.io/)
- [Sublime Text](https://www.sublimetext.com/)
- [JetBrains](https://www.jetbrains.com/)
- [VSCode](https://code.visualstudio.com/)

For this course, we recommend using VSCode. It is free, works on Windows and Mac, and is one of the leading IDEs today. To set up VSCode on your machine, visit [their website](https://code.visualstudio.com/) and follow the download instructions. Once your download has completed, open up VSCode, and you'll see something like this:

![](https://tk-assets.lambdaschool.com/d9e1887a-0fd8-492c-ace5-7d6f0b50ece3_ScreenShot2019-05-23at9.26.42AM.png)

To get familiar with the interface, try clicking around and exploring how it works. For a detailed walkthrough on the most common concepts, read through these VSCode documentation articles. If you come across a concept you don't understand yet, don't worry! We'll be covering what you need to know in much more detail.

-  [VSCode User Interface Walkthrough](https://code.visualstudio.com/docs/getstarted/userinterface)
- [VSCode Basic Editing](https://code.visualstudio.com/docs/editor/codebasics)
- [VSCode Code Navigation](https://code.visualstudio.com/docs/editor/editingevolved)",,,,,,,,,,HTML,,Intro to HTML & CSS,UX Design Core,,1,,,1
describe what HTML is and how to use it,HTML serves as the foundation for our web products. We'll need to write HTML to provide the structure for our CSS and JavaScript.,,"HTML (which stands for Hyper Text Markup Language) is one of the languages we use for web development. HTML was created as a language when the first visual web browsers came into existence in the early 90s. It is read by the browser and then used as a blueprint for displaying information on your screen.

HTML is not considered a “programming language”, but is rather what we call a “markup language”. This means that it is specifically designed to render data in a graphical form (rather than execute tasks).

HTML is made up of elements. We can think of elements as being boxes of content on our web page. Different types of content will be contained in different boxes. For example, we use certain elements for headers, other elements for images, and still other elements for text.

To create an HTML element, we need to use tags. Each element has a specific tag name such as div, p, or span. These tag names are built into the language and must be written exactly as expected in order for our HTML to render correctly. For example, paragraph is not a valid tag name in HTML, but p is. We can use [online documentation](https://www.w3schools.com/tags/default.asp) to verify which tag names exist and what elements they are used for.

Once we know our tag name, we can create an opening tag using brackets: `<p>`

These tags must be syntactically precise: an opening bracket + a tag name + a closing bracket. A closing tag looks almost exactly the same, except with a backslash before the tag name. So a closing paragraph tag would look like this: `</p>`

Thus, to create a paragraph, we need only write an opening tag and a closing tag:

```
<p>  </p>
```

Of course, a paragraph isn’t very interesting without text. The content of an HTML element always goes in between the two tags. So a paragraph containing some content would look like this:

```
<p>Don’t forget to close your tags in HTML!</p>
```

There are dozens of elements available in HTML. However, just a handful are used 90% of the time. We will only cover the most commonly used in this lesson. You can achieve virtually anything you want with the most basic HTML elements and some CSS (which we will cover later). It is important to note though that there is an idea in web development that your HTML elements should match the exact information you are attempting to display. This is known as being ‘semantically correct’, and this method uses all of the available HTML elements. This is done for a number of reasons including accessibility and SEO.

Before we jump into learning about a couple more HTML elements, let’s learn about another way to supply data to an element. We know that we can supply text between two tags, but what if what we are trying to display cannot be textually based? We can include this data with special flags right inside of our tags. This is known as an attribute.

Now that we understand how to create elements, let’s explore some of the more common ones.

- `<p>`
  - The p (“paragraph”) element. This element is meant for holding text. By default, it will render text to the screen on a new line.

```
<p>Here is a paragraph!</p>
```

- `<div>`
  - The div element is a generic container. It is used primarily for grouping other HTML elements together. It is invisible by default but can be used to position or style a group of elements.

``` 
<div>                                                                                             
  <p>This paragraph is about grapefruits.</p>                                                     
  <p>This paragraph is also about grapefruits! I guess it’s related to the paragraph above.</p>
</div>                                                                                         
```

- `<span>`
  - The span element is a generic text container. It does not create a new line like the p element does. This element is invisible by default but can be used for styling words or phrases within a larger body of text.

```
 <p>This paragraph contains a <span>very important phrase</span> that should be styled in some way.</p> 
```

- `<h1>` - `<h6>`
- These are header tags there are intended to be used as a way to present the subject matter of the page. 1 is the most important and 6 is the least important. By default, 1 will be the largest, 2 will be the next largest, and etc.

```
<h1>Most Important Headline!</h1>   
<h3>Sort of important headline.</h3>
<h6>Least important headline.</h6>  
```

- `<a>`
  - The ‘a’ (“anchor”) element, allows us to create links to other web pages (or even to other areas within our own web page). You will always see the ‘a’ element used with the href attribute to tell the browser what address you want the link to point to.

```
 <a href=""http://www.lambdaschool.com"">Here is a link!</a> 
```

- `<img>`
- This element will display an image on the screen. It will always have an ‘src’ attribute which points to the address of the image to be displayed. NOTE: img tags can be self-closing, as in they do not need two tags. Simply put the / before the closing bracket in the first tag:

```
<img src=""https://picsum.photos/500/300"" /> 
```


- `<ul>` and `<ol>`
- This element represents an “unordered list”. This is the parent element and will contain list items. There is also an ordered list `<ol>`, but is rarely used in modern web development, as most developers like to style their lists themselves. `<li>` The companion to the `<ul>` and `<ol>`. These elements represent the items to appear in the list. Any other elements can appear in an `<li>`.

```
 <ul>                             
   <li>                           
      <span>List Item One</span>  
   </li>                        
   <li>                           
      <span>List Item Two</span>  
   </li>                          
   <li>                           
      <span>List Item Three</span>
   </li>                          
 </ul>   
```

We’ve seen in these examples that we can nest elements inside of tags. In fact, this is a major part of writing HTML. Nested elements are referred to as children and the top level elements as parents. You will see this type of structure throughout your time writing HTML (and all code for that matter). One thing to note is that while indentation is not a requirement of HTML (nor of CSS and JavaScript), it is still often practiced as a readability issue. We not only write code for ourselves, but also for our teammates and those that come after us. Indentation lets your code be much more easily read and understood.",,,,,,,,,,HTML,,Intro to HTML & CSS,UX Design Core,,1,,,1
learn how to apply steps 1 and 2 of Polya's to a give problem,,,,,,,,,,,,,Applying Polya's,,Problem Solving Background and Context,Technical Mastery,,0,,,0
describe each step of Polya's problem solving framework,,,,,,,,,,,,,Polya's Problem Solving Framework,,Problem Solving Background and Context,Technical Mastery,,0,,,0
recognize examples of supervised learning with tabular data,,,,,,,,,,,,,Making Forecasts,,Regression 1,DS - Predictive Modeling,,0,,,0
distinguish between regression problems and classification problems,,,,,,,,,,,,,Making Forecasts,,Regression 1,DS - Predictive Modeling,,0,,,0
acquire time series data,,,,"You can use [Wikimedia Foundation's pageviews tool](https://tools.wmflabs.org/pageviews/) to explore and download Wikipedia pageviews data.

Or, you can try a stretch goal — use the Wikimedia Pageviews API to get data:

- Get good at learning new things by googling and reading documentation. Jake Vander Plas calls this [""the real world bootcamp""](https://twitter.com/jakevdp/status/648593367786323968).
- To learn how to get data from an API, follow along with the [Requests library quickstart](https://2.python-requests.org/en/master/user/quickstart/), or [_Automate the Boring Stuff with Python_, Chapter 14](https://automatetheboringstuff.com/chapter14/) by Al Swiegart.
- Then, refer to the [Wikipedia Pageviews API quickstart](https://wikitech.wikimedia.org/wiki/Analytics/AQS/Pageviews#Quick_start) and [documentation](https://wikimedia.org/api/rest_v1/#/Pageviews%20data).","Choose a Wikipedia page to forecast, and get the data.",,,,,,,,Making Forecasts,,Regression 1,DS - Predictive Modeling,,0,1,,1
begin with baselines for time series,,,,"Data scientist [Will Koehrsen explains](https://twitter.com/koehrsen_will/status/1088863527778111488) why to begin with baselines:

_One of the most important steps in a machine learning project is establishing a common sense baseline. If your model can't beat the baseline, then maybe you don't really need machine learning._

_A baseline for classification can be the most common class in the training dataset._

_A baseline for regression can be the mean of the training labels._ 

_A baseline for time-series regressions can be the value from the previous timestep._

Rob Hyndman & George Athanasopoulos describe time series baselines in their book, [_Forecasting: Principles and Practice_, Chapter 3.1](https://otexts.com/fpp2/simple-methods.html):

_Some forecasting methods are extremely simple and surprisingly effective. We will use the following methods as benchmarks throughout this book._

_**Average method:** the forecasts of all future values are equal to the average (or “mean”) of the historical data._

_**Naïve method:** we simply set all forecasts to be the value of the last observation. This method works remarkably well for many economic and financial time series._

_**Drift method:** This is equivalent to drawing a line between the first and last observations, and extrapolating it into the future._

_Sometimes one of these simple methods will be the best forecasting method available; but in many cases, these methods will serve as benchmarks rather than the method of choice. That is, any forecasting methods we develop will be compared to these simple methods to ensure that the new method is better than these simple alternatives. If not, the new method is not worth considering._","Begin with baselines: mean, naive, and drift. ",,,,,,,,Making Forecasts,,Regression 1,DS - Predictive Modeling,,0,1,,1
use Prophet to forecast time series,,,,We will follow the [Prophet Quick Start tutorial](https://facebook.github.io/prophet/docs/quick_start.html#python-api).,Use the Prophet library to forecast pageviews for the Wikipedia page you chose. Plot your forecast and share it on Slack.,,,,,,,,Making Forecasts,,Regression 1,DS - Predictive Modeling,,0,1,,1
do train/test split,,,,"[_Forecasting: Principles and Practice_, Chapter 3.4](https://otexts.com/fpp2/accuracy.html), by Hyndman & Athanasopoulos, discusses:

- Training and test sets
- Metrics: RMSE, MAE, MAPE
- Time series cross-validation",,,,,,,,,Evaluating Forecasts,,Regression 1,DS - Predictive Modeling,,0,,,0
do time series cross-validation,,,,"The [Prophet Diagnostics documentation page](https://facebook.github.io/prophet/docs/diagnostics.html) demonstrates how to: 

- Do time series cross-validation
- Get metrics: MSE, RMSE, MAE, MAPE",,,,,,,,,Evaluating Forecasts,,Regression 1,DS - Predictive Modeling,,0,,,0
"use time series metrics: MSE, RMSE, MAE, MAPE",,,,,,,,,,,,,Evaluating Forecasts,,Regression 1,DS - Predictive Modeling,,0,,,0
arrange data into X features matrix and y target vector,,,,,,,,,,,,,Doing Linear Regression,,Regression 1,DS - Predictive Modeling,,0,,,0
use scikit-learn for linear regression,,,,,,,,,,,,,Doing Linear Regression,,Regression 1,DS - Predictive Modeling,,0,,,0
acquire data for features,,,,,,,,,,,,,Doing Linear Regression,,Regression 1,DS - Predictive Modeling,,0,,,0
begin with baselines for regression,,,,,,,,,,,,,Doing Linear Regression,,Regression 1,DS - Predictive Modeling,,0,,,0
do leave-one-out cross-validation,,,,,,,,,,,,,Doing Linear Regression,,Regression 1,DS - Predictive Modeling,,0,,,0
use regression metric: MAE,,,,,,,,,,,,,Doing Linear Regression,,Regression 1,DS - Predictive Modeling,,0,,,0
get and interpret coefficients of a linear model,,,,,,,,,,,,,Understanding Ordinary Least Squares,,Regression 1,DS - Predictive Modeling,,0,,,0
understand how ordinary least squares regression minimizes the sum of squared errors,,,,,,,,,,,,,Understanding Ordinary Least Squares,,Regression 1,DS - Predictive Modeling,,0,,,0
"visualize a line of best fit in 2D, and hyperplane in 3D",,,,,,,,,,,,,Understanding Ordinary Least Squares,,Regression 1,DS - Predictive Modeling,,0,,,0
"use regression metrics: MSE, RMSE, MAE, R^2",,,,,,,,,,,,,Understanding Ordinary Least Squares,,Regression 1,DS - Predictive Modeling,,0,,,0
use classification metric: accuracy,,,,,,,,,,,,,"""Logistic Regression, One-Hot Encoding""",,Classification 1,DS - Predictive Modeling,,0,,,0
begin with baselines for classification,,,,,,,,,,,,,"""Logistic Regression, One-Hot Encoding""",,Classification 1,DS - Predictive Modeling,,0,,,0
do train/validate/test split,,,,,,,,,,,,,"""Logistic Regression, One-Hot Encoding""",,Classification 1,DS - Predictive Modeling,,0,,,0
use scikit-learn for logistic regression,,,,,,bDQgVt4hFgY,http://youtube.com/watch?v=bDQgVt4hFgY,https://www.youtube.com/embed/bDQgVt4hFgY,,,Aaron Gallant: Intuition and interpretation of Logistic Regression,,"""Logistic Regression, One-Hot Encoding""",,Classification 1,DS - Predictive Modeling,,0,,1,1
scale features,,,,,,,,,,,,,"""Logistic Regression, One-Hot Encoding""",,Classification 1,DS - Predictive Modeling,,0,,,0
do one-hot encoding,,,,,,,,,,,,,"""Logistic Regression, One-Hot Encoding""",,Classification 1,DS - Predictive Modeling,,0,,,0
submit to predictive modeling competitions,,,,,,,,,,,,,"""Logistic Regression, One-Hot Encoding""",,Classification 1,DS - Predictive Modeling,,0,,,0
clean data with outliers,,,,,,,,,,,,,"""Decision Trees, Data Cleaning""",,Classification 1,DS - Predictive Modeling,,0,,,0
impute missing values,,,,,,,,,,,,,"""Decision Trees, Data Cleaning""",,Classification 1,DS - Predictive Modeling,,0,,,0
use scikit-learn for decision trees,,,,,,,,,,,,,"""Decision Trees, Data Cleaning""",,Classification 1,DS - Predictive Modeling,,0,,,0
"understand why decision trees are useful to model non-linear, non-monotonic relationships and feature interactions",,,,,,,,,,,,,"""Decision Trees, Data Cleaning""",,Classification 1,DS - Predictive Modeling,,0,,,0
get and interpret feature importances of a tree-based model,,,,,,,,,,,,,"""Decision Trees, Data Cleaning""",,Classification 1,DS - Predictive Modeling,,0,,,0
use scikit-learn for random forests,,,,,,,,,,,,,"""Random Forests, Ordinal Encoding""",,Classification 1,DS - Predictive Modeling,,0,,,0
do ordinal encoding with high-cardinality categoricals,,,,,,,,,,,,,"""Random Forests, Ordinal Encoding""",,Classification 1,DS - Predictive Modeling,,0,,,0
do feature engineering with dates,,,,,,,,,,,,,"""Random Forests, Ordinal Encoding""",,Classification 1,DS - Predictive Modeling,,0,,,0
understand how tree ensembles reduce overfitting compared to a single decision tree with unlimited depth,,,,,,,,,,,,,"""Random Forests, Ordinal Encoding""",,Classification 1,DS - Predictive Modeling,,0,,,0
understand how categorical encodings affect trees differently compared to linear models,,,,,,,,,,,,,"""Random Forests, Ordinal Encoding""",,Classification 1,DS - Predictive Modeling,,0,,,0
explain why overfitting is a problem and model validation is important,,,"Rachel Thomas, [How (and why) to create a good validation set](https://www.fast.ai/2017/11/13/validation-sets/)

_An all-too-common scenario: a seemingly impressive machine learning model is a complete failure when implemented in production. The fallout includes leaders who are now skeptical of machine learning and reluctant to try it again. How can this happen?_

_One of the most likely culprits for this disconnect between results in development vs results in production is a poorly chosen validation set (or even worse, no validation set at all)._

Owen Zhang, [Winning Data Science Competitions](https://www.slideshare.net/OwenZhang2/tips-for-data-science-competitions/8)

_Good validation is **more important** than good models._

James, Witten, Hastie, Tibshirani, [An Introduction to Statistical Learning](http://www-bcf.usc.edu/~gareth/ISL/), Chapter 2.2, Assessing Model Accuracy

_In general, we do not really care how well the method works training on the training data. Rather, **we are interested in the accuracy of the predictions that we obtain when we apply our method to previously unseen test data.** Why is this what we care about?_

_Suppose that we are interested test data in developing an algorithm to predict a stock’s price based on previous stock returns. We can train the method using stock returns from the past 6 months. But we don’t really care how well our method predicts last week’s stock price. We instead care about how well it will predict tomorrow’s price or next month’s price._ 

_On a similar note, suppose that we have clinical measurements (e.g. weight, blood pressure, height, age, family history of disease) for a number of patients, as well as information about whether each patient has diabetes. We can use these patients to train a statistical learning method to predict risk of diabetes based on clinical measurements. In practice, we want this method to accurately predict diabetes risk for **future patients** based on their clinical measurements. We are not very interested in whether or not the method accurately predicts diabetes risk for patients used to train the model, since we already know which of those patients have diabetes._",,,,,,,,,,Evaluating Forecasts,,Regression 1,DS - Predictive Modeling,,0,,,0
understand how linear algebra can solve ordinary least squares regression,,,,,,,,,,,,,Understanding Ordinary Least Squares,,Regression 1,DS - Predictive Modeling,,0,,,0
"use classification metrics: precision, recall",,,,,,,,,,,,,"""Confusion Matrix, Precision & Recall""",,Classification 1,DS - Predictive Modeling,,0,,,0
get and interpret the confusion matrix for classification models,,,,,,,,,,,,,"""Confusion Matrix, Precision & Recall""",,Classification 1,DS - Predictive Modeling,,0,,,0
understand how Precision@K can help make decisions and allocate budgets,,,,,,,,,,,,,"""Confusion Matrix, Precision & Recall""",,Classification 1,DS - Predictive Modeling,,0,,,0
"understand the relationships between precision, recall, thresholds, and predicted probabilities",,,,,,,,,,,,,"""Confusion Matrix, Precision & Recall""",,Classification 1,DS - Predictive Modeling,,0,,,0
log-transform regression target with right-skewed distribution,,,,,,,,,,,,,"""Log-Linear Regression, Feature Engineering""",,Regression 2,DS - Predictive Modeling,,0,,,0
use regression metric: RMSLE,,,,,,,,,,,,,"""Log-Linear Regression, Feature Engineering""",,Regression 2,DS - Predictive Modeling,,0,,,0
do feature engineering with relational data,,,,,,,,,,,,,"""Log-Linear Regression, Feature Engineering""",,Regression 2,DS - Predictive Modeling,,0,,,0
use xgboost for gradient boosting,,,,,,,,,,,,,"""Gradient Boosting, More Feature Engineering""",,Regression 2,DS - Predictive Modeling,,0,,,0
use scikit-learn for hyperparameter optimization,,,,,,,,,,,,,"""Hyperparameter Optimization, Cross-Validation""",,Regression 2,DS - Predictive Modeling,,0,,,0
do cross-validation with independent test set,,,,,,,,,,,,,"""Hyperparameter Optimization, Cross-Validation""",,Regression 2,DS - Predictive Modeling,,0,,,0
get and interpret permutation importances,,,,,,,,,,,,,"""Permutation Importances, Partial Dependence Plots""",,Regression 2,DS - Predictive Modeling,,0,,,0
visualize and interpret partial dependence plots,,,,,,,,,,,,,"""Permutation Importances, Partial Dependence Plots""",,Regression 2,DS - Predictive Modeling,,0,,,0
combine infrequent categories to reduce cardinality,,,,,,,,,,,,,"""Gradient Boosting, More Feature Engineering""",,Regression 2,DS - Predictive Modeling,,0,,,0
begin with baselines: expected value of random decisions,,,,,,,,,,,,,"""Making datasets, Avoiding leakage""",,Classification 2,DS - Predictive Modeling,,0,,,0
join real-world data to make a new dataset,,,,,,,,,,,,,"""Making datasets, Avoiding leakage""",,Classification 2,DS - Predictive Modeling,,0,,,0
remove features to avoid leakage,,,,,,,,,,,,,"""Making datasets, Avoiding leakage""",,Classification 2,DS - Predictive Modeling,,0,,,0
understand why accuracy is a misleading metric when classes are imbalanced,,,,,,,,,,,,,"""Class Imbalance, ROC AUC""",,Classification 2,DS - Predictive Modeling,,0,,,0
use classification metric: ROC AUC,,,,,,,,,,,,,"""Class Imbalance, ROC AUC""",,Classification 2,DS - Predictive Modeling,,0,,,0
visualize the ROC curve by plotting true positive rate vs false positive rate at varying thresholds,,,,,,,,,,,,,"""Class Imbalance, ROC AUC""",,Classification 2,DS - Predictive Modeling,,0,,,0
make decisions with probability calibration and expected value calculations,,,,,,,,,,,,,Making & explaining decisions,,Classification 2,DS - Predictive Modeling,,0,,,0
explain decisions with shapley value plots,,,,,,,,,,,,,Making & explaining decisions,,Classification 2,DS - Predictive Modeling,,0,,,0
understand the concept of how gradient descent works and why it is useful,,,,,,,,,,,,,Gradient Descent,,"Practicing & Understanding Predictive Modeling, Classification 2",DS - Predictive Modeling,,0,,,0
implement and visualize gradient descent to solve linear regression,,,,,,,,,,,,,Gradient Descent,,"Practicing & Understanding Predictive Modeling, Classification 2",DS - Predictive Modeling,,0,,,0
use the class_weight parameter in scikit-learn,,,,,,,,,,,,,"""Class Imbalance, ROC AUC""",,Classification 2,DS - Predictive Modeling,,0,,,0
use scikit-learn for Lasso and Ridge Regression (L1 and L2 regularization),,,,,,,,,,,,,"""Log-Linear Regression, Feature Engineering""",,Regression 2,DS - Predictive Modeling,,0,,,0
Apply a vectorization method to a document classification problem,,,,,,,,,,,,,Document Classification,,Natural Language Processing,DS - Machine Learning,,0,,,0
Tune a vectorizer within a document classification pipeline,,,,,,,,,,"Hacking Scikit-Learn's Vectorizers,Sample pipeline for text feature extraction and evaluation",,,Document Classification,,Natural Language Processing,DS - Machine Learning,,0,,,0
Benchmark and compare various vectorization methods in document classification tasks,,,"With new word embedding models appearing every year,  being able to compare several embeddings and vectorization methods is an important part of the scientific process for achieving high accuracy on a classification problem.

We will start by creating a baseline with the tf-idf and count vectorization methods. Then we will layer in more  sophisticated embedding models via TensorFlow Hub. 

We will also discuss how to perform hypotheses around which methods might work better for a given problem. ",,,,,,,"3 Basic Approaches in Bag-of-Words that are Better than Word Embeddings,State of the Art Document Classification",State of the Art Document Classification,,Document Classification,,Natural Language Processing,DS - Machine Learning,,0,,,0
interpret document topic distributions and summarize findings,,,,,,,,,,,,,Topic Modeling,,Natural Language Processing,DS - Machine Learning,,0,,,0
implement a topic model using the gensim library,,,,,,,,,,,,,Topic Modeling,,Natural Language Processing,DS - Machine Learning,,0,,,0
describe the latent dirichlet allocation process ,,,,,,,,,,,,,Topic Modeling,,Natural Language Processing,DS - Machine Learning,,0,,,0
explain how genetic evolution strategies can be applied to training neural networks,,,,,,,,,,Evolution Strategies,,,Genetic Evolution,,State of the Art Machine Learning,DS - Machine Learning,,0,,,0
conduct exploratory data analysis on their selected dataset,Exploratory Data Analysis is critical to fully understanding what's in your dataset and what it's going to take in order to visualize it successfully. ,,After acquiring a dataset you need to understand its contents thoroughly. Looking at basic summary statistics and building basic visualizations like scatter plots and histograms can help you better understand your data. Is the data in the format that you expected it to be in? Is it clean? Is there enough to enable your analysis? What further data cleaning or wangling might you need to do to prepare this data to be visualized? Try outlining the steps that you need to take in order to take your data from its raw state to the format that will allow you to visualize it.,,,,,,,,,, Exploratory Data Analysis - Data Storytelling Project Day 1,,DS Project 1 - Data Storytelling Portfolio Project ,DS - Statistics Fundamentals,,1,,,1
select an appropriate dataset for their data storytelling project,"Sourcing data is an important core data science skill. Not only is it important to ensure that your dataset has the features that you will need in order to conduct your desired analysis, exploring datasets is vital to scoping out your project and getting an idea of the different data munging tasks that will be required. Does this dataset exist or will you need to scrape the data from a website? Will you need to combine multiple datasets to perform your analysis? If so, do both datasets contain appropriate features to enable them to be merged successfully?",,"There are many websites that offer free datasets that you can use in your Data Storytelling Projects here are a few of the most common:

- [Kaggle Datasets](https://www.kaggle.com/datasets)
- [UC Irvine Data Repository](<https://archive.ics.uci.edu/ml/index.php>)
- [Data.world social media site for Data Scientists](http://data.world)
- [Elements of Statistical Learning Datasets](https://web.stanford.edu/~hastie/ElemStatLearn/) - Click on ""Data"" in the left-hand sidebar
- [DataQuest.io List of data sources](https://www.dataquest.io/blog/free-datasets-for-projects/)
- [The Awesome-Public-Datasets Repo](https://github.com/awesomedata/awesome-public-datasets)
- [Carnegie Mellon Datasest](http://www.cs.cmu.edu/~awm/10701/project/data.html)

It will save you time in the long-run to be extremely thorough in your data search. You don't want to spend large amounts of time cleaning and munging data to later discover that by looking just a little harder you could have found a better dataset that would have saved you hours and hours of time.

You *may* use a government data source if you start preparing the data long before the week starts. Some government data sources are particularly tricky to use and we don't want you wasting precious project hours during the week trying to navigate poorly built government websites.

**Make sure that your dataset is 100% ready to go by Monday Morning.**",,,,,,,,,, Exploratory Data Analysis - Data Storytelling Project Day 1,,DS Project 1 - Data Storytelling Portfolio Project ,DS - Statistics Fundamentals,,1,,,1
create a short summary (280 characters of less) describing their data storytelling project,You should be able to communicate the main idea of their project succinctly. It can sometimes be helpful to have a specific research question in mind.,,"Why 280 characters? Because that's the length of a tweet. It's also an estimate of the maximum amount text that you have to grab someone's interest in your project. Can you communicate the main ideas succinctly and in an interesting way?

You don't have to be a twitter user for this to be a valuable step in the process. We will later combine this summary with a single visualization that is chosen by you to serve as the main thumbnail of your project. Combining the two appropriately can supply you with some enticing marketing materials for your project:

### [Chris Luedtke Tweet Example](https://twitter.com/LuedaChris/status/1094006218241253379?s=20)",,,,,,,,,,Summary and first Visualization - Data Storytelling Project Day 2,,DS Project 1 - Data Storytelling Portfolio Project ,DS - Statistics Fundamentals,,1,,,1
create an initial annotated visualization based on their summary,Data Visualization is critical in communicating what's in a dataset. You need to build skills that will allow you to communicate with non-technical stakeholders and visualizations are a great way to make your content accessible. Effective visualizations can also serve to showcase your content and skills to hiring managers who might be browsing your blog post or viewing your portfolio in the future.,,"### Create a visualization that effectively represents one of the main themes of your dataset:
- Give the plot an effective title 
- Label your axes
- Add a legend if necessary
- Use a color scheme that looks professional
- Use a font and plot style that looks clean and professional
- You might try mimicking the style of other plots that you have seen

### Avoid these common visualization pitfalls:
- Be cautious about choosing your y-axis bounds
- Don't omit important portions of data or cherrypick timelines
- If plotting values on a map, should you be plotting the raw counts per region? or using a per-capita measure? Sometimes it will be helpful to include both. 
- Be cautious in your use of dual-y-axis graphs",,,,,,,,,,Summary and first Visualization - Data Storytelling Project Day 2,,DS Project 1 - Data Storytelling Portfolio Project ,DS - Statistics Fundamentals,,1,,,1
create a second annotated visualization based on their summary,Data Visualization is critical in communicating what's in a dataset. You need to build skills that will allow you to communicate with non-technical stakeholders and visualizations are a great way to make your content accessible. Effective visualizations can also serve to showcase your content and skills to hiring managers who might be browsing your blog post or viewing your portfolio in the future.,,"### Create a visualization that effectively represents one of the main themes of your dataset:
- Give the plot an effective title 
- Label your axes
- Add a legend if necessary
- Use a color scheme that looks professional
- Use a font and plot style that looks clean and professional
- You might try mimicking the style of other plots that you have seen

### Avoid these common visualization pitfalls:
- Be cautious about choosing your y-axis bounds
- Don't omit important portions of data or cherrypick timelines
- If plotting values on a map, should you be plotting the raw counts per region? or using a per-capita measure? Sometimes it will be helpful to include both. 
- Be cautious in your use of dual-y-axis graphs",,,,,,,,,,Second Visualization and Blog Post Outline - Data Storytelling Project Day 3,,DS Project 1 - Data Storytelling Portfolio Project ,DS - Statistics Fundamentals,,1,,,1
write an outline for a blogpost that incorporates their visualizations (minimum of two),"Good writing requires good organization and creating an outline will not only guide your writing, but will speed it up and make it more coherent. Taking a few minutes to make an outline will pay dividends as you're working towards your final draft.",,"### Chunk your post into its main subheadings


Take a look at the most popular posts from the weekly newsletter “How It Actually Works” by Lambda Chief of Staff Trevor McKendrick. <https://www.howitactuallyworks.com/archives>

See how Trevor chunks his writing with bolded subheadings. Could you do the same?

This concept is called “discretization” here: <https://srconstantin.wordpress.com/2018/10/09/things-i-learned-from-working-with-a-marketing-advisor/>

It’s a way to make your writing skimmable: <https://www.nngroup.com/articles/how-users-read-on-the-web/>

Instead of a wall of text: <https://www.theonion.com/nation-shudders-at-large-block-of-uninterrupted-text-1819571366>",,,,,,,,,,Second Visualization and Blog Post Outline - Data Storytelling Project Day 3,,DS Project 1 - Data Storytelling Portfolio Project ,DS - Statistics Fundamentals,,1,,,1
revise and polish a blog post to prepare it for publication,This blog post will serve as your first portfolio piece and as such it needs to be as good as possible. It needs to adequately represent your skills in technical communication and data storytelling.,,"### Start with something cool looking, then give explanations.

Amit Patel creates interactive explanations of math and computer science topics on his site, Red Blob Games. Many of his posts have gone viral. He explains his style:

>My style evolved from “journalist style” to “action movie style”. In a James Bond movie, our hero might be falling out of an airplane, fighting the henchman for a parachute. Then the movie switches to Bond talking to his boss about the geopolitical situation in some country. The first scene is exciting but gives no explanation; the second scene is quiet and explains things. The movie alternates between visual-excitement scenes and story-informative scenes until we have a final battle in a secret volcano lair, as exciting as the opening scene, but the viewer now understands the plot and motivations. I now aim to start my tutorials with something cool looking, but without much explanation of how it works. Then I give explanations. Then I give something cool looking again. Then more explanations.

<http://simblob.blogspot.com/2016/12/five-year-mission.html>

### Edit for readability

Paste the text into http://www.hemingwayapp.com/

What’s your word count and estimated grade level? How can you improve your readability?

### Use _explanatory_ post titles, plot titles, and subheadings

Just a reminder!
- https://learn.lambdaschool.com/ds/module/reck7pbbrxfdphtsd
- https://www.youtube.com/watch?v=1RwJbhkCA58

### Focus with color

http://www.storytellingwithdata.com/blog/2014/04/focusing-with-color

### Interpret the data and help lead people to understanding

“You should always want your audience to know or do something. This can be an uncomfortable space for many. Often, this discomfort seems to be driven by the belief that the audience knows better than the presenter and therefore should choose whether and how to act on the information presented. This assumption is false. If you are the one analyzing and communicating the data, you likely know it best—you are a subject matter expert. This puts you in a unique position to interpret the data and help lead people to understanding and action. *In general, those communicating with data need to take a more confident stance when it comes to making specific observations and recommendations* based on their analysis.” —Cole Nussbaumer Knaflic, _Storytelling with Data_

### Make animations / videos! 

See examples from Chris Luedtke (DS2) https://twitter.com/LuedaChris/media (edited)",,,,,,,,,,Polish Blog Post and Refactor Notebook - Data Storytelling Project Day 4,,DS Project 1 - Data Storytelling Portfolio Project ,DS - Statistics Fundamentals,,1,,,1
solicit feedback about their work from fellow students and mentors,Soliciting feedback is a core professional skill - as is learning how to give feedback tactfully and accurately. Your peers have perspectives that will make your work better if you'll put yourself out there a little bit.,,"1) At a minimum share a rough draft with the members of your PM group and give feedback on at least 2 posts from members of your PM group.

2) Share your draft in the `#ds_writers` slack channel. There are also other useful slack channels like the `#medium` channel if you're posting to medium. You can also use the main data science channels like `#ds_help` to get feedback from DS students from other cohorts.

3) Share it with mentors, family members, instructors, or other respected individuals that you think can help you do better work.",,,,,,,,,,Polish Blog Post and Refactor Notebook - Data Storytelling Project Day 4,,DS Project 1 - Data Storytelling Portfolio Project ,DS - Statistics Fundamentals,,1,,,1
refactor and clean up an ipython notebook with appropriate comments and markdown as part of their final project deliverable,Your blog post is not the only piece of this portfolio project. The notebook that comprises your analysis needs to be just as polished as your blog post and needs to be linked to within the blog or at least from your portfolio site. ,,"If a hiring manager is impressed by your project they might want to delve deeper and take a look at your code, make sure that your final project notebook has these things:

1) Organized code that runs without errors from top to bottom.

2) Helpful comments on code sections - especially complicated or advanced code sections as a reference to both yourself and outside viewers of your code.

3) Markdown comments splitting your notebook into sections and also explaining methodology decisions that you made in your analysis and why you made them.",,,,,,,,,,Polish Blog Post and Refactor Notebook - Data Storytelling Project Day 4,,DS Project 1 - Data Storytelling Portfolio Project ,DS - Statistics Fundamentals,,1,,,1
"rewrite any vector as a linear combination of scalars and unit vectors, give the definition for what makes a vector a ""unit"" vector and learn how to turn any vector into a unit vector.","To understand the importance of basis vectors we need to see how vectors can be interpreted as a scalar stretching/squishing of basis vectors. Rewriting basis vectors as a linear combination of scalars and unit vectors will not only help us better understand what we mean when we say a ""linear combination,"" but this skill will also be vital in building an intuition for matrix-vector transformations of space --which also act like a stretching or squishing of space in certain directions relative to the underlying basis vectors.",,,,,,,,,,,,Intermediate Linear Algebra,,Linear Algebra,DS - Statistics Fundamentals,,0,,,0
identify the space spanned by multiple vectors by learning to identify linearly dependent vectors in both their graphical and numeric representations,"In order to build an intuition for how our data has ""dimensionality"" and lives in hyper-dimensional space, we will begin this intuition by learning how to identify the dimensionality of space that is spanned by just two or three vectors. 

This discussion will also help us see how it is not the number of vectors that determines this, but rather the number of _linearly independent_ vectors. This is a vital distinction. Linearly dependent vectors are those that lie along the same line or live in the same dimension and therefore the existence of a linearly dependent vector is redundant and does not add a new information or dimensionality to our data. Removing or minimizing linear dependent vectors within our dataset is one of the core goals of dimensionality reduction techniques.",,,,,,,,,,,,Intermediate Linear Algebra,,Linear Algebra,DS - Statistics Fundamentals,,0,,,0
calculate the rank of a matrix and use it to determine the span and basis for the vectors that the matrix is composed of,The rank of a matrix is a very important property because the rank tells us what dimensionality of space a particular matrix's vectors span. A rank that is less than the number of vectors that the matrix is composed of (the row space or column space) would indicate the presence of linearly dependent vectors and redundant information within the matrix.,,,,,,,,,,,,Intermediate Linear Algebra,,Linear Algebra,DS - Statistics Fundamentals,,0,,,0
"visualize orthogonal projections in R^2 as being the ""shadow"" of a vector onto a subspace at a right angle",,,,,,,,,,,,,Intermediate Linear Algebra,,Linear Algebra,DS - Statistics Fundamentals,,0,,,0
"articulate the ""No Free Lunch Principle"" and use it to guide them when searching for the appropriate ML algorithm to apply to a particular situation","Data Science is made up of a giant ""Zoo"" of machine learning algorithms and deciding between them can be a daunting task. One of the main takeaways of the No Free Lunch principle is that many algorithms exist to solve very specific problems and that it's not worth learning such specialized approaches until you actually need to solve that kind of problem.",,,,,,,,,,,,Clustering,,Linear Algebra,DS - Statistics Fundamentals,,0,,,0
describe how Spark in Scala improves upon MapReduce in Java,,,,,,,,,,,,,Just enough Scala for Spark,,Big Data: AWS & Spark,DS - Data Engineering,,0,,,0
"explain the arguments for ""scale out"" vs ""scale up""",,,,,,,,,,,,,Just enough Scala for Spark,,Big Data: AWS & Spark,DS - Data Engineering,,0,,,0
"use the Spark DataFrame API to read data, do transformations, run actions, and explain execution plans",,,,,,,,,,,,,,,,,,0,,,0
"use the Spark DataFrame API to read data, do transformations, run actions, explain execution plans, and show results",,,,,,,,,,,,,"""Apache Spark, day 1""",,Big Data: AWS & Spark,DS - Data Engineering,,0,,,0
use Spark Structured Streaming to read and visualize time series data,,,,,,,,,,,,,"""Apache Spark, day 1""",,Big Data: AWS & Spark,DS - Data Engineering,,0,,,0
"use Spark SQL to read data, do transformations, run actions, explain execution plans, and show results",,,,,,,,,,,,,"""Apache Spark, day 2""",,Big Data: AWS & Spark,DS - Data Engineering,,0,,,0
apply map and filter operations to a Spark RDD,,,,,,,,,,,,,"""Apache Spark, day 2""",,Big Data: AWS & Spark,DS - Data Engineering,,0,,,0
verify passwords using bcrypt,,,,,,iRanaxmN9O4,http://youtube.com/watch?v=iRanaxmN9O4,https://www.youtube.com/embed/iRanaxmN9O4,,,,,Introduction to Authentication,,Authentication,Full Stack Web Development Core,,0,,1,1
build middleware to verify credentials using bcrypt,,,,,,sT1GvVmq0Rw,http://youtube.com/watch?v=sT1GvVmq0Rw,https://www.youtube.com/embed/sT1GvVmq0Rw,,,,,Introduction to Authentication,,Authentication,Full Stack Web Development Core,,0,,1,1
show and explain the difference between value types vs. reference types,"When should you use a `struct` versus a `class` data type? To answer this question, you need to understand both ""value type"" and ""reference type.""",,"A ""value type"" means the data is copied when you pass it to functions and properties (or when you assign it to other variables). It is like using a photocopier to share the meeting agenda at a company board meeting. The agenda bullet points are copied onto multiple sheets of paper for each attendee.

A ""reference type"" means the data is shared when you pass it to another function, property, or variable. You refer to the same piece of information, much like how your full name is linked to you as a person.

When you organize your data, you need to think about how you want the information shared. Should copies of the information be passed around, or should a shared object be passed around (one that can be modified from multiple code files)?","Swift blurs the distinction between structures and classes more so than previous computer programming languages.

The primary distinction that you need to be aware of is how the information is shared between variables, functions, and properties. Information is either **passed by value** or **passed by reference**.

With this understanding, you can decide how best to design your code as structures or objects. Designs are flexible, so if you decide to change later, you can refactor your logic to improve the design. 

## Pass by Value

A structure or a primitive data type is passed by value. That means the value is copied when assigned to another variable in a function, property, or another alias for the variable.

```swift
struct DriversLicense {
    var name: String
}

let myLicense = DriversLicense(name: ""Paul Solt"")
```


You can create a copy by assigning `myLicense` to `duplicateLicense`. These two variables point to different data, which you can prove by changing the name on the `duplicateLicense`.

```swift
var duplicateLicense = myLicense

print(myLicense.name)           // prints ""Paul Solt""

duplicateLicense.name = ""Billy Smith""

print(myLicense.name)           // prints ""Paul Solt""
print(duplicateLicense.name)    // prints ""Billy Smith""
```

**Try it**

Create a License object with your name, and add a new property named `address` to store your primary address as a `String`.

## Pass by Reference

Create a new `Wallet` object to hold a license.

```swift
class Wallet {
    var license: DriversLicense
    var material: String
    init(license: DriversLicense, material: String) {
        self.license = license
        self.material = material
    }
}
```

Now create another alias for your wallet; it will point to the same instance variable, not a copy.

```swift
let myWallet = Wallet(license: myLicense, material: ""Nylon"")

let myFavoriteWallet = myWallet

print(myWallet.material)        // prints ""Nylon""

// Changing a reference type changes the shared object
myFavoriteWallet.material = ""Leather""

print(myWallet.material)            // prints ""Leather""
print(myFavoriteWallet.material)    // prints ""Leather""
```

**Try it**

Add a `CreditCard` struct to your wallet. It should have three properties: `number`, `expirationDate`, and `securityCode`.","Should this be a `class` or a `struct` (there may not be a clear winner, it depends on context)

1. Your game character in a video game (Link in Zelda)
2. A 3D point
3. A customer in your food ordering system
4. A photo
5. A GPS coordinate (latitude and longitude)",3owR8nNwvLw,http://youtube.com/watch?v=3owR8nNwvLw,https://www.youtube.com/embed/3owR8nNwvLw,,,,,Swift Fundamentals II,,Introduction to iOS Programming,iOS Development Core,,1,1,1,3
create custom initializers,When you create an `init()` method you can set up the default state of an object (an instance of a class) or a structure.,,"The initializer allows you to set all the instance variables (properties) of your Swift `class` or `struct`.

When you try to model more complex entities you will want to add more properties. A custom initializer allows you to control how an object is created, and even allows you to provide default values.","Create a `TextDocument` class:

```swift
class TextDocument {
    var filename: String
    var text: String
    var isModified: Bool

    init(filename: String) {
        self.filename = filename
        self.text = """"          // default to empty document
        self.isModified = false // default to not modified
    }
}
```

Create an instance of a `TextDocument` class:

```swift
let document = TextDocument(filename: ""Adventure.txt"")
document.text = ""I started my journey on the other side of the world ...""
document.isModified = true
```

You can further customize the initializer so that it can take a `text` argument.

```swift
init(filename: String, text: String = """") {
    self.filename = filename
    self.text = text
    self.isModified = false // default to not modified
}
```

Now you can optionally set the story, or have it default to an empty `String` if you don't set it.

```swift
let manuscript = ""I started my journey on the other side of the world ...""
let myStory = TextDocument(filename: ""Adventure.txt"", text: myStory)
let report = TextDocument(filename: ""BusinessReport.txt"")
```","Create a custom class to represent a `CalendarEvent` that has a `title`, `date`, `isReoccurring`, `notes`, and any other information you might want to store. 

Decide what types you should use and create a custom initializer for it.",WodJlZ_eVKI,http://youtube.com/watch?v=WodJlZ_eVKI,https://www.youtube.com/embed/WodJlZ_eVKI,,,,,Swift Fundamentals II,,Introduction to iOS Programming,iOS Development Core,,1,1,1,3
understand and explain the difference between a method and a function,Both functions and methods are chunks of code that you can use to help organize your code into smaller behaviors.,,"A free-standing function allows you to create a reusable chunk of code that can do something.

Classes and structures allow you to group common chunks of related code together. It provides a way to organize your code into blocks of useful actions.","A free-standing function doesn't belong in a `class` or `struct`, and can exist all by itself. They allow you to add additional functionality that doesn't fit into a `class`, yet it is self-contained.

You can create a method to print the filename and the contents of a document by creating a free-standing function.

```swift
func printDocument(document: TextDocument) {
    print(""Filename: \(document.filename)"")
    print(document.text)
}

let captainsLog = TextDocument(filename: ""Log.txt"",
                               text: ""We entered uncharted waters ..."")
printDocument(document: captainsLog)
```

Alternatively, you can also create a method on the `TextDocument` class to `duplicate()` the document, so you can save an alternate copy.

```swift
class TextDocument {
    var filename: String
    var text: String
    var isModified: Bool

    init(filename: String, text: String = """") {
        self.filename = filename
        self.text = text
        self.isModified = false // default to not modified
    }

    func duplicate() -> TextDocument {
        let textCopy = TextDocument(filename: filename, text: text)
        textCopy.isModified = isModified
        return textCopy
    }
}

let diary = TextDocument(filename: ""Diary.txt"",
                         text: ""Dear diary ..."")
let duplicateDiary = diary.duplicate()
```

A method declared in a `class` or a `struct` has access to the instance variables or properties of that type.

What does that mean?

It allows you to work with the variables `filename`, `text`, and `isModified` directly, instead of having to pass that information to the method.

It's up to you to decide if a function should be a method in a `class` or `struct`. ","Should the method be a free-standing function, or an instance method in a `class`?

1. A function `checkInventoryLevels()` that's used in for Home Depot's inventory system. It loops through all the items for sale, and orders new parts when the number of items is below 10.
2. A function that can two `Double` values together `addDouble(a: Double, b: Double)`
3. A function to print the inventory of the system: `printInventory(inventory: Inventory)`
4. A function to reload the data in the Table View (rows of data) called `reloadData()`",AMj5KFsv8Ro,http://youtube.com/watch?v=AMj5KFsv8Ro,https://www.youtube.com/embed/AMj5KFsv8Ro,,,,,Swift Fundamentals II,,Introduction to iOS Programming,iOS Development Core,,1,1,1,3
understand and explain the purpose of optionals,"Sometimes we have data that isn't required. On a checkout page from Amazon, you might not have to fill in all of the fields to make the purchase. Those fields are considered ""optional"" fields.",,"Swift provides a strong distinction between having a value all the time versus having a value some of the time.

The concept of always having a value allows you to write simpler code and algorithms. This wasn't always the case in programming languages like ""C"" or ""Objective-C"". In those languages you have to check to make sure that a variable had a value before you could use it. That's error prone and risky if you forget to check one time.

Swift makes our code safer by formalizing the concept of required vs. optional variables.","For example if you had to represent your car in Swift code, it might not always exist. If you have a car (and what car you have) is dependent on your age, financial situation, location, and family size.

```swift
// If you're 16 and you don't own a car:
var myCar: String? = nil

// If you're 25 and you've been working for 5 years:
myCar = ""Subaru WRX""

// If you get in a car accident and your car is totaled:
myCar = nil

// If you use your car insurance to buy a new car:
myCar = ""Subaru Forester""

// If you live in Washington D.C. you won't need a car:
myCar = nil

// If you're 35 with 4 kids you would need a minivan:
myCar = ""Toyota Sienna""
```

The same concepts apply when you organize your data into classes and structures.

Your class might have data that is required (non-optional) and optional data, which may or may not exist.

In Swift, `nil` is used to represent nothing.

### Why do we need Optionals?

When working with user input, there are situations when you want a user to type a number, but they could provide a word instead.

```swift
let number = Int(""30"")
//let number = Double(""cat"")  // this doesn't make sense!
```

You can't convert ""cat"" into a valid number.","Create an optional integer `Int?` to store the age of a new baby that will be born in the year 2200.

1. What should the initial value be?
2. What should the age be in 2199?
3. What should the age be in 2200?
4. What should the age be in 2245?
5. What should the age be in 3045?",UOEu5ZXJsQs,http://youtube.com/watch?v=UOEu5ZXJsQs,https://www.youtube.com/embed/UOEu5ZXJsQs,,,,,Swift Fundamentals II,,Introduction to iOS Programming,iOS Development Core,,1,1,1,3
use an if let statement to unwrap an optional variable,"In order to use an optional value, you first need to unwrap it. If the value exists you can use that value, but if the value doesn't exist it is an error to use the value (i.e., it will crash your app!).",,"The `if let` syntax allows you to safely unwrap a value if it exists, or ignore the value if it doesn't exist. It allows you to code defensively to prevent missing values from crashing your app.

You should always code defensively when working with user input, data files, or information downloaded from the web.","The `if let` syntax allows you to unwrap an optional number that you can use in an algorithm or display to the user on a label.

```swift
var optionalNumber: Int? = nil

optionalNumber = 34  // What happens when you comment out this line?

if let number = optionalNumber {
    print(""Your number is: \(number)"")
} else {
    print(""What number? I don't see anything!"")
}
```

* If the number is valid, it will display ""Your number is: 34""
* If the number is `nil`, it will display ""What number? I don't see anything!""

## Why unwrap optional values?

Imagine you are creating an app to help with the American Thanksgiving holiday. Generally, Americans cook turkeys for their Thanksgiving meal.

Since cooking a large animal requires a bit more planning than a small chicken breast, it requires a bit of math to figure out how long to cook a turkey based on weight.

Let's assume there's a text field where the user can type the weight of the turkey in US pounds.

```swift
func timeToCook(turkeyWeightString: String) {
    if let turkeyWeight = Double(turkeyWeightString) {
        let durationInMinutes = turkeyWeight * 15
        print(""Cook your turkey for \(durationInMinutes) minutes."")
    } else {
        print(""Invalid input"")
    }
}
```

Try two different inputs:

```swift
timeToCook(turkeyWeightString: ""18"") // prints ""Cook your turkey for 270 minutes""

timeToCook(turkeyWeightString: ""tofu?"") // prints ""Invalid input""
```","Create another function that can calculate how long to cook steak so that it's medium rare given a thickness as input.

```swift
func cookDurationForMediumRareSteak(thicknessString: String) {
    // use an if let to print the duration for each side
}
```",RyqWXkskTcY,http://youtube.com/watch?v=RyqWXkskTcY,https://www.youtube.com/embed/RyqWXkskTcY,,,,,Swift Fundamentals II,,Introduction to iOS Programming,iOS Development Core,,1,1,1,3
identify the most common form elements,"Forms are comprised of many different HTML elements. In order to build forms, we need to better understand each of these pieces.",,"Forms allow users to upload or edit information in a product. To build a form, we need to understand form elements. Form elements are the building blocks of a form and they allow us to define the type of information that the form should accept.

The three basic types of form elements are labels, inputs, and buttons. Labels help our users identify the data required of them. Inputs can accept many different types of data depending upon their typing. While buttons allow users to submit the forms.

Let’s take a look at the most common form elements.


### Label
Labels are used to identify inputs. They help the user understand what type of information they should be adding to an input.

```
<label for=""first-name"">First Name</label>
```

### Text
The text input is for receiving any type of text information. It is generally used for shorter content, while the textarea support longer content.

```
<input id=""text-input"" type=""text"" name=""text-input"">
```

### Password
The password input obfuscates the information put into it on the screen. This help prevents passwords from being accidently seen when they’re being typed.

```
<input id=""password-input"" type=""password"" name=""password-input"">
```

### Email
The email input only accepts email addresses as valid input.

```
<input id=""email-input"" type=""email"" name=""email-input"">
```

### Number
Number inputs are for inputing numerical data. They can have special attributes like `min`, `max`, and `step` that allow for customizable data entry.

```
<input id=""number-input"" type=""number"" name=""number-input"">
```

### Textarea
Textareas also accept text content, but they’re typically used for longer information.

```
<textarea id=""textarea-input"" name=""textarea-input"" cols=""30"" rows=""10""></textarea>
```

### Radio
Radio buttons are used for single choice or binary selections. They’re typically used with small amounts of data because too many radio inputs can be overwhelming for users. For larger datasets, selects are a more appropriate input.

```
<label>
    <input type=""radio"" name=""radio-input""> Male
  </label>
<label>
    <input type=""radio"" name=""radio-input""> Female
</label>
<label>
    <input type=""radio"" name=""radio-input""> Other
</label>
```

### Checkbox
Checkboxes are used for yes or no questions or to make many selections from a set of information.

```
<label>
    <input type=""checkbox"" name=""checkbox-input""> Join the newsletter?
</label>
```

### Select
Select inputs allow users to make a single choice from a large dataset. Each option inside of the select represents a value that the user can choose. The value attribute determines how that selection is stored in the database. With the `multiple` attribute, they can also allow for multiple data selections.

```
<select id=""select"" name=""select-input"">
    <option value=""ux"">UX</option>
    <option value=""web"">Web</option>
    <option value=""datascience"">Data Science</option>
</select>
```

### File
File inputs are used for uploading files, images, and other document based information.

```
<input id=""file-input"" type=""file"" name=""file-input"">
```

### Submit Button
The submit button is what the user presses to finish the form. There should be only one submit button per form.

```
<button type=""submit"">Submit</input>
```",,,,,,,,,,Forms,,Intro to HTML & CSS,UX Design Core,,1,,,1
create a form with HTML and CSS,Forms are essential components of a user experience because they allow users to add and manipulate data in our products.,,"While form elements make up the bulk of our form’s code, they need to be wrapped in a `<form>` tag for them to work. Forms work by gathering all of the data that was entered into the inputs and sends it to the backend for processing. The backend component is beyond the scope of this course, but we can certainly set the form up to send the data to the backend.

In order to create a form, we start with a `<form>` tag. This should be the parent for all of the form elements covered earlier, like so:

```
<form>
	<label for=”first-name”>First Name</name>
	<input id=”first-name” type=”text” name=”first-name”>
	<button type=”submit”>Submit</button<
</form>
```

While this is the basis of our form, we need to add two attributes to the form tag: action and method. The action attribute defines where we should send the form data. It is usually a URL that directs to some backend processing code. We don’t have to worry about developing that code ourselves. Instead, our backend developer should provide it for us.

The method attribute defines how we should send this data. Again, our backend developer will tell us what value it should have, but we can usually use `POST` for the value. This tells the form that it should send the data to the action URL instead of asking for more data. With these attributes in place, our form should look something like this:

```
<form method=”POST” action=”https://form-backend-url.test/code”>
	<label for=”first-name”>First Name</name>
	<input id=”first-name” type=”text” name=”first-name”>
	<button type=”submit”>Submit</button<
</form>
```",,,,,,,,,,Forms,,Intro to HTML & CSS,UX Design Core,,1,,,1
explain that basic HTML/CSS are not how most websites are developed today,"While HTML and CSS are fundamental languages to learn, modern products are not built using just these technologies. Understanding modern development practices will help you better conceptualize how products are developed.",,"HTML and CSS are fundamental languages for coding web products. As we've learned, they define the structure and presentation for our product's content. However, we rarely work with just these languages in today's modern development environment.

Up to this point, we've been manually creating HTML files for every page that we'd like to develop. If you think of a huge website like CNN or the New York Times with millions of pages, the thought of duplicating a new HTML file for every page is pretty overwhelming. 

In the early days of the web, this is exactly how websites were built. 
But, we've moved beyond that now. 

These days, we use modern development frameworks to template our common interface patterns and reuse them with dynamic content. Templates have saved us an extraordinary amount of time and effort, and have dramatically sped up the development lifecycle.

To create these templates, developers rely on frameworks like [Ruby on Rails](https://rubyonrails.org/), [Laravel](https://laravel.com/), [Django](https://www.djangoproject.com/), [React](https://reactjs.org/), and more. Each of these frameworks corresponds with a different programming language and provides various benefits and costs. However, at their core, each of them allows us to template our code so we can reuse it as needed.

So, while we still need to understand HTML and CSS to build the initial templates, it's imperative to recognize that developers are thinking in terms of patterns. For example, the navigation HTML and CSS should only be written once, then made into a template, and then we can use it everywhere!

This process has profound implications for us as designers. Not only should we be keeping our designs consistent for our users, but consistency also allows our developers to create templates! ",,,,,,,,,,Forms,,Intro to HTML & CSS,UX Design Core,,1,,,1
force unwrap an optional type and understand the potential dangers and benefits,"There is another way to get the value out of an optional type.

If you know the value should exist, you can force unwrap it using the `!` operator.",,"Before you can use an optional type like `Double?`, `Int?`, `String?` in an equation or algorithm you need to unwrap it.

The safe way to do unwrap an optional variable is to use `if let` or `guard let` syntax.

If you know the value is not going to be `nil` you can also force unwrap it. (You might also do this if you want the app to crash early if there is a project configuration issue).","Let's explore an optional `Double`:

> Paul: I want to avoid looking at the scale today because I gained weight from eating too much at restaurants and ... from the holidays/birthday parties.

You might be in the same dilemma, what would the code for a smart scale look like?

```swift
var todaysWeight: Double? = 145

//todaysWeight = nil

let desiredWeight = 130

let poundsToLose = todaysWeight! - desiredWeight

print(""You need to lose: \(todaysWeight) pounds this summer."")
```

## Rewrite it so it's more defensive

You can be sure a value is not `nil` by testing the value before you force unwrap it. 

Add an `if` statement to verify it's not empty before you use it in a calculation. 

```swift
if todaysWeight != nil {
    let poundsToLose = todaysWeight! - desiredWeight

    print(""You need to lose: \(todaysWeight) pounds this summer."")
} else {
    print(""Step on a scale today — you can't improve what you don't measure"")
}
```

## Proceed with Caution

Be warned, most development teams do not allow you to force unwrap optional variables (or only in certain situations).

It's risky if you do it with user input, JSON web data, or saved data files. Your app is likely going to crash unexpectedly.

Most teams use [SwiftLint](https://github.com/realm/SwiftLint) or a variant to help maintain a code style and quality of code. This can help prevent unwanted crashes from risky code that uses force unwrapping.","1. Create an optional `String` variable named `fullName`. Set it's default value to `nil`, and then set it's value to your name on the next line.
2. Make it `print()` your name using the force unwrap operator. Then experiment with commenting out your name to see what happens.
3. Surround the `print()` statement with an `if` statement to make sure your name is not `nil` before printing your `fullName`.",hOrlohLaUlU,http://youtube.com/watch?v=hOrlohLaUlU,https://www.youtube.com/embed/hOrlohLaUlU,,,,,Swift Fundamentals II,,Introduction to iOS Programming,iOS Development Core,,1,1,1,3
use class inheritance and composition,Another difference between a class and struct is that a class can use a concept called inheritance. It can customize an existing class type with new properties and behaviors.,,"Class inheritance enables the creation of new types that build upon existing code. It creates a hierarchy of information that is useful when modeling certain relationships. Inheritance is one more tool you can leverage to create your data structures in addition to composition. 

A class or a struct is composed of instance variables and properties, which creates a **has a** relationship, as opposed to an **is a** relationship that inheritance enables.","One way to organize information in an app is to make related objects using **class inheritance**. 

You can model hierarchies (think about family trees or the animal kingdom) by subclassing a parent class. The subclass inherits the properties and methods from the parent class.

Your iPhone apps use rectangular shapes to create buttons, text labels, and images on the screen.

Imagine a rectangle region that can be visible or invisible. Create a class to represent this shape.

```swift
class View {
    var frame: CGRect
    var isHidden: Bool
    init(frame: CGRect) {
        self.frame = frame
        self.isHidden = false
    }

    func display() {
        print(""frame: \(self.frame), isHidden: \(self.isHidden)"")
    }
}

```

You can create additional user interface elements that extend the behavior and presentation of the rectangle `View` class.

To make a `Label` subclass, you need to be able to store the text to display on the screen. 

1. Create a subclass of type `View` by adding `: View` to the first line of the class declaration
2. Add a `text` property to store the contents of the label
3. Add a `reset()` method to clear the text

	```swift
	class Label: View {
	    var text: String
	    override init(frame: CGRect) {
	        self.text = """"
	        super.init(frame: frame)
	    }

	    func reset() {
	        text = """"
	    }
	}
	```

Create an instance of the `Label` type:

```swift
var label = Label(frame: CGRect(x: 0, y: 0, width: 200, height: 40))
label.isHidden = false
label.text = ""Hello I'm a label!""
print(""label.text: \(label.text)"")
label.reset()
print(""label.text: \(label.text)"")
label.display()
```

* The `Label` type overrides the `init()` method to set up any new properties
* Subclasses can call the superclasses initializer by using `super.init()` method
* Subclasses inherit the existing methods and properties

### The `is` operator

You can check types using the `is` operator.

```swift
let isLabel = label is Label    // true
let isView = label is View      // true
let isWallet = label is Wallet  // false
```

### The Composition vs. Inheritance Test

In your code, you should prefer composition (a class/struct with properties) to create data. A simple test to figure out if you should use composition (i.e., a property) is to see how you would describe it.

**Composition**: A `Label` **has** a `text` property.

**Inheritance**: A `Label` **is** a `View`.

View Controllers, Views, and the Events (i.e., touch input) in iOS use inheritance as a way of providing you the ability to customize the experience.

**Try it**

Override the `View`'s `display()` method so that it prints out the `text` property in addition to the `View`'s properties.","Are the following examples describing composition or inheritance?

1. A dog has a name
2. A dog is an animal
3. A MacBook is a computer
4. A laptop has a keyboard
5. A car has a radio",gq0CeLAQfb0,http://youtube.com/watch?v=gq0CeLAQfb0,https://www.youtube.com/embed/gq0CeLAQfb0,,,,,Swift Fundamentals III,,iOS Fundamentals I,iOS Development Core,,1,1,1,3